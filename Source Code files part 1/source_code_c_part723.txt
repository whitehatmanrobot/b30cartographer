0xb5, 0xbf},
    {0xc1, 0x57, 0x02, 0xb5, 0xee},
    {0x0a, 0x4a, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x22, 0xb5, 0x6e},
    {0x02, 0x43, 0x22, 0xb5, 0x6e},
    {0x07, 0x43, 0x22, 0xb5, 0x6e},
    {0x6d, 0x01, 0x02, 0xb5, 0xbf},
    {0x03, 0x41, 0x1a, 0xb5, 0x7e},
    {0x0b, 0x43, 0x1a, 0xf5, 0x7e},
    {0x05, 0x41, 0x1a, 0xb5, 0x7e},
    {0x75, 0x01, 0x02, 0xb5, 0xbf},
    {0x09, 0x43, 0x1a, 0xf5, 0x7e},
    {0xc7, 0x52, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x1a, 0xb5, 0x7e},
    {0x63, 0x01, 0x02, 0xb5, 0xbf},
    {0xc2, 0x03, 0x03, 0x42, 0xbf},
    {0x73, 0x01, 0x02, 0xb5, 0xbf},
    {0x0f, 0x49, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0x02, 0xb5, 0xbf},
    {0x04, 0x41, 0x1a, 0xb5, 0x7e},
    {0x02, 0x41, 0x1a, 0xb5, 0x7e},
    {0x07, 0x41, 0x1a, 0xb5, 0x7e},
    {0x0d, 0x49, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x22, 0xb5, 0x6e},
    {0xd7, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x22, 0xb5, 0x6e},
    {0x6b, 0x01, 0x02, 0xb5, 0xbf},
    {0x11, 0x49, 0xf5, 0x00, 0xcc},
    {0xd3, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x22, 0xb5, 0x6e},
    {0x01, 0x49, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x1a, 0xf5, 0x7e},
    {0xc3, 0x62, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0x42, 0xbf},
    {0x0a, 0x43, 0x1a, 0xf5, 0x7e},
    {0x04, 0x42, 0x22, 0xb5, 0x6e},
    {0x02, 0x42, 0x22, 0xb5, 0x6e},
    {0x07, 0x42, 0x22, 0xb5, 0x6e},
    {0x5d, 0x01, 0x02, 0xb5, 0xbf},
    {0x03, 0x46, 0x12, 0xb5, 0x8f},
    {0x0b, 0x41, 0x12, 0xf5, 0x8f},
    {0x05, 0x46, 0x12, 0xb5, 0x8f},
    {0x0c, 0x43, 0x52, 0xb5, 0x8f},
    {0x09, 0x41, 0x12, 0xf5, 0x8f},
    {0xda, 0xc2, 0x42, 0xf5, 0x0f},
    {0x06, 0x46, 0x12, 0xb5, 0x8f},
    {0x61, 0x01, 0x02, 0xb5, 0xbf},
    {0xc2, 0x5b, 0x02, 0xb5, 0xee},
    {0x71, 0x01, 0x02, 0xb5, 0xbf},
    {0x0e, 0x43, 0x52, 0xb5, 0x8f},
    {0x7d, 0x01, 0x02, 0xb5, 0xbf},
    {0x04, 0x46, 0x12, 0xb5, 0x8f},
    {0x02, 0x46, 0x12, 0xb5, 0x8f},
    {0x07, 0x46, 0x12, 0xb5, 0x8f},
    {0x6f, 0x01, 0x02, 0xb5, 0xbf},
    {0x03, 0x43, 0x82, 0x02, 0x6f},
    {0x7b, 0x01, 0x02, 0xb5, 0xbf},
    {0x05, 0x43, 0x82, 0x02, 0x6f},
    {0x69, 0x01, 0x02, 0xb5, 0xbf},
    {0x10, 0x43, 0x52, 0xb5, 0x8f},
    {0xcf, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x82, 0x02, 0x6f},
    {0x5f, 0x01, 0x02, 0xb5, 0xbf},
    {0x08, 0x41, 0x12, 0xf5, 0x8f},
    {0x79, 0x01, 0x02, 0xb5, 0xbf},
    {0xc1, 0x5b, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x12, 0xf5, 0x8f},
    {0x04, 0x43, 0x82, 0x02, 0x6f},
    {0x02, 0x43, 0x82, 0x02, 0x6f},
    {0x07, 0x43, 0x82, 0x02, 0x6f},
    {0x16, 0x46, 0x42, 0xf5, 0xbf},
    {0x03, 0x44, 0x1a, 0xb5, 0x7e},
    {0x0b, 0x42, 0x1a, 0xf5, 0x7e},
    {0x05, 0x44, 0x1a, 0xb5, 0x7e},
    {0x1a, 0x46, 0x42, 0xf5, 0xbf},
    {0x09, 0x42, 0x1a, 0xf5, 0x7e},
    {0xcb, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x1a, 0xb5, 0x7e},
    {0x65, 0x01, 0x02, 0xb5, 0xbf},
    {0xc2, 0x05, 0x03, 0x42, 0xbf},
    {0x19, 0x46, 0x42, 0xf5, 0xbf},
    {0x0f, 0x43, 0x52, 0xb5, 0x8f},
    {0xc5, 0x52, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x1a, 0xb5, 0x7e},
    {0x02, 0x44, 0x1a, 0xb5, 0x7e},
    {0x07, 0x44, 0x1a, 0xb5, 0x7e},
    {0x0d, 0x43, 0x52, 0xb5, 0x8f},
    {0x03, 0x42, 0x82, 0x02, 0x6f},
    {0x12, 0x46, 0x42, 0xf5, 0xbf},
    {0x05, 0x42, 0x82, 0x02, 0x6f},
    {0x15, 0x46, 0x42, 0xf5, 0xbf},
    {0x11, 0x43, 0x52, 0xb5, 0x8f},
    {0xc4, 0x5a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x82, 0x02, 0x6f},
    {0x01, 0x43, 0x52, 0xb5, 0x8f},
    {0x08, 0x42, 0x1a, 0xf5, 0x7e},
    {0xc3, 0xc2, 0x42, 0xf5, 0x0f},
    {0xc1, 0x05, 0x03, 0x42, 0xbf},
    {0x0a, 0x42, 0x1a, 0xf5, 0x7e},
    {0x04, 0x42, 0x82, 0x02, 0x6f},
    {0x02, 0x42, 0x82, 0x02, 0x6f},
    {0x07, 0x42, 0x82, 0x02, 0x6f},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x0a, 0xb5, 0xaf},
    {0x0b, 0x46, 0x08, 0xf5, 0x9e},
    {0x05, 0x48, 0x0a, 0xb5, 0xaf},
    {0x0c, 0x41, 0x48, 0xb5, 0x9e},
    {0x09, 0x46, 0x08, 0xf5, 0x9e},
    {0xda, 0x72, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x0a, 0xb5, 0xaf},
    {0x14, 0x43, 0x48, 0xf5, 0x9e},
    {0xc2, 0x68, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0x48, 0xf5, 0x9e},
    {0x0e, 0x41, 0x48, 0xb5, 0x9e},
    {0x1c, 0x43, 0x48, 0xf5, 0x9e},
    {0x04, 0x48, 0x0a, 0xb5, 0xaf},
    {0x02, 0x48, 0x0a, 0xb5, 0xaf},
    {0x07, 0x48, 0x0a, 0xb5, 0xaf},
    {0x17, 0x43, 0x48, 0xf5, 0x9e},
    {0x03, 0x43, 0x32, 0xb5, 0x6e},
    {0x1b, 0x43, 0x48, 0xf5, 0x9e},
    {0x05, 0x43, 0x32, 0xb5, 0x6e},
    {0x68, 0x01, 0x02, 0xb5, 0xbf},
    {0x10, 0x41, 0x48, 0xb5, 0x9e},
    {0xcd, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x32, 0xb5, 0x6e},
    {0x13, 0x43, 0x48, 0xf5, 0x9e},
    {0x08, 0x46, 0x08, 0xf5, 0x9e},
    {0x78, 0x01, 0x02, 0xb5, 0xbf},
    {0xc1, 0x68, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x08, 0xf5, 0x9e},
    {0x04, 0x43, 0x32, 0xb5, 0x6e},
    {0x02, 0x43, 0x32, 0xb5, 0x6e},
    {0x07, 0x43, 0x32, 0xb5, 0x6e},
    {0x6e, 0x01, 0x02, 0xb5, 0xbf},
    {0x03, 0x41, 0x09, 0x02, 0x7e},
    {0x0b, 0x43, 0x09, 0x42, 0x7e},
    {0x05, 0x41, 0x09, 0x02, 0x7e},
    {0x76, 0x01, 0x02, 0xb5, 0xbf},
    {0x09, 0x43, 0x09, 0x42, 0x7e},
    {0xc8, 0x52, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x09, 0x02, 0x7e},
    {0x64, 0x01, 0x02, 0xb5, 0xbf},
    {0xc2, 0x10, 0x44, 0xf5, 0xee},
    {0x74, 0x01, 0x02, 0xb5, 0xbf},
    {0x0f, 0x41, 0x48, 0xb5, 0x9e},
    {0x40, 0x01, 0x02, 0xb5, 0xbf},
    {0x04, 0x41, 0x09, 0x02, 0x7e},
    {0x02, 0x41, 0x09, 0x02, 0x7e},
    {0x07, 0x41, 0x09, 0x02, 0x7e},
    {0x0d, 0x41, 0x48, 0xb5, 0x9e},
    {0x03, 0x42, 0x32, 0xb5, 0x6e},
    {0xd9, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x32, 0xb5, 0x6e},
    {0x6c, 0x01, 0x02, 0xb5, 0xbf},
    {0x11, 0x41, 0x48, 0xb5, 0x9e},
    {0xd5, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x32, 0xb5, 0x6e},
    {0x01, 0x41, 0x48, 0xb5, 0x9e},
    {0x08, 0x43, 0x09, 0x42, 0x7e},
    {0xc3, 0x72, 0xf5, 0x00, 0x0e},
    {0xc1, 0x10, 0x44, 0xf5, 0xee},
    {0x0a, 0x43, 0x09, 0x42, 0x7e},
    {0x04, 0x42, 0x32, 0xb5, 0x6e},
    {0x02, 0x42, 0x32, 0xb5, 0x6e},
    {0x07, 0x42, 0x32, 0xb5, 0x6e},
    {0x5e, 0x01, 0x02, 0xb5, 0xbf},
    {0x03, 0x45, 0x12, 0xb5, 0x8f},
    {0x0b, 0x44, 0x12, 0xf5, 0x8f},
    {0x05, 0x45, 0x12, 0xb5, 0x8f},
    {0x0c, 0x42, 0x52, 0xb5, 0x8f},
    {0x09, 0x44, 0x12, 0xf5, 0x8f},
    {0xda, 0x4e, 0x02, 0xb5, 0xee},
    {0x06, 0x45, 0x12, 0xb5, 0x8f},
    {0x62, 0x01, 0x02, 0xb5, 0xbf},
    {0x82, 0x8e, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0x02, 0xb5, 0xbf},
    {0x0e, 0x42, 0x52, 0xb5, 0x8f},
    {0x7e, 0x01, 0x02, 0xb5, 0xbf},
    {0x04, 0x45, 0x12, 0xb5, 0x8f},
    {0x02, 0x45, 0x12, 0xb5, 0x8f},
    {0x07, 0x45, 0x12, 0xb5, 0x8f},
    {0x70, 0x01, 0x02, 0xb5, 0xbf},
    {0x03, 0x43, 0x0e, 0x02, 0x6e},
    {0x7c, 0x01, 0x02, 0xb5, 0xbf},
    {0x05, 0x43, 0x0e, 0x02, 0x6e},
    {0x6a, 0x01, 0x02, 0xb5, 0xbf},
    {0x10, 0x42, 0x52, 0xb5, 0x8f},
    {0xd1, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x0e, 0x02, 0x6e},
    {0x60, 0x01, 0x02, 0xb5, 0xbf},
    {0x08, 0x44, 0x12, 0xf5, 0x8f},
    {0x7a, 0x01, 0x02, 0xb5, 0xbf},
    {0x81, 0x8e, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x12, 0xf5, 0x8f},
    {0x04, 0x43, 0x0e, 0x02, 0x6e},
    {0x02, 0x43, 0x0e, 0x02, 0x6e},
    {0x07, 0x43, 0x0e, 0x02, 0x6e},
    {0x16, 0x43, 0x48, 0xf5, 0x9e},
    {0x03, 0x44, 0x09, 0x02, 0x7e},
    {0x0b, 0x42, 0x09, 0x42, 0x7e},
    {0x05, 0x44, 0x09, 0x02, 0x7e},
    {0x1a, 0x43, 0x48, 0xf5, 0x9e},
    {0x09, 0x42, 0x09, 0x42, 0x7e},
    {0xca, 0x52, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x09, 0x02, 0x7e},
    {0x66, 0x01, 0x02, 0xb5, 0xbf},
    {0xc2, 0x06, 0x03, 0x42, 0xbf},
    {0x19, 0x43, 0x48, 0xf5, 0x9e},
    {0x0f, 0x42, 0x52, 0xb5, 0x8f},
    {0xc6, 0x52, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x09, 0x02, 0x7e},
    {0x02, 0x44, 0x09, 0x02, 0x7e},
    {0x07, 0x44, 0x09, 0x02, 0x7e},
    {0x0d, 0x42, 0x52, 0xb5, 0x8f},
    {0x03, 0x42, 0x0e, 0x02, 0x6e},
    {0x12, 0x43, 0x48, 0xf5, 0x9e},
    {0x05, 0x42, 0x0e, 0x02, 0x6e},
    {0x15, 0x43, 0x48, 0xf5, 0x9e},
    {0x11, 0x42, 0x52, 0xb5, 0x8f},
    {0xc4, 0x49, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x0e, 0x02, 0x6e},
    {0x01, 0x42, 0x52, 0xb5, 0x8f},
    {0x08, 0x42, 0x09, 0x42, 0x7e},
    {0xc3, 0x4e, 0x02, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0x42, 0xbf},
    {0x0a, 0x42, 0x09, 0x42, 0x7e},
    {0x04, 0x42, 0x0e, 0x02, 0x6e},
    {0x02, 0x42, 0x0e, 0x02, 0x6e},
    {0x07, 0x42, 0x0e, 0x02, 0x6e},
    {0xf4, 0x48, 0xf5, 0x00, 0x0e},
    {0x03, 0x53, 0xb5, 0x00, 0xff},
    {0x0b, 0x47, 0x0a, 0xf5, 0xaf},
    {0x05, 0x53, 0xb5, 0x00, 0xff},
    {0x0c, 0x45, 0x4a, 0xb5, 0xaf},
    {0x09, 0x47, 0x0a, 0xf5, 0xaf},
    {0xda, 0x7e, 0xf5, 0x00, 0x0e},
    {0x06, 0x53, 0xb5, 0x00, 0xff},
    {0x14, 0x44, 0x4a, 0xf5, 0xaf},
    {0xc2, 0x53, 0x02, 0xb5, 0xee},
    {0x18, 0x44, 0x4a, 0xf5, 0xaf},
    {0x0e, 0x45, 0x4a, 0xb5, 0xaf},
    {0x1c, 0x44, 0x4a, 0xf5, 0xaf},
    {0x04, 0x53, 0xb5, 0x00, 0xff},
    {0x02, 0x53, 0xb5, 0x00, 0xff},
    {0x07, 0x53, 0xb5, 0x00, 0xff},
    {0x17, 0x44, 0x4a, 0xf5, 0xaf},
    {0x03, 0x43, 0x3e, 0xb5, 0x6e},
    {0x1b, 0x44, 0x4a, 0xf5, 0xaf},
    {0x05, 0x43, 0x3e, 0xb5, 0x6e},
    {0x67, 0x02, 0x0a, 0xb5, 0xaf},
    {0x10, 0x45, 0x4a, 0xb5, 0xaf},
    {0xc9, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x3e, 0xb5, 0x6e},
    {0x13, 0x44, 0x4a, 0xf5, 0xaf},
    {0x08, 0x47, 0x0a, 0xf5, 0xaf},
    {0x77, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x53, 0x02, 0xb5, 0xee},
    {0x0a, 0x47, 0x0a, 0xf5, 0xaf},
    {0x04, 0x43, 0x3e, 0xb5, 0x6e},
    {0x02, 0x43, 0x3e, 0xb5, 0x6e},
    {0x07, 0x43, 0x3e, 0xb5, 0x6e},
    {0x6d, 0x02, 0x0a, 0xb5, 0xaf},
    {0x03, 0x41, 0x8a, 0xb5, 0x7f},
    {0x0b, 0x43, 0x8a, 0xf5, 0x7f},
    {0x05, 0x41, 0x8a, 0xb5, 0x7f},
    {0x75, 0x02, 0x0a, 0xb5, 0xaf},
    {0x09, 0x43, 0x8a, 0xf5, 0x7f},
    {0xc7, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x8a, 0xb5, 0x7f},
    {0x63, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x08, 0x45, 0xb5, 0xee},
    {0x73, 0x02, 0x0a, 0xb5, 0xaf},
    {0x0f, 0x45, 0x4a, 0xb5, 0xaf},
    {0x7f, 0x02, 0x0a, 0xb5, 0xaf},
    {0x04, 0x41, 0x8a, 0xb5, 0x7f},
    {0x02, 0x41, 0x8a, 0xb5, 0x7f},
    {0x07, 0x41, 0x8a, 0xb5, 0x7f},
    {0x0d, 0x45, 0x4a, 0xb5, 0xaf},
    {0x03, 0x42, 0x3e, 0xb5, 0x6e},
    {0xd8, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x3e, 0xb5, 0x6e},
    {0x6b, 0x02, 0x0a, 0xb5, 0xaf},
    {0x11, 0x45, 0x4a, 0xb5, 0xaf},
    {0xd4, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x3e, 0xb5, 0x6e},
    {0x01, 0x45, 0x4a, 0xb5, 0xaf},
    {0x08, 0x43, 0x8a, 0xf5, 0x7f},
    {0xc3, 0x7e, 0xf5, 0x00, 0x0e},
    {0xc1, 0x08, 0x45, 0xb5, 0xee},
    {0x0a, 0x43, 0x8a, 0xf5, 0x7f},
    {0x04, 0x42, 0x3e, 0xb5, 0x6e},
    {0x02, 0x42, 0x3e, 0xb5, 0x6e},
    {0x07, 0x42, 0x3e, 0xb5, 0x6e},
    {0x5d, 0x02, 0x0a, 0xb5, 0xaf},
    {0x03, 0x46, 0x05, 0x02, 0x8e},
    {0x0b, 0x41, 0x05, 0x42, 0x8e},
    {0x05, 0x46, 0x05, 0x02, 0x8e},
    {0x0c, 0x43, 0x45, 0x02, 0x8e},
    {0x09, 0x41, 0x05, 0x42, 0x8e},
    {0xda, 0x04, 0x45, 0xb5, 0xee},
    {0x06, 0x46, 0x05, 0x02, 0x8e},
    {0x61, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x78, 0x02, 0xf5, 0xff},
    {0x71, 0x02, 0x0a, 0xb5, 0xaf},
    {0x0e, 0x43, 0x45, 0x02, 0x8e},
    {0x7d, 0x02, 0x0a, 0xb5, 0xaf},
    {0x04, 0x46, 0x05, 0x02, 0x8e},
    {0x02, 0x46, 0x05, 0x02, 0x8e},
    {0x07, 0x46, 0x05, 0x02, 0x8e},
    {0x6f, 0x02, 0x0a, 0xb5, 0xaf},
    {0x03, 0x43, 0x04, 0x05, 0x6e},
    {0x7b, 0x02, 0x0a, 0xb5, 0xaf},
    {0x05, 0x43, 0x04, 0x05, 0x6e},
    {0x69, 0x02, 0x0a, 0xb5, 0xaf},
    {0x10, 0x43, 0x45, 0x02, 0x8e},
    {0xd0, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x05, 0x6e},
    {0x5f, 0x02, 0x0a, 0xb5, 0xaf},
    {0x08, 0x41, 0x05, 0x42, 0x8e},
    {0x79, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x78, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x05, 0x42, 0x8e},
    {0x04, 0x43, 0x04, 0x05, 0x6e},
    {0x02, 0x43, 0x04, 0x05, 0x6e},
    {0x07, 0x43, 0x04, 0x05, 0x6e},
    {0x16, 0x44, 0x4a, 0xf5, 0xaf},
    {0x03, 0x44, 0x8a, 0xb5, 0x7f},
    {0x0b, 0x42, 0x8a, 0xf5, 0x7f},
    {0x05, 0x44, 0x8a, 0xb5, 0x7f},
    {0x1a, 0x44, 0x4a, 0xf5, 0xaf},
    {0x09, 0x42, 0x8a, 0xf5, 0x7f},
    {0xcc, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x8a, 0xb5, 0x7f},
    {0x65, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc2, 0xc1, 0x4a, 0xf5, 0x0f},
    {0x19, 0x44, 0x4a, 0xf5, 0xaf},
    {0x0f, 0x43, 0x45, 0x02, 0x8e},
    {0xc5, 0x45, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x8a, 0xb5, 0x7f},
    {0x02, 0x44, 0x8a, 0xb5, 0x7f},
    {0x07, 0x44, 0x8a, 0xb5, 0x7f},
    {0x0d, 0x43, 0x45, 0x02, 0x8e},
    {0x03, 0x42, 0x04, 0x05, 0x6e},
    {0x12, 0x44, 0x4a, 0xf5, 0xaf},
    {0x05, 0x42, 0x04, 0x05, 0x6e},
    {0x15, 0x44, 0x4a, 0xf5, 0xaf},
    {0x11, 0x43, 0x45, 0x02, 0x8e},
    {0x84, 0x8a, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x04, 0x05, 0x6e},
    {0x01, 0x43, 0x45, 0x02, 0x8e},
    {0x08, 0x42, 0x8a, 0xf5, 0x7f},
    {0xc3, 0x04, 0x45, 0xb5, 0xee},
    {0xc1, 0xc1, 0x4a, 0xf5, 0x0f},
    {0x0a, 0x42, 0x8a, 0xf5, 0x7f},
    {0x04, 0x42, 0x04, 0x05, 0x6e},
    {0x02, 0x42, 0x04, 0x05, 0x6e},
    {0x07, 0x42, 0x04, 0x05, 0x6e},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x08, 0xb5, 0x9e},
    {0x0b, 0x45, 0x08, 0xf5, 0x9e},
    {0x05, 0x47, 0x08, 0xb5, 0x9e},
    {0x0c, 0x44, 0x48, 0xb5, 0x9e},
    {0x09, 0x45, 0x08, 0xf5, 0x9e},
    {0xda, 0x02, 0x45, 0xb5, 0xee},
    {0x06, 0x47, 0x08, 0xb5, 0x9e},
    {0x14, 0x42, 0x48, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x45, 0xb5, 0xee},
    {0x18, 0x42, 0x48, 0xf5, 0x9e},
    {0x0e, 0x44, 0x48, 0xb5, 0x9e},
    {0x1c, 0x42, 0x48, 0xf5, 0x9e},
    {0x04, 0x47, 0x08, 0xb5, 0x9e},
    {0x02, 0x47, 0x08, 0xb5, 0x9e},
    {0x07, 0x47, 0x08, 0xb5, 0x9e},
    {0x17, 0x42, 0x48, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x05, 0x6e},
    {0x1b, 0x42, 0x48, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x05, 0x6e},
    {0x68, 0x02, 0x0a, 0xb5, 0xaf},
    {0x10, 0x44, 0x48, 0xb5, 0x9e},
    {0xce, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x05, 0x6e},
    {0x13, 0x42, 0x48, 0xf5, 0x9e},
    {0x08, 0x45, 0x08, 0xf5, 0x9e},
    {0x78, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x0a, 0x45, 0xb5, 0xee},
    {0x0a, 0x45, 0x08, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x05, 0x6e},
    {0x02, 0x43, 0x02, 0x05, 0x6e},
    {0x07, 0x43, 0x02, 0x05, 0x6e},
    {0x6e, 0x02, 0x0a, 0xb5, 0xaf},
    {0x03, 0x41, 0x06, 0x04, 0x7e},
    {0x0b, 0x43, 0x06, 0x44, 0x7e},
    {0x05, 0x41, 0x06, 0x04, 0x7e},
    {0x76, 0x02, 0x0a, 0xb5, 0xaf},
    {0x09, 0x43, 0x06, 0x44, 0x7e},
    {0xc8, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x06, 0x04, 0x7e},
    {0x64, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x04, 0x03, 0x42, 0xbf},
    {0x74, 0x02, 0x0a, 0xb5, 0xaf},
    {0x0f, 0x44, 0x48, 0xb5, 0x9e},
    {0x40, 0x02, 0x0a, 0xb5, 0xaf},
    {0x04, 0x41, 0x06, 0x04, 0x7e},
    {0x02, 0x41, 0x06, 0x04, 0x7e},
    {0x07, 0x41, 0x06, 0x04, 0x7e},
    {0x0d, 0x44, 0x48, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x05, 0x6e},
    {0xdb, 0x48, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x05, 0x6e},
    {0x6c, 0x02, 0x0a, 0xb5, 0xaf},
    {0x11, 0x44, 0x48, 0xb5, 0x9e},
    {0xd6, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x05, 0x6e},
    {0x01, 0x44, 0x48, 0xb5, 0x9e},
    {0x08, 0x43, 0x06, 0x44, 0x7e},
    {0xc3, 0x02, 0x45, 0xb5, 0xee},
    {0xc1, 0x04, 0x03, 0x42, 0xbf},
    {0x0a, 0x43, 0x06, 0x44, 0x7e},
    {0x04, 0x42, 0x02, 0x05, 0x6e},
    {0x02, 0x42, 0x02, 0x05, 0x6e},
    {0x07, 0x42, 0x02, 0x05, 0x6e},
    {0x5e, 0x02, 0x0a, 0xb5, 0xaf},
    {0x03, 0x45, 0x05, 0x02, 0x8e},
    {0x0b, 0x44, 0x05, 0x42, 0x8e},
    {0x05, 0x45, 0x05, 0x02, 0x8e},
    {0x0c, 0x42, 0x45, 0x02, 0x8e},
    {0x09, 0x44, 0x05, 0x42, 0x8e},
    {0xda, 0x07, 0x45, 0xb5, 0xee},
    {0x06, 0x45, 0x05, 0x02, 0x8e},
    {0x62, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x02, 0x03, 0x42, 0xbf},
    {0x72, 0x02, 0x0a, 0xb5, 0xaf},
    {0x0e, 0x42, 0x45, 0x02, 0x8e},
    {0x7e, 0x02, 0x0a, 0xb5, 0xaf},
    {0x04, 0x45, 0x05, 0x02, 0x8e},
    {0x02, 0x45, 0x05, 0x02, 0x8e},
    {0x07, 0x45, 0x05, 0x02, 0x8e},
    {0x70, 0x02, 0x0a, 0xb5, 0xaf},
    {0x03, 0x43, 0x07, 0x05, 0x6e},
    {0x7c, 0x02, 0x0a, 0xb5, 0xaf},
    {0x05, 0x43, 0x07, 0x05, 0x6e},
    {0x6a, 0x02, 0x0a, 0xb5, 0xaf},
    {0x10, 0x42, 0x45, 0x02, 0x8e},
    {0xd2, 0x48, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x05, 0x6e},
    {0x60, 0x02, 0x0a, 0xb5, 0xaf},
    {0x08, 0x44, 0x05, 0x42, 0x8e},
    {0x7a, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc1, 0x02, 0x03, 0x42, 0xbf},
    {0x0a, 0x44, 0x05, 0x42, 0x8e},
    {0x04, 0x43, 0x07, 0x05, 0x6e},
    {0x02, 0x43, 0x07, 0x05, 0x6e},
    {0x07, 0x43, 0x07, 0x05, 0x6e},
    {0x16, 0x42, 0x48, 0xf5, 0x9e},
    {0x03, 0x44, 0x06, 0x04, 0x7e},
    {0x0b, 0x42, 0x06, 0x44, 0x7e},
    {0x05, 0x44, 0x06, 0x04, 0x7e},
    {0x1a, 0x42, 0x48, 0xf5, 0x9e},
    {0x09, 0x42, 0x06, 0x44, 0x7e},
    {0xca, 0x45, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x06, 0x04, 0x7e},
    {0x66, 0x02, 0x0a, 0xb5, 0xaf},
    {0xc2, 0x07, 0x03, 0x42, 0xbf},
    {0x19, 0x42, 0x48, 0xf5, 0x9e},
    {0x0f, 0x42, 0x45, 0x02, 0x8e},
    {0xc6, 0x45, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x06, 0x04, 0x7e},
    {0x02, 0x44, 0x06, 0x04, 0x7e},
    {0x07, 0x44, 0x06, 0x04, 0x7e},
    {0x0d, 0x42, 0x45, 0x02, 0x8e},
    {0x03, 0x42, 0x07, 0x05, 0x6e},
    {0x12, 0x42, 0x48, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x05, 0x6e},
    {0x15, 0x42, 0x48, 0xf5, 0x9e},
    {0x11, 0x42, 0x45, 0x02, 0x8e},
    {0xc4, 0x06, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x05, 0x6e},
    {0x01, 0x42, 0x45, 0x02, 0x8e},
    {0x08, 0x42, 0x06, 0x44, 0x7e},
    {0xc3, 0x07, 0x45, 0xb5, 0xee},
    {0xc1, 0x07, 0x03, 0x42, 0xbf},
    {0x0a, 0x42, 0x06, 0x44, 0x7e},
    {0x04, 0x42, 0x07, 0x05, 0x6e},
    {0x02, 0x42, 0x07, 0x05, 0x6e},
    {0x07, 0x42, 0x07, 0x05, 0x6e},
    {0xf4, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x58, 0xb5, 0x00, 0xff},
    {0x0b, 0x50, 0xb5, 0x40, 0xff},
    {0x05, 0x58, 0xb5, 0x00, 0xff},
    {0x0c, 0x4b, 0xf5, 0x00, 0xdd},
    {0x09, 0x50, 0xb5, 0x40, 0xff},
    {0xda, 0x70, 0xf5, 0x00, 0x0e},
    {0x06, 0x58, 0xb5, 0x00, 0xff},
    {0x14, 0x48, 0xf5, 0x40, 0xdd},
    {0xc2, 0x6e, 0x02, 0xf5, 0xff},
    {0x18, 0x48, 0xf5, 0x40, 0xdd},
    {0x0e, 0x4b, 0xf5, 0x00, 0xdd},
    {0x1c, 0x48, 0xf5, 0x40, 0xdd},
    {0x04, 0x58, 0xb5, 0x00, 0xff},
    {0x02, 0x58, 0xb5, 0x00, 0xff},
    {0x07, 0x58, 0xb5, 0x00, 0xff},
    {0x17, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x43, 0x30, 0xb5, 0x6e},
    {0x1b, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x43, 0x30, 0xb5, 0x6e},
    {0x67, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x4b, 0xf5, 0x00, 0xdd},
    {0xc9, 0x55, 0xf5, 0x40, 0x0f},
    {0x06, 0x43, 0x30, 0xb5, 0x6e},
    {0x13, 0x48, 0xf5, 0x40, 0xdd},
    {0x08, 0x50, 0xb5, 0x40, 0xff},
    {0x77, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x6e, 0x02, 0xf5, 0xff},
    {0x0a, 0x50, 0xb5, 0x40, 0xff},
    {0x04, 0x43, 0x30, 0xb5, 0x6e},
    {0x02, 0x43, 0x30, 0xb5, 0x6e},
    {0x07, 0x43, 0x30, 0xb5, 0x6e},
    {0x6d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x26, 0xb5, 0x7f},
    {0x0b, 0x43, 0x26, 0xf5, 0x7f},
    {0x05, 0x41, 0x26, 0xb5, 0x7f},
    {0x75, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x26, 0xf5, 0x7f},
    {0xc7, 0x55, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x26, 0xb5, 0x7f},
    {0x63, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x01, 0xf5, 0xcc},
    {0x73, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4b, 0xf5, 0x00, 0xdd},
    {0x7f, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x26, 0xb5, 0x7f},
    {0x02, 0x41, 0x26, 0xb5, 0x7f},
    {0x07, 0x41, 0x26, 0xb5, 0x7f},
    {0x0d, 0x4b, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x30, 0xb5, 0x6e},
    {0x97, 0x83, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x30, 0xb5, 0x6e},
    {0x6b, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x4b, 0xf5, 0x00, 0xdd},
    {0x93, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x30, 0xb5, 0x6e},
    {0x01, 0x4b, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x26, 0xf5, 0x7f},
    {0xc3, 0x70, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x26, 0xf5, 0x7f},
    {0x04, 0x42, 0x30, 0xb5, 0x6e},
    {0x02, 0x42, 0x30, 0xb5, 0x6e},
    {0x07, 0x42, 0x30, 0xb5, 0x6e},
    {0x5d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x15, 0xb5, 0x8f},
    {0x0b, 0x41, 0x15, 0xf5, 0x8f},
    {0x05, 0x46, 0x15, 0xb5, 0x8f},
    {0x0c, 0x43, 0x55, 0xb5, 0x8f},
    {0x09, 0x41, 0x15, 0xf5, 0x8f},
    {0xda, 0x03, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x15, 0xb5, 0x8f},
    {0x61, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x43, 0xb5, 0xcc},
    {0x71, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x55, 0xb5, 0x8f},
    {0x7d, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x15, 0xb5, 0x8f},
    {0x02, 0x46, 0x15, 0xb5, 0x8f},
    {0x07, 0x46, 0x15, 0xb5, 0x8f},
    {0x6f, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x03, 0x6c},
    {0x7b, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x03, 0x6c},
    {0x69, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x55, 0xb5, 0x8f},
    {0x8f, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x03, 0x03, 0x6c},
    {0x5f, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x15, 0xf5, 0x8f},
    {0x79, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x43, 0xb5, 0xcc},
    {0x0a, 0x41, 0x15, 0xf5, 0x8f},
    {0x04, 0x43, 0x03, 0x03, 0x6c},
    {0x02, 0x43, 0x03, 0x03, 0x6c},
    {0x07, 0x43, 0x03, 0x03, 0x6c},
    {0x16, 0x48, 0xf5, 0x40, 0xdd},
    {0x03, 0x44, 0x26, 0xb5, 0x7f},
    {0x0b, 0x42, 0x26, 0xf5, 0x7f},
    {0x05, 0x44, 0x26, 0xb5, 0x7f},
    {0x1a, 0x48, 0xf5, 0x40, 0xdd},
    {0x09, 0x42, 0x26, 0xf5, 0x7f},
    {0x8b, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x44, 0x26, 0xb5, 0x7f},
    {0x65, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x01, 0xf5, 0xcc},
    {0x19, 0x48, 0xf5, 0x40, 0xdd},
    {0x0f, 0x43, 0x55, 0xb5, 0x8f},
    {0xc5, 0x55, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x26, 0xb5, 0x7f},
    {0x02, 0x44, 0x26, 0xb5, 0x7f},
    {0x07, 0x44, 0x26, 0xb5, 0x7f},
    {0x0d, 0x43, 0x55, 0xb5, 0x8f},
    {0x03, 0x42, 0x03, 0x03, 0x6c},
    {0x12, 0x48, 0xf5, 0x40, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x6c},
    {0x15, 0x48, 0xf5, 0x40, 0xdd},
    {0x11, 0x43, 0x55, 0xb5, 0x8f},
    {0xc4, 0x66, 0xf5, 0x40, 0x0f},
    {0x06, 0x42, 0x03, 0x03, 0x6c},
    {0x01, 0x43, 0x55, 0xb5, 0x8f},
    {0x08, 0x42, 0x26, 0xf5, 0x7f},
    {0xc3, 0x03, 0x43, 0xb5, 0xcc},
    {0xc1, 0x05, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x26, 0xf5, 0x7f},
    {0x04, 0x42, 0x03, 0x03, 0x6c},
    {0x02, 0x42, 0x03, 0x03, 0x6c},
    {0x07, 0x42, 0x03, 0x03, 0x6c},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x04, 0xb5, 0xae},
    {0x0b, 0x46, 0x83, 0xf5, 0x9f},
    {0x05, 0x49, 0x04, 0xb5, 0xae},
    {0x0c, 0x41, 0xc3, 0xb5, 0x9f},
    {0x09, 0x46, 0x83, 0xf5, 0x9f},
    {0xda, 0x7c, 0xf5, 0x00, 0x0e},
    {0x06, 0x49, 0x04, 0xb5, 0xae},
    {0x14, 0x43, 0xc3, 0xf5, 0x9f},
    {0xc2, 0x76, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0xc3, 0xf5, 0x9f},
    {0x0e, 0x41, 0xc3, 0xb5, 0x9f},
    {0x1c, 0x43, 0xc3, 0xf5, 0x9f},
    {0x04, 0x49, 0x04, 0xb5, 0xae},
    {0x02, 0x49, 0x04, 0xb5, 0xae},
    {0x07, 0x49, 0x04, 0xb5, 0xae},
    {0x17, 0x43, 0xc3, 0xf5, 0x9f},
    {0x03, 0x43, 0x3c, 0xb5, 0x6e},
    {0x1b, 0x43, 0xc3, 0xf5, 0x9f},
    {0x05, 0x43, 0x3c, 0xb5, 0x6e},
    {0x68, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0xc3, 0xb5, 0x9f},
    {0x8d, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x3c, 0xb5, 0x6e},
    {0x13, 0x43, 0xc3, 0xf5, 0x9f},
    {0x08, 0x46, 0x83, 0xf5, 0x9f},
    {0x78, 0x06, 0xb5, 0x00, 0xcc},
    {0xc1, 0x76, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x83, 0xf5, 0x9f},
    {0x04, 0x43, 0x3c, 0xb5, 0x6e},
    {0x02, 0x43, 0x3c, 0xb5, 0x6e},
    {0x07, 0x43, 0x3c, 0xb5, 0x6e},
    {0x6e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x82, 0xb5, 0x7c},
    {0x0b, 0x43, 0x82, 0xf5, 0x7c},
    {0x05, 0x41, 0x82, 0xb5, 0x7c},
    {0x76, 0x06, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x82, 0xf5, 0x7c},
    {0xc8, 0x55, 0xf5, 0x40, 0x0f},
    {0x06, 0x41, 0x82, 0xb5, 0x7c},
    {0x64, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x43, 0xb5, 0xcc},
    {0x74, 0x06, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0xc3, 0xb5, 0x9f},
    {0x40, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x82, 0xb5, 0x7c},
    {0x02, 0x41, 0x82, 0xb5, 0x7c},
    {0x07, 0x41, 0x82, 0xb5, 0x7c},
    {0x0d, 0x41, 0xc3, 0xb5, 0x9f},
    {0x03, 0x42, 0x3c, 0xb5, 0x6e},
    {0x99, 0x83, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x3c, 0xb5, 0x6e},
    {0x6c, 0x06, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0xc3, 0xb5, 0x9f},
    {0x95, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x3c, 0xb5, 0x6e},
    {0x01, 0x41, 0xc3, 0xb5, 0x9f},
    {0x08, 0x43, 0x82, 0xf5, 0x7c},
    {0xc3, 0x7c, 0xf5, 0x00, 0x0e},
    {0xc1, 0x09, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x3c, 0xb5, 0x6e},
    {0x02, 0x42, 0x3c, 0xb5, 0x6e},
    {0x07, 0x42, 0x3c, 0xb5, 0x6e},
    {0x5e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x15, 0xb5, 0x8f},
    {0x0b, 0x44, 0x15, 0xf5, 0x8f},
    {0x05, 0x45, 0x15, 0xb5, 0x8f},
    {0x0c, 0x42, 0x55, 0xb5, 0x8f},
    {0x09, 0x44, 0x15, 0xf5, 0x8f},
    {0xda, 0x05, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x15, 0xb5, 0x8f},
    {0x62, 0x06, 0xb5, 0x00, 0xcc},
    {0x82, 0x88, 0xb5, 0x00, 0x0d},
    {0x72, 0x06, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x55, 0xb5, 0x8f},
    {0x7e, 0x06, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x15, 0xb5, 0x8f},
    {0x02, 0x45, 0x15, 0xb5, 0x8f},
    {0x07, 0x45, 0x15, 0xb5, 0x8f},
    {0x70, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x03, 0x6c},
    {0x7c, 0x06, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x03, 0x6c},
    {0x6a, 0x06, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x55, 0xb5, 0x8f},
    {0x91, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x05, 0x03, 0x6c},
    {0x60, 0x06, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x15, 0xf5, 0x8f},
    {0x7a, 0x06, 0xb5, 0x00, 0xcc},
    {0x81, 0x88, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x15, 0xf5, 0x8f},
    {0x04, 0x43, 0x05, 0x03, 0x6c},
    {0x02, 0x43, 0x05, 0x03, 0x6c},
    {0x07, 0x43, 0x05, 0x03, 0x6c},
    {0x16, 0x43, 0xc3, 0xf5, 0x9f},
    {0x03, 0x44, 0x82, 0xb5, 0x7c},
    {0x0b, 0x42, 0x82, 0xf5, 0x7c},
    {0x05, 0x44, 0x82, 0xb5, 0x7c},
    {0x1a, 0x43, 0xc3, 0xf5, 0x9f},
    {0x09, 0x42, 0x82, 0xf5, 0x7c},
    {0xca, 0x55, 0xf5, 0x40, 0x0f},
    {0x06, 0x44, 0x82, 0xb5, 0x7c},
    {0x66, 0x06, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x01, 0xf5, 0xcc},
    {0x19, 0x43, 0xc3, 0xf5, 0x9f},
    {0x0f, 0x42, 0x55, 0xb5, 0x8f},
    {0xc6, 0x55, 0xf5, 0x40, 0x0f},
    {0x04, 0x44, 0x82, 0xb5, 0x7c},
    {0x02, 0x44, 0x82, 0xb5, 0x7c},
    {0x07, 0x44, 0x82, 0xb5, 0x7c},
    {0x0d, 0x42, 0x55, 0xb5, 0x8f},
    {0x03, 0x42, 0x05, 0x03, 0x6c},
    {0x12, 0x43, 0xc3, 0xf5, 0x9f},
    {0x05, 0x42, 0x05, 0x03, 0x6c},
    {0x15, 0x43, 0xc3, 0xf5, 0x9f},
    {0x11, 0x42, 0x55, 0xb5, 0x8f},
    {0x84, 0x82, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x05, 0x03, 0x6c},
    {0x01, 0x42, 0x55, 0xb5, 0x8f},
    {0x08, 0x42, 0x82, 0xf5, 0x7c},
    {0xc3, 0x05, 0x43, 0xb5, 0xcc},
    {0xc1, 0x06, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x82, 0xf5, 0x7c},
    {0x04, 0x42, 0x05, 0x03, 0x6c},
    {0x02, 0x42, 0x05, 0x03, 0x6c},
    {0x07, 0x42, 0x05, 0x03, 0x6c},
    {0xb4, 0x83, 0xb5, 0x00, 0x0f},
    {0x03, 0x4b, 0x02, 0xb5, 0xbf},
    {0x0b, 0x48, 0x02, 0xf5, 0xbf},
    {0x05, 0x4b, 0x02, 0xb5, 0xbf},
    {0x0c, 0x46, 0x44, 0xb5, 0xae},
    {0x09, 0x48, 0x02, 0xf5, 0xbf},
    {0xda, 0x6a, 0xf5, 0x00, 0x0e},
    {0x06, 0x4b, 0x02, 0xb5, 0xbf},
    {0x14, 0x41, 0x44, 0xf5, 0xae},
    {0xc2, 0x64, 0x02, 0xf5, 0xff},
    {0x18, 0x41, 0x44, 0xf5, 0xae},
    {0x0e, 0x46, 0x44, 0xb5, 0xae},
    {0x1c, 0x41, 0x44, 0xf5, 0xae},
    {0x04, 0x4b, 0x02, 0xb5, 0xbf},
    {0x02, 0x4b, 0x02, 0xb5, 0xbf},
    {0x07, 0x4b, 0x02, 0xb5, 0xbf},
    {0x17, 0x41, 0x44, 0xf5, 0xae},
    {0x03, 0x43, 0x2a, 0xb5, 0x6e},
    {0x1b, 0x41, 0x44, 0xf5, 0xae},
    {0x05, 0x43, 0x2a, 0xb5, 0x6e},
    {0x67, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x46, 0x44, 0xb5, 0xae},
    {0xc9, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x2a, 0xb5, 0x6e},
    {0x13, 0x41, 0x44, 0xf5, 0xae},
    {0x08, 0x48, 0x02, 0xf5, 0xbf},
    {0x77, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x64, 0x02, 0xf5, 0xff},
    {0x0a, 0x48, 0x02, 0xf5, 0xbf},
    {0x04, 0x43, 0x2a, 0xb5, 0x6e},
    {0x02, 0x43, 0x2a, 0xb5, 0x6e},
    {0x07, 0x43, 0x2a, 0xb5, 0x6e},
    {0x6d, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x19, 0xb5, 0x7e},
    {0x0b, 0x43, 0x19, 0xf5, 0x7e},
    {0x05, 0x41, 0x19, 0xb5, 0x7e},
    {0x75, 0x03, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x19, 0xf5, 0x7e},
    {0xc7, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x19, 0xb5, 0x7e},
    {0x63, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0xc2, 0x44, 0xb5, 0x0e},
    {0x73, 0x03, 0x04, 0xb5, 0xae},
    {0x0f, 0x46, 0x44, 0xb5, 0xae},
    {0x7f, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x19, 0xb5, 0x7e},
    {0x02, 0x41, 0x19, 0xb5, 0x7e},
    {0x07, 0x41, 0x19, 0xb5, 0x7e},
    {0x0d, 0x46, 0x44, 0xb5, 0xae},
    {0x03, 0x42, 0x2a, 0xb5, 0x6e},
    {0x98, 0x83, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x2a, 0xb5, 0x6e},
    {0x6b, 0x03, 0x04, 0xb5, 0xae},
    {0x11, 0x46, 0x44, 0xb5, 0xae},
    {0x94, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x2a, 0xb5, 0x6e},
    {0x01, 0x46, 0x44, 0xb5, 0xae},
    {0x08, 0x43, 0x19, 0xf5, 0x7e},
    {0xc3, 0x6a, 0xf5, 0x00, 0x0e},
    {0xc1, 0xc2, 0x44, 0xb5, 0x0e},
    {0x0a, 0x43, 0x19, 0xf5, 0x7e},
    {0x04, 0x42, 0x2a, 0xb5, 0x6e},
    {0x02, 0x42, 0x2a, 0xb5, 0x6e},
    {0x07, 0x42, 0x2a, 0xb5, 0x6e},
    {0x5d, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x46, 0x11, 0xb5, 0x8e},
    {0x0b, 0x41, 0x11, 0xf5, 0x8e},
    {0x05, 0x46, 0x11, 0xb5, 0x8e},
    {0x0c, 0x43, 0x51, 0xb5, 0x8e},
    {0x09, 0x41, 0x11, 0xf5, 0x8e},
    {0xda, 0x50, 0x02, 0xb5, 0xee},
    {0x06, 0x46, 0x11, 0xb5, 0x8e},
    {0x61, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x74, 0x02, 0xf5, 0xff},
    {0x71, 0x03, 0x04, 0xb5, 0xae},
    {0x0e, 0x43, 0x51, 0xb5, 0x8e},
    {0x7d, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x46, 0x11, 0xb5, 0x8e},
    {0x02, 0x46, 0x11, 0xb5, 0x8e},
    {0x07, 0x46, 0x11, 0xb5, 0x8e},
    {0x6f, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x10, 0x02, 0x6e},
    {0x7b, 0x03, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x10, 0x02, 0x6e},
    {0x69, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x43, 0x51, 0xb5, 0x8e},
    {0x90, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x10, 0x02, 0x6e},
    {0x5f, 0x03, 0x04, 0xb5, 0xae},
    {0x08, 0x41, 0x11, 0xf5, 0x8e},
    {0x79, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x74, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x11, 0xf5, 0x8e},
    {0x04, 0x43, 0x10, 0x02, 0x6e},
    {0x02, 0x43, 0x10, 0x02, 0x6e},
    {0x07, 0x43, 0x10, 0x02, 0x6e},
    {0x16, 0x41, 0x44, 0xf5, 0xae},
    {0x03, 0x44, 0x19, 0xb5, 0x7e},
    {0x0b, 0x42, 0x19, 0xf5, 0x7e},
    {0x05, 0x44, 0x19, 0xb5, 0x7e},
    {0x1a, 0x41, 0x44, 0xf5, 0xae},
    {0x09, 0x42, 0x19, 0xf5, 0x7e},
    {0x8c, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x44, 0x19, 0xb5, 0x7e},
    {0x65, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x0f, 0x44, 0xf5, 0xee},
    {0x19, 0x41, 0x44, 0xf5, 0xae},
    {0x0f, 0x43, 0x51, 0xb5, 0x8e},
    {0xc5, 0x51, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x19, 0xb5, 0x7e},
    {0x02, 0x44, 0x19, 0xb5, 0x7e},
    {0x07, 0x44, 0x19, 0xb5, 0x7e},
    {0x0d, 0x43, 0x51, 0xb5, 0x8e},
    {0x03, 0x42, 0x10, 0x02, 0x6e},
    {0x12, 0x41, 0x44, 0xf5, 0xae},
    {0x05, 0x42, 0x10, 0x02, 0x6e},
    {0x15, 0x41, 0x44, 0xf5, 0xae},
    {0x11, 0x43, 0x51, 0xb5, 0x8e},
    {0xc4, 0x59, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x10, 0x02, 0x6e},
    {0x01, 0x43, 0x51, 0xb5, 0x8e},
    {0x08, 0x42, 0x19, 0xf5, 0x7e},
    {0xc3, 0x50, 0x02, 0xb5, 0xee},
    {0xc1, 0x0f, 0x44, 0xf5, 0xee},
    {0x0a, 0x42, 0x19, 0xf5, 0x7e},
    {0x04, 0x42, 0x10, 0x02, 0x6e},
    {0x02, 0x42, 0x10, 0x02, 0x6e},
    {0x07, 0x42, 0x10, 0x02, 0x6e},
    {0xde, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x83, 0xb5, 0x9f},
    {0x0b, 0x45, 0x83, 0xf5, 0x9f},
    {0x05, 0x47, 0x83, 0xb5, 0x9f},
    {0x0c, 0x44, 0xc3, 0xb5, 0x9f},
    {0x09, 0x45, 0x83, 0xf5, 0x9f},
    {0x9a, 0x92, 0xb5, 0x00, 0x0f},
    {0x06, 0x47, 0x83, 0xb5, 0x9f},
    {0x14, 0x42, 0xc3, 0xf5, 0x9f},
    {0xc2, 0x40, 0x02, 0xf5, 0xff},
    {0x18, 0x42, 0xc3, 0xf5, 0x9f},
    {0x0e, 0x44, 0xc3, 0xb5, 0x9f},
    {0x1c, 0x42, 0xc3, 0xf5, 0x9f},
    {0x04, 0x47, 0x83, 0xb5, 0x9f},
    {0x02, 0x47, 0x83, 0xb5, 0x9f},
    {0x07, 0x47, 0x83, 0xb5, 0x9f},
    {0x17, 0x42, 0xc3, 0xf5, 0x9f},
    {0x03, 0x43, 0x92, 0xb5, 0x6f},
    {0x1b, 0x42, 0xc3, 0xf5, 0x9f},
    {0x05, 0x43, 0x92, 0xb5, 0x6f},
    {0x68, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x44, 0xc3, 0xb5, 0x9f},
    {0x8e, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x92, 0xb5, 0x6f},
    {0x13, 0x42, 0xc3, 0xf5, 0x9f},
    {0x08, 0x45, 0x83, 0xf5, 0x9f},
    {0x78, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x40, 0x02, 0xf5, 0xff},
    {0x0a, 0x45, 0x83, 0xf5, 0x9f},
    {0x04, 0x43, 0x92, 0xb5, 0x6f},
    {0x02, 0x43, 0x92, 0xb5, 0x6f},
    {0x07, 0x43, 0x92, 0xb5, 0x6f},
    {0x6e, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x0f, 0x02, 0x7f},
    {0x0b, 0x43, 0x0f, 0x42, 0x7f},
    {0x05, 0x41, 0x0f, 0x02, 0x7f},
    {0x76, 0x03, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x0f, 0x42, 0x7f},
    {0xc8, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x0f, 0x02, 0x7f},
    {0x64, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x04, 0x01, 0xf5, 0xcc},
    {0x74, 0x03, 0x04, 0xb5, 0xae},
    {0x0f, 0x44, 0xc3, 0xb5, 0x9f},
    {0x40, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x0f, 0x02, 0x7f},
    {0x02, 0x41, 0x0f, 0x02, 0x7f},
    {0x07, 0x41, 0x0f, 0x02, 0x7f},
    {0x0d, 0x44, 0xc3, 0xb5, 0x9f},
    {0x03, 0x42, 0x92, 0xb5, 0x6f},
    {0x9b, 0x83, 0xb5, 0x00, 0x0f},
    {0x05, 0x42, 0x92, 0xb5, 0x6f},
    {0x6c, 0x03, 0x04, 0xb5, 0xae},
    {0x11, 0x44, 0xc3, 0xb5, 0x9f},
    {0x96, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x92, 0xb5, 0x6f},
    {0x01, 0x44, 0xc3, 0xb5, 0x9f},
    {0x08, 0x43, 0x0f, 0x42, 0x7f},
    {0x83, 0x92, 0xb5, 0x00, 0x0f},
    {0xc1, 0x04, 0x01, 0xf5, 0xcc},
    {0x0a, 0x43, 0x0f, 0x42, 0x7f},
    {0x04, 0x42, 0x92, 0xb5, 0x6f},
    {0x02, 0x42, 0x92, 0xb5, 0x6f},
    {0x07, 0x42, 0x92, 0xb5, 0x6f},
    {0x5e, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x45, 0x11, 0xb5, 0x8e},
    {0x0b, 0x44, 0x11, 0xf5, 0x8e},
    {0x05, 0x45, 0x11, 0xb5, 0x8e},
    {0x0c, 0x42, 0x51, 0xb5, 0x8e},
    {0x09, 0x44, 0x11, 0xf5, 0x8e},
    {0xda, 0x06, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x11, 0xb5, 0x8e},
    {0x62, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x02, 0x01, 0xf5, 0xcc},
    {0x72, 0x03, 0x04, 0xb5, 0xae},
    {0x0e, 0x42, 0x51, 0xb5, 0x8e},
    {0x7e, 0x03, 0x04, 0xb5, 0xae},
    {0x04, 0x45, 0x11, 0xb5, 0x8e},
    {0x02, 0x45, 0x11, 0xb5, 0x8e},
    {0x07, 0x45, 0x11, 0xb5, 0x8e},
    {0x70, 0x03, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x03, 0x6c},
    {0x7c, 0x03, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x03, 0x6c},
    {0x6a, 0x03, 0x04, 0xb5, 0xae},
    {0x10, 0x42, 0x51, 0xb5, 0x8e},
    {0x92, 0x83, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x06, 0x03, 0x6c},
    {0x60, 0x03, 0x04, 0xb5, 0xae},
    {0x08, 0x44, 0x11, 0xf5, 0x8e},
    {0x7a, 0x03, 0x04, 0xb5, 0xae},
    {0xc1, 0x02, 0x01, 0xf5, 0xcc},
    {0x0a, 0x44, 0x11, 0xf5, 0x8e},
    {0x04, 0x43, 0x06, 0x03, 0x6c},
    {0x02, 0x43, 0x06, 0x03, 0x6c},
    {0x07, 0x43, 0x06, 0x03, 0x6c},
    {0x16, 0x42, 0xc3, 0xf5, 0x9f},
    {0x03, 0x44, 0x0f, 0x02, 0x7f},
    {0x0b, 0x42, 0x0f, 0x42, 0x7f},
    {0x05, 0x44, 0x0f, 0x02, 0x7f},
    {0x1a, 0x42, 0xc3, 0xf5, 0x9f},
    {0x09, 0x42, 0x0f, 0x42, 0x7f},
    {0xca, 0x51, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x0f, 0x02, 0x7f},
    {0x66, 0x03, 0x04, 0xb5, 0xae},
    {0xc2, 0x07, 0x01, 0xf5, 0xcc},
    {0x19, 0x42, 0xc3, 0xf5, 0x9f},
    {0x0f, 0x42, 0x51, 0xb5, 0x8e},
    {0xc6, 0x51, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x0f, 0x02, 0x7f},
    {0x02, 0x44, 0x0f, 0x02, 0x7f},
    {0x07, 0x44, 0x0f, 0x02, 0x7f},
    {0x0d, 0x42, 0x51, 0xb5, 0x8e},
    {0x03, 0x42, 0x06, 0x03, 0x6c},
    {0x12, 0x42, 0xc3, 0xf5, 0x9f},
    {0x05, 0x42, 0x06, 0x03, 0x6c},
    {0x15, 0x42, 0xc3, 0xf5, 0x9f},
    {0x11, 0x42, 0x51, 0xb5, 0x8e},
    {0xc4, 0x4f, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x06, 0x03, 0x6c},
    {0x01, 0x42, 0x51, 0xb5, 0x8e},
    {0x08, 0x42, 0x0f, 0x42, 0x7f},
    {0xc3, 0x06, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x01, 0xf5, 0xcc},
    {0x0a, 0x42, 0x0f, 0x42, 0x7f},
    {0x04, 0x42, 0x06, 0x03, 0x6c},
    {0x02, 0x42, 0x06, 0x03, 0x6c},
    {0x07, 0x42, 0x06, 0x03, 0x6c},
    {0xf4, 0x44, 0xf5, 0x00, 0x0e},
    {0x03, 0x56, 0xb5, 0x00, 0xff},
    {0x0b, 0x40, 0xb5, 0x40, 0xff},
    {0x05, 0x56, 0xb5, 0x00, 0xff},
    {0x0c, 0x47, 0x42, 0xb5, 0xbf},
    {0x09, 0x40, 0xb5, 0x40, 0xff},
    {0xda, 0x60, 0xf5, 0x00, 0x0e},
    {0x06, 0x56, 0xb5, 0x00, 0xff},
    {0x14, 0x45, 0x42, 0xf5, 0xbf},
    {0xc2, 0x0d, 0x44, 0xf5, 0xee},
    {0x18, 0x45, 0x42, 0xf5, 0xbf},
    {0x0e, 0x47, 0x42, 0xb5, 0xbf},
    {0x1c, 0x45, 0x42, 0xf5, 0xbf},
    {0x04, 0x56, 0xb5, 0x00, 0xff},
    {0x02, 0x56, 0xb5, 0x00, 0xff},
    {0x07, 0x56, 0xb5, 0x00, 0xff},
    {0x17, 0x45, 0x42, 0xf5, 0xbf},
    {0x03, 0x43, 0x20, 0xb5, 0x6e},
    {0x1b, 0x45, 0x42, 0xf5, 0xbf},
    {0x05, 0x43, 0x20, 0xb5, 0x6e},
    {0x67, 0x04, 0x02, 0xb5, 0xbf},
    {0x10, 0x47, 0x42, 0xb5, 0xbf},
    {0x89, 0x84, 0xb5, 0x00, 0x0f},
    {0x06, 0x43, 0x20, 0xb5, 0x6e},
    {0x13, 0x45, 0x42, 0xf5, 0xbf},
    {0x08, 0x40, 0xb5, 0x40, 0xff},
    {0x77, 0x04, 0x02, 0xb5, 0xbf},
    {0xc1, 0x0d, 0x44, 0xf5, 0xee},
    {0x0a, 0x40, 0xb5, 0x40, 0xff},
    {0x04, 0x43, 0x20, 0xb5, 0x6e},
    {0x02, 0x43, 0x20, 0xb5, 0x6e},
    {0x07, 0x43, 0x20, 0xb5, 0x6e},
    {0x6d, 0x04, 0x02, 0xb5, 0xbf},
    {0x03, 0x41, 0x86, 0xb5, 0x7f},
    {0x0b, 0x43, 0x86, 0xf5, 0x7f},
    {0x05, 0x41, 0x86, 0xb5, 0x7f},
    {0x75, 0x04, 0x02, 0xb5, 0xbf},
    {0x09, 0x43, 0x86, 0xf5, 0x7f},
    {0x87, 0x84, 0xb5, 0x00, 0x0f},
    {0x06, 0x41, 0x86, 0xb5, 0x7f},
    {0x63, 0x04, 0x02, 0xb5, 0xbf},
    {0xc2, 0x03, 0x02, 0x42, 0xbf},
    {0x73, 0x04, 0x02, 0xb5, 0xbf},
    {0x0f, 0x47, 0x42, 0xb5, 0xbf},
    {0x7f, 0x04, 0x02, 0xb5, 0xbf},
    {0x04, 0x41, 0x86, 0xb5, 0x7f},
    {0x02, 0x41, 0x86, 0xb5, 0x7f},
    {0x07, 0x41, 0x86, 0xb5, 0x7f},
    {0x0d, 0x47, 0x42, 0xb5, 0xbf},
    {0x03, 0x42, 0x20, 0xb5, 0x6e},
    {0x97, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x20, 0xb5, 0x6e},
    {0x6b, 0x04, 0x02, 0xb5, 0xbf},
    {0x11, 0x47, 0x42, 0xb5, 0xbf},
    {0x93, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x20, 0xb5, 0x6e},
    {0x01, 0x47, 0x42, 0xb5, 0xbf},
    {0x08, 0x43, 0x86, 0xf5, 0x7f},
    {0xc3, 0x60, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x02, 0x42, 0xbf},
    {0x0a, 0x43, 0x86, 0xf5, 0x7f},
    {0x04, 0x42, 0x20, 0xb5, 0x6e},
    {0x02, 0x42, 0x20, 0xb5, 0x6e},
    {0x07, 0x42, 0x20, 0xb5, 0x6e},
    {0x5d, 0x04, 0x02, 0xb5, 0xbf},
    {0x03, 0x46, 0x84, 0xb5, 0x8f},
    {0x0b, 0x41, 0x84, 0xf5, 0x8f},
    {0x05, 0x46, 0x84, 0xb5, 0x8f},
    {0x0c, 0x43, 0xc4, 0xb5, 0x8f},
    {0x09, 0x41, 0x84, 0xf5, 0x8f},
    {0xda, 0x08, 0x44, 0xf5, 0xee},
    {0x06, 0x46, 0x84, 0xb5, 0x8f},
    {0x61, 0x04, 0x02, 0xb5, 0xbf},
    {0x82, 0x9b, 0xb5, 0x00, 0x0e},
    {0x71, 0x04, 0x02, 0xb5, 0xbf},
    {0x0e, 0x43, 0xc4, 0xb5, 0x8f},
    {0x7d, 0x04, 0x02, 0xb5, 0xbf},
    {0x04, 0x46, 0x84, 0xb5, 0x8f},
    {0x02, 0x46, 0x84, 0xb5, 0x8f},
    {0x07, 0x46, 0x84, 0xb5, 0x8f},
    {0x6f, 0x04, 0x02, 0xb5, 0xbf},
    {0x03, 0x43, 0x08, 0x04, 0x6e},
    {0x7b, 0x04, 0x02, 0xb5, 0xbf},
    {0x05, 0x43, 0x08, 0x04, 0x6e},
    {0x69, 0x04, 0x02, 0xb5, 0xbf},
    {0x10, 0x43, 0xc4, 0xb5, 0x8f},
    {0x8f, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x08, 0x04, 0x6e},
    {0x5f, 0x04, 0x02, 0xb5, 0xbf},
    {0x08, 0x41, 0x84, 0xf5, 0x8f},
    {0x79, 0x04, 0x02, 0xb5, 0xbf},
    {0x81, 0x9b, 0xb5, 0x00, 0x0e},
    {0x0a, 0x41, 0x84, 0xf5, 0x8f},
    {0x04, 0x43, 0x08, 0x04, 0x6e},
    {0x02, 0x43, 0x08, 0x04, 0x6e},
    {0x07, 0x43, 0x08, 0x04, 0x6e},
    {0x16, 0x45, 0x42, 0xf5, 0xbf},
    {0x03, 0x44, 0x86, 0xb5, 0x7f},
    {0x0b, 0x42, 0x86, 0xf5, 0x7f},
    {0x05, 0x44, 0x86, 0xb5, 0x7f},
    {0x1a, 0x45, 0x42, 0xf5, 0xbf},
    {0x09, 0x42, 0x86, 0xf5, 0x7f},
    {0x8b, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x86, 0xb5, 0x7f},
    {0x65, 0x04, 0x02, 0xb5, 0xbf},
    {0xc2, 0x05, 0x02, 0x42, 0xbf},
    {0x19, 0x45, 0x42, 0xf5, 0xbf},
    {0x0f, 0x43, 0xc4, 0xb5, 0x8f},
    {0x85, 0x84, 0xb5, 0x00, 0x0f},
    {0x04, 0x44, 0x86, 0xb5, 0x7f},
    {0x02, 0x44, 0x86, 0xb5, 0x7f},
    {0x07, 0x44, 0x86, 0xb5, 0x7f},
    {0x0d, 0x43, 0xc4, 0xb5, 0x8f},
    {0x03, 0x42, 0x08, 0x04, 0x6e},
    {0x12, 0x45, 0x42, 0xf5, 0xbf},
    {0x05, 0x42, 0x08, 0x04, 0x6e},
    {0x15, 0x45, 0x42, 0xf5, 0xbf},
    {0x11, 0x43, 0xc4, 0xb5, 0x8f},
    {0x84, 0x86, 0xb5, 0x00, 0x0f},
    {0x06, 0x42, 0x08, 0x04, 0x6e},
    {0x01, 0x43, 0xc4, 0xb5, 0x8f},
    {0x08, 0x42, 0x86, 0xf5, 0x7f},
    {0xc3, 0x08, 0x44, 0xf5, 0xee},
    {0xc1, 0x05, 0x02, 0x42, 0xbf},
    {0x0a, 0x42, 0x86, 0xf5, 0x7f},
    {0x04, 0x42, 0x08, 0x04, 0x6e},
    {0x02, 0x42, 0x08, 0x04, 0x6e},
    {0x07, 0x42, 0x08, 0x04, 0x6e},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x04, 0xb5, 0xae},
    {0x0b, 0x46, 0x81, 0xf5, 0x9e},
    {0x05, 0x48, 0x04, 0xb5, 0xae},
    {0x0c, 0x41, 0xc1, 0xb5, 0x9e},
    {0x09, 0x46, 0x81, 0xf5, 0x9e},
    {0xda, 0x7a, 0xf5, 0x00, 0x0e},
    {0x06, 0x48, 0x04, 0xb5, 0xae},
    {0x14, 0x43, 0xc1, 0xf5, 0x9e},
    {0xc2, 0x6c, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0xc1, 0xf5, 0x9e},
    {0x0e, 0x41, 0xc1, 0xb5, 0x9e},
    {0x1c, 0x43, 0xc1, 0xf5, 0x9e},
    {0x04, 0x48, 0x04, 0xb5, 0xae},
    {0x02, 0x48, 0x04, 0xb5, 0xae},
    {0x07, 0x48, 0x04, 0xb5, 0xae},
    {0x17, 0x43, 0xc1, 0xf5, 0x9e},
    {0x03, 0x43, 0x3a, 0xb5, 0x6e},
    {0x1b, 0x43, 0xc1, 0xf5, 0x9e},
    {0x05, 0x43, 0x3a, 0xb5, 0x6e},
    {0x68, 0x04, 0x02, 0xb5, 0xbf},
    {0x10, 0x41, 0xc1, 0xb5, 0x9e},
    {0x8d, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x3a, 0xb5, 0x6e},
    {0x13, 0x43, 0xc1, 0xf5, 0x9e},
    {0x08, 0x46, 0x81, 0xf5, 0x9e},
    {0x78, 0x04, 0x02, 0xb5, 0xbf},
    {0xc1, 0x6c, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x81, 0xf5, 0x9e},
    {0x04, 0x43, 0x3a, 0xb5, 0x6e},
    {0x02, 0x43, 0x3a, 0xb5, 0x6e},
    {0x07, 0x43, 0x3a, 0xb5, 0x6e},
    {0x6e, 0x04, 0x02, 0xb5, 0xbf},
    {0x03, 0x41, 0x04, 0x04, 0x7e},
    {0x0b, 0x43, 0x04, 0x44, 0x7e},
    {0x05, 0x41, 0x04, 0x04, 0x7e},
    {0x76, 0x04, 0x02, 0xb5, 0xbf},
    {0x09, 0x43, 0x04, 0x44, 0x7e},
    {0x88, 0x84, 0xb5, 0x00, 0x0f},
    {0x06, 0x41, 0x04, 0x04, 0x7e},
    {0x64, 0x04, 0x02, 0xb5, 0xbf},
    {0xc2, 0x11, 0x44, 0xf5, 0xee},
    {0x74, 0x04, 0x02, 0xb5, 0xbf},
    {0x0f, 0x41, 0xc1, 0xb5, 0x9e},
    {0x40, 0x04, 0x02, 0xb5, 0xbf},
    {0x04, 0x41, 0x04, 0x04, 0x7e},
    {0x02, 0x41, 0x04, 0x04, 0x7e},
    {0x07, 0x41, 0x04, 0x04, 0x7e},
    {0x0d, 0x41, 0xc1, 0xb5, 0x9e},
    {0x03, 0x42, 0x3a, 0xb5, 0x6e},
    {0x99, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x3a, 0xb5, 0x6e},
    {0x6c, 0x04, 0x02, 0xb5, 0xbf},
    {0x11, 0x41, 0xc1, 0xb5, 0x9e},
    {0x95, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x3a, 0xb5, 0x6e},
    {0x01, 0x41, 0xc1, 0xb5, 0x9e},
    {0x08, 0x43, 0x04, 0x44, 0x7e},
    {0xc3, 0x7a, 0xf5, 0x00, 0x0e},
    {0xc1, 0x11, 0x44, 0xf5, 0xee},
    {0x0a, 0x43, 0x04, 0x44, 0x7e},
    {0x04, 0x42, 0x3a, 0xb5, 0x6e},
    {0x02, 0x42, 0x3a, 0xb5, 0x6e},
    {0x07, 0x42, 0x3a, 0xb5, 0x6e},
    {0x5e, 0x04, 0x02, 0xb5, 0xbf},
    {0x03, 0x45, 0x84, 0xb5, 0x8f},
    {0x0b, 0x44, 0x84, 0xf5, 0x8f},
    {0x05, 0x45, 0x84, 0xb5, 0x8f},
    {0x0c, 0x42, 0xc4, 0xb5, 0x8f},
    {0x09, 0x44, 0x84, 0xf5, 0x8f},
    {0xda, 0xc1, 0x42, 0xf5, 0x0f},
    {0x06, 0x45, 0x84, 0xb5, 0x8f},
    {0x62, 0x04, 0x02, 0xb5, 0xbf},
    {0x82, 0x96, 0xb5, 0x00, 0x0e},
    {0x72, 0x04, 0x02, 0xb5, 0xbf},
    {0x0e, 0x42, 0xc4, 0xb5, 0x8f},
    {0x7e, 0x04, 0x02, 0xb5, 0xbf},
    {0x04, 0x45, 0x84, 0xb5, 0x8f},
    {0x02, 0x45, 0x84, 0xb5, 0x8f},
    {0x07, 0x45, 0x84, 0xb5, 0x8f},
    {0x70, 0x04, 0x02, 0xb5, 0xbf},
    {0x03, 0x43, 0x81, 0x02, 0x6f},
    {0x7c, 0x04, 0x02, 0xb5, 0xbf},
    {0x05, 0x43, 0x81, 0x02, 0x6f},
    {0x6a, 0x04, 0x02, 0xb5, 0xbf},
    {0x10, 0x42, 0xc4, 0xb5, 0x8f},
    {0x91, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x81, 0x02, 0x6f},
    {0x60, 0x04, 0x02, 0xb5, 0xbf},
    {0x08, 0x44, 0x84, 0xf5, 0x8f},
    {0x7a, 0x04, 0x02, 0xb5, 0xbf},
    {0x81, 0x96, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x84, 0xf5, 0x8f},
    {0x04, 0x43, 0x81, 0x02, 0x6f},
    {0x02, 0x43, 0x81, 0x02, 0x6f},
    {0x07, 0x43, 0x81, 0x02, 0x6f},
    {0x16, 0x43, 0xc1, 0xf5, 0x9e},
    {0x03, 0x44, 0x04, 0x04, 0x7e},
    {0x0b, 0x42, 0x04, 0x44, 0x7e},
    {0x05, 0x44, 0x04, 0x04, 0x7e},
    {0x1a, 0x43, 0xc1, 0xf5, 0x9e},
    {0x09, 0x42, 0x04, 0x44, 0x7e},
    {0x8a, 0x84, 0xb5, 0x00, 0x0f},
    {0x06, 0x44, 0x04, 0x04, 0x7e},
    {0x66, 0x04, 0x02, 0xb5, 0xbf},
    {0xc2, 0x06, 0x02, 0x42, 0xbf},
    {0x19, 0x43, 0xc1, 0xf5, 0x9e},
    {0x0f, 0x42, 0xc4, 0xb5, 0x8f},
    {0x86, 0x84, 0xb5, 0x00, 0x0f},
    {0x04, 0x44, 0x04, 0x04, 0x7e},
    {0x02, 0x44, 0x04, 0x04, 0x7e},
    {0x07, 0x44, 0x04, 0x04, 0x7e},
    {0x0d, 0x42, 0xc4, 0xb5, 0x8f},
    {0x03, 0x42, 0x81, 0x02, 0x6f},
    {0x12, 0x43, 0xc1, 0xf5, 0x9e},
    {0x05, 0x42, 0x81, 0x02, 0x6f},
    {0x15, 0x43, 0xc1, 0xf5, 0x9e},
    {0x11, 0x42, 0xc4, 0xb5, 0x8f},
    {0xc4, 0x04, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x81, 0x02, 0x6f},
    {0x01, 0x42, 0xc4, 0xb5, 0x8f},
    {0x08, 0x42, 0x04, 0x44, 0x7e},
    {0xc3, 0xc1, 0x42, 0xf5, 0x0f},
    {0xc1, 0x06, 0x02, 0x42, 0xbf},
    {0x0a, 0x42, 0x04, 0x44, 0x7e},
    {0x04, 0x42, 0x81, 0x02, 0x6f},
    {0x02, 0x42, 0x81, 0x02, 0x6f},
    {0x07, 0x42, 0x81, 0x02, 0x6f},
    {0xb4, 0x81, 0xb5, 0x00, 0x0e},
    {0x03, 0x4c, 0x02, 0xb5, 0xbf},
    {0x0b, 0x47, 0x04, 0xf5, 0xae},
    {0x05, 0x4c, 0x02, 0xb5, 0xbf},
    {0x0c, 0x45, 0x44, 0xb5, 0xae},
    {0x09, 0x47, 0x04, 0xf5, 0xae},
    {0xda, 0x0a, 0x44, 0xf5, 0xee},
    {0x06, 0x4c, 0x02, 0xb5, 0xbf},
    {0x14, 0x44, 0x44, 0xf5, 0xae},
    {0xc2, 0x01, 0x44, 0xf5, 0xee},
    {0x18, 0x44, 0x44, 0xf5, 0xae},
    {0x0e, 0x45, 0x44, 0xb5, 0xae},
    {0x1c, 0x44, 0x44, 0xf5, 0xae},
    {0x04, 0x4c, 0x02, 0xb5, 0xbf},
    {0x02, 0x4c, 0x02, 0xb5, 0xbf},
    {0x07, 0x4c, 0x02, 0xb5, 0xbf},
    {0x17, 0x44, 0x44, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x04, 0x6e},
    {0x1b, 0x44, 0x44, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x04, 0x6e},
    {0x67, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x45, 0x44, 0xb5, 0xae},
    {0xc9, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x04, 0x6e},
    {0x13, 0x44, 0x44, 0xf5, 0xae},
    {0x08, 0x47, 0x04, 0xf5, 0xae},
    {0x77, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0x01, 0x44, 0xf5, 0xee},
    {0x0a, 0x47, 0x04, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x04, 0x6e},
    {0x02, 0x43, 0x0a, 0x04, 0x6e},
    {0x07, 0x43, 0x0a, 0x04, 0x6e},
    {0x6d, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x04, 0x7e},
    {0x0b, 0x43, 0x02, 0x44, 0x7e},
    {0x05, 0x41, 0x02, 0x04, 0x7e},
    {0x75, 0x02, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x44, 0x7e},
    {0xc7, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x04, 0x7e},
    {0x63, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x08, 0x43, 0xb5, 0xcc},
    {0x73, 0x02, 0x04, 0xb5, 0xae},
    {0x0f, 0x45, 0x44, 0xb5, 0xae},
    {0x7f, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x04, 0x7e},
    {0x02, 0x41, 0x02, 0x04, 0x7e},
    {0x07, 0x41, 0x02, 0x04, 0x7e},
    {0x0d, 0x45, 0x44, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x04, 0x6e},
    {0x98, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x0a, 0x04, 0x6e},
    {0x6b, 0x02, 0x04, 0xb5, 0xae},
    {0x11, 0x45, 0x44, 0xb5, 0xae},
    {0x94, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x0a, 0x04, 0x6e},
    {0x01, 0x45, 0x44, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x44, 0x7e},
    {0xc3, 0x0a, 0x44, 0xf5, 0xee},
    {0xc1, 0x08, 0x43, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x44, 0x7e},
    {0x04, 0x42, 0x0a, 0x04, 0x6e},
    {0x02, 0x42, 0x0a, 0x04, 0x6e},
    {0x07, 0x42, 0x0a, 0x04, 0x6e},
    {0x5d, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x46, 0x06, 0x02, 0x8e},
    {0x0b, 0x41, 0x06, 0x42, 0x8e},
    {0x05, 0x46, 0x06, 0x02, 0x8e},
    {0x0c, 0x43, 0x46, 0x02, 0x8e},
    {0x09, 0x41, 0x06, 0x42, 0x8e},
    {0xda, 0x04, 0x43, 0xb5, 0xcc},
    {0x06, 0x46, 0x06, 0x02, 0x8e},
    {0x61, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0xc3, 0x42, 0xf5, 0x0f},
    {0x71, 0x02, 0x04, 0xb5, 0xae},
    {0x0e, 0x43, 0x46, 0x02, 0x8e},
    {0x7d, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x46, 0x06, 0x02, 0x8e},
    {0x02, 0x46, 0x06, 0x02, 0x8e},
    {0x07, 0x46, 0x06, 0x02, 0x8e},
    {0x6f, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x03, 0x6c},
    {0x7b, 0x02, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x03, 0x6c},
    {0x69, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x43, 0x46, 0x02, 0x8e},
    {0x90, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x04, 0x03, 0x6c},
    {0x5f, 0x02, 0x04, 0xb5, 0xae},
    {0x08, 0x41, 0x06, 0x42, 0x8e},
    {0x79, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0xc3, 0x42, 0xf5, 0x0f},
    {0x0a, 0x41, 0x06, 0x42, 0x8e},
    {0x04, 0x43, 0x04, 0x03, 0x6c},
    {0x02, 0x43, 0x04, 0x03, 0x6c},
    {0x07, 0x43, 0x04, 0x03, 0x6c},
    {0x16, 0x44, 0x44, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x04, 0x7e},
    {0x0b, 0x42, 0x02, 0x44, 0x7e},
    {0x05, 0x44, 0x02, 0x04, 0x7e},
    {0x1a, 0x44, 0x44, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x44, 0x7e},
    {0x8c, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x02, 0x04, 0x7e},
    {0x65, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0xc1, 0x44, 0xb5, 0x0e},
    {0x19, 0x44, 0x44, 0xf5, 0xae},
    {0x0f, 0x43, 0x46, 0x02, 0x8e},
    {0xc5, 0x46, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x04, 0x7e},
    {0x02, 0x44, 0x02, 0x04, 0x7e},
    {0x07, 0x44, 0x02, 0x04, 0x7e},
    {0x0d, 0x43, 0x46, 0x02, 0x8e},
    {0x03, 0x42, 0x04, 0x03, 0x6c},
    {0x12, 0x44, 0x44, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x03, 0x6c},
    {0x15, 0x44, 0x44, 0xf5, 0xae},
    {0x11, 0x43, 0x46, 0x02, 0x8e},
    {0xc4, 0x02, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x04, 0x03, 0x6c},
    {0x01, 0x43, 0x46, 0x02, 0x8e},
    {0x08, 0x42, 0x02, 0x44, 0x7e},
    {0xc3, 0x04, 0x43, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x44, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x44, 0x7e},
    {0x04, 0x42, 0x04, 0x03, 0x6c},
    {0x02, 0x42, 0x04, 0x03, 0x6c},
    {0x07, 0x42, 0x04, 0x03, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x81, 0xb5, 0x9e},
    {0x0b, 0x45, 0x81, 0xf5, 0x9e},
    {0x05, 0x47, 0x81, 0xb5, 0x9e},
    {0x0c, 0x44, 0xc1, 0xb5, 0x9e},
    {0x09, 0x45, 0x81, 0xf5, 0x9e},
    {0xda, 0x02, 0x43, 0xb5, 0xcc},
    {0x06, 0x47, 0x81, 0xb5, 0x9e},
    {0x14, 0x42, 0xc1, 0xf5, 0x9e},
    {0xc2, 0x0a, 0x43, 0xb5, 0xcc},
    {0x18, 0x42, 0xc1, 0xf5, 0x9e},
    {0x0e, 0x44, 0xc1, 0xb5, 0x9e},
    {0x1c, 0x42, 0xc1, 0xf5, 0x9e},
    {0x04, 0x47, 0x81, 0xb5, 0x9e},
    {0x02, 0x47, 0x81, 0xb5, 0x9e},
    {0x07, 0x47, 0x81, 0xb5, 0x9e},
    {0x17, 0x42, 0xc1, 0xf5, 0x9e},
    {0x03, 0x43, 0x02, 0x03, 0x6c},
    {0x1b, 0x42, 0xc1, 0xf5, 0x9e},
    {0x05, 0x43, 0x02, 0x03, 0x6c},
    {0x68, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x44, 0xc1, 0xb5, 0x9e},
    {0x8e, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x02, 0x03, 0x6c},
    {0x13, 0x42, 0xc1, 0xf5, 0x9e},
    {0x08, 0x45, 0x81, 0xf5, 0x9e},
    {0x78, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0x0a, 0x43, 0xb5, 0xcc},
    {0x0a, 0x45, 0x81, 0xf5, 0x9e},
    {0x04, 0x43, 0x02, 0x03, 0x6c},
    {0x02, 0x43, 0x02, 0x03, 0x6c},
    {0x07, 0x43, 0x02, 0x03, 0x6c},
    {0x6e, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x04, 0x7e},
    {0x0b, 0x43, 0x07, 0x44, 0x7e},
    {0x05, 0x41, 0x07, 0x04, 0x7e},
    {0x76, 0x02, 0x04, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x44, 0x7e},
    {0xc8, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x04, 0x7e},
    {0x64, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0x42, 0xbf},
    {0x74, 0x02, 0x04, 0xb5, 0xae},
    {0x0f, 0x44, 0xc1, 0xb5, 0x9e},
    {0x40, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x04, 0x7e},
    {0x02, 0x41, 0x07, 0x04, 0x7e},
    {0x07, 0x41, 0x07, 0x04, 0x7e},
    {0x0d, 0x44, 0xc1, 0xb5, 0x9e},
    {0x03, 0x42, 0x02, 0x03, 0x6c},
    {0x9b, 0x81, 0xb5, 0x00, 0x0e},
    {0x05, 0x42, 0x02, 0x03, 0x6c},
    {0x6c, 0x02, 0x04, 0xb5, 0xae},
    {0x11, 0x44, 0xc1, 0xb5, 0x9e},
    {0x96, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x02, 0x03, 0x6c},
    {0x01, 0x44, 0xc1, 0xb5, 0x9e},
    {0x08, 0x43, 0x07, 0x44, 0x7e},
    {0xc3, 0x02, 0x43, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0x42, 0xbf},
    {0x0a, 0x43, 0x07, 0x44, 0x7e},
    {0x04, 0x42, 0x02, 0x03, 0x6c},
    {0x02, 0x42, 0x02, 0x03, 0x6c},
    {0x07, 0x42, 0x02, 0x03, 0x6c},
    {0x5e, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x45, 0x06, 0x02, 0x8e},
    {0x0b, 0x44, 0x06, 0x42, 0x8e},
    {0x05, 0x45, 0x06, 0x02, 0x8e},
    {0x0c, 0x42, 0x46, 0x02, 0x8e},
    {0x09, 0x44, 0x06, 0x42, 0x8e},
    {0xda, 0x07, 0x43, 0xb5, 0xcc},
    {0x06, 0x45, 0x06, 0x02, 0x8e},
    {0x62, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0x42, 0xbf},
    {0x72, 0x02, 0x04, 0xb5, 0xae},
    {0x0e, 0x42, 0x46, 0x02, 0x8e},
    {0x7e, 0x02, 0x04, 0xb5, 0xae},
    {0x04, 0x45, 0x06, 0x02, 0x8e},
    {0x02, 0x45, 0x06, 0x02, 0x8e},
    {0x07, 0x45, 0x06, 0x02, 0x8e},
    {0x70, 0x02, 0x04, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x03, 0x6c},
    {0x7c, 0x02, 0x04, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x03, 0x6c},
    {0x6a, 0x02, 0x04, 0xb5, 0xae},
    {0x10, 0x42, 0x46, 0x02, 0x8e},
    {0x92, 0x81, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x07, 0x03, 0x6c},
    {0x60, 0x02, 0x04, 0xb5, 0xae},
    {0x08, 0x44, 0x06, 0x42, 0x8e},
    {0x7a, 0x02, 0x04, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0x42, 0xbf},
    {0x0a, 0x44, 0x06, 0x42, 0x8e},
    {0x04, 0x43, 0x07, 0x03, 0x6c},
    {0x02, 0x43, 0x07, 0x03, 0x6c},
    {0x07, 0x43, 0x07, 0x03, 0x6c},
    {0x16, 0x42, 0xc1, 0xf5, 0x9e},
    {0x03, 0x44, 0x07, 0x04, 0x7e},
    {0x0b, 0x42, 0x07, 0x44, 0x7e},
    {0x05, 0x44, 0x07, 0x04, 0x7e},
    {0x1a, 0x42, 0xc1, 0xf5, 0x9e},
    {0x09, 0x42, 0x07, 0x44, 0x7e},
    {0xca, 0x46, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x04, 0x7e},
    {0x66, 0x02, 0x04, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0x42, 0xbf},
    {0x19, 0x42, 0xc1, 0xf5, 0x9e},
    {0x0f, 0x42, 0x46, 0x02, 0x8e},
    {0xc6, 0x46, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x04, 0x7e},
    {0x02, 0x44, 0x07, 0x04, 0x7e},
    {0x07, 0x44, 0x07, 0x04, 0x7e},
    {0x0d, 0x42, 0x46, 0x02, 0x8e},
    {0x03, 0x42, 0x07, 0x03, 0x6c},
    {0x12, 0x42, 0xc1, 0xf5, 0x9e},
    {0x05, 0x42, 0x07, 0x03, 0x6c},
    {0x15, 0x42, 0xc1, 0xf5, 0x9e},
    {0x11, 0x42, 0x46, 0x02, 0x8e},
    {0xc4, 0x07, 0x44, 0xf5, 0xee},
    {0x06, 0x42, 0x07, 0x03, 0x6c},
    {0x01, 0x42, 0x46, 0x02, 0x8e},
    {0x08, 0x42, 0x07, 0x44, 0x7e},
    {0xc3, 0x07, 0x43, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0x42, 0xbf},
    {0x0a, 0x42, 0x07, 0x44, 0x7e},
    {0x04, 0x42, 0x07, 0x03, 0x6c},
    {0x02, 0x42, 0x07, 0x03, 0x6c},
    {0x07, 0x42, 0x07, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xf5, 0x00, 0x00, 0x04},
    {0x0b, 0xc1, 0xb5, 0x40, 0x0f},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x0c, 0x4e, 0xf5, 0x00, 0xee},
    {0x09, 0xc1, 0xb5, 0x40, 0x0f},
    {0xda, 0x56, 0x02, 0xf5, 0xff},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x14, 0x4c, 0xf5, 0x40, 0xee},
    {0xc2, 0x5e, 0x02, 0xf5, 0xff},
    {0x18, 0x4c, 0xf5, 0x40, 0xee},
    {0x0e, 0x4e, 0xf5, 0x00, 0xee},
    {0x1c, 0x4c, 0xf5, 0x40, 0xee},
    {0x04, 0xf5, 0x00, 0x00, 0x04},
    {0x02, 0xf5, 0x00, 0x00, 0x04},
    {0x07, 0xf5, 0x00, 0x00, 0x04},
    {0x17, 0x4c, 0xf5, 0x40, 0xee},
    {0x03, 0x43, 0x16, 0x02, 0x6f},
    {0x1b, 0x4c, 0xf5, 0x40, 0xee},
    {0x05, 0x43, 0x16, 0x02, 0x6f},
    {0x67, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x4e, 0xf5, 0x00, 0xee},
    {0xc9, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x16, 0x02, 0x6f},
    {0x13, 0x4c, 0xf5, 0x40, 0xee},
    {0x08, 0xc1, 0xb5, 0x40, 0x0f},
    {0x77, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x5e, 0x02, 0xf5, 0xff},
    {0x0a, 0xc1, 0xb5, 0x40, 0x0f},
    {0x04, 0x43, 0x16, 0x02, 0x6f},
    {0x02, 0x43, 0x16, 0x02, 0x6f},
    {0x07, 0x43, 0x16, 0x02, 0x6f},
    {0x6d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x0d, 0x02, 0x7f},
    {0x0b, 0x43, 0x0d, 0x42, 0x7f},
    {0x05, 0x41, 0x0d, 0x02, 0x7f},
    {0x75, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x0d, 0x42, 0x7f},
    {0xc7, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x0d, 0x02, 0x7f},
    {0x63, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x03, 0x05, 0xf5, 0xdd},
    {0x73, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0x4e, 0xf5, 0x00, 0xee},
    {0x7f, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x0d, 0x02, 0x7f},
    {0x02, 0x41, 0x0d, 0x02, 0x7f},
    {0x07, 0x41, 0x0d, 0x02, 0x7f},
    {0x0d, 0x4e, 0xf5, 0x00, 0xee},
    {0x03, 0x42, 0x16, 0x02, 0x6f},
    {0xd7, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x16, 0x02, 0x6f},
    {0x6b, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0x4e, 0xf5, 0x00, 0xee},
    {0xd3, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x16, 0x02, 0x6f},
    {0x01, 0x4e, 0xf5, 0x00, 0xee},
    {0x08, 0x43, 0x0d, 0x42, 0x7f},
    {0xc3, 0x56, 0x02, 0xf5, 0xff},
    {0xc1, 0x03, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x0d, 0x42, 0x7f},
    {0x04, 0x42, 0x16, 0x02, 0x6f},
    {0x02, 0x42, 0x16, 0x02, 0x6f},
    {0x07, 0x42, 0x16, 0x02, 0x6f},
    {0x5d, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x46, 0x01, 0xb5, 0x8e},
    {0x0b, 0x41, 0x01, 0xf5, 0x8e},
    {0x05, 0x46, 0x01, 0xb5, 0x8e},
    {0x0c, 0x43, 0x41, 0xb5, 0x8e},
    {0x09, 0x41, 0x01, 0xf5, 0x8e},
    {0xda, 0x03, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x01, 0xb5, 0x8e},
    {0x61, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x0b, 0x44, 0xb5, 0xdd},
    {0x71, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x43, 0x41, 0xb5, 0x8e},
    {0x7d, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x46, 0x01, 0xb5, 0x8e},
    {0x02, 0x46, 0x01, 0xb5, 0x8e},
    {0x07, 0x46, 0x01, 0xb5, 0x8e},
    {0x6f, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x03, 0x04, 0x6d},
    {0x7b, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x03, 0x04, 0x6d},
    {0x69, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x43, 0x41, 0xb5, 0x8e},
    {0xcf, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x03, 0x04, 0x6d},
    {0x5f, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x41, 0x01, 0xf5, 0x8e},
    {0x79, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0b, 0x44, 0xb5, 0xdd},
    {0x0a, 0x41, 0x01, 0xf5, 0x8e},
    {0x04, 0x43, 0x03, 0x04, 0x6d},
    {0x02, 0x43, 0x03, 0x04, 0x6d},
    {0x07, 0x43, 0x03, 0x04, 0x6d},
    {0x16, 0x4c, 0xf5, 0x40, 0xee},
    {0x03, 0x44, 0x0d, 0x02, 0x7f},
    {0x0b, 0x42, 0x0d, 0x42, 0x7f},
    {0x05, 0x44, 0x0d, 0x02, 0x7f},
    {0x1a, 0x4c, 0xf5, 0x40, 0xee},
    {0x09, 0x42, 0x0d, 0x42, 0x7f},
    {0xcb, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x0d, 0x02, 0x7f},
    {0x65, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x05, 0x05, 0xf5, 0xdd},
    {0x19, 0x4c, 0xf5, 0x40, 0xee},
    {0x0f, 0x43, 0x41, 0xb5, 0x8e},
    {0xc5, 0x41, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x0d, 0x02, 0x7f},
    {0x02, 0x44, 0x0d, 0x02, 0x7f},
    {0x07, 0x44, 0x0d, 0x02, 0x7f},
    {0x0d, 0x43, 0x41, 0xb5, 0x8e},
    {0x03, 0x42, 0x03, 0x04, 0x6d},
    {0x12, 0x4c, 0xf5, 0x40, 0xee},
    {0x05, 0x42, 0x03, 0x04, 0x6d},
    {0x15, 0x4c, 0xf5, 0x40, 0xee},
    {0x11, 0x43, 0x41, 0xb5, 0x8e},
    {0xc4, 0x4d, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x03, 0x04, 0x6d},
    {0x01, 0x43, 0x41, 0xb5, 0x8e},
    {0x08, 0x42, 0x0d, 0x42, 0x7f},
    {0xc3, 0x03, 0x44, 0xb5, 0xdd},
    {0xc1, 0x05, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x0d, 0x42, 0x7f},
    {0x04, 0x42, 0x03, 0x04, 0x6d},
    {0x02, 0x42, 0x03, 0x04, 0x6d},
    {0x07, 0x42, 0x03, 0x04, 0x6d},
    {0xdc, 0x47, 0xf5, 0x40, 0x0f},
    {0x03, 0x49, 0x02, 0xb5, 0xae},
    {0x0b, 0x46, 0x0a, 0xf5, 0x9e},
    {0x05, 0x49, 0x02, 0xb5, 0xae},
    {0x0c, 0x41, 0x4a, 0xb5, 0x9e},
    {0x09, 0x46, 0x0a, 0xf5, 0x9e},
    {0xda, 0x0b, 0x42, 0xf5, 0xdd},
    {0x06, 0x49, 0x02, 0xb5, 0xae},
    {0x14, 0x43, 0x4a, 0xf5, 0x9e},
    {0xc2, 0x0c, 0x42, 0xf5, 0xdd},
    {0x18, 0x43, 0x4a, 0xf5, 0x9e},
    {0x0e, 0x41, 0x4a, 0xb5, 0x9e},
    {0x1c, 0x43, 0x4a, 0xf5, 0x9e},
    {0x04, 0x49, 0x02, 0xb5, 0xae},
    {0x02, 0x49, 0x02, 0xb5, 0xae},
    {0x07, 0x49, 0x02, 0xb5, 0xae},
    {0x17, 0x43, 0x4a, 0xf5, 0x9e},
    {0x03, 0x43, 0x0b, 0x02, 0x6d},
    {0x1b, 0x43, 0x4a, 0xf5, 0x9e},
    {0x05, 0x43, 0x0b, 0x02, 0x6d},
    {0x68, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x41, 0x4a, 0xb5, 0x9e},
    {0xcd, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x0b, 0x02, 0x6d},
    {0x13, 0x43, 0x4a, 0xf5, 0x9e},
    {0x08, 0x46, 0x0a, 0xf5, 0x9e},
    {0x78, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0x0c, 0x42, 0xf5, 0xdd},
    {0x0a, 0x46, 0x0a, 0xf5, 0x9e},
    {0x04, 0x43, 0x0b, 0x02, 0x6d},
    {0x02, 0x43, 0x0b, 0x02, 0x6d},
    {0x07, 0x43, 0x0b, 0x02, 0x6d},
    {0x6e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x41, 0x03, 0x02, 0x7d},
    {0x0b, 0x43, 0x03, 0x42, 0x7d},
    {0x05, 0x41, 0x03, 0x02, 0x7d},
    {0x76, 0x07, 0xb5, 0x00, 0xdd},
    {0x09, 0x43, 0x03, 0x42, 0x7d},
    {0xc8, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x41, 0x03, 0x02, 0x7d},
    {0x64, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x09, 0x44, 0xb5, 0xdd},
    {0x74, 0x07, 0xb5, 0x00, 0xdd},
    {0x0f, 0x41, 0x4a, 0xb5, 0x9e},
    {0x40, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x41, 0x03, 0x02, 0x7d},
    {0x02, 0x41, 0x03, 0x02, 0x7d},
    {0x07, 0x41, 0x03, 0x02, 0x7d},
    {0x0d, 0x41, 0x4a, 0xb5, 0x9e},
    {0x03, 0x42, 0x0b, 0x02, 0x6d},
    {0xd9, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x0b, 0x02, 0x6d},
    {0x6c, 0x07, 0xb5, 0x00, 0xdd},
    {0x11, 0x41, 0x4a, 0xb5, 0x9e},
    {0xd5, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x0b, 0x02, 0x6d},
    {0x01, 0x41, 0x4a, 0xb5, 0x9e},
    {0x08, 0x43, 0x03, 0x42, 0x7d},
    {0xc3, 0x0b, 0x42, 0xf5, 0xdd},
    {0xc1, 0x09, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x0b, 0x02, 0x6d},
    {0x02, 0x42, 0x0b, 0x02, 0x6d},
    {0x07, 0x42, 0x0b, 0x02, 0x6d},
    {0x5e, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x45, 0x01, 0xb5, 0x8e},
    {0x0b, 0x44, 0x01, 0xf5, 0x8e},
    {0x05, 0x45, 0x01, 0xb5, 0x8e},
    {0x0c, 0x42, 0x41, 0xb5, 0x8e},
    {0x09, 0x44, 0x01, 0xf5, 0x8e},
    {0xda, 0x05, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x01, 0xb5, 0x8e},
    {0x62, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0xda, 0x47, 0xf5, 0x0f},
    {0x72, 0x07, 0xb5, 0x00, 0xdd},
    {0x0e, 0x42, 0x41, 0xb5, 0x8e},
    {0x7e, 0x07, 0xb5, 0x00, 0xdd},
    {0x04, 0x45, 0x01, 0xb5, 0x8e},
    {0x02, 0x45, 0x01, 0xb5, 0x8e},
    {0x07, 0x45, 0x01, 0xb5, 0x8e},
    {0x70, 0x07, 0xb5, 0x00, 0xdd},
    {0x03, 0x43, 0x05, 0x04, 0x6d},
    {0x7c, 0x07, 0xb5, 0x00, 0xdd},
    {0x05, 0x43, 0x05, 0x04, 0x6d},
    {0x6a, 0x07, 0xb5, 0x00, 0xdd},
    {0x10, 0x42, 0x41, 0xb5, 0x8e},
    {0xd1, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x05, 0x04, 0x6d},
    {0x60, 0x07, 0xb5, 0x00, 0xdd},
    {0x08, 0x44, 0x01, 0xf5, 0x8e},
    {0x7a, 0x07, 0xb5, 0x00, 0xdd},
    {0xc1, 0xda, 0x47, 0xf5, 0x0f},
    {0x0a, 0x44, 0x01, 0xf5, 0x8e},
    {0x04, 0x43, 0x05, 0x04, 0x6d},
    {0x02, 0x43, 0x05, 0x04, 0x6d},
    {0x07, 0x43, 0x05, 0x04, 0x6d},
    {0x16, 0x43, 0x4a, 0xf5, 0x9e},
    {0x03, 0x44, 0x03, 0x02, 0x7d},
    {0x0b, 0x42, 0x03, 0x42, 0x7d},
    {0x05, 0x44, 0x03, 0x02, 0x7d},
    {0x1a, 0x43, 0x4a, 0xf5, 0x9e},
    {0x09, 0x42, 0x03, 0x42, 0x7d},
    {0xca, 0x41, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x03, 0x02, 0x7d},
    {0x66, 0x07, 0xb5, 0x00, 0xdd},
    {0xc2, 0x06, 0x05, 0xf5, 0xdd},
    {0x19, 0x43, 0x4a, 0xf5, 0x9e},
    {0x0f, 0x42, 0x41, 0xb5, 0x8e},
    {0xc6, 0x41, 0xf5, 0x00, 0x0e},
    {0x04, 0x44, 0x03, 0x02, 0x7d},
    {0x02, 0x44, 0x03, 0x02, 0x7d},
    {0x07, 0x44, 0x03, 0x02, 0x7d},
    {0x0d, 0x42, 0x41, 0xb5, 0x8e},
    {0x03, 0x42, 0x05, 0x04, 0x6d},
    {0x12, 0x43, 0x4a, 0xf5, 0x9e},
    {0x05, 0x42, 0x05, 0x04, 0x6d},
    {0x15, 0x43, 0x4a, 0xf5, 0x9e},
    {0x11, 0x42, 0x41, 0xb5, 0x8e},
    {0xc4, 0x03, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x05, 0x04, 0x6d},
    {0x01, 0x42, 0x41, 0xb5, 0x8e},
    {0x08, 0x42, 0x03, 0x42, 0x7d},
    {0xc3, 0x05, 0x44, 0xb5, 0xdd},
    {0xc1, 0x06, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x03, 0x42, 0x7d},
    {0x04, 0x42, 0x05, 0x04, 0x6d},
    {0x02, 0x42, 0x05, 0x04, 0x6d},
    {0x07, 0x42, 0x05, 0x04, 0x6d},
    {0xf4, 0x4a, 0xf5, 0x00, 0x0e},
    {0x03, 0x4a, 0x07, 0xb5, 0xbf},
    {0x0b, 0x49, 0x07, 0xf5, 0xbf},
    {0x05, 0x4a, 0x07, 0xb5, 0xbf},
    {0x0c, 0x46, 0x42, 0xb5, 0xae},
    {0x09, 0x49, 0x07, 0xf5, 0xbf},
    {0xda, 0x5a, 0x02, 0xf5, 0xff},
    {0x06, 0x4a, 0x07, 0xb5, 0xbf},
    {0x14, 0x41, 0x42, 0xf5, 0xae},
    {0xc2, 0x62, 0x02, 0xf5, 0xff},
    {0x18, 0x41, 0x42, 0xf5, 0xae},
    {0x0e, 0x46, 0x42, 0xb5, 0xae},
    {0x1c, 0x41, 0x42, 0xf5, 0xae},
    {0x04, 0x4a, 0x07, 0xb5, 0xbf},
    {0x02, 0x4a, 0x07, 0xb5, 0xbf},
    {0x07, 0x4a, 0x07, 0xb5, 0xbf},
    {0x17, 0x41, 0x42, 0xf5, 0xae},
    {0x03, 0x43, 0x1a, 0x02, 0x6f},
    {0x1b, 0x41, 0x42, 0xf5, 0xae},
    {0x05, 0x43, 0x1a, 0x02, 0x6f},
    {0x67, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x46, 0x42, 0xb5, 0xae},
    {0xc9, 0x48, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x1a, 0x02, 0x6f},
    {0x13, 0x41, 0x42, 0xf5, 0xae},
    {0x08, 0x49, 0x07, 0xf5, 0xbf},
    {0x77, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x62, 0x02, 0xf5, 0xff},
    {0x0a, 0x49, 0x07, 0xf5, 0xbf},
    {0x04, 0x43, 0x1a, 0x02, 0x6f},
    {0x02, 0x43, 0x1a, 0x02, 0x6f},
    {0x07, 0x43, 0x1a, 0x02, 0x6f},
    {0x6d, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x12, 0xb5, 0x7e},
    {0x0b, 0x43, 0x12, 0xf5, 0x7e},
    {0x05, 0x41, 0x12, 0xb5, 0x7e},
    {0x75, 0x03, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x12, 0xf5, 0x7e},
    {0xc7, 0x48, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x12, 0xb5, 0x7e},
    {0x63, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0xc2, 0x42, 0xb5, 0x0e},
    {0x73, 0x03, 0x02, 0xb5, 0xae},
    {0x0f, 0x46, 0x42, 0xb5, 0xae},
    {0x7f, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x12, 0xb5, 0x7e},
    {0x02, 0x41, 0x12, 0xb5, 0x7e},
    {0x07, 0x41, 0x12, 0xb5, 0x7e},
    {0x0d, 0x46, 0x42, 0xb5, 0xae},
    {0x03, 0x42, 0x1a, 0x02, 0x6f},
    {0xd8, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x1a, 0x02, 0x6f},
    {0x6b, 0x03, 0x02, 0xb5, 0xae},
    {0x11, 0x46, 0x42, 0xb5, 0xae},
    {0xd4, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x1a, 0x02, 0x6f},
    {0x01, 0x46, 0x42, 0xb5, 0xae},
    {0x08, 0x43, 0x12, 0xf5, 0x7e},
    {0xc3, 0x5a, 0x02, 0xf5, 0xff},
    {0xc1, 0xc2, 0x42, 0xb5, 0x0e},
    {0x0a, 0x43, 0x12, 0xf5, 0x7e},
    {0x04, 0x42, 0x1a, 0x02, 0x6f},
    {0x02, 0x42, 0x1a, 0x02, 0x6f},
    {0x07, 0x42, 0x1a, 0x02, 0x6f},
    {0x5d, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x46, 0x08, 0x02, 0x8f},
    {0x0b, 0x41, 0x08, 0x42, 0x8f},
    {0x05, 0x46, 0x08, 0x02, 0x8f},
    {0x0c, 0x43, 0x48, 0x02, 0x8f},
    {0x09, 0x41, 0x08, 0x42, 0x8f},
    {0xda, 0x09, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x08, 0x02, 0x8f},
    {0x61, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x72, 0x02, 0xf5, 0xff},
    {0x71, 0x03, 0x02, 0xb5, 0xae},
    {0x0e, 0x43, 0x48, 0x02, 0x8f},
    {0x7d, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x46, 0x08, 0x02, 0x8f},
    {0x02, 0x46, 0x08, 0x02, 0x8f},
    {0x07, 0x46, 0x08, 0x02, 0x8f},
    {0x6f, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x09, 0x02, 0x6d},
    {0x7b, 0x03, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x09, 0x02, 0x6d},
    {0x69, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x43, 0x48, 0x02, 0x8f},
    {0xd0, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x09, 0x02, 0x6d},
    {0x5f, 0x03, 0x02, 0xb5, 0xae},
    {0x08, 0x41, 0x08, 0x42, 0x8f},
    {0x79, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x72, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x08, 0x42, 0x8f},
    {0x04, 0x43, 0x09, 0x02, 0x6d},
    {0x02, 0x43, 0x09, 0x02, 0x6d},
    {0x07, 0x43, 0x09, 0x02, 0x6d},
    {0x16, 0x41, 0x42, 0xf5, 0xae},
    {0x03, 0x44, 0x12, 0xb5, 0x7e},
    {0x0b, 0x42, 0x12, 0xf5, 0x7e},
    {0x05, 0x44, 0x12, 0xb5, 0x7e},
    {0x1a, 0x41, 0x42, 0xf5, 0xae},
    {0x09, 0x42, 0x12, 0xf5, 0x7e},
    {0xcc, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x44, 0x12, 0xb5, 0x7e},
    {0x65, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x0e, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0x42, 0xf5, 0xae},
    {0x0f, 0x43, 0x48, 0x02, 0x8f},
    {0xc5, 0x48, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x12, 0xb5, 0x7e},
    {0x02, 0x44, 0x12, 0xb5, 0x7e},
    {0x07, 0x44, 0x12, 0xb5, 0x7e},
    {0x0d, 0x43, 0x48, 0x02, 0x8f},
    {0x03, 0x42, 0x09, 0x02, 0x6d},
    {0x12, 0x41, 0x42, 0xf5, 0xae},
    {0x05, 0x42, 0x09, 0x02, 0x6d},
    {0x15, 0x41, 0x42, 0xf5, 0xae},
    {0x11, 0x43, 0x48, 0x02, 0x8f},
    {0xc4, 0x52, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x09, 0x02, 0x6d},
    {0x01, 0x43, 0x48, 0x02, 0x8f},
    {0x08, 0x42, 0x12, 0xf5, 0x7e},
    {0xc3, 0x09, 0x42, 0xf5, 0xdd},
    {0xc1, 0x0e, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0x12, 0xf5, 0x7e},
    {0x04, 0x42, 0x09, 0x02, 0x6d},
    {0x02, 0x42, 0x09, 0x02, 0x6d},
    {0x07, 0x42, 0x09, 0x02, 0x6d},
    {0xdd, 0x47, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x0a, 0xb5, 0x9e},
    {0x0b, 0x45, 0x0a, 0xf5, 0x9e},
    {0x05, 0x47, 0x0a, 0xb5, 0x9e},
    {0x0c, 0x44, 0x4a, 0xb5, 0x9e},
    {0x09, 0x45, 0x0a, 0xf5, 0x9e},
    {0x9a, 0x8a, 0xb5, 0x00, 0x0e},
    {0x06, 0x47, 0x0a, 0xb5, 0x9e},
    {0x14, 0x42, 0x4a, 0xf5, 0x9e},
    {0xc2, 0x7e, 0x02, 0xf5, 0xff},
    {0x18, 0x42, 0x4a, 0xf5, 0x9e},
    {0x0e, 0x44, 0x4a, 0xb5, 0x9e},
    {0x1c, 0x42, 0x4a, 0xf5, 0x9e},
    {0x04, 0x47, 0x0a, 0xb5, 0x9e},
    {0x02, 0x47, 0x0a, 0xb5, 0x9e},
    {0x07, 0x47, 0x0a, 0xb5, 0x9e},
    {0x17, 0x42, 0x4a, 0xf5, 0x9e},
    {0x03, 0x43, 0x8a, 0xb5, 0x6e},
    {0x1b, 0x42, 0x4a, 0xf5, 0x9e},
    {0x05, 0x43, 0x8a, 0xb5, 0x6e},
    {0x68, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x44, 0x4a, 0xb5, 0x9e},
    {0xce, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x8a, 0xb5, 0x6e},
    {0x13, 0x42, 0x4a, 0xf5, 0x9e},
    {0x08, 0x45, 0x0a, 0xf5, 0x9e},
    {0x78, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x7e, 0x02, 0xf5, 0xff},
    {0x0a, 0x45, 0x0a, 0xf5, 0x9e},
    {0x04, 0x43, 0x8a, 0xb5, 0x6e},
    {0x02, 0x43, 0x8a, 0xb5, 0x6e},
    {0x07, 0x43, 0x8a, 0xb5, 0x6e},
    {0x6e, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x05, 0x02, 0x7d},
    {0x0b, 0x43, 0x05, 0x42, 0x7d},
    {0x05, 0x41, 0x05, 0x02, 0x7d},
    {0x76, 0x03, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x05, 0x42, 0x7d},
    {0xc8, 0x48, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x05, 0x02, 0x7d},
    {0x64, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x04, 0x05, 0xf5, 0xdd},
    {0x74, 0x03, 0x02, 0xb5, 0xae},
    {0x0f, 0x44, 0x4a, 0xb5, 0x9e},
    {0x40, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x05, 0x02, 0x7d},
    {0x02, 0x41, 0x05, 0x02, 0x7d},
    {0x07, 0x41, 0x05, 0x02, 0x7d},
    {0x0d, 0x44, 0x4a, 0xb5, 0x9e},
    {0x03, 0x42, 0x8a, 0xb5, 0x6e},
    {0xdb, 0x4a, 0xf5, 0x00, 0x0e},
    {0x05, 0x42, 0x8a, 0xb5, 0x6e},
    {0x6c, 0x03, 0x02, 0xb5, 0xae},
    {0x11, 0x44, 0x4a, 0xb5, 0x9e},
    {0xd6, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x8a, 0xb5, 0x6e},
    {0x01, 0x44, 0x4a, 0xb5, 0x9e},
    {0x08, 0x43, 0x05, 0x42, 0x7d},
    {0x83, 0x8a, 0xb5, 0x00, 0x0e},
    {0xc1, 0x04, 0x05, 0xf5, 0xdd},
    {0x0a, 0x43, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x8a, 0xb5, 0x6e},
    {0x02, 0x42, 0x8a, 0xb5, 0x6e},
    {0x07, 0x42, 0x8a, 0xb5, 0x6e},
    {0x5e, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x45, 0x08, 0x02, 0x8f},
    {0x0b, 0x44, 0x08, 0x42, 0x8f},
    {0x05, 0x45, 0x08, 0x02, 0x8f},
    {0x0c, 0x42, 0x48, 0x02, 0x8f},
    {0x09, 0x44, 0x08, 0x42, 0x8f},
    {0xda, 0x06, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x08, 0x02, 0x8f},
    {0x62, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x02, 0x05, 0xf5, 0xdd},
    {0x72, 0x03, 0x02, 0xb5, 0xae},
    {0x0e, 0x42, 0x48, 0x02, 0x8f},
    {0x7e, 0x03, 0x02, 0xb5, 0xae},
    {0x04, 0x45, 0x08, 0x02, 0x8f},
    {0x02, 0x45, 0x08, 0x02, 0x8f},
    {0x07, 0x45, 0x08, 0x02, 0x8f},
    {0x70, 0x03, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x04, 0x6d},
    {0x7c, 0x03, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x04, 0x6d},
    {0x6a, 0x03, 0x02, 0xb5, 0xae},
    {0x10, 0x42, 0x48, 0x02, 0x8f},
    {0xd2, 0x4a, 0xf5, 0x00, 0x0e},
    {0x06, 0x43, 0x06, 0x04, 0x6d},
    {0x60, 0x03, 0x02, 0xb5, 0xae},
    {0x08, 0x44, 0x08, 0x42, 0x8f},
    {0x7a, 0x03, 0x02, 0xb5, 0xae},
    {0xc1, 0x02, 0x05, 0xf5, 0xdd},
    {0x0a, 0x44, 0x08, 0x42, 0x8f},
    {0x04, 0x43, 0x06, 0x04, 0x6d},
    {0x02, 0x43, 0x06, 0x04, 0x6d},
    {0x07, 0x43, 0x06, 0x04, 0x6d},
    {0x16, 0x42, 0x4a, 0xf5, 0x9e},
    {0x03, 0x44, 0x05, 0x02, 0x7d},
    {0x0b, 0x42, 0x05, 0x42, 0x7d},
    {0x05, 0x44, 0x05, 0x02, 0x7d},
    {0x1a, 0x42, 0x4a, 0xf5, 0x9e},
    {0x09, 0x42, 0x05, 0x42, 0x7d},
    {0xca, 0x48, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x05, 0x02, 0x7d},
    {0x66, 0x03, 0x02, 0xb5, 0xae},
    {0xc2, 0x07, 0x05, 0xf5, 0xdd},
    {0x19, 0x42, 0x4a, 0xf5, 0x9e},
    {0x0f, 0x42, 0x48, 0x02, 0x8f},
    {0xc6, 0x48, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x05, 0x02, 0x7d},
    {0x02, 0x44, 0x05, 0x02, 0x7d},
    {0x07, 0x44, 0x05, 0x02, 0x7d},
    {0x0d, 0x42, 0x48, 0x02, 0x8f},
    {0x03, 0x42, 0x06, 0x04, 0x6d},
    {0x12, 0x42, 0x4a, 0xf5, 0x9e},
    {0x05, 0x42, 0x06, 0x04, 0x6d},
    {0x15, 0x42, 0x4a, 0xf5, 0x9e},
    {0x11, 0x42, 0x48, 0x02, 0x8f},
    {0xc4, 0x05, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x06, 0x04, 0x6d},
    {0x01, 0x42, 0x48, 0x02, 0x8f},
    {0x08, 0x42, 0x05, 0x42, 0x7d},
    {0xc3, 0x06, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x05, 0xf5, 0xdd},
    {0x0a, 0x42, 0x05, 0x42, 0x7d},
    {0x04, 0x42, 0x06, 0x04, 0x6d},
    {0x02, 0x42, 0x06, 0x04, 0x6d},
    {0x07, 0x42, 0x06, 0x04, 0x6d},
    {0xf4, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x50, 0xb5, 0x00, 0xee},
    {0x0b, 0x4b, 0xb5, 0x40, 0xcc},
    {0x05, 0x50, 0xb5, 0x00, 0xee},
    {0x0c, 0x48, 0xf5, 0x00, 0xcc},
    {0x09, 0x4b, 0xb5, 0x40, 0xcc},
    {0xda, 0x66, 0xf5, 0x00, 0x0e},
    {0x06, 0x50, 0xb5, 0x00, 0xee},
    {0x14, 0x46, 0x47, 0xf5, 0xbf},
    {0xc2, 0x70, 0x02, 0xf5, 0xff},
    {0x18, 0x46, 0x47, 0xf5, 0xbf},
    {0x0e, 0x48, 0xf5, 0x00, 0xcc},
    {0x1c, 0x46, 0x47, 0xf5, 0xbf},
    {0x04, 0x50, 0xb5, 0x00, 0xee},
    {0x02, 0x50, 0xb5, 0x00, 0xee},
    {0x07, 0x50, 0xb5, 0x00, 0xee},
    {0x17, 0x46, 0x47, 0xf5, 0xbf},
    {0x03, 0x43, 0x26, 0xb5, 0x6e},
    {0x1b, 0x46, 0x47, 0xf5, 0xbf},
    {0x05, 0x43, 0x26, 0xb5, 0x6e},
    {0x67, 0x01, 0x07, 0xb5, 0xbf},
    {0x10, 0x48, 0xf5, 0x00, 0xcc},
    {0x89, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x43, 0x26, 0xb5, 0x6e},
    {0x13, 0x46, 0x47, 0xf5, 0xbf},
    {0x08, 0x4b, 0xb5, 0x40, 0xcc},
    {0x77, 0x01, 0x07, 0xb5, 0xbf},
    {0xc1, 0x70, 0x02, 0xf5, 0xff},
    {0x0a, 0x4b, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x26, 0xb5, 0x6e},
    {0x02, 0x43, 0x26, 0xb5, 0x6e},
    {0x07, 0x43, 0x26, 0xb5, 0x6e},
    {0x6d, 0x01, 0x07, 0xb5, 0xbf},
    {0x03, 0x41, 0x15, 0xb5, 0x7e},
    {0x0b, 0x43, 0x15, 0xf5, 0x7e},
    {0x05, 0x41, 0x15, 0xb5, 0x7e},
    {0x75, 0x01, 0x07, 0xb5, 0xbf},
    {0x09, 0x43, 0x15, 0xf5, 0x7e},
    {0x87, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x15, 0xb5, 0x7e},
    {0x63, 0x01, 0x07, 0xb5, 0xbf},
    {0xc2, 0x03, 0x03, 0x47, 0xbf},
    {0x73, 0x01, 0x07, 0xb5, 0xbf},
    {0x0f, 0x48, 0xf5, 0x00, 0xcc},
    {0x7f, 0x01, 0x07, 0xb5, 0xbf},
    {0x04, 0x41, 0x15, 0xb5, 0x7e},
    {0x02, 0x41, 0x15, 0xb5, 0x7e},
    {0x07, 0x41, 0x15, 0xb5, 0x7e},
    {0x0d, 0x48, 0xf5, 0x00, 0xcc},
    {0x03, 0x42, 0x26, 0xb5, 0x6e},
    {0xd7, 0x44, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x26, 0xb5, 0x6e},
    {0x6b, 0x01, 0x07, 0xb5, 0xbf},
    {0x11, 0x48, 0xf5, 0x00, 0xcc},
    {0xd3, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x26, 0xb5, 0x6e},
    {0x01, 0x48, 0xf5, 0x00, 0xcc},
    {0x08, 0x43, 0x15, 0xf5, 0x7e},
    {0xc3, 0x66, 0xf5, 0x00, 0x0e},
    {0xc1, 0x03, 0x03, 0x47, 0xbf},
    {0x0a, 0x43, 0x15, 0xf5, 0x7e},
    {0x04, 0x42, 0x26, 0xb5, 0x6e},
    {0x02, 0x42, 0x26, 0xb5, 0x6e},
    {0x07, 0x42, 0x26, 0xb5, 0x6e},
    {0x5d, 0x01, 0x07, 0xb5, 0xbf},
    {0x03, 0x46, 0x83, 0xb5, 0x8e},
    {0x0b, 0x41, 0x83, 0xf5, 0x8e},
    {0x05, 0x46, 0x83, 0xb5, 0x8e},
    {0x0c, 0x43, 0xc3, 0xb5, 0x8e},
    {0x09, 0x41, 0x83, 0xf5, 0x8e},
    {0xda, 0xc2, 0x47, 0xf5, 0x0f},
    {0x06, 0x46, 0x83, 0xb5, 0x8e},
    {0x61, 0x01, 0x07, 0xb5, 0xbf},
    {0xc2, 0x7c, 0x02, 0xf5, 0xff},
    {0x71, 0x01, 0x07, 0xb5, 0xbf},
    {0x0e, 0x43, 0xc3, 0xb5, 0x8e},
    {0x7d, 0x01, 0x07, 0xb5, 0xbf},
    {0x04, 0x46, 0x83, 0xb5, 0x8e},
    {0x02, 0x46, 0x83, 0xb5, 0x8e},
    {0x07, 0x46, 0x83, 0xb5, 0x8e},
    {0x6f, 0x01, 0x07, 0xb5, 0xbf},
    {0x03, 0x43, 0x82, 0x07, 0x6f},
    {0x7b, 0x01, 0x07, 0xb5, 0xbf},
    {0x05, 0x43, 0x82, 0x07, 0x6f},
    {0x69, 0x01, 0x07, 0xb5, 0xbf},
    {0x10, 0x43, 0xc3, 0xb5, 0x8e},
    {0xcf, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x82, 0x07, 0x6f},
    {0x5f, 0x01, 0x07, 0xb5, 0xbf},
    {0x08, 0x41, 0x83, 0xf5, 0x8e},
    {0x79, 0x01, 0x07, 0xb5, 0xbf},
    {0xc1, 0x7c, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x83, 0xf5, 0x8e},
    {0x04, 0x43, 0x82, 0x07, 0x6f},
    {0x02, 0x43, 0x82, 0x07, 0x6f},
    {0x07, 0x43, 0x82, 0x07, 0x6f},
    {0x16, 0x46, 0x47, 0xf5, 0xbf},
    {0x03, 0x44, 0x15, 0xb5, 0x7e},
    {0x0b, 0x42, 0x15, 0xf5, 0x7e},
    {0x05, 0x44, 0x15, 0xb5, 0x7e},
    {0x1a, 0x46, 0x47, 0xf5, 0xbf},
    {0x09, 0x42, 0x15, 0xf5, 0x7e},
    {0xcb, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x15, 0xb5, 0x7e},
    {0x65, 0x01, 0x07, 0xb5, 0xbf},
    {0xc2, 0x05, 0x03, 0x47, 0xbf},
    {0x19, 0x46, 0x47, 0xf5, 0xbf},
    {0x0f, 0x43, 0xc3, 0xb5, 0x8e},
    {0x85, 0x83, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x15, 0xb5, 0x7e},
    {0x02, 0x44, 0x15, 0xb5, 0x7e},
    {0x07, 0x44, 0x15, 0xb5, 0x7e},
    {0x0d, 0x43, 0xc3, 0xb5, 0x8e},
    {0x03, 0x42, 0x82, 0x07, 0x6f},
    {0x12, 0x46, 0x47, 0xf5, 0xbf},
    {0x05, 0x42, 0x82, 0x07, 0x6f},
    {0x15, 0x46, 0x47, 0xf5, 0xbf},
    {0x11, 0x43, 0xc3, 0xb5, 0x8e},
    {0xc4, 0x55, 0xf5, 0x00, 0x0e},
    {0x06, 0x42, 0x82, 0x07, 0x6f},
    {0x01, 0x43, 0xc3, 0xb5, 0x8e},
    {0x08, 0x42, 0x15, 0xf5, 0x7e},
    {0xc3, 0xc2, 0x47, 0xf5, 0x0f},
    {0xc1, 0x05, 0x03, 0x47, 0xbf},
    {0x0a, 0x42, 0x15, 0xf5, 0x7e},
    {0x04, 0x42, 0x82, 0x07, 0x6f},
    {0x02, 0x42, 0x82, 0x07, 0x6f},
    {0x07, 0x42, 0x82, 0x07, 0x6f},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x02, 0xb5, 0xae},
    {0x0b, 0x46, 0x04, 0x42, 0x9f},
    {0x05, 0x48, 0x02, 0xb5, 0xae},
    {0x0c, 0x41, 0x44, 0x02, 0x9f},
    {0x09, 0x46, 0x04, 0x42, 0x9f},
    {0xda, 0x59, 0x02, 0xf5, 0xff},
    {0x06, 0x48, 0x02, 0xb5, 0xae},
    {0x14, 0x43, 0x44, 0x42, 0x9f},
    {0xc2, 0x6a, 0x02, 0xf5, 0xff},
    {0x18, 0x43, 0x44, 0x42, 0x9f},
    {0x0e, 0x41, 0x44, 0x02, 0x9f},
    {0x1c, 0x43, 0x44, 0x42, 0x9f},
    {0x04, 0x48, 0x02, 0xb5, 0xae},
    {0x02, 0x48, 0x02, 0xb5, 0xae},
    {0x07, 0x48, 0x02, 0xb5, 0xae},
    {0x17, 0x43, 0x44, 0x42, 0x9f},
    {0x03, 0x43, 0x19, 0x02, 0x6f},
    {0x1b, 0x43, 0x44, 0x42, 0x9f},
    {0x05, 0x43, 0x19, 0x02, 0x6f},
    {0x68, 0x01, 0x07, 0xb5, 0xbf},
    {0x10, 0x41, 0x44, 0x02, 0x9f},
    {0xcd, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x19, 0x02, 0x6f},
    {0x13, 0x43, 0x44, 0x42, 0x9f},
    {0x08, 0x46, 0x04, 0x42, 0x9f},
    {0x78, 0x01, 0x07, 0xb5, 0xbf},
    {0xc1, 0x6a, 0x02, 0xf5, 0xff},
    {0x0a, 0x46, 0x04, 0x42, 0x9f},
    {0x04, 0x43, 0x19, 0x02, 0x6f},
    {0x02, 0x43, 0x19, 0x02, 0x6f},
    {0x07, 0x43, 0x19, 0x02, 0x6f},
    {0x6e, 0x01, 0x07, 0xb5, 0xbf},
    {0x03, 0x41, 0x11, 0x02, 0x7f},
    {0x0b, 0x43, 0x11, 0x42, 0x7f},
    {0x05, 0x41, 0x11, 0x02, 0x7f},
    {0x76, 0x01, 0x07, 0xb5, 0xbf},
    {0x09, 0x43, 0x11, 0x42, 0x7f},
    {0x88, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x41, 0x11, 0x02, 0x7f},
    {0x64, 0x01, 0x07, 0xb5, 0xbf},
    {0xc2, 0x10, 0x42, 0xf5, 0xdd},
    {0x74, 0x01, 0x07, 0xb5, 0xbf},
    {0x0f, 0x41, 0x44, 0x02, 0x9f},
    {0x40, 0x01, 0x07, 0xb5, 0xbf},
    {0x04, 0x41, 0x11, 0x02, 0x7f},
    {0x02, 0x41, 0x11, 0x02, 0x7f},
    {0x07, 0x41, 0x11, 0x02, 0x7f},
    {0x0d, 0x41, 0x44, 0x02, 0x9f},
    {0x03, 0x42, 0x19, 0x02, 0x6f},
    {0xd9, 0x44, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x19, 0x02, 0x6f},
    {0x6c, 0x01, 0x07, 0xb5, 0xbf},
    {0x11, 0x41, 0x44, 0x02, 0x9f},
    {0xd5, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x19, 0x02, 0x6f},
    {0x01, 0x41, 0x44, 0x02, 0x9f},
    {0x08, 0x43, 0x11, 0x42, 0x7f},
    {0xc3, 0x59, 0x02, 0xf5, 0xff},
    {0xc1, 0x10, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x11, 0x42, 0x7f},
    {0x04, 0x42, 0x19, 0x02, 0x6f},
    {0x02, 0x42, 0x19, 0x02, 0x6f},
    {0x07, 0x42, 0x19, 0x02, 0x6f},
    {0x5e, 0x01, 0x07, 0xb5, 0xbf},
    {0x03, 0x45, 0x83, 0xb5, 0x8e},
    {0x0b, 0x44, 0x83, 0xf5, 0x8e},
    {0x05, 0x45, 0x83, 0xb5, 0x8e},
    {0x0c, 0x42, 0xc3, 0xb5, 0x8e},
    {0x09, 0x44, 0x83, 0xf5, 0x8e},
    {0xda, 0x4f, 0x02, 0xb5, 0xee},
    {0x06, 0x45, 0x83, 0xb5, 0x8e},
    {0x62, 0x01, 0x07, 0xb5, 0xbf},
    {0x82, 0x92, 0xb5, 0x00, 0x0e},
    {0x72, 0x01, 0x07, 0xb5, 0xbf},
    {0x0e, 0x42, 0xc3, 0xb5, 0x8e},
    {0x7e, 0x01, 0x07, 0xb5, 0xbf},
    {0x04, 0x45, 0x83, 0xb5, 0x8e},
    {0x02, 0x45, 0x83, 0xb5, 0x8e},
    {0x07, 0x45, 0x83, 0xb5, 0x8e},
    {0x70, 0x01, 0x07, 0xb5, 0xbf},
    {0x03, 0x43, 0x0f, 0x02, 0x6e},
    {0x7c, 0x01, 0x07, 0xb5, 0xbf},
    {0x05, 0x43, 0x0f, 0x02, 0x6e},
    {0x6a, 0x01, 0x07, 0xb5, 0xbf},
    {0x10, 0x42, 0xc3, 0xb5, 0x8e},
    {0xd1, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x0f, 0x02, 0x6e},
    {0x60, 0x01, 0x07, 0xb5, 0xbf},
    {0x08, 0x44, 0x83, 0xf5, 0x8e},
    {0x7a, 0x01, 0x07, 0xb5, 0xbf},
    {0x81, 0x92, 0xb5, 0x00, 0x0e},
    {0x0a, 0x44, 0x83, 0xf5, 0x8e},
    {0x04, 0x43, 0x0f, 0x02, 0x6e},
    {0x02, 0x43, 0x0f, 0x02, 0x6e},
    {0x07, 0x43, 0x0f, 0x02, 0x6e},
    {0x16, 0x43, 0x44, 0x42, 0x9f},
    {0x03, 0x44, 0x11, 0x02, 0x7f},
    {0x0b, 0x42, 0x11, 0x42, 0x7f},
    {0x05, 0x44, 0x11, 0x02, 0x7f},
    {0x1a, 0x43, 0x44, 0x42, 0x9f},
    {0x09, 0x42, 0x11, 0x42, 0x7f},
    {0x8a, 0x83, 0xb5, 0x00, 0x0e},
    {0x06, 0x44, 0x11, 0x02, 0x7f},
    {0x66, 0x01, 0x07, 0xb5, 0xbf},
    {0xc2, 0x06, 0x03, 0x47, 0xbf},
    {0x19, 0x43, 0x44, 0x42, 0x9f},
    {0x0f, 0x42, 0xc3, 0xb5, 0x8e},
    {0x86, 0x83, 0xb5, 0x00, 0x0e},
    {0x04, 0x44, 0x11, 0x02, 0x7f},
    {0x02, 0x44, 0x11, 0x02, 0x7f},
    {0x07, 0x44, 0x11, 0x02, 0x7f},
    {0x0d, 0x42, 0xc3, 0xb5, 0x8e},
    {0x03, 0x42, 0x0f, 0x02, 0x6e},
    {0x12, 0x43, 0x44, 0x42, 0x9f},
    {0x05, 0x42, 0x0f, 0x02, 0x6e},
    {0x15, 0x43, 0x44, 0x42, 0x9f},
    {0x11, 0x42, 0xc3, 0xb5, 0x8e},
    {0xc4, 0x51, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x0f, 0x02, 0x6e},
    {0x01, 0x42, 0xc3, 0xb5, 0x8e},
    {0x08, 0x42, 0x11, 0x42, 0x7f},
    {0xc3, 0x4f, 0x02, 0xb5, 0xee},
    {0xc1, 0x06, 0x03, 0x47, 0xbf},
    {0x0a, 0x42, 0x11, 0x42, 0x7f},
    {0x04, 0x42, 0x0f, 0x02, 0x6e},
    {0x02, 0x42, 0x0f, 0x02, 0x6e},
    {0x07, 0x42, 0x0f, 0x02, 0x6e},
    {0xf4, 0x44, 0x02, 0xf5, 0xff},
    {0x03, 0x40, 0xb5, 0x00, 0xee},
    {0x0b, 0x47, 0x02, 0xf5, 0xae},
    {0x05, 0x40, 0xb5, 0x00, 0xee},
    {0x0c, 0x45, 0x42, 0xb5, 0xae},
    {0x09, 0x47, 0x02, 0xf5, 0xae},
    {0x9a, 0x86, 0xb5, 0x00, 0x0e},
    {0x06, 0x40, 0xb5, 0x00, 0xee},
    {0x14, 0x44, 0x42, 0xf5, 0xae},
    {0xc2, 0x60, 0x02, 0xf5, 0xff},
    {0x18, 0x44, 0x42, 0xf5, 0xae},
    {0x0e, 0x45, 0x42, 0xb5, 0xae},
    {0x1c, 0x44, 0x42, 0xf5, 0xae},
    {0x04, 0x40, 0xb5, 0x00, 0xee},
    {0x02, 0x40, 0xb5, 0x00, 0xee},
    {0x07, 0x40, 0xb5, 0x00, 0xee},
    {0x17, 0x44, 0x42, 0xf5, 0xae},
    {0x03, 0x43, 0x86, 0xb5, 0x6e},
    {0x1b, 0x44, 0x42, 0xf5, 0xae},
    {0x05, 0x43, 0x86, 0xb5, 0x6e},
    {0x67, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x45, 0x42, 0xb5, 0xae},
    {0x89, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x43, 0x86, 0xb5, 0x6e},
    {0x13, 0x44, 0x42, 0xf5, 0xae},
    {0x08, 0x47, 0x02, 0xf5, 0xae},
    {0x77, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x60, 0x02, 0xf5, 0xff},
    {0x0a, 0x47, 0x02, 0xf5, 0xae},
    {0x04, 0x43, 0x86, 0xb5, 0x6e},
    {0x02, 0x43, 0x86, 0xb5, 0x6e},
    {0x07, 0x43, 0x86, 0xb5, 0x6e},
    {0x6d, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x84, 0xb5, 0x7e},
    {0x0b, 0x43, 0x84, 0xf5, 0x7e},
    {0x05, 0x41, 0x84, 0xb5, 0x7e},
    {0x75, 0x02, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x84, 0xf5, 0x7e},
    {0x87, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x84, 0xb5, 0x7e},
    {0x63, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x08, 0x44, 0xb5, 0xdd},
    {0x73, 0x02, 0x02, 0xb5, 0xae},
    {0x0f, 0x45, 0x42, 0xb5, 0xae},
    {0x7f, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x84, 0xb5, 0x7e},
    {0x02, 0x41, 0x84, 0xb5, 0x7e},
    {0x07, 0x41, 0x84, 0xb5, 0x7e},
    {0x0d, 0x45, 0x42, 0xb5, 0xae},
    {0x03, 0x42, 0x86, 0xb5, 0x6e},
    {0xd8, 0x44, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x86, 0xb5, 0x6e},
    {0x6b, 0x02, 0x02, 0xb5, 0xae},
    {0x11, 0x45, 0x42, 0xb5, 0xae},
    {0xd4, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x86, 0xb5, 0x6e},
    {0x01, 0x45, 0x42, 0xb5, 0xae},
    {0x08, 0x43, 0x84, 0xf5, 0x7e},
    {0x83, 0x86, 0xb5, 0x00, 0x0e},
    {0xc1, 0x08, 0x44, 0xb5, 0xdd},
    {0x0a, 0x43, 0x84, 0xf5, 0x7e},
    {0x04, 0x42, 0x86, 0xb5, 0x6e},
    {0x02, 0x42, 0x86, 0xb5, 0x6e},
    {0x07, 0x42, 0x86, 0xb5, 0x6e},
    {0x5d, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x46, 0x81, 0xb5, 0x8d},
    {0x0b, 0x41, 0x81, 0xf5, 0x8d},
    {0x05, 0x46, 0x81, 0xb5, 0x8d},
    {0x0c, 0x43, 0xc1, 0xb5, 0x8d},
    {0x09, 0x41, 0x81, 0xf5, 0x8d},
    {0xda, 0x04, 0x44, 0xb5, 0xdd},
    {0x06, 0x46, 0x81, 0xb5, 0x8d},
    {0x61, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x7a, 0x02, 0xf5, 0xff},
    {0x71, 0x02, 0x02, 0xb5, 0xae},
    {0x0e, 0x43, 0xc1, 0xb5, 0x8d},
    {0x7d, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x46, 0x81, 0xb5, 0x8d},
    {0x02, 0x46, 0x81, 0xb5, 0x8d},
    {0x07, 0x46, 0x81, 0xb5, 0x8d},
    {0x6f, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x04, 0x6d},
    {0x7b, 0x02, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x04, 0x6d},
    {0x69, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x43, 0xc1, 0xb5, 0x8d},
    {0xd0, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x04, 0x6d},
    {0x5f, 0x02, 0x02, 0xb5, 0xae},
    {0x08, 0x41, 0x81, 0xf5, 0x8d},
    {0x79, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x7a, 0x02, 0xf5, 0xff},
    {0x0a, 0x41, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x04, 0x04, 0x6d},
    {0x02, 0x43, 0x04, 0x04, 0x6d},
    {0x07, 0x43, 0x04, 0x04, 0x6d},
    {0x16, 0x44, 0x42, 0xf5, 0xae},
    {0x03, 0x44, 0x84, 0xb5, 0x7e},
    {0x0b, 0x42, 0x84, 0xf5, 0x7e},
    {0x05, 0x44, 0x84, 0xb5, 0x7e},
    {0x1a, 0x44, 0x42, 0xf5, 0xae},
    {0x09, 0x42, 0x84, 0xf5, 0x7e},
    {0xcc, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x84, 0xb5, 0x7e},
    {0x65, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0xc1, 0x42, 0xb5, 0x0e},
    {0x19, 0x44, 0x42, 0xf5, 0xae},
    {0x0f, 0x43, 0xc1, 0xb5, 0x8d},
    {0x85, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x84, 0xb5, 0x7e},
    {0x02, 0x44, 0x84, 0xb5, 0x7e},
    {0x07, 0x44, 0x84, 0xb5, 0x7e},
    {0x0d, 0x43, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x04, 0x04, 0x6d},
    {0x12, 0x44, 0x42, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x04, 0x6d},
    {0x15, 0x44, 0x42, 0xf5, 0xae},
    {0x11, 0x43, 0xc1, 0xb5, 0x8d},
    {0x84, 0x84, 0xb5, 0x00, 0x0e},
    {0x06, 0x42, 0x04, 0x04, 0x6d},
    {0x01, 0x43, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0x84, 0xf5, 0x7e},
    {0xc3, 0x04, 0x44, 0xb5, 0xdd},
    {0xc1, 0xc1, 0x42, 0xb5, 0x0e},
    {0x0a, 0x42, 0x84, 0xf5, 0x7e},
    {0x04, 0x42, 0x04, 0x04, 0x6d},
    {0x02, 0x42, 0x04, 0x04, 0x6d},
    {0x07, 0x42, 0x04, 0x04, 0x6d},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x04, 0x02, 0x9f},
    {0x0b, 0x45, 0x04, 0x42, 0x9f},
    {0x05, 0x47, 0x04, 0x02, 0x9f},
    {0x0c, 0x44, 0x44, 0x02, 0x9f},
    {0x09, 0x45, 0x04, 0x42, 0x9f},
    {0xda, 0x02, 0x44, 0xb5, 0xdd},
    {0x06, 0x47, 0x04, 0x02, 0x9f},
    {0x14, 0x42, 0x44, 0x42, 0x9f},
    {0xc2, 0x0a, 0x44, 0xb5, 0xdd},
    {0x18, 0x42, 0x44, 0x42, 0x9f},
    {0x0e, 0x44, 0x44, 0x02, 0x9f},
    {0x1c, 0x42, 0x44, 0x42, 0x9f},
    {0x04, 0x47, 0x04, 0x02, 0x9f},
    {0x02, 0x47, 0x04, 0x02, 0x9f},
    {0x07, 0x47, 0x04, 0x02, 0x9f},
    {0x17, 0x42, 0x44, 0x42, 0x9f},
    {0x03, 0x43, 0x02, 0x04, 0x6d},
    {0x1b, 0x42, 0x44, 0x42, 0x9f},
    {0x05, 0x43, 0x02, 0x04, 0x6d},
    {0x68, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x44, 0x44, 0x02, 0x9f},
    {0xce, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x04, 0x6d},
    {0x13, 0x42, 0x44, 0x42, 0x9f},
    {0x08, 0x45, 0x04, 0x42, 0x9f},
    {0x78, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x0a, 0x44, 0xb5, 0xdd},
    {0x0a, 0x45, 0x04, 0x42, 0x9f},
    {0x04, 0x43, 0x02, 0x04, 0x6d},
    {0x02, 0x43, 0x02, 0x04, 0x6d},
    {0x07, 0x43, 0x02, 0x04, 0x6d},
    {0x6e, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x41, 0x06, 0x02, 0x7d},
    {0x0b, 0x43, 0x06, 0x42, 0x7d},
    {0x05, 0x41, 0x06, 0x02, 0x7d},
    {0x76, 0x02, 0x02, 0xb5, 0xae},
    {0x09, 0x43, 0x06, 0x42, 0x7d},
    {0x88, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x41, 0x06, 0x02, 0x7d},
    {0x64, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x04, 0x03, 0x47, 0xbf},
    {0x74, 0x02, 0x02, 0xb5, 0xae},
    {0x0f, 0x44, 0x44, 0x02, 0x9f},
    {0x40, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x41, 0x06, 0x02, 0x7d},
    {0x02, 0x41, 0x06, 0x02, 0x7d},
    {0x07, 0x41, 0x06, 0x02, 0x7d},
    {0x0d, 0x44, 0x44, 0x02, 0x9f},
    {0x03, 0x42, 0x02, 0x04, 0x6d},
    {0xdb, 0x44, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x04, 0x6d},
    {0x6c, 0x02, 0x02, 0xb5, 0xae},
    {0x11, 0x44, 0x44, 0x02, 0x9f},
    {0xd6, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x04, 0x6d},
    {0x01, 0x44, 0x44, 0x02, 0x9f},
    {0x08, 0x43, 0x06, 0x42, 0x7d},
    {0xc3, 0x02, 0x44, 0xb5, 0xdd},
    {0xc1, 0x04, 0x03, 0x47, 0xbf},
    {0x0a, 0x43, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x04, 0x6d},
    {0x02, 0x42, 0x02, 0x04, 0x6d},
    {0x07, 0x42, 0x02, 0x04, 0x6d},
    {0x5e, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x45, 0x81, 0xb5, 0x8d},
    {0x0b, 0x44, 0x81, 0xf5, 0x8d},
    {0x05, 0x45, 0x81, 0xb5, 0x8d},
    {0x0c, 0x42, 0xc1, 0xb5, 0x8d},
    {0x09, 0x44, 0x81, 0xf5, 0x8d},
    {0xda, 0x07, 0x44, 0xb5, 0xdd},
    {0x06, 0x45, 0x81, 0xb5, 0x8d},
    {0x62, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x02, 0x03, 0x47, 0xbf},
    {0x72, 0x02, 0x02, 0xb5, 0xae},
    {0x0e, 0x42, 0xc1, 0xb5, 0x8d},
    {0x7e, 0x02, 0x02, 0xb5, 0xae},
    {0x04, 0x45, 0x81, 0xb5, 0x8d},
    {0x02, 0x45, 0x81, 0xb5, 0x8d},
    {0x07, 0x45, 0x81, 0xb5, 0x8d},
    {0x70, 0x02, 0x02, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x04, 0x6d},
    {0x7c, 0x02, 0x02, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x04, 0x6d},
    {0x6a, 0x02, 0x02, 0xb5, 0xae},
    {0x10, 0x42, 0xc1, 0xb5, 0x8d},
    {0xd2, 0x44, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x04, 0x6d},
    {0x60, 0x02, 0x02, 0xb5, 0xae},
    {0x08, 0x44, 0x81, 0xf5, 0x8d},
    {0x7a, 0x02, 0x02, 0xb5, 0xae},
    {0xc1, 0x02, 0x03, 0x47, 0xbf},
    {0x0a, 0x44, 0x81, 0xf5, 0x8d},
    {0x04, 0x43, 0x07, 0x04, 0x6d},
    {0x02, 0x43, 0x07, 0x04, 0x6d},
    {0x07, 0x43, 0x07, 0x04, 0x6d},
    {0x16, 0x42, 0x44, 0x42, 0x9f},
    {0x03, 0x44, 0x06, 0x02, 0x7d},
    {0x0b, 0x42, 0x06, 0x42, 0x7d},
    {0x05, 0x44, 0x06, 0x02, 0x7d},
    {0x1a, 0x42, 0x44, 0x42, 0x9f},
    {0x09, 0x42, 0x06, 0x42, 0x7d},
    {0x8a, 0x81, 0xb5, 0x00, 0x0d},
    {0x06, 0x44, 0x06, 0x02, 0x7d},
    {0x66, 0x02, 0x02, 0xb5, 0xae},
    {0xc2, 0x07, 0x03, 0x47, 0xbf},
    {0x19, 0x42, 0x44, 0x42, 0x9f},
    {0x0f, 0x42, 0xc1, 0xb5, 0x8d},
    {0x86, 0x81, 0xb5, 0x00, 0x0d},
    {0x04, 0x44, 0x06, 0x02, 0x7d},
    {0x02, 0x44, 0x06, 0x02, 0x7d},
    {0x07, 0x44, 0x06, 0x02, 0x7d},
    {0x0d, 0x42, 0xc1, 0xb5, 0x8d},
    {0x03, 0x42, 0x07, 0x04, 0x6d},
    {0x12, 0x42, 0x44, 0x42, 0x9f},
    {0x05, 0x42, 0x07, 0x04, 0x6d},
    {0x15, 0x42, 0x44, 0x42, 0x9f},
    {0x11, 0x42, 0xc1, 0xb5, 0x8d},
    {0xc4, 0x06, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x04, 0x6d},
    {0x01, 0x42, 0xc1, 0xb5, 0x8d},
    {0x08, 0x42, 0x06, 0x42, 0x7d},
    {0xc3, 0x07, 0x44, 0xb5, 0xdd},
    {0xc1, 0x07, 0x03, 0x47, 0xbf},
    {0x0a, 0x42, 0x06, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x04, 0x6d},
    {0x02, 0x42, 0x07, 0x04, 0x6d},
    {0x07, 0x42, 0x07, 0x04, 0x6d},
    {0xf4, 0x47, 0xf5, 0x40, 0x0f},
    {0x03, 0xc1, 0xb5, 0x00, 0x0e},
    {0x0b, 0x4e, 0xb5, 0x40, 0xdd},
    {0x05, 0xc1, 0xb5, 0x00, 0x0e},
    {0x0c, 0x4c, 0xf5, 0x00, 0xdd},
    {0x09, 0x4e, 0xb5, 0x40, 0xdd},
    {0xda, 0x4d, 0x02, 0xb5, 0xee},
    {0x06, 0xc1, 0xb5, 0x00, 0x0e},
    {0x14, 0x47, 0xf5, 0x40, 0xcc},
    {0xc2, 0x56, 0x02, 0xb5, 0xee},
    {0x18, 0x47, 0xf5, 0x40, 0xcc},
    {0x0e, 0x4c, 0xf5, 0x00, 0xdd},
    {0x1c, 0x47, 0xf5, 0x40, 0xcc},
    {0x04, 0xc1, 0xb5, 0x00, 0x0e},
    {0x02, 0xc1, 0xb5, 0x00, 0x0e},
    {0x07, 0xc1, 0xb5, 0x00, 0x0e},
    {0x17, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x43, 0x0d, 0x02, 0x6e},
    {0x1b, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x43, 0x0d, 0x02, 0x6e},
    {0x67, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x4c, 0xf5, 0x00, 0xdd},
    {0xc9, 0x4a, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x0d, 0x02, 0x6e},
    {0x13, 0x47, 0xf5, 0x40, 0xcc},
    {0x08, 0x4e, 0xb5, 0x40, 0xdd},
    {0x77, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x56, 0x02, 0xb5, 0xee},
    {0x0a, 0x4e, 0xb5, 0x40, 0xdd},
    {0x04, 0x43, 0x0d, 0x02, 0x6e},
    {0x02, 0x43, 0x0d, 0x02, 0x6e},
    {0x07, 0x43, 0x0d, 0x02, 0x6e},
    {0x6d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x01, 0x02, 0x7f},
    {0x0b, 0x43, 0x01, 0x42, 0x7f},
    {0x05, 0x41, 0x01, 0x02, 0x7f},
    {0x75, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x01, 0x42, 0x7f},
    {0xc7, 0x4a, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x01, 0x02, 0x7f},
    {0x63, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x03, 0x04, 0xf5, 0xcc},
    {0x73, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x4c, 0xf5, 0x00, 0xdd},
    {0x7f, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x01, 0x02, 0x7f},
    {0x02, 0x41, 0x01, 0x02, 0x7f},
    {0x07, 0x41, 0x01, 0x02, 0x7f},
    {0x0d, 0x4c, 0xf5, 0x00, 0xdd},
    {0x03, 0x42, 0x0d, 0x02, 0x6e},
    {0xd7, 0x42, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x0d, 0x02, 0x6e},
    {0x6b, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x4c, 0xf5, 0x00, 0xdd},
    {0xd3, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x0d, 0x02, 0x6e},
    {0x01, 0x4c, 0xf5, 0x00, 0xdd},
    {0x08, 0x43, 0x01, 0x42, 0x7f},
    {0xc3, 0x4d, 0x02, 0xb5, 0xee},
    {0xc1, 0x03, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x01, 0x42, 0x7f},
    {0x04, 0x42, 0x0d, 0x02, 0x6e},
    {0x02, 0x42, 0x0d, 0x02, 0x6e},
    {0x07, 0x42, 0x0d, 0x02, 0x6e},
    {0x5d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x46, 0x0a, 0x02, 0x8f},
    {0x0b, 0x41, 0x0a, 0x42, 0x8f},
    {0x05, 0x46, 0x0a, 0x02, 0x8f},
    {0x0c, 0x43, 0x4a, 0x02, 0x8f},
    {0x09, 0x41, 0x0a, 0x42, 0x8f},
    {0xda, 0x03, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x0a, 0x02, 0x8f},
    {0x61, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x0b, 0x42, 0xb5, 0xcc},
    {0x71, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x43, 0x4a, 0x02, 0x8f},
    {0x7d, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x46, 0x0a, 0x02, 0x8f},
    {0x02, 0x46, 0x0a, 0x02, 0x8f},
    {0x07, 0x46, 0x0a, 0x02, 0x8f},
    {0x6f, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x03, 0x02, 0x6c},
    {0x7b, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x03, 0x02, 0x6c},
    {0x69, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x43, 0x4a, 0x02, 0x8f},
    {0xcf, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x03, 0x02, 0x6c},
    {0x5f, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x41, 0x0a, 0x42, 0x8f},
    {0x79, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x0b, 0x42, 0xb5, 0xcc},
    {0x0a, 0x41, 0x0a, 0x42, 0x8f},
    {0x04, 0x43, 0x03, 0x02, 0x6c},
    {0x02, 0x43, 0x03, 0x02, 0x6c},
    {0x07, 0x43, 0x03, 0x02, 0x6c},
    {0x16, 0x47, 0xf5, 0x40, 0xcc},
    {0x03, 0x44, 0x01, 0x02, 0x7f},
    {0x0b, 0x42, 0x01, 0x42, 0x7f},
    {0x05, 0x44, 0x01, 0x02, 0x7f},
    {0x1a, 0x47, 0xf5, 0x40, 0xcc},
    {0x09, 0x42, 0x01, 0x42, 0x7f},
    {0xcb, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x01, 0x02, 0x7f},
    {0x65, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x05, 0x04, 0xf5, 0xcc},
    {0x19, 0x47, 0xf5, 0x40, 0xcc},
    {0x0f, 0x43, 0x4a, 0x02, 0x8f},
    {0xc5, 0x4a, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x01, 0x02, 0x7f},
    {0x02, 0x44, 0x01, 0x02, 0x7f},
    {0x07, 0x44, 0x01, 0x02, 0x7f},
    {0x0d, 0x43, 0x4a, 0x02, 0x8f},
    {0x03, 0x42, 0x03, 0x02, 0x6c},
    {0x12, 0x47, 0xf5, 0x40, 0xcc},
    {0x05, 0x42, 0x03, 0x02, 0x6c},
    {0x15, 0x47, 0xf5, 0x40, 0xcc},
    {0x11, 0x43, 0x4a, 0x02, 0x8f},
    {0xc4, 0x41, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x03, 0x02, 0x6c},
    {0x01, 0x43, 0x4a, 0x02, 0x8f},
    {0x08, 0x42, 0x01, 0x42, 0x7f},
    {0xc3, 0x03, 0x42, 0xb5, 0xcc},
    {0xc1, 0x05, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x01, 0x42, 0x7f},
    {0x04, 0x42, 0x03, 0x02, 0x6c},
    {0x02, 0x42, 0x03, 0x02, 0x6c},
    {0x07, 0x42, 0x03, 0x02, 0x6c},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x49, 0x07, 0xb5, 0xae},
    {0x0b, 0x46, 0x02, 0x42, 0x9f},
    {0x05, 0x49, 0x07, 0xb5, 0xae},
    {0x0c, 0x41, 0x42, 0x02, 0x9f},
    {0x09, 0x46, 0x02, 0x42, 0x9f},
    {0xda, 0x52, 0x02, 0xf5, 0xff},
    {0x06, 0x49, 0x07, 0xb5, 0xae},
    {0x14, 0x43, 0x42, 0x42, 0x9f},
    {0xc2, 0x5a, 0x02, 0xb5, 0xee},
    {0x18, 0x43, 0x42, 0x42, 0x9f},
    {0x0e, 0x41, 0x42, 0x02, 0x9f},
    {0x1c, 0x43, 0x42, 0x42, 0x9f},
    {0x04, 0x49, 0x07, 0xb5, 0xae},
    {0x02, 0x49, 0x07, 0xb5, 0xae},
    {0x07, 0x49, 0x07, 0xb5, 0xae},
    {0x17, 0x43, 0x42, 0x42, 0x9f},
    {0x03, 0x43, 0x12, 0x02, 0x6f},
    {0x1b, 0x43, 0x42, 0x42, 0x9f},
    {0x05, 0x43, 0x12, 0x02, 0x6f},
    {0x68, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x41, 0x42, 0x02, 0x9f},
    {0xcd, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x12, 0x02, 0x6f},
    {0x13, 0x43, 0x42, 0x42, 0x9f},
    {0x08, 0x46, 0x02, 0x42, 0x9f},
    {0x78, 0x05, 0xb5, 0x00, 0xcc},
    {0xc1, 0x5a, 0x02, 0xb5, 0xee},
    {0x0a, 0x46, 0x02, 0x42, 0x9f},
    {0x04, 0x43, 0x12, 0x02, 0x6f},
    {0x02, 0x43, 0x12, 0x02, 0x6f},
    {0x07, 0x43, 0x12, 0x02, 0x6f},
    {0x6e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x41, 0x08, 0x02, 0x7e},
    {0x0b, 0x43, 0x08, 0x42, 0x7e},
    {0x05, 0x41, 0x08, 0x02, 0x7e},
    {0x76, 0x05, 0xb5, 0x00, 0xcc},
    {0x09, 0x43, 0x08, 0x42, 0x7e},
    {0xc8, 0x4a, 0x02, 0xf5, 0xff},
    {0x06, 0x41, 0x08, 0x02, 0x7e},
    {0x64, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x09, 0x42, 0xb5, 0xcc},
    {0x74, 0x05, 0xb5, 0x00, 0xcc},
    {0x0f, 0x41, 0x42, 0x02, 0x9f},
    {0x40, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x41, 0x08, 0x02, 0x7e},
    {0x02, 0x41, 0x08, 0x02, 0x7e},
    {0x07, 0x41, 0x08, 0x02, 0x7e},
    {0x0d, 0x41, 0x42, 0x02, 0x9f},
    {0x03, 0x42, 0x12, 0x02, 0x6f},
    {0xd9, 0x42, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x12, 0x02, 0x6f},
    {0x6c, 0x05, 0xb5, 0x00, 0xcc},
    {0x11, 0x41, 0x42, 0x02, 0x9f},
    {0xd5, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x12, 0x02, 0x6f},
    {0x01, 0x41, 0x42, 0x02, 0x9f},
    {0x08, 0x43, 0x08, 0x42, 0x7e},
    {0xc3, 0x52, 0x02, 0xf5, 0xff},
    {0xc1, 0x09, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x08, 0x42, 0x7e},
    {0x04, 0x42, 0x12, 0x02, 0x6f},
    {0x02, 0x42, 0x12, 0x02, 0x6f},
    {0x07, 0x42, 0x12, 0x02, 0x6f},
    {0x5e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x45, 0x0a, 0x02, 0x8f},
    {0x0b, 0x44, 0x0a, 0x42, 0x8f},
    {0x05, 0x45, 0x0a, 0x02, 0x8f},
    {0x0c, 0x42, 0x4a, 0x02, 0x8f},
    {0x09, 0x44, 0x0a, 0x42, 0x8f},
    {0xda, 0x05, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x0a, 0x02, 0x8f},
    {0x62, 0x05, 0xb5, 0x00, 0xcc},
    {0x82, 0x8a, 0xb5, 0x00, 0x0d},
    {0x72, 0x05, 0xb5, 0x00, 0xcc},
    {0x0e, 0x42, 0x4a, 0x02, 0x8f},
    {0x7e, 0x05, 0xb5, 0x00, 0xcc},
    {0x04, 0x45, 0x0a, 0x02, 0x8f},
    {0x02, 0x45, 0x0a, 0x02, 0x8f},
    {0x07, 0x45, 0x0a, 0x02, 0x8f},
    {0x70, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x43, 0x05, 0x02, 0x6c},
    {0x7c, 0x05, 0xb5, 0x00, 0xcc},
    {0x05, 0x43, 0x05, 0x02, 0x6c},
    {0x6a, 0x05, 0xb5, 0x00, 0xcc},
    {0x10, 0x42, 0x4a, 0x02, 0x8f},
    {0xd1, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x05, 0x02, 0x6c},
    {0x60, 0x05, 0xb5, 0x00, 0xcc},
    {0x08, 0x44, 0x0a, 0x42, 0x8f},
    {0x7a, 0x05, 0xb5, 0x00, 0xcc},
    {0x81, 0x8a, 0xb5, 0x00, 0x0d},
    {0x0a, 0x44, 0x0a, 0x42, 0x8f},
    {0x04, 0x43, 0x05, 0x02, 0x6c},
    {0x02, 0x43, 0x05, 0x02, 0x6c},
    {0x07, 0x43, 0x05, 0x02, 0x6c},
    {0x16, 0x43, 0x42, 0x42, 0x9f},
    {0x03, 0x44, 0x08, 0x02, 0x7e},
    {0x0b, 0x42, 0x08, 0x42, 0x7e},
    {0x05, 0x44, 0x08, 0x02, 0x7e},
    {0x1a, 0x43, 0x42, 0x42, 0x9f},
    {0x09, 0x42, 0x08, 0x42, 0x7e},
    {0xca, 0x4a, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x08, 0x02, 0x7e},
    {0x66, 0x05, 0xb5, 0x00, 0xcc},
    {0xc2, 0x06, 0x04, 0xf5, 0xcc},
    {0x19, 0x43, 0x42, 0x42, 0x9f},
    {0x0f, 0x42, 0x4a, 0x02, 0x8f},
    {0xc6, 0x4a, 0x02, 0xf5, 0xff},
    {0x04, 0x44, 0x08, 0x02, 0x7e},
    {0x02, 0x44, 0x08, 0x02, 0x7e},
    {0x07, 0x44, 0x08, 0x02, 0x7e},
    {0x0d, 0x42, 0x4a, 0x02, 0x8f},
    {0x03, 0x42, 0x05, 0x02, 0x6c},
    {0x12, 0x43, 0x42, 0x42, 0x9f},
    {0x05, 0x42, 0x05, 0x02, 0x6c},
    {0x15, 0x43, 0x42, 0x42, 0x9f},
    {0x11, 0x42, 0x4a, 0x02, 0x8f},
    {0xc4, 0x48, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x05, 0x02, 0x6c},
    {0x01, 0x42, 0x4a, 0x02, 0x8f},
    {0x08, 0x42, 0x08, 0x42, 0x7e},
    {0xc3, 0x05, 0x42, 0xb5, 0xcc},
    {0xc1, 0x06, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x08, 0x42, 0x7e},
    {0x04, 0x42, 0x05, 0x02, 0x6c},
    {0x02, 0x42, 0x05, 0x02, 0x6c},
    {0x07, 0x42, 0x05, 0x02, 0x6c},
    {0xf4, 0x42, 0x02, 0xf5, 0xff},
    {0x03, 0x4b, 0x07, 0xb5, 0xbf},
    {0x0b, 0x48, 0x07, 0xf5, 0xbf},
    {0x05, 0x4b, 0x07, 0xb5, 0xbf},
    {0x0c, 0x46, 0x47, 0xb5, 0xae},
    {0x09, 0x48, 0x07, 0xf5, 0xbf},
    {0xda, 0x55, 0x02, 0xf5, 0xff},
    {0x06, 0x4b, 0x07, 0xb5, 0xbf},
    {0x14, 0x41, 0x47, 0xf5, 0xae},
    {0xc2, 0x66, 0x02, 0xf5, 0xff},
    {0x18, 0x41, 0x47, 0xf5, 0xae},
    {0x0e, 0x46, 0x47, 0xb5, 0xae},
    {0x1c, 0x41, 0x47, 0xf5, 0xae},
    {0x04, 0x4b, 0x07, 0xb5, 0xbf},
    {0x02, 0x4b, 0x07, 0xb5, 0xbf},
    {0x07, 0x4b, 0x07, 0xb5, 0xbf},
    {0x17, 0x41, 0x47, 0xf5, 0xae},
    {0x03, 0x43, 0x15, 0x02, 0x6f},
    {0x1b, 0x41, 0x47, 0xf5, 0xae},
    {0x05, 0x43, 0x15, 0x02, 0x6f},
    {0x67, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x46, 0x47, 0xb5, 0xae},
    {0xc9, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x15, 0x02, 0x6f},
    {0x13, 0x41, 0x47, 0xf5, 0xae},
    {0x08, 0x48, 0x07, 0xf5, 0xbf},
    {0x77, 0x03, 0x07, 0xb5, 0xae},
    {0xc1, 0x66, 0x02, 0xf5, 0xff},
    {0x0a, 0x48, 0x07, 0xf5, 0xbf},
    {0x04, 0x43, 0x15, 0x02, 0x6f},
    {0x02, 0x43, 0x15, 0x02, 0x6f},
    {0x07, 0x43, 0x15, 0x02, 0x6f},
    {0x6d, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x83, 0xb5, 0x7d},
    {0x0b, 0x43, 0x83, 0xf5, 0x7d},
    {0x05, 0x41, 0x83, 0xb5, 0x7d},
    {0x75, 0x03, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x83, 0xf5, 0x7d},
    {0xc7, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x83, 0xb5, 0x7d},
    {0x63, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0xc2, 0x47, 0xb5, 0x0e},
    {0x73, 0x03, 0x07, 0xb5, 0xae},
    {0x0f, 0x46, 0x47, 0xb5, 0xae},
    {0x7f, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x83, 0xb5, 0x7d},
    {0x02, 0x41, 0x83, 0xb5, 0x7d},
    {0x07, 0x41, 0x83, 0xb5, 0x7d},
    {0x0d, 0x46, 0x47, 0xb5, 0xae},
    {0x03, 0x42, 0x15, 0x02, 0x6f},
    {0xd8, 0x42, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x15, 0x02, 0x6f},
    {0x6b, 0x03, 0x07, 0xb5, 0xae},
    {0x11, 0x46, 0x47, 0xb5, 0xae},
    {0xd4, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x15, 0x02, 0x6f},
    {0x01, 0x46, 0x47, 0xb5, 0xae},
    {0x08, 0x43, 0x83, 0xf5, 0x7d},
    {0xc3, 0x55, 0x02, 0xf5, 0xff},
    {0xc1, 0xc2, 0x47, 0xb5, 0x0e},
    {0x0a, 0x43, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x15, 0x02, 0x6f},
    {0x02, 0x42, 0x15, 0x02, 0x6f},
    {0x07, 0x42, 0x15, 0x02, 0x6f},
    {0x5d, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x46, 0x04, 0x02, 0x8e},
    {0x0b, 0x41, 0x04, 0x42, 0x8e},
    {0x05, 0x46, 0x04, 0x02, 0x8e},
    {0x0c, 0x43, 0x44, 0x02, 0x8e},
    {0x09, 0x41, 0x04, 0x42, 0x8e},
    {0xda, 0x51, 0x02, 0xb5, 0xee},
    {0x06, 0x46, 0x04, 0x02, 0x8e},
    {0x61, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x59, 0x02, 0xb5, 0xee},
    {0x71, 0x03, 0x07, 0xb5, 0xae},
    {0x0e, 0x43, 0x44, 0x02, 0x8e},
    {0x7d, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x46, 0x04, 0x02, 0x8e},
    {0x02, 0x46, 0x04, 0x02, 0x8e},
    {0x07, 0x46, 0x04, 0x02, 0x8e},
    {0x6f, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x11, 0x02, 0x6e},
    {0x7b, 0x03, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x11, 0x02, 0x6e},
    {0x69, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x43, 0x44, 0x02, 0x8e},
    {0xd0, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x11, 0x02, 0x6e},
    {0x5f, 0x03, 0x07, 0xb5, 0xae},
    {0x08, 0x41, 0x04, 0x42, 0x8e},
    {0x79, 0x03, 0x07, 0xb5, 0xae},
    {0xc1, 0x59, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x04, 0x42, 0x8e},
    {0x04, 0x43, 0x11, 0x02, 0x6e},
    {0x02, 0x43, 0x11, 0x02, 0x6e},
    {0x07, 0x43, 0x11, 0x02, 0x6e},
    {0x16, 0x41, 0x47, 0xf5, 0xae},
    {0x03, 0x44, 0x83, 0xb5, 0x7d},
    {0x0b, 0x42, 0x83, 0xf5, 0x7d},
    {0x05, 0x44, 0x83, 0xb5, 0x7d},
    {0x1a, 0x41, 0x47, 0xf5, 0xae},
    {0x09, 0x42, 0x83, 0xf5, 0x7d},
    {0xcc, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x83, 0xb5, 0x7d},
    {0x65, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x0f, 0x42, 0xf5, 0xdd},
    {0x19, 0x41, 0x47, 0xf5, 0xae},
    {0x0f, 0x43, 0x44, 0x02, 0x8e},
    {0xc5, 0x44, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x83, 0xb5, 0x7d},
    {0x02, 0x44, 0x83, 0xb5, 0x7d},
    {0x07, 0x44, 0x83, 0xb5, 0x7d},
    {0x0d, 0x43, 0x44, 0x02, 0x8e},
    {0x03, 0x42, 0x11, 0x02, 0x6e},
    {0x12, 0x41, 0x47, 0xf5, 0xae},
    {0x05, 0x42, 0x11, 0x02, 0x6e},
    {0x15, 0x41, 0x47, 0xf5, 0xae},
    {0x11, 0x43, 0x44, 0x02, 0x8e},
    {0x84, 0x83, 0xb5, 0x00, 0x0d},
    {0x06, 0x42, 0x11, 0x02, 0x6e},
    {0x01, 0x43, 0x44, 0x02, 0x8e},
    {0x08, 0x42, 0x83, 0xf5, 0x7d},
    {0xc3, 0x51, 0x02, 0xb5, 0xee},
    {0xc1, 0x0f, 0x42, 0xf5, 0xdd},
    {0x0a, 0x42, 0x83, 0xf5, 0x7d},
    {0x04, 0x42, 0x11, 0x02, 0x6e},
    {0x02, 0x42, 0x11, 0x02, 0x6e},
    {0x07, 0x42, 0x11, 0x02, 0x6e},
    {0xde, 0x47, 0xf5, 0x40, 0x0f},
    {0x03, 0x47, 0x02, 0x02, 0x9f},
    {0x0b, 0x45, 0x02, 0x42, 0x9f},
    {0x05, 0x47, 0x02, 0x02, 0x9f},
    {0x0c, 0x44, 0x42, 0x02, 0x9f},
    {0x09, 0x45, 0x02, 0x42, 0x9f},
    {0x9a, 0x84, 0xb5, 0x00, 0x0d},
    {0x06, 0x47, 0x02, 0x02, 0x9f},
    {0x14, 0x42, 0x42, 0x42, 0x9f},
    {0x82, 0x86, 0xb5, 0x00, 0x0d},
    {0x18, 0x42, 0x42, 0x42, 0x9f},
    {0x0e, 0x44, 0x42, 0x02, 0x9f},
    {0x1c, 0x42, 0x42, 0x42, 0x9f},
    {0x04, 0x47, 0x02, 0x02, 0x9f},
    {0x02, 0x47, 0x02, 0x02, 0x9f},
    {0x07, 0x47, 0x02, 0x02, 0x9f},
    {0x17, 0x42, 0x42, 0x42, 0x9f},
    {0x03, 0x43, 0x84, 0xb5, 0x6d},
    {0x1b, 0x42, 0x42, 0x42, 0x9f},
    {0x05, 0x43, 0x84, 0xb5, 0x6d},
    {0x68, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x44, 0x42, 0x02, 0x9f},
    {0xce, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x84, 0xb5, 0x6d},
    {0x13, 0x42, 0x42, 0x42, 0x9f},
    {0x08, 0x45, 0x02, 0x42, 0x9f},
    {0x78, 0x03, 0x07, 0xb5, 0xae},
    {0x81, 0x86, 0xb5, 0x00, 0x0d},
    {0x0a, 0x45, 0x02, 0x42, 0x9f},
    {0x04, 0x43, 0x84, 0xb5, 0x6d},
    {0x02, 0x43, 0x84, 0xb5, 0x6d},
    {0x07, 0x43, 0x84, 0xb5, 0x6d},
    {0x6e, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x81, 0xb5, 0x7c},
    {0x0b, 0x43, 0x81, 0xf5, 0x7c},
    {0x05, 0x41, 0x81, 0xb5, 0x7c},
    {0x76, 0x03, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x81, 0xf5, 0x7c},
    {0xc8, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x81, 0xb5, 0x7c},
    {0x64, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x04, 0x04, 0xf5, 0xcc},
    {0x74, 0x03, 0x07, 0xb5, 0xae},
    {0x0f, 0x44, 0x42, 0x02, 0x9f},
    {0x40, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x81, 0xb5, 0x7c},
    {0x02, 0x41, 0x81, 0xb5, 0x7c},
    {0x07, 0x41, 0x81, 0xb5, 0x7c},
    {0x0d, 0x44, 0x42, 0x02, 0x9f},
    {0x03, 0x42, 0x84, 0xb5, 0x6d},
    {0xdb, 0x42, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x84, 0xb5, 0x6d},
    {0x6c, 0x03, 0x07, 0xb5, 0xae},
    {0x11, 0x44, 0x42, 0x02, 0x9f},
    {0xd6, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x84, 0xb5, 0x6d},
    {0x01, 0x44, 0x42, 0x02, 0x9f},
    {0x08, 0x43, 0x81, 0xf5, 0x7c},
    {0x83, 0x84, 0xb5, 0x00, 0x0d},
    {0xc1, 0x04, 0x04, 0xf5, 0xcc},
    {0x0a, 0x43, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x84, 0xb5, 0x6d},
    {0x02, 0x42, 0x84, 0xb5, 0x6d},
    {0x07, 0x42, 0x84, 0xb5, 0x6d},
    {0x5e, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x45, 0x04, 0x02, 0x8e},
    {0x0b, 0x44, 0x04, 0x42, 0x8e},
    {0x05, 0x45, 0x04, 0x02, 0x8e},
    {0x0c, 0x42, 0x44, 0x02, 0x8e},
    {0x09, 0x44, 0x04, 0x42, 0x8e},
    {0xda, 0x06, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x04, 0x02, 0x8e},
    {0x62, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x02, 0x04, 0xf5, 0xcc},
    {0x72, 0x03, 0x07, 0xb5, 0xae},
    {0x0e, 0x42, 0x44, 0x02, 0x8e},
    {0x7e, 0x03, 0x07, 0xb5, 0xae},
    {0x04, 0x45, 0x04, 0x02, 0x8e},
    {0x02, 0x45, 0x04, 0x02, 0x8e},
    {0x07, 0x45, 0x04, 0x02, 0x8e},
    {0x70, 0x03, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x06, 0x02, 0x6c},
    {0x7c, 0x03, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x06, 0x02, 0x6c},
    {0x6a, 0x03, 0x07, 0xb5, 0xae},
    {0x10, 0x42, 0x44, 0x02, 0x8e},
    {0xd2, 0x42, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x06, 0x02, 0x6c},
    {0x60, 0x03, 0x07, 0xb5, 0xae},
    {0x08, 0x44, 0x04, 0x42, 0x8e},
    {0x7a, 0x03, 0x07, 0xb5, 0xae},
    {0xc1, 0x02, 0x04, 0xf5, 0xcc},
    {0x0a, 0x44, 0x04, 0x42, 0x8e},
    {0x04, 0x43, 0x06, 0x02, 0x6c},
    {0x02, 0x43, 0x06, 0x02, 0x6c},
    {0x07, 0x43, 0x06, 0x02, 0x6c},
    {0x16, 0x42, 0x42, 0x42, 0x9f},
    {0x03, 0x44, 0x81, 0xb5, 0x7c},
    {0x0b, 0x42, 0x81, 0xf5, 0x7c},
    {0x05, 0x44, 0x81, 0xb5, 0x7c},
    {0x1a, 0x42, 0x42, 0x42, 0x9f},
    {0x09, 0x42, 0x81, 0xf5, 0x7c},
    {0xca, 0x44, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x81, 0xb5, 0x7c},
    {0x66, 0x03, 0x07, 0xb5, 0xae},
    {0xc2, 0x07, 0x04, 0xf5, 0xcc},
    {0x19, 0x42, 0x42, 0x42, 0x9f},
    {0x0f, 0x42, 0x44, 0x02, 0x8e},
    {0xc6, 0x44, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x81, 0xb5, 0x7c},
    {0x02, 0x44, 0x81, 0xb5, 0x7c},
    {0x07, 0x44, 0x81, 0xb5, 0x7c},
    {0x0d, 0x42, 0x44, 0x02, 0x8e},
    {0x03, 0x42, 0x06, 0x02, 0x6c},
    {0x12, 0x42, 0x42, 0x42, 0x9f},
    {0x05, 0x42, 0x06, 0x02, 0x6c},
    {0x15, 0x42, 0x42, 0x42, 0x9f},
    {0x11, 0x42, 0x44, 0x02, 0x8e},
    {0x84, 0x81, 0xb5, 0x00, 0x0c},
    {0x06, 0x42, 0x06, 0x02, 0x6c},
    {0x01, 0x42, 0x44, 0x02, 0x8e},
    {0x08, 0x42, 0x81, 0xf5, 0x7c},
    {0xc3, 0x06, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x04, 0xf5, 0xcc},
    {0x0a, 0x42, 0x81, 0xf5, 0x7c},
    {0x04, 0x42, 0x06, 0x02, 0x6c},
    {0x02, 0x42, 0x06, 0x02, 0x6c},
    {0x07, 0x42, 0x06, 0x02, 0x6c},
    {0xf4, 0x47, 0xf5, 0x00, 0x0e},
    {0x03, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0b, 0x4c, 0xb5, 0x40, 0xcc},
    {0x05, 0x4e, 0xb5, 0x00, 0xcc},
    {0x0c, 0x47, 0x47, 0xb5, 0xbf},
    {0x09, 0x4c, 0xb5, 0x40, 0xcc},
    {0xda, 0x41, 0x02, 0xb5, 0xee},
    {0x06, 0x4e, 0xb5, 0x00, 0xcc},
    {0x14, 0x45, 0x47, 0xf5, 0xbf},
    {0xc2, 0x0d, 0x42, 0xf5, 0xdd},
    {0x18, 0x45, 0x47, 0xf5, 0xbf},
    {0x0e, 0x47, 0x47, 0xb5, 0xbf},
    {0x1c, 0x45, 0x47, 0xf5, 0xbf},
    {0x04, 0x4e, 0xb5, 0x00, 0xcc},
    {0x02, 0x4e, 0xb5, 0x00, 0xcc},
    {0x07, 0x4e, 0xb5, 0x00, 0xcc},
    {0x17, 0x45, 0x47, 0xf5, 0xbf},
    {0x03, 0x43, 0x01, 0x02, 0x6e},
    {0x1b, 0x45, 0x47, 0xf5, 0xbf},
    {0x05, 0x43, 0x01, 0x02, 0x6e},
    {0x67, 0x04, 0x07, 0xb5, 0xbf},
    {0x10, 0x47, 0x47, 0xb5, 0xbf},
    {0xc9, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x01, 0x02, 0x6e},
    {0x13, 0x45, 0x47, 0xf5, 0xbf},
    {0x08, 0x4c, 0xb5, 0x40, 0xcc},
    {0x77, 0x04, 0x07, 0xb5, 0xbf},
    {0xc1, 0x0d, 0x42, 0xf5, 0xdd},
    {0x0a, 0x4c, 0xb5, 0x40, 0xcc},
    {0x04, 0x43, 0x01, 0x02, 0x6e},
    {0x02, 0x43, 0x01, 0x02, 0x6e},
    {0x07, 0x43, 0x01, 0x02, 0x6e},
    {0x6d, 0x04, 0x07, 0xb5, 0xbf},
    {0x03, 0x41, 0x0a, 0x02, 0x7e},
    {0x0b, 0x43, 0x0a, 0x42, 0x7e},
    {0x05, 0x41, 0x0a, 0x02, 0x7e},
    {0x75, 0x04, 0x07, 0xb5, 0xbf},
    {0x09, 0x43, 0x0a, 0x42, 0x7e},
    {0xc7, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x0a, 0x02, 0x7e},
    {0x63, 0x04, 0x07, 0xb5, 0xbf},
    {0xc2, 0x03, 0x02, 0x47, 0xbf},
    {0x73, 0x04, 0x07, 0xb5, 0xbf},
    {0x0f, 0x47, 0x47, 0xb5, 0xbf},
    {0x7f, 0x04, 0x07, 0xb5, 0xbf},
    {0x04, 0x41, 0x0a, 0x02, 0x7e},
    {0x02, 0x41, 0x0a, 0x02, 0x7e},
    {0x07, 0x41, 0x0a, 0x02, 0x7e},
    {0x0d, 0x47, 0x47, 0xb5, 0xbf},
    {0x03, 0x42, 0x01, 0x02, 0x6e},
    {0xd7, 0x47, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x01, 0x02, 0x6e},
    {0x6b, 0x04, 0x07, 0xb5, 0xbf},
    {0x11, 0x47, 0x47, 0xb5, 0xbf},
    {0xd3, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x01, 0x02, 0x6e},
    {0x01, 0x47, 0x47, 0xb5, 0xbf},
    {0x08, 0x43, 0x0a, 0x42, 0x7e},
    {0xc3, 0x41, 0x02, 0xb5, 0xee},
    {0xc1, 0x03, 0x02, 0x47, 0xbf},
    {0x0a, 0x43, 0x0a, 0x42, 0x7e},
    {0x04, 0x42, 0x01, 0x02, 0x6e},
    {0x02, 0x42, 0x01, 0x02, 0x6e},
    {0x07, 0x42, 0x01, 0x02, 0x6e},
    {0x5d, 0x04, 0x07, 0xb5, 0xbf},
    {0x03, 0x46, 0x02, 0x02, 0x8e},
    {0x0b, 0x41, 0x02, 0x42, 0x8e},
    {0x05, 0x46, 0x02, 0x02, 0x8e},
    {0x0c, 0x43, 0x42, 0x02, 0x8e},
    {0x09, 0x41, 0x02, 0x42, 0x8e},
    {0xda, 0x08, 0x42, 0xf5, 0xdd},
    {0x06, 0x46, 0x02, 0x02, 0x8e},
    {0x61, 0x04, 0x07, 0xb5, 0xbf},
    {0xc2, 0x52, 0x02, 0xb5, 0xee},
    {0x71, 0x04, 0x07, 0xb5, 0xbf},
    {0x0e, 0x43, 0x42, 0x02, 0x8e},
    {0x7d, 0x04, 0x07, 0xb5, 0xbf},
    {0x04, 0x46, 0x02, 0x02, 0x8e},
    {0x02, 0x46, 0x02, 0x02, 0x8e},
    {0x07, 0x46, 0x02, 0x02, 0x8e},
    {0x6f, 0x04, 0x07, 0xb5, 0xbf},
    {0x03, 0x43, 0x08, 0x02, 0x6d},
    {0x7b, 0x04, 0x07, 0xb5, 0xbf},
    {0x05, 0x43, 0x08, 0x02, 0x6d},
    {0x69, 0x04, 0x07, 0xb5, 0xbf},
    {0x10, 0x43, 0x42, 0x02, 0x8e},
    {0xcf, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x08, 0x02, 0x6d},
    {0x5f, 0x04, 0x07, 0xb5, 0xbf},
    {0x08, 0x41, 0x02, 0x42, 0x8e},
    {0x79, 0x04, 0x07, 0xb5, 0xbf},
    {0xc1, 0x52, 0x02, 0xb5, 0xee},
    {0x0a, 0x41, 0x02, 0x42, 0x8e},
    {0x04, 0x43, 0x08, 0x02, 0x6d},
    {0x02, 0x43, 0x08, 0x02, 0x6d},
    {0x07, 0x43, 0x08, 0x02, 0x6d},
    {0x16, 0x45, 0x47, 0xf5, 0xbf},
    {0x03, 0x44, 0x0a, 0x02, 0x7e},
    {0x0b, 0x42, 0x0a, 0x42, 0x7e},
    {0x05, 0x44, 0x0a, 0x02, 0x7e},
    {0x1a, 0x45, 0x47, 0xf5, 0xbf},
    {0x09, 0x42, 0x0a, 0x42, 0x7e},
    {0xcb, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x0a, 0x02, 0x7e},
    {0x65, 0x04, 0x07, 0xb5, 0xbf},
    {0xc2, 0x05, 0x02, 0x47, 0xbf},
    {0x19, 0x45, 0x47, 0xf5, 0xbf},
    {0x0f, 0x43, 0x42, 0x02, 0x8e},
    {0xc5, 0x42, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x0a, 0x02, 0x7e},
    {0x02, 0x44, 0x0a, 0x02, 0x7e},
    {0x07, 0x44, 0x0a, 0x02, 0x7e},
    {0x0d, 0x43, 0x42, 0x02, 0x8e},
    {0x03, 0x42, 0x08, 0x02, 0x6d},
    {0x12, 0x45, 0x47, 0xf5, 0xbf},
    {0x05, 0x42, 0x08, 0x02, 0x6d},
    {0x15, 0x45, 0x47, 0xf5, 0xbf},
    {0x11, 0x43, 0x42, 0x02, 0x8e},
    {0xc4, 0x4a, 0x02, 0xb5, 0xee},
    {0x06, 0x42, 0x08, 0x02, 0x6d},
    {0x01, 0x43, 0x42, 0x02, 0x8e},
    {0x08, 0x42, 0x0a, 0x42, 0x7e},
    {0xc3, 0x08, 0x42, 0xf5, 0xdd},
    {0xc1, 0x05, 0x02, 0x47, 0xbf},
    {0x0a, 0x42, 0x0a, 0x42, 0x7e},
    {0x04, 0x42, 0x08, 0x02, 0x6d},
    {0x02, 0x42, 0x08, 0x02, 0x6d},
    {0x07, 0x42, 0x08, 0x02, 0x6d},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x48, 0x07, 0xb5, 0xae},
    {0x0b, 0x46, 0x07, 0x42, 0x9f},
    {0x05, 0x48, 0x07, 0xb5, 0xae},
    {0x0c, 0x41, 0x47, 0x02, 0x9f},
    {0x09, 0x46, 0x07, 0x42, 0x9f},
    {0x9a, 0x83, 0xb5, 0x00, 0x0c},
    {0x06, 0x48, 0x07, 0xb5, 0xae},
    {0x14, 0x43, 0x47, 0x42, 0x9f},
    {0xc2, 0x55, 0x02, 0xb5, 0xee},
    {0x18, 0x43, 0x47, 0x42, 0x9f},
    {0x0e, 0x41, 0x47, 0x02, 0x9f},
    {0x1c, 0x43, 0x47, 0x42, 0x9f},
    {0x04, 0x48, 0x07, 0xb5, 0xae},
    {0x02, 0x48, 0x07, 0xb5, 0xae},
    {0x07, 0x48, 0x07, 0xb5, 0xae},
    {0x17, 0x43, 0x47, 0x42, 0x9f},
    {0x03, 0x43, 0x83, 0xb5, 0x6c},
    {0x1b, 0x43, 0x47, 0x42, 0x9f},
    {0x05, 0x43, 0x83, 0xb5, 0x6c},
    {0x68, 0x04, 0x07, 0xb5, 0xbf},
    {0x10, 0x41, 0x47, 0x02, 0x9f},
    {0xcd, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x83, 0xb5, 0x6c},
    {0x13, 0x43, 0x47, 0x42, 0x9f},
    {0x08, 0x46, 0x07, 0x42, 0x9f},
    {0x78, 0x04, 0x07, 0xb5, 0xbf},
    {0xc1, 0x55, 0x02, 0xb5, 0xee},
    {0x0a, 0x46, 0x07, 0x42, 0x9f},
    {0x04, 0x43, 0x83, 0xb5, 0x6c},
    {0x02, 0x43, 0x83, 0xb5, 0x6c},
    {0x07, 0x43, 0x83, 0xb5, 0x6c},
    {0x6e, 0x04, 0x07, 0xb5, 0xbf},
    {0x03, 0x41, 0x04, 0x02, 0x7d},
    {0x0b, 0x43, 0x04, 0x42, 0x7d},
    {0x05, 0x41, 0x04, 0x02, 0x7d},
    {0x76, 0x04, 0x07, 0xb5, 0xbf},
    {0x09, 0x43, 0x04, 0x42, 0x7d},
    {0xc8, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x04, 0x02, 0x7d},
    {0x64, 0x04, 0x07, 0xb5, 0xbf},
    {0xc2, 0x11, 0x42, 0xf5, 0xdd},
    {0x74, 0x04, 0x07, 0xb5, 0xbf},
    {0x0f, 0x41, 0x47, 0x02, 0x9f},
    {0x40, 0x04, 0x07, 0xb5, 0xbf},
    {0x04, 0x41, 0x04, 0x02, 0x7d},
    {0x02, 0x41, 0x04, 0x02, 0x7d},
    {0x07, 0x41, 0x04, 0x02, 0x7d},
    {0x0d, 0x41, 0x47, 0x02, 0x9f},
    {0x03, 0x42, 0x83, 0xb5, 0x6c},
    {0xd9, 0x47, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x83, 0xb5, 0x6c},
    {0x6c, 0x04, 0x07, 0xb5, 0xbf},
    {0x11, 0x41, 0x47, 0x02, 0x9f},
    {0xd5, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x83, 0xb5, 0x6c},
    {0x01, 0x41, 0x47, 0x02, 0x9f},
    {0x08, 0x43, 0x04, 0x42, 0x7d},
    {0x83, 0x83, 0xb5, 0x00, 0x0c},
    {0xc1, 0x11, 0x42, 0xf5, 0xdd},
    {0x0a, 0x43, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x83, 0xb5, 0x6c},
    {0x02, 0x42, 0x83, 0xb5, 0x6c},
    {0x07, 0x42, 0x83, 0xb5, 0x6c},
    {0x5e, 0x04, 0x07, 0xb5, 0xbf},
    {0x03, 0x45, 0x02, 0x02, 0x8e},
    {0x0b, 0x44, 0x02, 0x42, 0x8e},
    {0x05, 0x45, 0x02, 0x02, 0x8e},
    {0x0c, 0x42, 0x42, 0x02, 0x8e},
    {0x09, 0x44, 0x02, 0x42, 0x8e},
    {0xda, 0xc1, 0x47, 0xf5, 0x0f},
    {0x06, 0x45, 0x02, 0x02, 0x8e},
    {0x62, 0x04, 0x07, 0xb5, 0xbf},
    {0x82, 0x84, 0xb5, 0x00, 0x0c},
    {0x72, 0x04, 0x07, 0xb5, 0xbf},
    {0x0e, 0x42, 0x42, 0x02, 0x8e},
    {0x7e, 0x04, 0x07, 0xb5, 0xbf},
    {0x04, 0x45, 0x02, 0x02, 0x8e},
    {0x02, 0x45, 0x02, 0x02, 0x8e},
    {0x07, 0x45, 0x02, 0x02, 0x8e},
    {0x70, 0x04, 0x07, 0xb5, 0xbf},
    {0x03, 0x43, 0x81, 0x07, 0x6f},
    {0x7c, 0x04, 0x07, 0xb5, 0xbf},
    {0x05, 0x43, 0x81, 0x07, 0x6f},
    {0x6a, 0x04, 0x07, 0xb5, 0xbf},
    {0x10, 0x42, 0x42, 0x02, 0x8e},
    {0xd1, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x81, 0x07, 0x6f},
    {0x60, 0x04, 0x07, 0xb5, 0xbf},
    {0x08, 0x44, 0x02, 0x42, 0x8e},
    {0x7a, 0x04, 0x07, 0xb5, 0xbf},
    {0x81, 0x84, 0xb5, 0x00, 0x0c},
    {0x0a, 0x44, 0x02, 0x42, 0x8e},
    {0x04, 0x43, 0x81, 0x07, 0x6f},
    {0x02, 0x43, 0x81, 0x07, 0x6f},
    {0x07, 0x43, 0x81, 0x07, 0x6f},
    {0x16, 0x43, 0x47, 0x42, 0x9f},
    {0x03, 0x44, 0x04, 0x02, 0x7d},
    {0x0b, 0x42, 0x04, 0x42, 0x7d},
    {0x05, 0x44, 0x04, 0x02, 0x7d},
    {0x1a, 0x43, 0x47, 0x42, 0x9f},
    {0x09, 0x42, 0x04, 0x42, 0x7d},
    {0xca, 0x42, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x04, 0x02, 0x7d},
    {0x66, 0x04, 0x07, 0xb5, 0xbf},
    {0xc2, 0x06, 0x02, 0x47, 0xbf},
    {0x19, 0x43, 0x47, 0x42, 0x9f},
    {0x0f, 0x42, 0x42, 0x02, 0x8e},
    {0xc6, 0x42, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x04, 0x02, 0x7d},
    {0x02, 0x44, 0x04, 0x02, 0x7d},
    {0x07, 0x44, 0x04, 0x02, 0x7d},
    {0x0d, 0x42, 0x42, 0x02, 0x8e},
    {0x03, 0x42, 0x81, 0x07, 0x6f},
    {0x12, 0x43, 0x47, 0x42, 0x9f},
    {0x05, 0x42, 0x81, 0x07, 0x6f},
    {0x15, 0x43, 0x47, 0x42, 0x9f},
    {0x11, 0x42, 0x42, 0x02, 0x8e},
    {0xc4, 0x04, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x81, 0x07, 0x6f},
    {0x01, 0x42, 0x42, 0x02, 0x8e},
    {0x08, 0x42, 0x04, 0x42, 0x7d},
    {0xc3, 0xc1, 0x47, 0xf5, 0x0f},
    {0xc1, 0x06, 0x02, 0x47, 0xbf},
    {0x0a, 0x42, 0x04, 0x42, 0x7d},
    {0x04, 0x42, 0x81, 0x07, 0x6f},
    {0x02, 0x42, 0x81, 0x07, 0x6f},
    {0x07, 0x42, 0x81, 0x07, 0x6f},
    {0xf4, 0x47, 0x02, 0xf5, 0xff},
    {0x03, 0x4c, 0x07, 0xb5, 0xbf},
    {0x0b, 0x47, 0x07, 0xf5, 0xae},
    {0x05, 0x4c, 0x07, 0xb5, 0xbf},
    {0x0c, 0x45, 0x47, 0xb5, 0xae},
    {0x09, 0x47, 0x07, 0xf5, 0xae},
    {0xda, 0x0a, 0x42, 0xf5, 0xdd},
    {0x06, 0x4c, 0x07, 0xb5, 0xbf},
    {0x14, 0x44, 0x47, 0xf5, 0xae},
    {0xc2, 0x01, 0x42, 0xf5, 0xdd},
    {0x18, 0x44, 0x47, 0xf5, 0xae},
    {0x0e, 0x45, 0x47, 0xb5, 0xae},
    {0x1c, 0x44, 0x47, 0xf5, 0xae},
    {0x04, 0x4c, 0x07, 0xb5, 0xbf},
    {0x02, 0x4c, 0x07, 0xb5, 0xbf},
    {0x07, 0x4c, 0x07, 0xb5, 0xbf},
    {0x17, 0x44, 0x47, 0xf5, 0xae},
    {0x03, 0x43, 0x0a, 0x02, 0x6d},
    {0x1b, 0x44, 0x47, 0xf5, 0xae},
    {0x05, 0x43, 0x0a, 0x02, 0x6d},
    {0x67, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x45, 0x47, 0xb5, 0xae},
    {0xc9, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x43, 0x0a, 0x02, 0x6d},
    {0x13, 0x44, 0x47, 0xf5, 0xae},
    {0x08, 0x47, 0x07, 0xf5, 0xae},
    {0x77, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0x01, 0x42, 0xf5, 0xdd},
    {0x0a, 0x47, 0x07, 0xf5, 0xae},
    {0x04, 0x43, 0x0a, 0x02, 0x6d},
    {0x02, 0x43, 0x0a, 0x02, 0x6d},
    {0x07, 0x43, 0x0a, 0x02, 0x6d},
    {0x6d, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x02, 0x02, 0x7d},
    {0x0b, 0x43, 0x02, 0x42, 0x7d},
    {0x05, 0x41, 0x02, 0x02, 0x7d},
    {0x75, 0x02, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x02, 0x42, 0x7d},
    {0xc7, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x02, 0x02, 0x7d},
    {0x63, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x08, 0x42, 0xb5, 0xcc},
    {0x73, 0x02, 0x07, 0xb5, 0xae},
    {0x0f, 0x45, 0x47, 0xb5, 0xae},
    {0x7f, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x02, 0x02, 0x7d},
    {0x02, 0x41, 0x02, 0x02, 0x7d},
    {0x07, 0x41, 0x02, 0x02, 0x7d},
    {0x0d, 0x45, 0x47, 0xb5, 0xae},
    {0x03, 0x42, 0x0a, 0x02, 0x6d},
    {0xd8, 0x47, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x0a, 0x02, 0x6d},
    {0x6b, 0x02, 0x07, 0xb5, 0xae},
    {0x11, 0x45, 0x47, 0xb5, 0xae},
    {0xd4, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x0a, 0x02, 0x6d},
    {0x01, 0x45, 0x47, 0xb5, 0xae},
    {0x08, 0x43, 0x02, 0x42, 0x7d},
    {0xc3, 0x0a, 0x42, 0xf5, 0xdd},
    {0xc1, 0x08, 0x42, 0xb5, 0xcc},
    {0x0a, 0x43, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x0a, 0x02, 0x6d},
    {0x02, 0x42, 0x0a, 0x02, 0x6d},
    {0x07, 0x42, 0x0a, 0x02, 0x6d},
    {0x5d, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x46, 0x07, 0x02, 0x8e},
    {0x0b, 0x41, 0x07, 0x42, 0x8e},
    {0x05, 0x46, 0x07, 0x02, 0x8e},
    {0x0c, 0x43, 0x47, 0x02, 0x8e},
    {0x09, 0x41, 0x07, 0x42, 0x8e},
    {0xda, 0x04, 0x42, 0xb5, 0xcc},
    {0x06, 0x46, 0x07, 0x02, 0x8e},
    {0x61, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0xc3, 0x47, 0xf5, 0x0f},
    {0x71, 0x02, 0x07, 0xb5, 0xae},
    {0x0e, 0x43, 0x47, 0x02, 0x8e},
    {0x7d, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x46, 0x07, 0x02, 0x8e},
    {0x02, 0x46, 0x07, 0x02, 0x8e},
    {0x07, 0x46, 0x07, 0x02, 0x8e},
    {0x6f, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x04, 0x02, 0x6c},
    {0x7b, 0x02, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x04, 0x02, 0x6c},
    {0x69, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x43, 0x47, 0x02, 0x8e},
    {0xd0, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x04, 0x02, 0x6c},
    {0x5f, 0x02, 0x07, 0xb5, 0xae},
    {0x08, 0x41, 0x07, 0x42, 0x8e},
    {0x79, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0xc3, 0x47, 0xf5, 0x0f},
    {0x0a, 0x41, 0x07, 0x42, 0x8e},
    {0x04, 0x43, 0x04, 0x02, 0x6c},
    {0x02, 0x43, 0x04, 0x02, 0x6c},
    {0x07, 0x43, 0x04, 0x02, 0x6c},
    {0x16, 0x44, 0x47, 0xf5, 0xae},
    {0x03, 0x44, 0x02, 0x02, 0x7d},
    {0x0b, 0x42, 0x02, 0x42, 0x7d},
    {0x05, 0x44, 0x02, 0x02, 0x7d},
    {0x1a, 0x44, 0x47, 0xf5, 0xae},
    {0x09, 0x42, 0x02, 0x42, 0x7d},
    {0xcc, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x44, 0x02, 0x02, 0x7d},
    {0x65, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0xc1, 0x47, 0xb5, 0x0e},
    {0x19, 0x44, 0x47, 0xf5, 0xae},
    {0x0f, 0x43, 0x47, 0x02, 0x8e},
    {0xc5, 0x47, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x02, 0x02, 0x7d},
    {0x02, 0x44, 0x02, 0x02, 0x7d},
    {0x07, 0x44, 0x02, 0x02, 0x7d},
    {0x0d, 0x43, 0x47, 0x02, 0x8e},
    {0x03, 0x42, 0x04, 0x02, 0x6c},
    {0x12, 0x44, 0x47, 0xf5, 0xae},
    {0x05, 0x42, 0x04, 0x02, 0x6c},
    {0x15, 0x44, 0x47, 0xf5, 0xae},
    {0x11, 0x43, 0x47, 0x02, 0x8e},
    {0xc4, 0x02, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x04, 0x02, 0x6c},
    {0x01, 0x43, 0x47, 0x02, 0x8e},
    {0x08, 0x42, 0x02, 0x42, 0x7d},
    {0xc3, 0x04, 0x42, 0xb5, 0xcc},
    {0xc1, 0xc1, 0x47, 0xb5, 0x0e},
    {0x0a, 0x42, 0x02, 0x42, 0x7d},
    {0x04, 0x42, 0x04, 0x02, 0x6c},
    {0x02, 0x42, 0x04, 0x02, 0x6c},
    {0x07, 0x42, 0x04, 0x02, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x47, 0x07, 0x02, 0x9f},
    {0x0b, 0x45, 0x07, 0x42, 0x9f},
    {0x05, 0x47, 0x07, 0x02, 0x9f},
    {0x0c, 0x44, 0x47, 0x02, 0x9f},
    {0x09, 0x45, 0x07, 0x42, 0x9f},
    {0xda, 0x02, 0x42, 0xb5, 0xcc},
    {0x06, 0x47, 0x07, 0x02, 0x9f},
    {0x14, 0x42, 0x47, 0x42, 0x9f},
    {0xc2, 0x0a, 0x42, 0xb5, 0xcc},
    {0x18, 0x42, 0x47, 0x42, 0x9f},
    {0x0e, 0x44, 0x47, 0x02, 0x9f},
    {0x1c, 0x42, 0x47, 0x42, 0x9f},
    {0x04, 0x47, 0x07, 0x02, 0x9f},
    {0x02, 0x47, 0x07, 0x02, 0x9f},
    {0x07, 0x47, 0x07, 0x02, 0x9f},
    {0x17, 0x42, 0x47, 0x42, 0x9f},
    {0x03, 0x43, 0x02, 0x02, 0x6c},
    {0x1b, 0x42, 0x47, 0x42, 0x9f},
    {0x05, 0x43, 0x02, 0x02, 0x6c},
    {0x68, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x44, 0x47, 0x02, 0x9f},
    {0xce, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x02, 0x02, 0x6c},
    {0x13, 0x42, 0x47, 0x42, 0x9f},
    {0x08, 0x45, 0x07, 0x42, 0x9f},
    {0x78, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0x0a, 0x42, 0xb5, 0xcc},
    {0x0a, 0x45, 0x07, 0x42, 0x9f},
    {0x04, 0x43, 0x02, 0x02, 0x6c},
    {0x02, 0x43, 0x02, 0x02, 0x6c},
    {0x07, 0x43, 0x02, 0x02, 0x6c},
    {0x6e, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x41, 0x07, 0x02, 0x7d},
    {0x0b, 0x43, 0x07, 0x42, 0x7d},
    {0x05, 0x41, 0x07, 0x02, 0x7d},
    {0x76, 0x02, 0x07, 0xb5, 0xae},
    {0x09, 0x43, 0x07, 0x42, 0x7d},
    {0xc8, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x41, 0x07, 0x02, 0x7d},
    {0x64, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x04, 0x02, 0x47, 0xbf},
    {0x74, 0x02, 0x07, 0xb5, 0xae},
    {0x0f, 0x44, 0x47, 0x02, 0x9f},
    {0x40, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x41, 0x07, 0x02, 0x7d},
    {0x02, 0x41, 0x07, 0x02, 0x7d},
    {0x07, 0x41, 0x07, 0x02, 0x7d},
    {0x0d, 0x44, 0x47, 0x02, 0x9f},
    {0x03, 0x42, 0x02, 0x02, 0x6c},
    {0xdb, 0x47, 0x02, 0xf5, 0xff},
    {0x05, 0x42, 0x02, 0x02, 0x6c},
    {0x6c, 0x02, 0x07, 0xb5, 0xae},
    {0x11, 0x44, 0x47, 0x02, 0x9f},
    {0xd6, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x42, 0x02, 0x02, 0x6c},
    {0x01, 0x44, 0x47, 0x02, 0x9f},
    {0x08, 0x43, 0x07, 0x42, 0x7d},
    {0xc3, 0x02, 0x42, 0xb5, 0xcc},
    {0xc1, 0x04, 0x02, 0x47, 0xbf},
    {0x0a, 0x43, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x02, 0x02, 0x6c},
    {0x02, 0x42, 0x02, 0x02, 0x6c},
    {0x07, 0x42, 0x02, 0x02, 0x6c},
    {0x5e, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x45, 0x07, 0x02, 0x8e},
    {0x0b, 0x44, 0x07, 0x42, 0x8e},
    {0x05, 0x45, 0x07, 0x02, 0x8e},
    {0x0c, 0x42, 0x47, 0x02, 0x8e},
    {0x09, 0x44, 0x07, 0x42, 0x8e},
    {0xda, 0x07, 0x42, 0xb5, 0xcc},
    {0x06, 0x45, 0x07, 0x02, 0x8e},
    {0x62, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x02, 0x02, 0x47, 0xbf},
    {0x72, 0x02, 0x07, 0xb5, 0xae},
    {0x0e, 0x42, 0x47, 0x02, 0x8e},
    {0x7e, 0x02, 0x07, 0xb5, 0xae},
    {0x04, 0x45, 0x07, 0x02, 0x8e},
    {0x02, 0x45, 0x07, 0x02, 0x8e},
    {0x07, 0x45, 0x07, 0x02, 0x8e},
    {0x70, 0x02, 0x07, 0xb5, 0xae},
    {0x03, 0x43, 0x07, 0x02, 0x6c},
    {0x7c, 0x02, 0x07, 0xb5, 0xae},
    {0x05, 0x43, 0x07, 0x02, 0x6c},
    {0x6a, 0x02, 0x07, 0xb5, 0xae},
    {0x10, 0x42, 0x47, 0x02, 0x8e},
    {0xd2, 0x47, 0x02, 0xf5, 0xff},
    {0x06, 0x43, 0x07, 0x02, 0x6c},
    {0x60, 0x02, 0x07, 0xb5, 0xae},
    {0x08, 0x44, 0x07, 0x42, 0x8e},
    {0x7a, 0x02, 0x07, 0xb5, 0xae},
    {0xc1, 0x02, 0x02, 0x47, 0xbf},
    {0x0a, 0x44, 0x07, 0x42, 0x8e},
    {0x04, 0x43, 0x07, 0x02, 0x6c},
    {0x02, 0x43, 0x07, 0x02, 0x6c},
    {0x07, 0x43, 0x07, 0x02, 0x6c},
    {0x16, 0x42, 0x47, 0x42, 0x9f},
    {0x03, 0x44, 0x07, 0x02, 0x7d},
    {0x0b, 0x42, 0x07, 0x42, 0x7d},
    {0x05, 0x44, 0x07, 0x02, 0x7d},
    {0x1a, 0x42, 0x47, 0x42, 0x9f},
    {0x09, 0x42, 0x07, 0x42, 0x7d},
    {0xca, 0x47, 0x02, 0xb5, 0xee},
    {0x06, 0x44, 0x07, 0x02, 0x7d},
    {0x66, 0x02, 0x07, 0xb5, 0xae},
    {0xc2, 0x07, 0x02, 0x47, 0xbf},
    {0x19, 0x42, 0x47, 0x42, 0x9f},
    {0x0f, 0x42, 0x47, 0x02, 0x8e},
    {0xc6, 0x47, 0x02, 0xb5, 0xee},
    {0x04, 0x44, 0x07, 0x02, 0x7d},
    {0x02, 0x44, 0x07, 0x02, 0x7d},
    {0x07, 0x44, 0x07, 0x02, 0x7d},
    {0x0d, 0x42, 0x47, 0x02, 0x8e},
    {0x03, 0x42, 0x07, 0x02, 0x6c},
    {0x12, 0x42, 0x47, 0x42, 0x9f},
    {0x05, 0x42, 0x07, 0x02, 0x6c},
    {0x15, 0x42, 0x47, 0x42, 0x9f},
    {0x11, 0x42, 0x47, 0x02, 0x8e},
    {0xc4, 0x07, 0x42, 0xf5, 0xdd},
    {0x06, 0x42, 0x07, 0x02, 0x6c},
    {0x01, 0x42, 0x47, 0x02, 0x8e},
    {0x08, 0x42, 0x07, 0x42, 0x7d},
    {0xc3, 0x07, 0x42, 0xb5, 0xcc},
    {0xc1, 0x07, 0x02, 0x47, 0xbf},
    {0x0a, 0x42, 0x07, 0x42, 0x7d},
    {0x04, 0x42, 0x07, 0x02, 0x6c},
    {0x02, 0x42, 0x07, 0x02, 0x6c},
    {0x07, 0x42, 0x07, 0x02, 0x6c}
};

CONST BYTE GlobTableBlack[32768][5] = 
{
    {0xb3, 0x00, 0x00, 0x00, 0x00},
    {0x03, 0xb3, 0x40, 0x00, 0x02},
    {0x01, 0xb3, 0x40, 0x40, 0x03},
    {0x02, 0xb3, 0x40, 0x00, 0x02},
    {0x06, 0xf3, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0xf3, 0x00, 0x66},
    {0x04, 0xb3, 0x40, 0x40, 0x03},
    {0x02, 0x03, 0xf3, 0x00, 0x66},
    {0x09, 0xf3, 0x40, 0x00, 0x06},
    {0x03, 0x0b, 0xf3, 0x00, 0x77},
    {0x01, 0x03, 0xf3, 0x40, 0x77},
    {0x02, 0x0b, 0xf3, 0x00, 0x77},
    {0x05, 0xf3, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0xf3, 0x00, 0x66},
    {0x04, 0x03, 0xf3, 0x40, 0x77},
    {0x02, 0x05, 0xf3, 0x00, 0x66},
    {0x0a, 0xf3, 0x40, 0x40, 0x07},
    {0x03, 0x0c, 0xf5, 0x00, 0x88},
    {0x01, 0x0b, 0xf5, 0x40, 0x88},
    {0x02, 0x0c, 0xf5, 0x00, 0x88},
    {0x06, 0x43, 0xb5, 0x00, 0x88},
    {0x03, 0x09, 0xf3, 0x00, 0x77},
    {0x04, 0x0b, 0xf5, 0x40, 0x88},
    {0x02, 0x09, 0xf3, 0x00, 0x77},
    {0x07, 0xf3, 0x00, 0x40, 0x05},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0xf3, 0x40, 0x77},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0xb5, 0x00, 0x88},
    {0x03, 0x06, 0xf3, 0x00, 0x66},
    {0x04, 0x05, 0xf3, 0x40, 0x77},
    {0x02, 0x06, 0xf3, 0x00, 0x66},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0xf5, 0x00, 0x99},
    {0x01, 0x0c, 0xf5, 0x40, 0x99},
    {0x02, 0x14, 0xf5, 0x00, 0x99},
    {0x06, 0x4b, 0xb5, 0x00, 0x99},
    {0x03, 0x82, 0xf3, 0x00, 0x07},
    {0x04, 0x0c, 0xf5, 0x40, 0x99},
    {0x02, 0x82, 0xf3, 0x00, 0x07},
    {0x08, 0xf3, 0x40, 0x00, 0x06},
    {0x03, 0x18, 0xf5, 0x00, 0x99},
    {0x01, 0x09, 0xf5, 0x40, 0x88},
    {0x02, 0x18, 0xf5, 0x00, 0x99},
    {0x05, 0x4b, 0xb5, 0x00, 0x99},
    {0x03, 0x0e, 0xf5, 0x00, 0x88},
    {0x04, 0x09, 0xf5, 0x40, 0x88},
    {0x02, 0x0e, 0xf5, 0x00, 0x88},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0xf5, 0x00, 0x99},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0xf5, 0x00, 0x99},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0xf3, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf3, 0x00, 0x66},
    {0x07, 0x43, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0xf3, 0x00, 0x66},
    {0x01, 0x06, 0xf3, 0x40, 0x77},
    {0x02, 0x02, 0xf3, 0x00, 0x66},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0xf3, 0x00, 0x66},
    {0x04, 0x06, 0xf3, 0x40, 0x77},
    {0x02, 0x07, 0xf3, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0xf5, 0x00, 0x99},
    {0x01, 0x14, 0xf5, 0x40, 0xaa},
    {0x02, 0x17, 0xf5, 0x00, 0x99},
    {0x06, 0x4c, 0xb5, 0x00, 0xaa},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0xf5, 0x00, 0xaa},
    {0x03, 0x1b, 0xf5, 0x00, 0x99},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0xf5, 0x00, 0x99},
    {0x05, 0x4c, 0xb5, 0x00, 0xaa},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0xf3, 0x40, 0x40, 0x07},
    {0x03, 0x27, 0xf5, 0x00, 0xaa},
    {0x01, 0x18, 0xf5, 0x40, 0xaa},
    {0x02, 0x27, 0xf5, 0x00, 0xaa},
    {0x06, 0x49, 0xb5, 0x00, 0x99},
    {0x03, 0x10, 0xf5, 0x00, 0x88},
    {0x04, 0x18, 0xf5, 0x40, 0xaa},
    {0x02, 0x10, 0xf5, 0x00, 0x88},
    {0x07, 0x4b, 0xb5, 0x40, 0xaa},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0xf5, 0x40, 0x99},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0xb5, 0x00, 0x99},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0xf5, 0x40, 0x99},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0xf5, 0x00, 0x99},
    {0x01, 0x1c, 0xf5, 0x40, 0xaa},
    {0x02, 0x13, 0xf5, 0x00, 0x99},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0xf3, 0x00, 0x77},
    {0x04, 0x1c, 0xf5, 0x40, 0xaa},
    {0x02, 0x08, 0xf3, 0x00, 0x77},
    {0x08, 0x43, 0xf5, 0x00, 0xaa},
    {0x03, 0x37, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0xf3, 0x40, 0x77},
    {0x02, 0x37, 0xf5, 0x00, 0xaa},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0xf3, 0x00, 0x07},
    {0x04, 0x04, 0xf3, 0x40, 0x77},
    {0x02, 0x81, 0xf3, 0x00, 0x07},
    {0x0c, 0xf3, 0x40, 0x40, 0x07},
    {0x03, 0x0a, 0xf3, 0x00, 0x77},
    {0x01, 0x02, 0xf3, 0x40, 0x77},
    {0x02, 0x0a, 0xf3, 0x00, 0x77},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0xf3, 0x40, 0x77},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0xf3, 0x40, 0x77},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0xf3, 0x40, 0x77},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x2d, 0xf5, 0x00, 0xaa},
    {0x01, 0x17, 0xf5, 0x40, 0xaa},
    {0x02, 0x2d, 0xf5, 0x00, 0xaa},
    {0x06, 0x54, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0xf5, 0x00, 0xbb},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0xf5, 0x40, 0xbb},
    {0x03, 0x35, 0xf5, 0x00, 0xaa},
    {0x01, 0x1b, 0xf5, 0x40, 0xaa},
    {0x02, 0x35, 0xf5, 0x00, 0xaa},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0xf5, 0x40, 0xaa},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0xb5, 0x40, 0xbb},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x23, 0xf5, 0x00, 0xaa},
    {0x01, 0x27, 0xf5, 0x40, 0xbb},
    {0x02, 0x23, 0xf5, 0x00, 0xaa},
    {0x06, 0x58, 0xb5, 0x00, 0xbb},
    {0x03, 0x82, 0x43, 0xb5, 0xbb},
    {0x04, 0x27, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x43, 0xb5, 0xbb},
    {0x08, 0x4b, 0xf5, 0x00, 0xbb},
    {0x03, 0x33, 0xf5, 0x00, 0xaa},
    {0x01, 0x10, 0xf5, 0x40, 0x99},
    {0x02, 0x33, 0xf5, 0x00, 0xaa},
    {0x05, 0x58, 0xb5, 0x00, 0xbb},
    {0x03, 0x0f, 0xf5, 0x00, 0x88},
    {0x04, 0x10, 0xf5, 0x40, 0x99},
    {0x02, 0x0f, 0xf5, 0x00, 0x88},
    {0x54, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3f, 0xf5, 0x00, 0xaa},
    {0x01, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x3f, 0xf5, 0x00, 0xaa},
    {0x06, 0x4e, 0xb5, 0x00, 0xaa},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0xb5, 0x40, 0xaa},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0xb5, 0x00, 0xaa},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x0d, 0xf5, 0x00, 0x88},
    {0x01, 0x13, 0xf5, 0x40, 0xaa},
    {0x02, 0x0d, 0xf5, 0x00, 0x88},
    {0x06, 0x5c, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x97, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0xf5, 0x40, 0x88},
    {0x02, 0x97, 0xf5, 0x00, 0x0b},
    {0x05, 0x5c, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0xf5, 0x40, 0x88},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x43, 0xf5, 0x40, 0xbb},
    {0x03, 0x2b, 0xf5, 0x00, 0xaa},
    {0x01, 0x37, 0xf5, 0x40, 0xbb},
    {0x02, 0x2b, 0xf5, 0x00, 0xaa},
    {0x06, 0x44, 0xb5, 0x00, 0x88},
    {0x03, 0x11, 0xf5, 0x00, 0x88},
    {0x04, 0x37, 0xf5, 0x40, 0xbb},
    {0x02, 0x11, 0xf5, 0x00, 0x88},
    {0x07, 0xda, 0xb5, 0x40, 0x0b},
    {0x03, 0x93, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x93, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0xb5, 0x00, 0x88},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0xf5, 0x00, 0x88},
    {0x01, 0x0a, 0xf5, 0x40, 0x88},
    {0x02, 0x01, 0xf5, 0x00, 0x88},
    {0x06, 0x42, 0xb5, 0x00, 0x88},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0xf5, 0x40, 0x88},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0xb5, 0x00, 0x88},
    {0x03, 0x81, 0x43, 0xb5, 0xbb},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0xb5, 0xbb},
    {0x0c, 0x43, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0xf5, 0x00, 0xaa},
    {0x01, 0x2d, 0xf5, 0x40, 0xbb},
    {0x02, 0x1d, 0xf5, 0x00, 0xaa},
    {0x06, 0x57, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x4c, 0xf5, 0x00, 0xcc},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x4b, 0xf5, 0x40, 0xcc},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x54, 0xb5, 0x40, 0xcc},
    {0x03, 0x9a, 0x43, 0xb5, 0xcc},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x43, 0xb5, 0xcc},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x03, 0xb5, 0x00, 0xcc},
    {0x03, 0x21, 0xf5, 0x00, 0xaa},
    {0x01, 0x35, 0xf5, 0x40, 0xbb},
    {0x02, 0x21, 0xf5, 0x00, 0xaa},
    {0x06, 0x5b, 0xb5, 0x00, 0xbb},
    {0x03, 0x82, 0x4b, 0xb5, 0xcc},
    {0x04, 0x35, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x4b, 0xb5, 0xcc},
    {0x08, 0x4c, 0xf5, 0x00, 0xcc},
    {0x03, 0x31, 0xf5, 0x00, 0xaa},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0xf5, 0x00, 0xaa},
    {0x05, 0x5b, 0xb5, 0x00, 0xbb},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0x82, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0xf5, 0x00, 0xaa},
    {0x01, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0xf5, 0x00, 0xaa},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x78, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0xf5, 0x00, 0xaa},
    {0x01, 0x23, 0xf5, 0x40, 0xbb},
    {0x02, 0x2f, 0xf5, 0x00, 0xaa},
    {0x06, 0x67, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x03, 0x6c},
    {0x04, 0x23, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x03, 0x6c},
    {0x09, 0x49, 0xf5, 0x00, 0xbb},
    {0x03, 0x3b, 0xf5, 0x00, 0xaa},
    {0x01, 0x82, 0x43, 0xf5, 0xcc},
    {0x02, 0x3b, 0xf5, 0x00, 0xaa},
    {0x05, 0x67, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x03, 0x6c},
    {0x04, 0x82, 0x43, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x03, 0x6c},
    {0x0b, 0x4b, 0xf5, 0x40, 0xcc},
    {0x03, 0x29, 0xf5, 0x00, 0xaa},
    {0x01, 0x33, 0xf5, 0x40, 0xbb},
    {0x02, 0x29, 0xf5, 0x00, 0xaa},
    {0x06, 0x50, 0xb5, 0x00, 0xaa},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0xf5, 0x40, 0xbb},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x58, 0xb5, 0x40, 0xcc},
    {0x03, 0x8f, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0xf5, 0x40, 0x99},
    {0x02, 0x8f, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0xb5, 0x00, 0xaa},
    {0x03, 0x06, 0x43, 0x03, 0x6c},
    {0x04, 0x0f, 0xf5, 0x40, 0x99},
    {0x02, 0x06, 0x43, 0x03, 0x6c},
    {0x5e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0xf5, 0x00, 0xaa},
    {0x01, 0x3f, 0xf5, 0x40, 0xbb},
    {0x02, 0x1f, 0xf5, 0x00, 0xaa},
    {0x06, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0xf5, 0x40, 0xbb},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0xf5, 0x00, 0xbb},
    {0x03, 0x39, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0xf5, 0x00, 0xaa},
    {0x05, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4b, 0xb5, 0xcc},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x4b, 0xb5, 0xcc},
    {0x0c, 0x4b, 0xf5, 0x40, 0xcc},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x03, 0x6c},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x03, 0x6c},
    {0x07, 0x4e, 0xb5, 0x40, 0xbb},
    {0x03, 0x02, 0x43, 0x03, 0x6c},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x03, 0x6c},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x03, 0x6c},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x03, 0x6c},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x16, 0xf5, 0x00, 0x99},
    {0x01, 0x0d, 0xf5, 0x40, 0x99},
    {0x02, 0x16, 0xf5, 0x00, 0x99},
    {0x06, 0x53, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0xf5, 0x40, 0x99},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x1a, 0xf5, 0x00, 0x99},
    {0x01, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0xf5, 0x00, 0x99},
    {0x06, 0x48, 0xb5, 0x00, 0x99},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x5c, 0xb5, 0x40, 0xcc},
    {0x03, 0x8b, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0xb5, 0x00, 0x99},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x79, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0xf5, 0x00, 0xaa},
    {0x01, 0x2b, 0xf5, 0x40, 0xbb},
    {0x02, 0x25, 0xf5, 0x00, 0xaa},
    {0x06, 0x77, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x45, 0xb5, 0xbb},
    {0x04, 0x2b, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x45, 0xb5, 0xbb},
    {0x08, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x19, 0xf5, 0x00, 0x99},
    {0x01, 0x11, 0xf5, 0x40, 0x99},
    {0x02, 0x19, 0xf5, 0x00, 0x99},
    {0x05, 0x77, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0xf5, 0x40, 0x99},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x76, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0xf5, 0x40, 0x99},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0xb5, 0x00, 0x99},
    {0x03, 0x03, 0x42, 0x03, 0x6c},
    {0x04, 0x01, 0xf5, 0x40, 0x99},
    {0x02, 0x03, 0x42, 0x03, 0x6c},
    {0x09, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x12, 0xf5, 0x00, 0x99},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0xf5, 0x00, 0x99},
    {0x05, 0x4a, 0xb5, 0x00, 0x99},
    {0x03, 0x05, 0x42, 0x03, 0x6c},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x03, 0x6c},
    {0x0b, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x15, 0xf5, 0x00, 0x99},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0xf5, 0x00, 0x99},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0xb5, 0x40, 0x99},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x43, 0xf5, 0xcc},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x03, 0x6c},
    {0x04, 0x81, 0x43, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x03, 0x6c},
    {0x4e, 0x03, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x83, 0x43, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x43, 0xb5, 0xcc},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0xb5, 0xbb},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0xb5, 0xbb},
    {0x0c, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x03, 0x6c},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x03, 0x6c},
    {0x07, 0x47, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x42, 0x03, 0x6c},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x03, 0x6c},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x03, 0x6c},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x9c, 0xf5, 0x00, 0x0d},
    {0x01, 0x1d, 0xf5, 0x40, 0xbb},
    {0x02, 0x9c, 0xf5, 0x00, 0x0d},
    {0x06, 0x6d, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x49, 0xb5, 0x6c},
    {0x04, 0x1d, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x49, 0xb5, 0x6c},
    {0x09, 0x54, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x46, 0xb5, 0x7b},
    {0x01, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x0b, 0x46, 0xb5, 0x7b},
    {0x05, 0x6d, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x49, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x05, 0x49, 0xb5, 0x6c},
    {0x0a, 0x4c, 0xf5, 0x40, 0xdd},
    {0x03, 0x0c, 0x41, 0xb5, 0x8b},
    {0x01, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x0c, 0x41, 0xb5, 0x8b},
    {0x06, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x09, 0x46, 0xb5, 0x7b},
    {0x04, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x09, 0x46, 0xb5, 0x7b},
    {0x07, 0x57, 0xb5, 0x40, 0xcc},
    {0x03, 0x9a, 0x4b, 0xb5, 0xdd},
    {0x01, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x9a, 0x4b, 0xb5, 0xdd},
    {0x05, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x49, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x06, 0x49, 0xb5, 0x6c},
    {0x4d, 0x0b, 0xb5, 0x00, 0xdd},
    {0x03, 0x14, 0x43, 0xb5, 0x9b},
    {0x01, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x14, 0x43, 0xb5, 0x9b},
    {0x06, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x82, 0x4c, 0xb5, 0xdd},
    {0x04, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x82, 0x4c, 0xb5, 0xdd},
    {0x08, 0x54, 0xf5, 0x00, 0xdd},
    {0x03, 0x18, 0x43, 0xb5, 0x9b},
    {0x01, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x18, 0x43, 0xb5, 0x9b},
    {0x05, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x0e, 0x41, 0xb5, 0x8b},
    {0x04, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x0e, 0x41, 0xb5, 0x8b},
    {0x4f, 0x03, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x43, 0xb5, 0x9b},
    {0x01, 0x9a, 0x43, 0xf5, 0xdd},
    {0x02, 0x1c, 0x43, 0xb5, 0x9b},
    {0x06, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x49, 0xb5, 0x6c},
    {0x04, 0x9a, 0x43, 0xf5, 0xdd},
    {0x02, 0x04, 0x49, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x49, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x49, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x49, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x49, 0xb5, 0x6c},
    {0x74, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x43, 0xb5, 0x9b},
    {0x01, 0x21, 0xf5, 0x40, 0xbb},
    {0x02, 0x17, 0x43, 0xb5, 0x9b},
    {0x06, 0x75, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x0b, 0x6d},
    {0x04, 0x21, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x0b, 0x6d},
    {0x09, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x1b, 0x43, 0xb5, 0x9b},
    {0x01, 0x82, 0x4b, 0xf5, 0xdd},
    {0x02, 0x1b, 0x43, 0xb5, 0x9b},
    {0x05, 0x75, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x0b, 0x6d},
    {0x04, 0x82, 0x4b, 0xf5, 0xdd},
    {0x02, 0x05, 0x43, 0x0b, 0x6d},
    {0x0b, 0x4c, 0xf5, 0x40, 0xdd},
    {0x03, 0x28, 0xf5, 0x00, 0xaa},
    {0x01, 0x31, 0xf5, 0x40, 0xbb},
    {0x02, 0x28, 0xf5, 0x00, 0xaa},
    {0x06, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x10, 0x41, 0xb5, 0x8b},
    {0x04, 0x31, 0xf5, 0x40, 0xbb},
    {0x02, 0x10, 0x41, 0xb5, 0x8b},
    {0x07, 0x5b, 0xb5, 0x40, 0xcc},
    {0x03, 0x8d, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x8d, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0x0b, 0x6d},
    {0x04, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x0b, 0x6d},
    {0x70, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0xb5, 0x9b},
    {0x01, 0x3d, 0xf5, 0x40, 0xbb},
    {0x02, 0x13, 0x43, 0xb5, 0x9b},
    {0x06, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0xb5, 0x7b},
    {0x04, 0x3d, 0xf5, 0x40, 0xbb},
    {0x02, 0x08, 0x46, 0xb5, 0x7b},
    {0x08, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x38, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x38, 0xf5, 0x00, 0xaa},
    {0x05, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4c, 0xb5, 0xdd},
    {0x04, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x81, 0x4c, 0xb5, 0xdd},
    {0x0c, 0x4c, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x46, 0xb5, 0x7b},
    {0x01, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x0a, 0x46, 0xb5, 0x7b},
    {0x06, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0x0b, 0x6d},
    {0x04, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0x0b, 0x6d},
    {0x07, 0x45, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0x0b, 0x6d},
    {0x01, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0x0b, 0x6d},
    {0x05, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0x0b, 0x6d},
    {0x04, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0x0b, 0x6d},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2e, 0xf5, 0x00, 0xaa},
    {0x01, 0x2f, 0xf5, 0x40, 0xbb},
    {0x02, 0x2e, 0xf5, 0x00, 0xaa},
    {0x06, 0x63, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x03, 0x6d},
    {0x04, 0x2f, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x41, 0x03, 0x6d},
    {0x09, 0x58, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x43, 0x03, 0x7d},
    {0x01, 0x03, 0x43, 0x43, 0x7d},
    {0x02, 0x0b, 0x43, 0x03, 0x7d},
    {0x05, 0x63, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x03, 0x6d},
    {0x04, 0x03, 0x43, 0x43, 0x7d},
    {0x02, 0x05, 0x41, 0x03, 0x6d},
    {0x0a, 0x49, 0xf5, 0x40, 0xcc},
    {0x03, 0x36, 0xf5, 0x00, 0xaa},
    {0x01, 0x3b, 0xf5, 0x40, 0xbb},
    {0x02, 0x36, 0xf5, 0x00, 0xaa},
    {0x06, 0xc2, 0x03, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x03, 0x7d},
    {0x04, 0x3b, 0xf5, 0x40, 0xbb},
    {0x02, 0x09, 0x43, 0x03, 0x7d},
    {0x07, 0x67, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x43, 0x7d},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x03, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x03, 0x6d},
    {0x04, 0x05, 0x43, 0x43, 0x7d},
    {0x02, 0x06, 0x41, 0x03, 0x6d},
    {0x6c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0xf5, 0x00, 0xaa},
    {0x01, 0x29, 0xf5, 0x40, 0xbb},
    {0x02, 0x24, 0xf5, 0x00, 0xaa},
    {0x06, 0x73, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x49, 0xb5, 0xcc},
    {0x04, 0x29, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x49, 0xb5, 0xcc},
    {0x08, 0x58, 0xf5, 0x00, 0xdd},
    {0x03, 0x34, 0xf5, 0x00, 0xaa},
    {0x01, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x34, 0xf5, 0x00, 0xaa},
    {0x05, 0x73, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x41, 0xb5, 0x8b},
    {0x04, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x41, 0xb5, 0x8b},
    {0x64, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0xf5, 0x00, 0xaa},
    {0x01, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0xf5, 0x00, 0xaa},
    {0x06, 0x4f, 0xb5, 0x00, 0xaa},
    {0x03, 0x04, 0x41, 0x03, 0x6d},
    {0x04, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x03, 0x6d},
    {0x07, 0x50, 0xb5, 0x40, 0xbb},
    {0x03, 0x02, 0x41, 0x03, 0x6d},
    {0x01, 0x06, 0x43, 0x43, 0x7d},
    {0x02, 0x02, 0x41, 0x03, 0x6d},
    {0x05, 0x4f, 0xb5, 0x00, 0xaa},
    {0x03, 0x07, 0x41, 0x03, 0x6d},
    {0x04, 0x06, 0x43, 0x43, 0x7d},
    {0x02, 0x07, 0x41, 0x03, 0x6d},
    {0x86, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x41, 0xb5, 0x8b},
    {0x01, 0x1f, 0xf5, 0x40, 0xbb},
    {0x02, 0x0d, 0x41, 0xb5, 0x8b},
    {0x06, 0x7f, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x42, 0x0b, 0x6d},
    {0x04, 0x1f, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x42, 0x0b, 0x6d},
    {0x09, 0x4e, 0xf5, 0x00, 0xcc},
    {0x03, 0x99, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x99, 0xf5, 0x00, 0x0b},
    {0x05, 0x7f, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x42, 0x0b, 0x6d},
    {0x04, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0x0b, 0x6d},
    {0x0b, 0x49, 0xf5, 0x40, 0xcc},
    {0x03, 0x2c, 0xf5, 0x00, 0xaa},
    {0x01, 0x39, 0xf5, 0x40, 0xbb},
    {0x02, 0x2c, 0xf5, 0x00, 0xaa},
    {0x06, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x11, 0x41, 0xb5, 0x8b},
    {0x04, 0x39, 0xf5, 0x40, 0xbb},
    {0x02, 0x11, 0x41, 0xb5, 0x8b},
    {0x07, 0xc9, 0xb5, 0x40, 0x0d},
    {0x03, 0x95, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x4b, 0xf5, 0xdd},
    {0x02, 0x95, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0x0b, 0x6d},
    {0x04, 0x81, 0x4b, 0xf5, 0xdd},
    {0x02, 0x06, 0x42, 0x0b, 0x6d},
    {0x4e, 0x0b, 0xb5, 0x00, 0xdd},
    {0x03, 0x01, 0x41, 0xb5, 0x8b},
    {0x01, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x01, 0x41, 0xb5, 0x8b},
    {0x06, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x03, 0x7d},
    {0x04, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x03, 0x7d},
    {0x08, 0x4e, 0xf5, 0x00, 0xcc},
    {0x03, 0x83, 0x4b, 0xb5, 0xdd},
    {0x01, 0x04, 0x43, 0x43, 0x7d},
    {0x02, 0x83, 0x4b, 0xb5, 0xdd},
    {0x05, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x81, 0x49, 0xb5, 0xcc},
    {0x04, 0x04, 0x43, 0x43, 0x7d},
    {0x02, 0x81, 0x49, 0xb5, 0xcc},
    {0x0c, 0x49, 0xf5, 0x40, 0xcc},
    {0x03, 0x0a, 0x43, 0x03, 0x7d},
    {0x01, 0x02, 0x43, 0x43, 0x7d},
    {0x02, 0x0a, 0x43, 0x03, 0x7d},
    {0x06, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0x0b, 0x6d},
    {0x04, 0x02, 0x43, 0x43, 0x7d},
    {0x02, 0x04, 0x42, 0x0b, 0x6d},
    {0x07, 0x46, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x0b, 0x6d},
    {0x01, 0x07, 0x43, 0x43, 0x7d},
    {0x02, 0x02, 0x42, 0x0b, 0x6d},
    {0x05, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0x0b, 0x6d},
    {0x04, 0x07, 0x43, 0x43, 0x7d},
    {0x02, 0x07, 0x42, 0x0b, 0x6d},
    {0xf4, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0xf5, 0x00, 0xaa},
    {0x01, 0x16, 0xf5, 0x40, 0xaa},
    {0x02, 0x1e, 0xf5, 0x00, 0xaa},
    {0x06, 0x4d, 0xb5, 0x00, 0xaa},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x5c, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0xb5, 0x00, 0xaa},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x53, 0xb5, 0x40, 0xcc},
    {0x03, 0x9a, 0x45, 0xb5, 0xcc},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x45, 0xb5, 0xcc},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x22, 0xf5, 0x00, 0xaa},
    {0x01, 0x1a, 0xf5, 0x40, 0xaa},
    {0x02, 0x22, 0xf5, 0x00, 0xaa},
    {0x06, 0xd7, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xda, 0xb5, 0x0d},
    {0x04, 0x1a, 0xf5, 0x40, 0xaa},
    {0x02, 0x82, 0xda, 0xb5, 0x0d},
    {0x08, 0x5c, 0xf5, 0x00, 0xdd},
    {0x03, 0x32, 0xf5, 0x00, 0xaa},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0xf5, 0x00, 0xaa},
    {0x05, 0xd7, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0xf5, 0x00, 0xaa},
    {0x01, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0xf5, 0x00, 0xaa},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0xb5, 0x40, 0xaa},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x7c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x30, 0xf5, 0x00, 0xaa},
    {0x01, 0x25, 0xf5, 0x40, 0xbb},
    {0x02, 0x30, 0xf5, 0x00, 0xaa},
    {0x06, 0x6b, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x05, 0x6c},
    {0x04, 0x25, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x05, 0x6c},
    {0x09, 0x44, 0xf5, 0x00, 0xaa},
    {0x03, 0x3c, 0xf5, 0x00, 0xaa},
    {0x01, 0x82, 0x45, 0xf5, 0xcc},
    {0x02, 0x3c, 0xf5, 0x00, 0xaa},
    {0x05, 0x6b, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x05, 0x6c},
    {0x04, 0x82, 0x45, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x05, 0x6c},
    {0x0b, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x2a, 0xf5, 0x00, 0xaa},
    {0x01, 0x19, 0xf5, 0x40, 0xaa},
    {0x02, 0x2a, 0xf5, 0x00, 0xaa},
    {0x06, 0x51, 0xb5, 0x00, 0xaa},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0xf5, 0x40, 0xaa},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x77, 0xb5, 0x40, 0xdd},
    {0x03, 0x91, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x91, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0xb5, 0x00, 0xaa},
    {0x03, 0x06, 0x43, 0x05, 0x6c},
    {0x04, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x05, 0x6c},
    {0x68, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0xf5, 0x00, 0xaa},
    {0x01, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0xf5, 0x00, 0xaa},
    {0x06, 0xd3, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0xf5, 0x00, 0xaa},
    {0x03, 0x3a, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0xf5, 0x00, 0xaa},
    {0x05, 0xd3, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xda, 0xb5, 0x0d},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xda, 0xb5, 0x0d},
    {0x0c, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x05, 0x6c},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x05, 0x6c},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x05, 0x6c},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x05, 0x6c},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x05, 0x6c},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x05, 0x6c},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x16, 0x43, 0xb5, 0x9b},
    {0x01, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x16, 0x43, 0xb5, 0x9b},
    {0x06, 0x41, 0xb5, 0x00, 0xaa},
    {0x03, 0x03, 0x44, 0x03, 0x6d},
    {0x04, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x03, 0x6d},
    {0x09, 0x42, 0xf5, 0x00, 0xaa},
    {0x03, 0x0b, 0x42, 0x03, 0x7d},
    {0x01, 0x03, 0x42, 0x43, 0x7d},
    {0x02, 0x0b, 0x42, 0x03, 0x7d},
    {0x05, 0x41, 0xb5, 0x00, 0xaa},
    {0x03, 0x05, 0x44, 0x03, 0x6d},
    {0x04, 0x03, 0x42, 0x43, 0x7d},
    {0x02, 0x05, 0x44, 0x03, 0x6d},
    {0x0a, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x1a, 0x43, 0xb5, 0x9b},
    {0x01, 0x12, 0xf5, 0x40, 0xaa},
    {0x02, 0x1a, 0x43, 0xb5, 0x9b},
    {0x06, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x03, 0x7d},
    {0x04, 0x12, 0xf5, 0x40, 0xaa},
    {0x02, 0x09, 0x42, 0x03, 0x7d},
    {0x07, 0x4a, 0xb5, 0x40, 0xaa},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x43, 0x7d},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x03, 0x6d},
    {0x04, 0x05, 0x42, 0x43, 0x7d},
    {0x02, 0x06, 0x44, 0x03, 0x6d},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0xf5, 0x00, 0xaa},
    {0x01, 0x15, 0xf5, 0x40, 0xaa},
    {0x02, 0x26, 0xf5, 0x00, 0xaa},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0xb5, 0xbb},
    {0x04, 0x15, 0xf5, 0x40, 0xaa},
    {0x02, 0x82, 0x46, 0xb5, 0xbb},
    {0x08, 0x42, 0xf5, 0x00, 0xaa},
    {0x03, 0x19, 0x43, 0xb5, 0x9b},
    {0x01, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x19, 0x43, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x03, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x03, 0x6d},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x03, 0x6d},
    {0x07, 0x44, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x03, 0x6d},
    {0x01, 0x06, 0x42, 0x43, 0x7d},
    {0x02, 0x02, 0x44, 0x03, 0x6d},
    {0x05, 0xc1, 0x03, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x03, 0x6d},
    {0x04, 0x06, 0x42, 0x43, 0x7d},
    {0x02, 0x07, 0x44, 0x03, 0x6d},
    {0x81, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x05, 0x6c},
    {0x04, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x05, 0x6c},
    {0x09, 0x47, 0xf5, 0x00, 0xaa},
    {0x03, 0x12, 0x43, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0xb5, 0x9b},
    {0x05, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x05, 0x6c},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x05, 0x6c},
    {0x0b, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x15, 0x43, 0xb5, 0x9b},
    {0x01, 0x83, 0x43, 0xf5, 0xdd},
    {0x02, 0x15, 0x43, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x43, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0xf5, 0x9b},
    {0x03, 0x84, 0x43, 0xb5, 0xdd},
    {0x01, 0x81, 0x45, 0xf5, 0xcc},
    {0x02, 0x84, 0x43, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x05, 0x6c},
    {0x04, 0x81, 0x45, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x05, 0x6c},
    {0x4e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x03, 0x7d},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x03, 0x7d},
    {0x08, 0x47, 0xf5, 0x00, 0xaa},
    {0x03, 0x83, 0x45, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0x43, 0x7d},
    {0x02, 0x83, 0x45, 0xb5, 0xcc},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0xb5, 0xbb},
    {0x04, 0x04, 0x42, 0x43, 0x7d},
    {0x02, 0x81, 0x46, 0xb5, 0xbb},
    {0x0c, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x42, 0x03, 0x7d},
    {0x01, 0x02, 0x42, 0x43, 0x7d},
    {0x02, 0x0a, 0x42, 0x03, 0x7d},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x05, 0x6c},
    {0x04, 0x02, 0x42, 0x43, 0x7d},
    {0x02, 0x04, 0x42, 0x05, 0x6c},
    {0x07, 0x47, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x05, 0x6c},
    {0x01, 0x07, 0x42, 0x43, 0x7d},
    {0x02, 0x02, 0x42, 0x05, 0x6c},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x05, 0x6c},
    {0x04, 0x07, 0x42, 0x43, 0x7d},
    {0x02, 0x07, 0x42, 0x05, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xb4, 0xf5, 0x00, 0x0b},
    {0x01, 0x9c, 0xf5, 0x40, 0x0e},
    {0x02, 0xb4, 0xf5, 0x00, 0x0b},
    {0x06, 0x5d, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x4a, 0xb5, 0x6d},
    {0x04, 0x9c, 0xf5, 0x40, 0x0e},
    {0x02, 0x03, 0x4a, 0xb5, 0x6d},
    {0x09, 0x57, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x49, 0xb5, 0x7d},
    {0x01, 0x03, 0x49, 0xf5, 0x7d},
    {0x02, 0x0b, 0x49, 0xb5, 0x7d},
    {0x05, 0x5d, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x4a, 0xb5, 0x6d},
    {0x04, 0x03, 0x49, 0xf5, 0x7d},
    {0x02, 0x05, 0x4a, 0xb5, 0x6d},
    {0x0a, 0x54, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x46, 0xb5, 0x8c},
    {0x01, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x0c, 0x46, 0xb5, 0x8c},
    {0x06, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x09, 0x49, 0xb5, 0x7d},
    {0x04, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x09, 0x49, 0xb5, 0x7d},
    {0x07, 0x6d, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x4c, 0xb5, 0xee},
    {0x01, 0x05, 0x49, 0xf5, 0x7d},
    {0x02, 0x9a, 0x4c, 0xb5, 0xee},
    {0x05, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x4a, 0xb5, 0x6d},
    {0x04, 0x05, 0x49, 0xf5, 0x7d},
    {0x02, 0x06, 0x4a, 0xb5, 0x6d},
    {0x4d, 0x0c, 0xb5, 0x00, 0xee},
    {0x03, 0x14, 0x41, 0xb5, 0x9c},
    {0x01, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x14, 0x41, 0xb5, 0x9c},
    {0x06, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x82, 0x54, 0xb5, 0xee},
    {0x04, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x82, 0x54, 0xb5, 0xee},
    {0x08, 0x57, 0xf5, 0x00, 0xdd},
    {0x03, 0x18, 0x41, 0xb5, 0x9c},
    {0x01, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x18, 0x41, 0xb5, 0x9c},
    {0x05, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x0e, 0x46, 0xb5, 0x8c},
    {0x04, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x0e, 0x46, 0xb5, 0x8c},
    {0x4f, 0x0b, 0xb5, 0x40, 0xee},
    {0x03, 0x1c, 0x41, 0xb5, 0x9c},
    {0x01, 0x9a, 0x4b, 0xf5, 0xee},
    {0x02, 0x1c, 0x41, 0xb5, 0x9c},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x4a, 0xb5, 0x6d},
    {0x04, 0x9a, 0x4b, 0xf5, 0xee},
    {0x02, 0x04, 0x4a, 0xb5, 0x6d},
    {0x07, 0x43, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x4a, 0xb5, 0x6d},
    {0x01, 0x06, 0x49, 0xf5, 0x7d},
    {0x02, 0x02, 0x4a, 0xb5, 0x6d},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x4a, 0xb5, 0x6d},
    {0x04, 0x06, 0x49, 0xf5, 0x7d},
    {0x02, 0x07, 0x4a, 0xb5, 0x6d},
    {0x52, 0x03, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x41, 0xb5, 0x9c},
    {0x01, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x17, 0x41, 0xb5, 0x9c},
    {0x06, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0x0c, 0x6e},
    {0x04, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0x0c, 0x6e},
    {0x09, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x1b, 0x41, 0xb5, 0x9c},
    {0x01, 0x82, 0x4c, 0xf5, 0xee},
    {0x02, 0x1b, 0x41, 0xb5, 0x9c},
    {0x05, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0x0c, 0x6e},
    {0x04, 0x82, 0x4c, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x0c, 0x6e},
    {0x0b, 0x54, 0xf5, 0x40, 0xee},
    {0x03, 0x27, 0x43, 0xb5, 0xac},
    {0x01, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x27, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x10, 0x46, 0xb5, 0x8c},
    {0x04, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x46, 0xb5, 0x8c},
    {0x07, 0x4b, 0x03, 0xf5, 0xac},
    {0x03, 0x89, 0x43, 0xb5, 0xee},
    {0x01, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x89, 0x43, 0xb5, 0xee},
    {0x05, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0x0c, 0x6e},
    {0x04, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x0c, 0x6e},
    {0x51, 0x03, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x41, 0xb5, 0x9c},
    {0x01, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x13, 0x41, 0xb5, 0x9c},
    {0x06, 0xda, 0x03, 0xb5, 0xee},
    {0x03, 0x08, 0x49, 0xb5, 0x7d},
    {0x04, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x08, 0x49, 0xb5, 0x7d},
    {0x08, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x37, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x49, 0xf5, 0x7d},
    {0x02, 0x37, 0x43, 0xb5, 0xac},
    {0x05, 0xda, 0x03, 0xb5, 0xee},
    {0x03, 0x81, 0x54, 0xb5, 0xee},
    {0x04, 0x04, 0x49, 0xf5, 0x7d},
    {0x02, 0x81, 0x54, 0xb5, 0xee},
    {0x0c, 0x54, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x49, 0xb5, 0x7d},
    {0x01, 0x02, 0x49, 0xf5, 0x7d},
    {0x02, 0x0a, 0x49, 0xb5, 0x7d},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0x0c, 0x6e},
    {0x04, 0x02, 0x49, 0xf5, 0x7d},
    {0x02, 0x04, 0x43, 0x0c, 0x6e},
    {0x07, 0x45, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0x0c, 0x6e},
    {0x01, 0x07, 0x49, 0xf5, 0x7d},
    {0x02, 0x02, 0x43, 0x0c, 0x6e},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0x0c, 0x6e},
    {0x04, 0x07, 0x49, 0xf5, 0x7d},
    {0x02, 0x07, 0x43, 0x0c, 0x6e},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2d, 0x43, 0xb5, 0xac},
    {0x01, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x2d, 0x43, 0xb5, 0xac},
    {0x06, 0x61, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x0b, 0x6e},
    {0x04, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0x0b, 0x6e},
    {0x09, 0x5b, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x43, 0x0b, 0x7e},
    {0x01, 0x03, 0x43, 0x4b, 0x7e},
    {0x02, 0x0b, 0x43, 0x0b, 0x7e},
    {0x05, 0x61, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x0b, 0x6e},
    {0x04, 0x03, 0x43, 0x4b, 0x7e},
    {0x02, 0x05, 0x41, 0x0b, 0x6e},
    {0x0a, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x35, 0x43, 0xb5, 0xac},
    {0x01, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x35, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x0b, 0xb5, 0xee},
    {0x03, 0x09, 0x43, 0x0b, 0x7e},
    {0x04, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0x0b, 0x7e},
    {0x07, 0x75, 0xb5, 0x40, 0xdd},
    {0x03, 0x87, 0x43, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x4b, 0x7e},
    {0x02, 0x87, 0x43, 0xb5, 0xee},
    {0x05, 0xc2, 0x0b, 0xb5, 0xee},
    {0x03, 0x06, 0x41, 0x0b, 0x6e},
    {0x04, 0x05, 0x43, 0x4b, 0x7e},
    {0x02, 0x06, 0x41, 0x0b, 0x6e},
    {0x72, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x43, 0xb5, 0xac},
    {0x01, 0x28, 0xf5, 0x40, 0xbb},
    {0x02, 0x23, 0x43, 0xb5, 0xac},
    {0x06, 0x71, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0xc2, 0xb5, 0x0c},
    {0x04, 0x28, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0xc2, 0xb5, 0x0c},
    {0x08, 0x5b, 0xf5, 0x00, 0xdd},
    {0x03, 0x33, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x33, 0x43, 0xb5, 0xac},
    {0x05, 0x71, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x46, 0xb5, 0x8c},
    {0x04, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x46, 0xb5, 0x8c},
    {0x62, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x43, 0xb5, 0xac},
    {0x01, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x43, 0xb5, 0xac},
    {0x06, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x0b, 0x6e},
    {0x04, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x0b, 0x6e},
    {0x07, 0x49, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0x0b, 0x6e},
    {0x01, 0x06, 0x43, 0x4b, 0x7e},
    {0x02, 0x02, 0x41, 0x0b, 0x6e},
    {0x05, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x0b, 0x6e},
    {0x04, 0x06, 0x43, 0x4b, 0x7e},
    {0x02, 0x07, 0x41, 0x0b, 0x6e},
    {0x9a, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x46, 0xb5, 0x8c},
    {0x01, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x0d, 0x46, 0xb5, 0x8c},
    {0x06, 0x7d, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x42, 0x0c, 0x6e},
    {0x04, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0x0c, 0x6e},
    {0x09, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x98, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x98, 0xf5, 0x00, 0x0b},
    {0x05, 0x7d, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x42, 0x0c, 0x6e},
    {0x04, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0x0c, 0x6e},
    {0x0b, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x2b, 0x43, 0xb5, 0xac},
    {0x01, 0x38, 0xf5, 0x40, 0xbb},
    {0x02, 0x2b, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x11, 0x46, 0xb5, 0x8c},
    {0x04, 0x38, 0xf5, 0x40, 0xbb},
    {0x02, 0x11, 0x46, 0xb5, 0x8c},
    {0x07, 0xc7, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x4c, 0xf5, 0xee},
    {0x02, 0x94, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0x0c, 0x6e},
    {0x04, 0x81, 0x4c, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x0c, 0x6e},
    {0x4e, 0x0c, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x46, 0xb5, 0x8c},
    {0x01, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x01, 0x46, 0xb5, 0x8c},
    {0x06, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0x0b, 0x7e},
    {0x04, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0x0b, 0x7e},
    {0x08, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x4c, 0xb5, 0xee},
    {0x01, 0x04, 0x43, 0x4b, 0x7e},
    {0x02, 0x83, 0x4c, 0xb5, 0xee},
    {0x05, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x81, 0xc2, 0xb5, 0x0c},
    {0x04, 0x04, 0x43, 0x4b, 0x7e},
    {0x02, 0x81, 0xc2, 0xb5, 0x0c},
    {0x0c, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x43, 0x0b, 0x7e},
    {0x01, 0x02, 0x43, 0x4b, 0x7e},
    {0x02, 0x0a, 0x43, 0x0b, 0x7e},
    {0x06, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0x0c, 0x6e},
    {0x04, 0x02, 0x43, 0x4b, 0x7e},
    {0x02, 0x04, 0x42, 0x0c, 0x6e},
    {0x07, 0x46, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x0c, 0x6e},
    {0x01, 0x07, 0x43, 0x4b, 0x7e},
    {0x02, 0x02, 0x42, 0x0c, 0x6e},
    {0x05, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0x0c, 0x6e},
    {0x04, 0x07, 0x43, 0x4b, 0x7e},
    {0x02, 0x07, 0x42, 0x0c, 0x6e},
    {0xf4, 0x4b, 0xf5, 0x00, 0x0e},
    {0x03, 0x1d, 0x43, 0xb5, 0xac},
    {0x01, 0x2e, 0xf5, 0x40, 0xbb},
    {0x02, 0x1d, 0x43, 0xb5, 0xac},
    {0x06, 0x6f, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x46, 0x03, 0x6e},
    {0x04, 0x2e, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x46, 0x03, 0x6e},
    {0x09, 0x67, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x03, 0x7e},
    {0x01, 0x03, 0x41, 0x43, 0x7e},
    {0x02, 0x0b, 0x41, 0x03, 0x7e},
    {0x05, 0x6f, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x46, 0x03, 0x6e},
    {0x04, 0x03, 0x41, 0x43, 0x7e},
    {0x02, 0x05, 0x46, 0x03, 0x6e},
    {0x0a, 0x58, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x43, 0x03, 0x8e},
    {0x01, 0x0b, 0x43, 0x43, 0x8e},
    {0x02, 0x0c, 0x43, 0x03, 0x8e},
    {0x06, 0x43, 0x03, 0x03, 0x8e},
    {0x03, 0x09, 0x41, 0x03, 0x7e},
    {0x04, 0x0b, 0x43, 0x43, 0x8e},
    {0x02, 0x09, 0x41, 0x03, 0x7e},
    {0x07, 0x63, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x49, 0xb5, 0xdd},
    {0x01, 0x05, 0x41, 0x43, 0x7e},
    {0x02, 0x9a, 0x49, 0xb5, 0xdd},
    {0x05, 0x43, 0x03, 0x03, 0x8e},
    {0x03, 0x06, 0x46, 0x03, 0x6e},
    {0x04, 0x05, 0x41, 0x43, 0x7e},
    {0x02, 0x06, 0x46, 0x03, 0x6e},
    {0x4d, 0x09, 0xb5, 0x00, 0xdd},
    {0x03, 0x21, 0x43, 0xb5, 0xac},
    {0x01, 0x36, 0xf5, 0x40, 0xbb},
    {0x02, 0x21, 0x43, 0xb5, 0xac},
    {0x06, 0x7b, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x58, 0xb5, 0xee},
    {0x04, 0x36, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x58, 0xb5, 0xee},
    {0x08, 0x67, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x43, 0x8e},
    {0x02, 0x31, 0x43, 0xb5, 0xac},
    {0x05, 0x7b, 0xb5, 0x00, 0xcc},
    {0x03, 0x0e, 0x43, 0x03, 0x8e},
    {0x04, 0x09, 0x43, 0x43, 0x8e},
    {0x02, 0x0e, 0x43, 0x03, 0x8e},
    {0x5a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x43, 0xb5, 0xac},
    {0x01, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x03, 0x8e},
    {0x03, 0x04, 0x46, 0x03, 0x6e},
    {0x04, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0x03, 0x6e},
    {0x07, 0xc2, 0x03, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x03, 0x6e},
    {0x01, 0x06, 0x41, 0x43, 0x7e},
    {0x02, 0x02, 0x46, 0x03, 0x6e},
    {0x05, 0x45, 0x03, 0x03, 0x8e},
    {0x03, 0x07, 0x46, 0x03, 0x6e},
    {0x04, 0x06, 0x41, 0x43, 0x7e},
    {0x02, 0x07, 0x46, 0x03, 0x6e},
    {0x96, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x2f, 0x43, 0xb5, 0xac},
    {0x01, 0x24, 0xf5, 0x40, 0xbb},
    {0x02, 0x2f, 0x43, 0xb5, 0xac},
    {0x06, 0x69, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x09, 0x6d},
    {0x04, 0x24, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x09, 0x6d},
    {0x09, 0x50, 0xf5, 0x00, 0xcc},
    {0x03, 0x3b, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x49, 0xf5, 0xdd},
    {0x02, 0x3b, 0x43, 0xb5, 0xac},
    {0x05, 0x69, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x09, 0x6d},
    {0x04, 0x82, 0x49, 0xf5, 0xdd},
    {0x02, 0x05, 0x43, 0x09, 0x6d},
    {0x0b, 0x58, 0xf5, 0x40, 0xee},
    {0x03, 0x29, 0x43, 0xb5, 0xac},
    {0x01, 0x34, 0xf5, 0x40, 0xbb},
    {0x02, 0x29, 0x43, 0xb5, 0xac},
    {0x06, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x03, 0x8e},
    {0x04, 0x34, 0xf5, 0x40, 0xbb},
    {0x02, 0x10, 0x43, 0x03, 0x8e},
    {0x07, 0x73, 0xb5, 0x40, 0xdd},
    {0x03, 0x90, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x90, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x09, 0x6d},
    {0x04, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x09, 0x6d},
    {0x60, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x43, 0xb5, 0xac},
    {0x01, 0x00, 0xf5, 0x40, 0xbb},
    {0x02, 0x1f, 0x43, 0xb5, 0xac},
    {0x06, 0xcf, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x03, 0x7e},
    {0x04, 0x00, 0xf5, 0x40, 0xbb},
    {0x02, 0x08, 0x41, 0x03, 0x7e},
    {0x08, 0x50, 0xf5, 0x00, 0xcc},
    {0x03, 0x39, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x43, 0x7e},
    {0x02, 0x39, 0x43, 0xb5, 0xac},
    {0x05, 0xcf, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x58, 0xb5, 0xee},
    {0x04, 0x04, 0x41, 0x43, 0x7e},
    {0x02, 0x81, 0x58, 0xb5, 0xee},
    {0x0c, 0x58, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x41, 0x03, 0x7e},
    {0x01, 0x02, 0x41, 0x43, 0x7e},
    {0x02, 0x0a, 0x41, 0x03, 0x7e},
    {0x06, 0x46, 0x03, 0x03, 0x8e},
    {0x03, 0x04, 0x43, 0x09, 0x6d},
    {0x04, 0x02, 0x41, 0x43, 0x7e},
    {0x02, 0x04, 0x43, 0x09, 0x6d},
    {0x07, 0x4f, 0xb5, 0x40, 0xbb},
    {0x03, 0x02, 0x43, 0x09, 0x6d},
    {0x01, 0x07, 0x41, 0x43, 0x7e},
    {0x02, 0x02, 0x43, 0x09, 0x6d},
    {0x05, 0x46, 0x03, 0x03, 0x8e},
    {0x03, 0x07, 0x43, 0x09, 0x6d},
    {0x04, 0x07, 0x41, 0x43, 0x7e},
    {0x02, 0x07, 0x43, 0x09, 0x6d},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x16, 0x41, 0xb5, 0x9c},
    {0x01, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x16, 0x41, 0xb5, 0x9c},
    {0x06, 0x5f, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x44, 0x0b, 0x6e},
    {0x04, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0x0b, 0x6e},
    {0x09, 0xc9, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x42, 0x0b, 0x7e},
    {0x01, 0x03, 0x42, 0x4b, 0x7e},
    {0x02, 0x0b, 0x42, 0x0b, 0x7e},
    {0x05, 0x5f, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x44, 0x0b, 0x6e},
    {0x04, 0x03, 0x42, 0x4b, 0x7e},
    {0x02, 0x05, 0x44, 0x0b, 0x6e},
    {0x0a, 0x4e, 0xf5, 0x40, 0xdd},
    {0x03, 0x1a, 0x41, 0xb5, 0x9c},
    {0x01, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x41, 0xb5, 0x9c},
    {0x06, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0x0b, 0x7e},
    {0x04, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x0b, 0x7e},
    {0x07, 0x7f, 0xb5, 0x40, 0xdd},
    {0x03, 0x8c, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0x4b, 0x7e},
    {0x02, 0x8c, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0x0b, 0x6e},
    {0x04, 0x05, 0x42, 0x4b, 0x7e},
    {0x02, 0x06, 0x44, 0x0b, 0x6e},
    {0x7d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x43, 0xb5, 0xac},
    {0x01, 0x2c, 0xf5, 0x40, 0xbb},
    {0x02, 0x25, 0x43, 0xb5, 0xac},
    {0x06, 0x79, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x4e, 0xb5, 0xdd},
    {0x04, 0x2c, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x4e, 0xb5, 0xdd},
    {0x08, 0xc9, 0xf5, 0x00, 0x0e},
    {0x03, 0x19, 0x41, 0xb5, 0x9c},
    {0x01, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x19, 0x41, 0xb5, 0x9c},
    {0x05, 0x79, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x43, 0x03, 0x8e},
    {0x04, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x03, 0x8e},
    {0x6a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x43, 0xb5, 0xee},
    {0x01, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x43, 0xb5, 0xee},
    {0x06, 0xc1, 0x0b, 0xb5, 0xee},
    {0x03, 0x04, 0x44, 0x0b, 0x6e},
    {0x04, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x0b, 0x6e},
    {0x07, 0x44, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0x0b, 0x6e},
    {0x01, 0x06, 0x42, 0x4b, 0x7e},
    {0x02, 0x02, 0x44, 0x0b, 0x6e},
    {0x05, 0xc1, 0x0b, 0xb5, 0xee},
    {0x03, 0x07, 0x44, 0x0b, 0x6e},
    {0x04, 0x06, 0x42, 0x4b, 0x7e},
    {0x02, 0x07, 0x44, 0x0b, 0x6e},
    {0x90, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0x03, 0x8e},
    {0x01, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x03, 0x8e},
    {0x06, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x09, 0x6d},
    {0x04, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x09, 0x6d},
    {0x09, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x41, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x43, 0x8e},
    {0x02, 0x12, 0x41, 0xb5, 0x9c},
    {0x05, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x09, 0x6d},
    {0x04, 0x08, 0x43, 0x43, 0x8e},
    {0x02, 0x05, 0x42, 0x09, 0x6d},
    {0x0b, 0x4e, 0xf5, 0x40, 0xdd},
    {0x03, 0x15, 0x41, 0xb5, 0x9c},
    {0x01, 0x83, 0x4b, 0xf5, 0xee},
    {0x02, 0x15, 0x41, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x03, 0x8e},
    {0x03, 0x11, 0x43, 0x03, 0x8e},
    {0x04, 0x83, 0x4b, 0xf5, 0xee},
    {0x02, 0x11, 0x43, 0x03, 0x8e},
    {0x07, 0x42, 0x01, 0xf5, 0x9c},
    {0x03, 0x84, 0x4b, 0xb5, 0xee},
    {0x01, 0x81, 0x49, 0xf5, 0xdd},
    {0x02, 0x84, 0x4b, 0xb5, 0xee},
    {0x05, 0x44, 0x03, 0x03, 0x8e},
    {0x03, 0x06, 0x42, 0x09, 0x6d},
    {0x04, 0x81, 0x49, 0xf5, 0xdd},
    {0x02, 0x06, 0x42, 0x09, 0x6d},
    {0x4e, 0x09, 0xb5, 0x00, 0xdd},
    {0x03, 0x01, 0x43, 0x03, 0x8e},
    {0x01, 0x0a, 0x43, 0x43, 0x8e},
    {0x02, 0x01, 0x43, 0x03, 0x8e},
    {0x06, 0x42, 0x03, 0x03, 0x8e},
    {0x03, 0x08, 0x42, 0x0b, 0x7e},
    {0x04, 0x0a, 0x43, 0x43, 0x8e},
    {0x02, 0x08, 0x42, 0x0b, 0x7e},
    {0x08, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x49, 0xb5, 0xdd},
    {0x01, 0x04, 0x42, 0x4b, 0x7e},
    {0x02, 0x83, 0x49, 0xb5, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x8e},
    {0x03, 0x81, 0x4e, 0xb5, 0xdd},
    {0x04, 0x04, 0x42, 0x4b, 0x7e},
    {0x02, 0x81, 0x4e, 0xb5, 0xdd},
    {0x0c, 0x4e, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x42, 0x0b, 0x7e},
    {0x01, 0x02, 0x42, 0x4b, 0x7e},
    {0x02, 0x0a, 0x42, 0x0b, 0x7e},
    {0x06, 0x47, 0x03, 0x03, 0x8e},
    {0x03, 0x04, 0x42, 0x09, 0x6d},
    {0x04, 0x02, 0x42, 0x4b, 0x7e},
    {0x02, 0x04, 0x42, 0x09, 0x6d},
    {0x07, 0x47, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x09, 0x6d},
    {0x01, 0x07, 0x42, 0x4b, 0x7e},
    {0x02, 0x02, 0x42, 0x09, 0x6d},
    {0x05, 0x47, 0x03, 0x03, 0x8e},
    {0x03, 0x07, 0x42, 0x09, 0x6d},
    {0x04, 0x07, 0x42, 0x4b, 0x7e},
    {0x02, 0x07, 0x42, 0x09, 0x6d},
    {0xf4, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x9d, 0xf5, 0x00, 0x0d},
    {0x01, 0x1e, 0xf5, 0x40, 0xbb},
    {0x02, 0x9d, 0xf5, 0x00, 0x0d},
    {0x06, 0x56, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x47, 0xb5, 0x6b},
    {0x04, 0x1e, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x47, 0xb5, 0x6b},
    {0x09, 0x53, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x45, 0xb5, 0x7b},
    {0x01, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x0b, 0x45, 0xb5, 0x7b},
    {0x05, 0x56, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x47, 0xb5, 0x6b},
    {0x04, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x05, 0x47, 0xb5, 0x6b},
    {0x0a, 0x5c, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x44, 0xb5, 0x8b},
    {0x01, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x0c, 0x44, 0xb5, 0x8b},
    {0x06, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x09, 0x45, 0xb5, 0x7b},
    {0x04, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x09, 0x45, 0xb5, 0x7b},
    {0x07, 0x4d, 0xb5, 0x40, 0xbb},
    {0x03, 0x9a, 0xda, 0xb5, 0x0e},
    {0x01, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x9a, 0xda, 0xb5, 0x0e},
    {0x05, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x47, 0xb5, 0x6b},
    {0x04, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x06, 0x47, 0xb5, 0x6b},
    {0x4d, 0x9a, 0xb5, 0x00, 0x0e},
    {0x03, 0x14, 0x42, 0xb5, 0x9b},
    {0x01, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x14, 0x42, 0xb5, 0x9b},
    {0x06, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x82, 0x5c, 0xb5, 0xee},
    {0x04, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x82, 0x5c, 0xb5, 0xee},
    {0x08, 0x53, 0xf5, 0x00, 0xdd},
    {0x03, 0x18, 0x42, 0xb5, 0x9b},
    {0x01, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x18, 0x42, 0xb5, 0x9b},
    {0x05, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x0e, 0x44, 0xb5, 0x8b},
    {0x04, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x0e, 0x44, 0xb5, 0x8b},
    {0x4f, 0x05, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x42, 0xb5, 0x9b},
    {0x01, 0x9a, 0x45, 0xf5, 0xdd},
    {0x02, 0x1c, 0x42, 0xb5, 0x9b},
    {0x06, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x47, 0xb5, 0x6b},
    {0x04, 0x9a, 0x45, 0xf5, 0xdd},
    {0x02, 0x04, 0x47, 0xb5, 0x6b},
    {0x07, 0x43, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x47, 0xb5, 0x6b},
    {0x01, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x47, 0xb5, 0x6b},
    {0x05, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x47, 0xb5, 0x6b},
    {0x04, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x47, 0xb5, 0x6b},
    {0x8c, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x17, 0x42, 0xb5, 0x9b},
    {0x01, 0x22, 0xf5, 0x40, 0xbb},
    {0x02, 0x17, 0x42, 0xb5, 0x9b},
    {0x06, 0x5a, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x43, 0x9a, 0x6e},
    {0x04, 0x22, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x9a, 0x6e},
    {0x09, 0x48, 0xf5, 0x00, 0xbb},
    {0x03, 0x1b, 0x42, 0xb5, 0x9b},
    {0x01, 0x82, 0xda, 0xf5, 0x0e},
    {0x02, 0x1b, 0x42, 0xb5, 0x9b},
    {0x05, 0x5a, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x43, 0x9a, 0x6e},
    {0x04, 0x82, 0xda, 0xf5, 0x0e},
    {0x02, 0x05, 0x43, 0x9a, 0x6e},
    {0x0b, 0x5c, 0xf5, 0x40, 0xee},
    {0x03, 0x28, 0x43, 0xb5, 0xac},
    {0x01, 0x32, 0xf5, 0x40, 0xbb},
    {0x02, 0x28, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x10, 0x44, 0xb5, 0x8b},
    {0x04, 0x32, 0xf5, 0x40, 0xbb},
    {0x02, 0x10, 0x44, 0xb5, 0x8b},
    {0x07, 0xd7, 0xb5, 0x40, 0x0e},
    {0x03, 0x8e, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x8e, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0x9a, 0x6e},
    {0x04, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x9a, 0x6e},
    {0x7e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0xb5, 0x9b},
    {0x01, 0x3e, 0xf5, 0x40, 0xbb},
    {0x02, 0x13, 0x42, 0xb5, 0x9b},
    {0x06, 0xcb, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x45, 0xb5, 0x7b},
    {0x04, 0x3e, 0xf5, 0x40, 0xbb},
    {0x02, 0x08, 0x45, 0xb5, 0x7b},
    {0x08, 0x48, 0xf5, 0x00, 0xbb},
    {0x03, 0x38, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x38, 0x43, 0xb5, 0xac},
    {0x05, 0xcb, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x5c, 0xb5, 0xee},
    {0x04, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x81, 0x5c, 0xb5, 0xee},
    {0x0c, 0x5c, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x45, 0xb5, 0x7b},
    {0x01, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x0a, 0x45, 0xb5, 0x7b},
    {0x06, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0x9a, 0x6e},
    {0x04, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0x9a, 0x6e},
    {0x07, 0x45, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0x9a, 0x6e},
    {0x01, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0x9a, 0x6e},
    {0x05, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0x9a, 0x6e},
    {0x04, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0x9a, 0x6e},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2e, 0x43, 0xb5, 0xac},
    {0x01, 0x30, 0xf5, 0x40, 0xbb},
    {0x02, 0x2e, 0x43, 0xb5, 0xac},
    {0x06, 0x65, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x05, 0x6d},
    {0x04, 0x30, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x41, 0x05, 0x6d},
    {0x09, 0x77, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x05, 0x7d},
    {0x01, 0x03, 0x43, 0x45, 0x7d},
    {0x02, 0x0b, 0x43, 0x05, 0x7d},
    {0x05, 0x65, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x05, 0x6d},
    {0x04, 0x03, 0x43, 0x45, 0x7d},
    {0x02, 0x05, 0x41, 0x05, 0x6d},
    {0x0a, 0x44, 0xf5, 0x40, 0xbb},
    {0x03, 0x36, 0x43, 0xb5, 0xac},
    {0x01, 0x3c, 0xf5, 0x40, 0xbb},
    {0x02, 0x36, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x05, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x05, 0x7d},
    {0x04, 0x3c, 0xf5, 0x40, 0xbb},
    {0x02, 0x09, 0x43, 0x05, 0x7d},
    {0x07, 0x6b, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0x43, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x45, 0x7d},
    {0x02, 0x88, 0x43, 0xb5, 0xee},
    {0x05, 0xc2, 0x05, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x05, 0x6d},
    {0x04, 0x05, 0x43, 0x45, 0x7d},
    {0x02, 0x06, 0x41, 0x05, 0x6d},
    {0x6e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x43, 0xb5, 0xac},
    {0x01, 0x2a, 0xf5, 0x40, 0xbb},
    {0x02, 0x24, 0x43, 0xb5, 0xac},
    {0x06, 0x59, 0xb5, 0x00, 0xbb},
    {0x03, 0x82, 0x44, 0xb5, 0xbb},
    {0x04, 0x2a, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x44, 0xb5, 0xbb},
    {0x08, 0x77, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x34, 0x43, 0xb5, 0xac},
    {0x05, 0x59, 0xb5, 0x00, 0xbb},
    {0x03, 0x0f, 0x44, 0xb5, 0x8b},
    {0x04, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x44, 0xb5, 0x8b},
    {0x66, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x43, 0xb5, 0xac},
    {0x01, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x43, 0xb5, 0xac},
    {0x06, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x05, 0x6d},
    {0x04, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x05, 0x6d},
    {0x07, 0x51, 0xb5, 0x40, 0xbb},
    {0x03, 0x02, 0x41, 0x05, 0x6d},
    {0x01, 0x06, 0x43, 0x45, 0x7d},
    {0x02, 0x02, 0x41, 0x05, 0x6d},
    {0x05, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x05, 0x6d},
    {0x04, 0x06, 0x43, 0x45, 0x7d},
    {0x02, 0x07, 0x41, 0x05, 0x6d},
    {0x88, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x44, 0xb5, 0x8b},
    {0x01, 0x20, 0xf5, 0x40, 0xbb},
    {0x02, 0x0d, 0x44, 0xb5, 0x8b},
    {0x06, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x9a, 0x6e},
    {0x04, 0x20, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x42, 0x9a, 0x6e},
    {0x09, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x9b, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x9b, 0xf5, 0x00, 0x0b},
    {0x05, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x9a, 0x6e},
    {0x04, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0x9a, 0x6e},
    {0x0b, 0x44, 0xf5, 0x40, 0xbb},
    {0x03, 0x2c, 0x43, 0xb5, 0xac},
    {0x01, 0x3a, 0xf5, 0x40, 0xbb},
    {0x02, 0x2c, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x11, 0x44, 0xb5, 0x8b},
    {0x04, 0x3a, 0xf5, 0x40, 0xbb},
    {0x02, 0x11, 0x44, 0xb5, 0x8b},
    {0x07, 0xd3, 0xb5, 0x40, 0x0e},
    {0x03, 0x96, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xda, 0xf5, 0x0e},
    {0x02, 0x96, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0x9a, 0x6e},
    {0x04, 0x81, 0xda, 0xf5, 0x0e},
    {0x02, 0x06, 0x42, 0x9a, 0x6e},
    {0x4e, 0x9a, 0xb5, 0x00, 0x0e},
    {0x03, 0x01, 0x44, 0xb5, 0x8b},
    {0x01, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x01, 0x44, 0xb5, 0x8b},
    {0x06, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x05, 0x7d},
    {0x04, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x05, 0x7d},
    {0x08, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x83, 0xda, 0xb5, 0x0e},
    {0x01, 0x04, 0x43, 0x45, 0x7d},
    {0x02, 0x83, 0xda, 0xb5, 0x0e},
    {0x05, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x81, 0x44, 0xb5, 0xbb},
    {0x04, 0x04, 0x43, 0x45, 0x7d},
    {0x02, 0x81, 0x44, 0xb5, 0xbb},
    {0x0c, 0x44, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x43, 0x05, 0x7d},
    {0x01, 0x02, 0x43, 0x45, 0x7d},
    {0x02, 0x0a, 0x43, 0x05, 0x7d},
    {0x06, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0x9a, 0x6e},
    {0x04, 0x02, 0x43, 0x45, 0x7d},
    {0x02, 0x04, 0x42, 0x9a, 0x6e},
    {0x07, 0x46, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x9a, 0x6e},
    {0x01, 0x07, 0x43, 0x45, 0x7d},
    {0x02, 0x02, 0x42, 0x9a, 0x6e},
    {0x05, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0x9a, 0x6e},
    {0x04, 0x07, 0x43, 0x45, 0x7d},
    {0x02, 0x07, 0x42, 0x9a, 0x6e},
    {0xf4, 0x45, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0x43, 0xb5, 0xac},
    {0x01, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x1e, 0x43, 0xb5, 0xac},
    {0x06, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x03, 0x6e},
    {0x04, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x03, 0x6e},
    {0x09, 0x4a, 0xf5, 0x00, 0xbb},
    {0x03, 0x0b, 0x44, 0x03, 0x7e},
    {0x01, 0x03, 0x44, 0x43, 0x7e},
    {0x02, 0x0b, 0x44, 0x03, 0x7e},
    {0x05, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x03, 0x6e},
    {0x04, 0x03, 0x44, 0x43, 0x7e},
    {0x02, 0x05, 0x45, 0x03, 0x6e},
    {0x0a, 0x42, 0xf5, 0x40, 0xbb},
    {0x03, 0x0c, 0x42, 0x03, 0x8e},
    {0x01, 0x0b, 0x42, 0x43, 0x8e},
    {0x02, 0x0c, 0x42, 0x03, 0x8e},
    {0x06, 0x43, 0x02, 0x03, 0x8e},
    {0x03, 0x09, 0x44, 0x03, 0x7e},
    {0x04, 0x0b, 0x42, 0x43, 0x8e},
    {0x02, 0x09, 0x44, 0x03, 0x7e},
    {0x07, 0x41, 0xb5, 0x40, 0xbb},
    {0x03, 0x9a, 0x46, 0xb5, 0xcc},
    {0x01, 0x05, 0x44, 0x43, 0x7e},
    {0x02, 0x9a, 0x46, 0xb5, 0xcc},
    {0x05, 0x43, 0x02, 0x03, 0x8e},
    {0x03, 0x06, 0x45, 0x03, 0x6e},
    {0x04, 0x05, 0x44, 0x43, 0x7e},
    {0x02, 0x06, 0x45, 0x03, 0x6e},
    {0x4d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x22, 0x43, 0xb5, 0xac},
    {0x01, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x22, 0x43, 0xb5, 0xac},
    {0x06, 0x52, 0xb5, 0x00, 0xbb},
    {0x03, 0x82, 0x42, 0xb5, 0xbb},
    {0x04, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0xb5, 0xbb},
    {0x08, 0x4a, 0xf5, 0x00, 0xbb},
    {0x03, 0x32, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x43, 0x8e},
    {0x02, 0x32, 0x43, 0xb5, 0xac},
    {0x05, 0x52, 0xb5, 0x00, 0xbb},
    {0x03, 0x0e, 0x42, 0x03, 0x8e},
    {0x04, 0x09, 0x42, 0x43, 0x8e},
    {0x02, 0x0e, 0x42, 0x03, 0x8e},
    {0x53, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3e, 0x43, 0xb5, 0xac},
    {0x01, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x3e, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x03, 0x8e},
    {0x03, 0x04, 0x45, 0x03, 0x6e},
    {0x04, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x45, 0x03, 0x6e},
    {0x07, 0x48, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x03, 0x6e},
    {0x01, 0x06, 0x44, 0x43, 0x7e},
    {0x02, 0x02, 0x45, 0x03, 0x6e},
    {0x05, 0x45, 0x02, 0x03, 0x8e},
    {0x03, 0x07, 0x45, 0x03, 0x6e},
    {0x04, 0x06, 0x44, 0x43, 0x7e},
    {0x02, 0x07, 0x45, 0x03, 0x6e},
    {0x58, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x30, 0x43, 0xb5, 0xac},
    {0x01, 0x26, 0xf5, 0x40, 0xbb},
    {0x02, 0x30, 0x43, 0xb5, 0xac},
    {0x06, 0x55, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x43, 0x06, 0x6c},
    {0x04, 0x26, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x06, 0x6c},
    {0x09, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3c, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x46, 0xf5, 0xcc},
    {0x02, 0x3c, 0x43, 0xb5, 0xac},
    {0x05, 0x55, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x43, 0x06, 0x6c},
    {0x04, 0x82, 0x46, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x06, 0x6c},
    {0x0b, 0x42, 0xf5, 0x40, 0xbb},
    {0x03, 0x2a, 0x43, 0xb5, 0xac},
    {0x01, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x2a, 0x43, 0xb5, 0xac},
    {0x06, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x03, 0x8e},
    {0x04, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x03, 0x8e},
    {0x07, 0xc3, 0xb5, 0x40, 0x0b},
    {0x03, 0x92, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x92, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x06, 0x6c},
    {0x04, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x06, 0x6c},
    {0x56, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x20, 0x43, 0xb5, 0xac},
    {0x01, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x43, 0xb5, 0xac},
    {0x06, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x08, 0x44, 0x03, 0x7e},
    {0x04, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0x03, 0x7e},
    {0x08, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3a, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x43, 0x7e},
    {0x02, 0x3a, 0x43, 0xb5, 0xac},
    {0x05, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x81, 0x42, 0xb5, 0xbb},
    {0x04, 0x04, 0x44, 0x43, 0x7e},
    {0x02, 0x81, 0x42, 0xb5, 0xbb},
    {0x0c, 0x42, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x44, 0x03, 0x7e},
    {0x01, 0x02, 0x44, 0x43, 0x7e},
    {0x02, 0x0a, 0x44, 0x03, 0x7e},
    {0x06, 0x46, 0x02, 0x03, 0x8e},
    {0x03, 0x04, 0x43, 0x06, 0x6c},
    {0x04, 0x02, 0x44, 0x43, 0x7e},
    {0x02, 0x04, 0x43, 0x06, 0x6c},
    {0x07, 0xc1, 0x03, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x06, 0x6c},
    {0x01, 0x07, 0x44, 0x43, 0x7e},
    {0x02, 0x02, 0x43, 0x06, 0x6c},
    {0x05, 0x46, 0x02, 0x03, 0x8e},
    {0x03, 0x07, 0x43, 0x06, 0x6c},
    {0x04, 0x07, 0x44, 0x43, 0x7e},
    {0x02, 0x07, 0x43, 0x06, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x16, 0x42, 0xb5, 0x9b},
    {0x01, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x16, 0x42, 0xb5, 0x9b},
    {0x06, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x05, 0x6d},
    {0x04, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x05, 0x6d},
    {0x09, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x05, 0x7d},
    {0x01, 0x03, 0x42, 0x45, 0x7d},
    {0x02, 0x0b, 0x42, 0x05, 0x7d},
    {0x05, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x05, 0x6d},
    {0x04, 0x03, 0x42, 0x45, 0x7d},
    {0x02, 0x05, 0x44, 0x05, 0x6d},
    {0x0a, 0x47, 0xf5, 0x40, 0xbb},
    {0x03, 0x1a, 0x42, 0xb5, 0x9b},
    {0x01, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0xb5, 0x9b},
    {0x06, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x05, 0x7d},
    {0x04, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x05, 0x7d},
    {0x07, 0x4a, 0x03, 0xf5, 0xac},
    {0x03, 0x8a, 0x43, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0x45, 0x7d},
    {0x02, 0x8a, 0x43, 0xb5, 0xee},
    {0x05, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x05, 0x6d},
    {0x04, 0x05, 0x42, 0x45, 0x7d},
    {0x02, 0x06, 0x44, 0x05, 0x6d},
    {0x50, 0x03, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x43, 0xb5, 0xac},
    {0x01, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x26, 0x43, 0xb5, 0xac},
    {0x06, 0xc3, 0x03, 0xb5, 0xee},
    {0x03, 0x82, 0x47, 0xb5, 0xbb},
    {0x04, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0xb5, 0xbb},
    {0x08, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0xb5, 0x9b},
    {0x01, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x19, 0x42, 0xb5, 0x9b},
    {0x05, 0xc3, 0x03, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x03, 0x8e},
    {0x04, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0x03, 0x8e},
    {0x40, 0x03, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x43, 0xb5, 0xee},
    {0x01, 0x84, 0x43, 0xf5, 0xee},
    {0x02, 0x86, 0x43, 0xb5, 0xee},
    {0x06, 0xc1, 0x05, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x05, 0x6d},
    {0x04, 0x84, 0x43, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x05, 0x6d},
    {0x07, 0x44, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x05, 0x6d},
    {0x01, 0x06, 0x42, 0x45, 0x7d},
    {0x02, 0x02, 0x44, 0x05, 0x6d},
    {0x05, 0xc1, 0x05, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x05, 0x6d},
    {0x04, 0x06, 0x42, 0x45, 0x7d},
    {0x02, 0x07, 0x44, 0x05, 0x6d},
    {0xc1, 0x43, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x03, 0x8e},
    {0x01, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0x03, 0x8e},
    {0x06, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x06, 0x6c},
    {0x04, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x06, 0x6c},
    {0x09, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0x43, 0x8e},
    {0x02, 0x12, 0x42, 0xb5, 0x9b},
    {0x05, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x06, 0x6c},
    {0x04, 0x08, 0x42, 0x43, 0x8e},
    {0x02, 0x05, 0x42, 0x06, 0x6c},
    {0x0b, 0x47, 0xf5, 0x40, 0xbb},
    {0x03, 0x15, 0x42, 0xb5, 0x9b},
    {0x01, 0x83, 0x45, 0xf5, 0xdd},
    {0x02, 0x15, 0x42, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0x03, 0x8e},
    {0x03, 0x11, 0x42, 0x03, 0x8e},
    {0x04, 0x83, 0x45, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0x03, 0x8e},
    {0x07, 0x42, 0x02, 0xf5, 0x9b},
    {0x03, 0x84, 0x45, 0xb5, 0xdd},
    {0x01, 0x81, 0x46, 0xf5, 0xcc},
    {0x02, 0x84, 0x45, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0x03, 0x8e},
    {0x03, 0x06, 0x42, 0x06, 0x6c},
    {0x04, 0x81, 0x46, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x06, 0x6c},
    {0x4e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x42, 0x03, 0x8e},
    {0x01, 0x0a, 0x42, 0x43, 0x8e},
    {0x02, 0x01, 0x42, 0x03, 0x8e},
    {0x06, 0x42, 0x02, 0x03, 0x8e},
    {0x03, 0x08, 0x42, 0x05, 0x7d},
    {0x04, 0x0a, 0x42, 0x43, 0x8e},
    {0x02, 0x08, 0x42, 0x05, 0x7d},
    {0x08, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x46, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0x45, 0x7d},
    {0x02, 0x83, 0x46, 0xb5, 0xcc},
    {0x05, 0x42, 0x02, 0x03, 0x8e},
    {0x03, 0x81, 0x47, 0xb5, 0xbb},
    {0x04, 0x04, 0x42, 0x45, 0x7d},
    {0x02, 0x81, 0x47, 0xb5, 0xbb},
    {0x0c, 0x47, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x42, 0x05, 0x7d},
    {0x01, 0x02, 0x42, 0x45, 0x7d},
    {0x02, 0x0a, 0x42, 0x05, 0x7d},
    {0x06, 0x47, 0x02, 0x03, 0x8e},
    {0x03, 0x04, 0x42, 0x06, 0x6c},
    {0x04, 0x02, 0x42, 0x45, 0x7d},
    {0x02, 0x04, 0x42, 0x06, 0x6c},
    {0x07, 0x47, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x06, 0x6c},
    {0x01, 0x07, 0x42, 0x45, 0x7d},
    {0x02, 0x02, 0x42, 0x06, 0x6c},
    {0x05, 0x47, 0x02, 0x03, 0x8e},
    {0x03, 0x07, 0x42, 0x06, 0x6c},
    {0x04, 0x07, 0x42, 0x45, 0x7d},
    {0x02, 0x07, 0x42, 0x06, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xb4, 0xf5, 0x00, 0x0c},
    {0x01, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0xb4, 0xf5, 0x00, 0x0c},
    {0x06, 0xdc, 0xb5, 0x00, 0x0f},
    {0x03, 0x03, 0x4d, 0xb5, 0x6e},
    {0x04, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0x03, 0x4d, 0xb5, 0x6e},
    {0x09, 0x6d, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x4a, 0xb5, 0x7e},
    {0x01, 0x03, 0x4a, 0xf5, 0x7e},
    {0x02, 0x0b, 0x4a, 0xb5, 0x7e},
    {0x05, 0xdc, 0xb5, 0x00, 0x0f},
    {0x03, 0x05, 0x4d, 0xb5, 0x6e},
    {0x04, 0x03, 0x4a, 0xf5, 0x7e},
    {0x02, 0x05, 0x4d, 0xb5, 0x6e},
    {0x0a, 0x57, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x49, 0xb5, 0x8e},
    {0x01, 0x0b, 0x49, 0xf5, 0x8e},
    {0x02, 0x0c, 0x49, 0xb5, 0x8e},
    {0x06, 0x43, 0x09, 0xb5, 0x8e},
    {0x03, 0x09, 0x4a, 0xb5, 0x7e},
    {0x04, 0x0b, 0x49, 0xf5, 0x8e},
    {0x02, 0x09, 0x4a, 0xb5, 0x7e},
    {0x07, 0x5d, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x54, 0xb5, 0xff},
    {0x01, 0x05, 0x4a, 0xf5, 0x7e},
    {0x02, 0x9a, 0x54, 0xb5, 0xff},
    {0x05, 0x43, 0x09, 0xb5, 0x8e},
    {0x03, 0x06, 0x4d, 0xb5, 0x6e},
    {0x04, 0x05, 0x4a, 0xf5, 0x7e},
    {0x02, 0x06, 0x4d, 0xb5, 0x6e},
    {0x4d, 0x14, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x46, 0xb5, 0x9d},
    {0x01, 0x0c, 0x46, 0xf5, 0x9d},
    {0x02, 0x14, 0x46, 0xb5, 0x9d},
    {0x06, 0x4b, 0x06, 0xb5, 0x9d},
    {0x03, 0x82, 0x57, 0xb5, 0xee},
    {0x04, 0x0c, 0x46, 0xf5, 0x9d},
    {0x02, 0x82, 0x57, 0xb5, 0xee},
    {0x08, 0x6d, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x46, 0xb5, 0x9d},
    {0x01, 0x09, 0x49, 0xf5, 0x8e},
    {0x02, 0x18, 0x46, 0xb5, 0x9d},
    {0x05, 0x4b, 0x06, 0xb5, 0x9d},
    {0x03, 0x0e, 0x49, 0xb5, 0x8e},
    {0x04, 0x09, 0x49, 0xf5, 0x8e},
    {0x02, 0x0e, 0x49, 0xb5, 0x8e},
    {0x4f, 0x0c, 0xb5, 0x40, 0xff},
    {0x03, 0x1c, 0x46, 0xb5, 0x9d},
    {0x01, 0x9a, 0x4c, 0xf5, 0xff},
    {0x02, 0x1c, 0x46, 0xb5, 0x9d},
    {0x06, 0x45, 0x09, 0xb5, 0x8e},
    {0x03, 0x04, 0x4d, 0xb5, 0x6e},
    {0x04, 0x9a, 0x4c, 0xf5, 0xff},
    {0x02, 0x04, 0x4d, 0xb5, 0x6e},
    {0x07, 0x43, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x4d, 0xb5, 0x6e},
    {0x01, 0x06, 0x4a, 0xf5, 0x7e},
    {0x02, 0x02, 0x4d, 0xb5, 0x6e},
    {0x05, 0x45, 0x09, 0xb5, 0x8e},
    {0x03, 0x07, 0x4d, 0xb5, 0x6e},
    {0x04, 0x06, 0x4a, 0xf5, 0x7e},
    {0x02, 0x07, 0x4d, 0xb5, 0x6e},
    {0x52, 0x0b, 0xf5, 0x00, 0xff},
    {0x03, 0x17, 0x46, 0xb5, 0x9d},
    {0x01, 0x14, 0x41, 0xf5, 0xad},
    {0x02, 0x17, 0x46, 0xb5, 0x9d},
    {0x06, 0x4c, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x43, 0x14, 0x6f},
    {0x04, 0x14, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x43, 0x14, 0x6f},
    {0x09, 0x43, 0x41, 0xb5, 0xad},
    {0x03, 0x1b, 0x46, 0xb5, 0x9d},
    {0x01, 0x82, 0x54, 0xf5, 0xff},
    {0x02, 0x1b, 0x46, 0xb5, 0x9d},
    {0x05, 0x4c, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x43, 0x14, 0x6f},
    {0x04, 0x82, 0x54, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x14, 0x6f},
    {0x0b, 0x57, 0xf5, 0x40, 0xee},
    {0x03, 0x27, 0x41, 0xb5, 0xad},
    {0x01, 0x18, 0x41, 0xf5, 0xad},
    {0x02, 0x27, 0x41, 0xb5, 0xad},
    {0x06, 0x49, 0x06, 0xb5, 0x9d},
    {0x03, 0x10, 0x49, 0xb5, 0x8e},
    {0x04, 0x18, 0x41, 0xf5, 0xad},
    {0x02, 0x10, 0x49, 0xb5, 0x8e},
    {0x07, 0x4b, 0x01, 0xf5, 0xad},
    {0x03, 0x89, 0x4b, 0xb5, 0xff},
    {0x01, 0x0e, 0x46, 0xf5, 0x9d},
    {0x02, 0x89, 0x4b, 0xb5, 0xff},
    {0x05, 0x49, 0x06, 0xb5, 0x9d},
    {0x03, 0x06, 0x43, 0x14, 0x6f},
    {0x04, 0x0e, 0x46, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x14, 0x6f},
    {0x51, 0x0b, 0xf5, 0x00, 0xff},
    {0x03, 0x13, 0x46, 0xb5, 0x9d},
    {0x01, 0x1c, 0x41, 0xf5, 0xad},
    {0x02, 0x13, 0x46, 0xb5, 0x9d},
    {0x06, 0xda, 0x0b, 0xb5, 0xff},
    {0x03, 0x08, 0x4a, 0xb5, 0x7e},
    {0x04, 0x1c, 0x41, 0xf5, 0xad},
    {0x02, 0x08, 0x4a, 0xb5, 0x7e},
    {0x08, 0x43, 0x41, 0xb5, 0xad},
    {0x03, 0x37, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x4a, 0xf5, 0x7e},
    {0x02, 0x37, 0x41, 0xb5, 0xad},
    {0x05, 0xda, 0x0b, 0xb5, 0xff},
    {0x03, 0x81, 0x57, 0xb5, 0xee},
    {0x04, 0x04, 0x4a, 0xf5, 0x7e},
    {0x02, 0x81, 0x57, 0xb5, 0xee},
    {0x0c, 0x57, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x4a, 0xb5, 0x7e},
    {0x01, 0x02, 0x4a, 0xf5, 0x7e},
    {0x02, 0x0a, 0x4a, 0xb5, 0x7e},
    {0x06, 0x46, 0x09, 0xb5, 0x8e},
    {0x03, 0x04, 0x43, 0x14, 0x6f},
    {0x04, 0x02, 0x4a, 0xf5, 0x7e},
    {0x02, 0x04, 0x43, 0x14, 0x6f},
    {0x07, 0x45, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x43, 0x14, 0x6f},
    {0x01, 0x07, 0x4a, 0xf5, 0x7e},
    {0x02, 0x02, 0x43, 0x14, 0x6f},
    {0x05, 0x46, 0x09, 0xb5, 0x8e},
    {0x03, 0x07, 0x43, 0x14, 0x6f},
    {0x04, 0x07, 0x4a, 0xf5, 0x7e},
    {0x02, 0x07, 0x43, 0x14, 0x6f},
    {0xdc, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x2d, 0x41, 0xb5, 0xad},
    {0x01, 0x17, 0x41, 0xf5, 0xad},
    {0x02, 0x2d, 0x41, 0xb5, 0xad},
    {0x06, 0x54, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x41, 0x0c, 0x6f},
    {0x04, 0x17, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x41, 0x0c, 0x6f},
    {0x09, 0x4b, 0x43, 0xb5, 0xbd},
    {0x03, 0x0b, 0x43, 0x0c, 0x7f},
    {0x01, 0x03, 0x43, 0x4c, 0x7f},
    {0x02, 0x0b, 0x43, 0x0c, 0x7f},
    {0x05, 0x54, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x41, 0x0c, 0x6f},
    {0x04, 0x03, 0x43, 0x4c, 0x7f},
    {0x02, 0x05, 0x41, 0x0c, 0x6f},
    {0x0a, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x35, 0x41, 0xb5, 0xad},
    {0x01, 0x1b, 0x41, 0xf5, 0xad},
    {0x02, 0x35, 0x41, 0xb5, 0xad},
    {0x06, 0xc2, 0x0c, 0xb5, 0xff},
    {0x03, 0x09, 0x43, 0x0c, 0x7f},
    {0x04, 0x1b, 0x41, 0xf5, 0xad},
    {0x02, 0x09, 0x43, 0x0c, 0x7f},
    {0x07, 0x4c, 0x03, 0xf5, 0xbd},
    {0x03, 0x87, 0x4b, 0xb5, 0xff},
    {0x01, 0x05, 0x43, 0x4c, 0x7f},
    {0x02, 0x87, 0x4b, 0xb5, 0xff},
    {0x05, 0xc2, 0x0c, 0xb5, 0xff},
    {0x03, 0x06, 0x41, 0x0c, 0x6f},
    {0x04, 0x05, 0x43, 0x4c, 0x7f},
    {0x02, 0x06, 0x41, 0x0c, 0x6f},
    {0x57, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x23, 0x41, 0xb5, 0xad},
    {0x01, 0x27, 0x43, 0xf5, 0xbd},
    {0x02, 0x23, 0x41, 0xb5, 0xad},
    {0x06, 0x58, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x43, 0x03, 0xbd},
    {0x04, 0x27, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x43, 0x03, 0xbd},
    {0x08, 0x4b, 0x43, 0xb5, 0xbd},
    {0x03, 0x33, 0x41, 0xb5, 0xad},
    {0x01, 0x10, 0x46, 0xf5, 0x9d},
    {0x02, 0x33, 0x41, 0xb5, 0xad},
    {0x05, 0x58, 0x03, 0xb5, 0xbd},
    {0x03, 0x0f, 0x49, 0xb5, 0x8e},
    {0x04, 0x10, 0x46, 0xf5, 0x9d},
    {0x02, 0x0f, 0x49, 0xb5, 0x8e},
    {0x54, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x3f, 0x41, 0xb5, 0xad},
    {0x01, 0x89, 0x43, 0xf5, 0xff},
    {0x02, 0x3f, 0x41, 0xb5, 0xad},
    {0x06, 0x4e, 0x01, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x0c, 0x6f},
    {0x04, 0x89, 0x43, 0xf5, 0xff},
    {0x02, 0x04, 0x41, 0x0c, 0x6f},
    {0x07, 0x49, 0x01, 0xf5, 0xad},
    {0x03, 0x02, 0x41, 0x0c, 0x6f},
    {0x01, 0x06, 0x43, 0x4c, 0x7f},
    {0x02, 0x02, 0x41, 0x0c, 0x6f},
    {0x05, 0x4e, 0x01, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x0c, 0x6f},
    {0x04, 0x06, 0x43, 0x4c, 0x7f},
    {0x02, 0x07, 0x41, 0x0c, 0x6f},
    {0x59, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x0d, 0x49, 0xb5, 0x8e},
    {0x01, 0x13, 0x41, 0xf5, 0xad},
    {0x02, 0x0d, 0x49, 0xb5, 0x8e},
    {0x06, 0x5c, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x42, 0x14, 0x6f},
    {0x04, 0x13, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x42, 0x14, 0x6f},
    {0x09, 0x45, 0x41, 0xb5, 0xad},
    {0x03, 0x97, 0x43, 0xb5, 0xff},
    {0x01, 0x08, 0x49, 0xf5, 0x8e},
    {0x02, 0x97, 0x43, 0xb5, 0xff},
    {0x05, 0x5c, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x42, 0x14, 0x6f},
    {0x04, 0x08, 0x49, 0xf5, 0x8e},
    {0x02, 0x05, 0x42, 0x14, 0x6f},
    {0x0b, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x2b, 0x41, 0xb5, 0xad},
    {0x01, 0x37, 0x43, 0xf5, 0xbd},
    {0x02, 0x2b, 0x41, 0xb5, 0xad},
    {0x06, 0x44, 0x09, 0xb5, 0x8e},
    {0x03, 0x11, 0x49, 0xb5, 0x8e},
    {0x04, 0x37, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x49, 0xb5, 0x8e},
    {0x07, 0xda, 0x03, 0xf5, 0xff},
    {0x03, 0x93, 0x43, 0xb5, 0xff},
    {0x01, 0x81, 0x54, 0xf5, 0xff},
    {0x02, 0x93, 0x43, 0xb5, 0xff},
    {0x05, 0x44, 0x09, 0xb5, 0x8e},
    {0x03, 0x06, 0x42, 0x14, 0x6f},
    {0x04, 0x81, 0x54, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x14, 0x6f},
    {0x4e, 0x14, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x49, 0xb5, 0x8e},
    {0x01, 0x0a, 0x49, 0xf5, 0x8e},
    {0x02, 0x01, 0x49, 0xb5, 0x8e},
    {0x06, 0x42, 0x09, 0xb5, 0x8e},
    {0x03, 0x08, 0x43, 0x0c, 0x7f},
    {0x04, 0x0a, 0x49, 0xf5, 0x8e},
    {0x02, 0x08, 0x43, 0x0c, 0x7f},
    {0x08, 0x45, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0x54, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0x4c, 0x7f},
    {0x02, 0x83, 0x54, 0xb5, 0xff},
    {0x05, 0x42, 0x09, 0xb5, 0x8e},
    {0x03, 0x81, 0x43, 0x03, 0xbd},
    {0x04, 0x04, 0x43, 0x4c, 0x7f},
    {0x02, 0x81, 0x43, 0x03, 0xbd},
    {0x0c, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x0c, 0x7f},
    {0x01, 0x02, 0x43, 0x4c, 0x7f},
    {0x02, 0x0a, 0x43, 0x0c, 0x7f},
    {0x06, 0x47, 0x09, 0xb5, 0x8e},
    {0x03, 0x04, 0x42, 0x14, 0x6f},
    {0x04, 0x02, 0x43, 0x4c, 0x7f},
    {0x02, 0x04, 0x42, 0x14, 0x6f},
    {0x07, 0x46, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x14, 0x6f},
    {0x01, 0x07, 0x43, 0x4c, 0x7f},
    {0x02, 0x02, 0x42, 0x14, 0x6f},
    {0x05, 0x47, 0x09, 0xb5, 0x8e},
    {0x03, 0x07, 0x42, 0x14, 0x6f},
    {0x04, 0x07, 0x43, 0x4c, 0x7f},
    {0x02, 0x07, 0x42, 0x14, 0x6f},
    {0xf4, 0x4c, 0xf5, 0x40, 0x0f},
    {0x03, 0x1d, 0x41, 0xb5, 0xad},
    {0x01, 0x2d, 0x43, 0xf5, 0xbd},
    {0x02, 0x1d, 0x41, 0xb5, 0xad},
    {0x06, 0x57, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x46, 0x0b, 0x6f},
    {0x04, 0x2d, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0x0b, 0x6f},
    {0x09, 0x75, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x0b, 0x7f},
    {0x01, 0x03, 0x41, 0x4b, 0x7f},
    {0x02, 0x0b, 0x41, 0x0b, 0x7f},
    {0x05, 0x57, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x46, 0x0b, 0x6f},
    {0x04, 0x03, 0x41, 0x4b, 0x7f},
    {0x02, 0x05, 0x46, 0x0b, 0x6f},
    {0x0a, 0x5b, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x43, 0x0b, 0x8f},
    {0x01, 0x0b, 0x43, 0x4b, 0x8f},
    {0x02, 0x0c, 0x43, 0x0b, 0x8f},
    {0x06, 0x43, 0x03, 0x0b, 0x8f},
    {0x03, 0x09, 0x41, 0x0b, 0x7f},
    {0x04, 0x0b, 0x43, 0x4b, 0x8f},
    {0x02, 0x09, 0x41, 0x0b, 0x7f},
    {0x07, 0x61, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xc2, 0xb5, 0x0d},
    {0x01, 0x05, 0x41, 0x4b, 0x7f},
    {0x02, 0x9a, 0xc2, 0xb5, 0x0d},
    {0x05, 0x43, 0x03, 0x0b, 0x8f},
    {0x03, 0x06, 0x46, 0x0b, 0x6f},
    {0x04, 0x05, 0x41, 0x4b, 0x7f},
    {0x02, 0x06, 0x46, 0x0b, 0x6f},
    {0x4d, 0x82, 0xb5, 0x00, 0x0d},
    {0x03, 0x21, 0x41, 0xb5, 0xad},
    {0x01, 0x35, 0x43, 0xf5, 0xbd},
    {0x02, 0x21, 0x41, 0xb5, 0xad},
    {0x06, 0x5b, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x5b, 0xb5, 0xee},
    {0x04, 0x35, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x5b, 0xb5, 0xee},
    {0x08, 0x75, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x41, 0xb5, 0xad},
    {0x01, 0x09, 0x43, 0x4b, 0x8f},
    {0x02, 0x31, 0x41, 0xb5, 0xad},
    {0x05, 0x5b, 0x03, 0xb5, 0xbd},
    {0x03, 0x0e, 0x43, 0x0b, 0x8f},
    {0x04, 0x09, 0x43, 0x4b, 0x8f},
    {0x02, 0x0e, 0x43, 0x0b, 0x8f},
    {0x83, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x41, 0xb5, 0xad},
    {0x01, 0x87, 0x43, 0xf5, 0xff},
    {0x02, 0x3d, 0x41, 0xb5, 0xad},
    {0x06, 0x45, 0x03, 0x0b, 0x8f},
    {0x03, 0x04, 0x46, 0x0b, 0x6f},
    {0x04, 0x87, 0x43, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0x0b, 0x6f},
    {0x07, 0xc2, 0x0b, 0xf5, 0xff},
    {0x03, 0x02, 0x46, 0x0b, 0x6f},
    {0x01, 0x06, 0x41, 0x4b, 0x7f},
    {0x02, 0x02, 0x46, 0x0b, 0x6f},
    {0x05, 0x45, 0x03, 0x0b, 0x8f},
    {0x03, 0x07, 0x46, 0x0b, 0x6f},
    {0x04, 0x06, 0x41, 0x4b, 0x7f},
    {0x02, 0x07, 0x46, 0x0b, 0x6f},
    {0x94, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x2f, 0x41, 0xb5, 0xad},
    {0x01, 0x23, 0x43, 0xf5, 0xbd},
    {0x02, 0x2f, 0x41, 0xb5, 0xad},
    {0x06, 0x68, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x82, 0x6d},
    {0x04, 0x23, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x82, 0x6d},
    {0x09, 0x49, 0x43, 0xb5, 0xbd},
    {0x03, 0x3b, 0x41, 0xb5, 0xad},
    {0x01, 0x82, 0xc2, 0xf5, 0x0d},
    {0x02, 0x3b, 0x41, 0xb5, 0xad},
    {0x05, 0x68, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x82, 0x6d},
    {0x04, 0x82, 0xc2, 0xf5, 0x0d},
    {0x02, 0x05, 0x43, 0x82, 0x6d},
    {0x0b, 0x5b, 0xf5, 0x40, 0xee},
    {0x03, 0x29, 0x41, 0xb5, 0xad},
    {0x01, 0x33, 0x43, 0xf5, 0xbd},
    {0x02, 0x29, 0x41, 0xb5, 0xad},
    {0x06, 0x50, 0x01, 0xb5, 0xad},
    {0x03, 0x10, 0x43, 0x0b, 0x8f},
    {0x04, 0x33, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0x0b, 0x8f},
    {0x07, 0x71, 0xb5, 0x40, 0xdd},
    {0x03, 0x8f, 0x43, 0xb5, 0xff},
    {0x01, 0x0f, 0x46, 0xf5, 0x9d},
    {0x02, 0x8f, 0x43, 0xb5, 0xff},
    {0x05, 0x50, 0x01, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x82, 0x6d},
    {0x04, 0x0f, 0x46, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x82, 0x6d},
    {0x5f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x41, 0xb5, 0xad},
    {0x01, 0x3f, 0x43, 0xf5, 0xbd},
    {0x02, 0x1f, 0x41, 0xb5, 0xad},
    {0x06, 0xcd, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x0b, 0x7f},
    {0x04, 0x3f, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0x0b, 0x7f},
    {0x08, 0x49, 0x43, 0xb5, 0xbd},
    {0x03, 0x39, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x41, 0x4b, 0x7f},
    {0x02, 0x39, 0x41, 0xb5, 0xad},
    {0x05, 0xcd, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x5b, 0xb5, 0xee},
    {0x04, 0x04, 0x41, 0x4b, 0x7f},
    {0x02, 0x81, 0x5b, 0xb5, 0xee},
    {0x0c, 0x5b, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x41, 0x0b, 0x7f},
    {0x01, 0x02, 0x41, 0x4b, 0x7f},
    {0x02, 0x0a, 0x41, 0x0b, 0x7f},
    {0x06, 0x46, 0x03, 0x0b, 0x8f},
    {0x03, 0x04, 0x43, 0x82, 0x6d},
    {0x04, 0x02, 0x41, 0x4b, 0x7f},
    {0x02, 0x04, 0x43, 0x82, 0x6d},
    {0x07, 0x4e, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x82, 0x6d},
    {0x01, 0x07, 0x41, 0x4b, 0x7f},
    {0x02, 0x02, 0x43, 0x82, 0x6d},
    {0x05, 0x46, 0x03, 0x0b, 0x8f},
    {0x03, 0x07, 0x43, 0x82, 0x6d},
    {0x04, 0x07, 0x41, 0x4b, 0x7f},
    {0x02, 0x07, 0x43, 0x82, 0x6d},
    {0xdd, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x46, 0xb5, 0x9d},
    {0x01, 0x0d, 0x46, 0xf5, 0x9d},
    {0x02, 0x16, 0x46, 0xb5, 0x9d},
    {0x06, 0x53, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x44, 0x0c, 0x6f},
    {0x04, 0x0d, 0x46, 0xf5, 0x9d},
    {0x02, 0x03, 0x44, 0x0c, 0x6f},
    {0x09, 0xc7, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x42, 0x0c, 0x7f},
    {0x01, 0x03, 0x42, 0x4c, 0x7f},
    {0x02, 0x0b, 0x42, 0x0c, 0x7f},
    {0x05, 0x53, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x44, 0x0c, 0x6f},
    {0x04, 0x03, 0x42, 0x4c, 0x7f},
    {0x02, 0x05, 0x44, 0x0c, 0x6f},
    {0x0a, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x46, 0xb5, 0x9d},
    {0x01, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x46, 0xb5, 0x9d},
    {0x06, 0x48, 0x06, 0xb5, 0x9d},
    {0x03, 0x09, 0x42, 0x0c, 0x7f},
    {0x04, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x0c, 0x7f},
    {0x07, 0x7d, 0xb5, 0x40, 0xdd},
    {0x03, 0x8b, 0x43, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x4c, 0x7f},
    {0x02, 0x8b, 0x43, 0xb5, 0xff},
    {0x05, 0x48, 0x06, 0xb5, 0x9d},
    {0x03, 0x06, 0x44, 0x0c, 0x6f},
    {0x04, 0x05, 0x42, 0x4c, 0x7f},
    {0x02, 0x06, 0x44, 0x0c, 0x6f},
    {0x7a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x41, 0xb5, 0xad},
    {0x01, 0x2b, 0x43, 0xf5, 0xbd},
    {0x02, 0x25, 0x41, 0xb5, 0xad},
    {0x06, 0x78, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x45, 0x03, 0xbd},
    {0x04, 0x2b, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x45, 0x03, 0xbd},
    {0x08, 0xc7, 0xf5, 0x00, 0x0e},
    {0x03, 0x19, 0x46, 0xb5, 0x9d},
    {0x01, 0x11, 0x46, 0xf5, 0x9d},
    {0x02, 0x19, 0x46, 0xb5, 0x9d},
    {0x05, 0x78, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x43, 0x0b, 0x8f},
    {0x04, 0x11, 0x46, 0xf5, 0x9d},
    {0x02, 0x0f, 0x43, 0x0b, 0x8f},
    {0x55, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x85, 0x4b, 0xb5, 0xff},
    {0x01, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x4b, 0xb5, 0xff},
    {0x06, 0xc1, 0x0c, 0xb5, 0xff},
    {0x03, 0x04, 0x44, 0x0c, 0x6f},
    {0x04, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x0c, 0x6f},
    {0x07, 0x44, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x44, 0x0c, 0x6f},
    {0x01, 0x06, 0x42, 0x4c, 0x7f},
    {0x02, 0x02, 0x44, 0x0c, 0x6f},
    {0x05, 0xc1, 0x0c, 0xb5, 0xff},
    {0x03, 0x07, 0x44, 0x0c, 0x6f},
    {0x04, 0x06, 0x42, 0x4c, 0x7f},
    {0x02, 0x07, 0x44, 0x0c, 0x6f},
    {0x8e, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0x0b, 0x8f},
    {0x01, 0x01, 0x46, 0xf5, 0x9d},
    {0x02, 0x0d, 0x43, 0x0b, 0x8f},
    {0x06, 0x4a, 0x06, 0xb5, 0x9d},
    {0x03, 0x03, 0x42, 0x82, 0x6d},
    {0x04, 0x01, 0x46, 0xf5, 0x9d},
    {0x02, 0x03, 0x42, 0x82, 0x6d},
    {0x09, 0x46, 0x41, 0xb5, 0xad},
    {0x03, 0x12, 0x46, 0xb5, 0x9d},
    {0x01, 0x08, 0x43, 0x4b, 0x8f},
    {0x02, 0x12, 0x46, 0xb5, 0x9d},
    {0x05, 0x4a, 0x06, 0xb5, 0x9d},
    {0x03, 0x05, 0x42, 0x82, 0x6d},
    {0x04, 0x08, 0x43, 0x4b, 0x8f},
    {0x02, 0x05, 0x42, 0x82, 0x6d},
    {0x0b, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x46, 0xb5, 0x9d},
    {0x01, 0x83, 0x4c, 0xf5, 0xff},
    {0x02, 0x15, 0x46, 0xb5, 0x9d},
    {0x06, 0x44, 0x03, 0x0b, 0x8f},
    {0x03, 0x11, 0x43, 0x0b, 0x8f},
    {0x04, 0x83, 0x4c, 0xf5, 0xff},
    {0x02, 0x11, 0x43, 0x0b, 0x8f},
    {0x07, 0x42, 0x06, 0xf5, 0x9d},
    {0x03, 0x84, 0x4c, 0xb5, 0xff},
    {0x01, 0x81, 0xc2, 0xf5, 0x0d},
    {0x02, 0x84, 0x4c, 0xb5, 0xff},
    {0x05, 0x44, 0x03, 0x0b, 0x8f},
    {0x03, 0x06, 0x42, 0x82, 0x6d},
    {0x04, 0x81, 0xc2, 0xf5, 0x0d},
    {0x02, 0x06, 0x42, 0x82, 0x6d},
    {0x4e, 0x82, 0xb5, 0x00, 0x0d},
    {0x03, 0x01, 0x43, 0x0b, 0x8f},
    {0x01, 0x0a, 0x43, 0x4b, 0x8f},
    {0x02, 0x01, 0x43, 0x0b, 0x8f},
    {0x06, 0x42, 0x03, 0x0b, 0x8f},
    {0x03, 0x08, 0x42, 0x0c, 0x7f},
    {0x04, 0x0a, 0x43, 0x4b, 0x8f},
    {0x02, 0x08, 0x42, 0x0c, 0x7f},
    {0x08, 0x46, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0xc2, 0xb5, 0x0d},
    {0x01, 0x04, 0x42, 0x4c, 0x7f},
    {0x02, 0x83, 0xc2, 0xb5, 0x0d},
    {0x05, 0x42, 0x03, 0x0b, 0x8f},
    {0x03, 0x81, 0x45, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0x4c, 0x7f},
    {0x02, 0x81, 0x45, 0x03, 0xbd},
    {0x0c, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x0c, 0x7f},
    {0x01, 0x02, 0x42, 0x4c, 0x7f},
    {0x02, 0x0a, 0x42, 0x0c, 0x7f},
    {0x06, 0x47, 0x03, 0x0b, 0x8f},
    {0x03, 0x04, 0x42, 0x82, 0x6d},
    {0x04, 0x02, 0x42, 0x4c, 0x7f},
    {0x02, 0x04, 0x42, 0x82, 0x6d},
    {0x07, 0x47, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x82, 0x6d},
    {0x01, 0x07, 0x42, 0x4c, 0x7f},
    {0x02, 0x02, 0x42, 0x82, 0x6d},
    {0x05, 0x47, 0x03, 0x0b, 0x8f},
    {0x03, 0x07, 0x42, 0x82, 0x6d},
    {0x04, 0x07, 0x42, 0x4c, 0x7f},
    {0x02, 0x07, 0x42, 0x82, 0x6d},
    {0xf4, 0x4b, 0xf5, 0x40, 0x0f},
    {0x03, 0xa1, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x43, 0xf5, 0xbd},
    {0x02, 0xa1, 0xf5, 0x00, 0x0e},
    {0x06, 0x6e, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x48, 0xb5, 0x6c},
    {0x04, 0x1d, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x48, 0xb5, 0x6c},
    {0x09, 0x63, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0x03, 0x7f},
    {0x01, 0x03, 0x46, 0x43, 0x7f},
    {0x02, 0x0b, 0x46, 0x03, 0x7f},
    {0x05, 0x6e, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x48, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0x43, 0x7f},
    {0x02, 0x05, 0x48, 0xb5, 0x6c},
    {0x0a, 0x67, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x41, 0x03, 0x8f},
    {0x01, 0x0b, 0x41, 0x43, 0x8f},
    {0x02, 0x0c, 0x41, 0x03, 0x8f},
    {0x06, 0x43, 0x01, 0x03, 0x8f},
    {0x03, 0x09, 0x46, 0x03, 0x7f},
    {0x04, 0x0b, 0x41, 0x43, 0x8f},
    {0x02, 0x09, 0x46, 0x03, 0x7f},
    {0x07, 0x6f, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x58, 0xb5, 0xff},
    {0x01, 0x05, 0x46, 0x43, 0x7f},
    {0x02, 0x9a, 0x58, 0xb5, 0xff},
    {0x05, 0x43, 0x01, 0x03, 0x8f},
    {0x03, 0x06, 0x48, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0x43, 0x7f},
    {0x02, 0x06, 0x48, 0xb5, 0x6c},
    {0x4d, 0x18, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x43, 0x03, 0x9f},
    {0x01, 0x0c, 0x43, 0x43, 0x9f},
    {0x02, 0x14, 0x43, 0x03, 0x9f},
    {0x06, 0x4b, 0x03, 0x03, 0x9f},
    {0x03, 0x82, 0x67, 0xb5, 0xff},
    {0x04, 0x0c, 0x43, 0x43, 0x9f},
    {0x02, 0x82, 0x67, 0xb5, 0xff},
    {0x08, 0x63, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0x03, 0x9f},
    {0x01, 0x09, 0x41, 0x43, 0x8f},
    {0x02, 0x18, 0x43, 0x03, 0x9f},
    {0x05, 0x4b, 0x03, 0x03, 0x9f},
    {0x03, 0x0e, 0x41, 0x03, 0x8f},
    {0x04, 0x09, 0x41, 0x43, 0x8f},
    {0x02, 0x0e, 0x41, 0x03, 0x8f},
    {0x4f, 0x09, 0xb5, 0x40, 0xee},
    {0x03, 0x1c, 0x43, 0x03, 0x9f},
    {0x01, 0x9a, 0x49, 0xf5, 0xee},
    {0x02, 0x1c, 0x43, 0x03, 0x9f},
    {0x06, 0x45, 0x01, 0x03, 0x8f},
    {0x03, 0x04, 0x48, 0xb5, 0x6c},
    {0x04, 0x9a, 0x49, 0xf5, 0xee},
    {0x02, 0x04, 0x48, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0x43, 0x9f},
    {0x03, 0x02, 0x48, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0x43, 0x7f},
    {0x02, 0x02, 0x48, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0x03, 0x8f},
    {0x03, 0x07, 0x48, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0x43, 0x7f},
    {0x02, 0x07, 0x48, 0xb5, 0x6c},
    {0x8a, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x17, 0x43, 0x03, 0x9f},
    {0x01, 0x21, 0x43, 0xf5, 0xbd},
    {0x02, 0x17, 0x43, 0x03, 0x9f},
    {0x06, 0x76, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x18, 0x6f},
    {0x04, 0x21, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x18, 0x6f},
    {0x09, 0xc2, 0x43, 0xb5, 0xff},
    {0x03, 0x1b, 0x43, 0x03, 0x9f},
    {0x01, 0x82, 0x58, 0xf5, 0xff},
    {0x02, 0x1b, 0x43, 0x03, 0x9f},
    {0x05, 0x76, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x18, 0x6f},
    {0x04, 0x82, 0x58, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x18, 0x6f},
    {0x0b, 0x67, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x41, 0xb5, 0xad},
    {0x01, 0x31, 0x43, 0xf5, 0xbd},
    {0x02, 0x28, 0x41, 0xb5, 0xad},
    {0x06, 0x49, 0x03, 0x03, 0x9f},
    {0x03, 0x10, 0x41, 0x03, 0x8f},
    {0x04, 0x31, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x41, 0x03, 0x8f},
    {0x07, 0x7b, 0xb5, 0x40, 0xdd},
    {0x03, 0x8d, 0x43, 0xb5, 0xff},
    {0x01, 0x0e, 0x43, 0x43, 0x9f},
    {0x02, 0x8d, 0x43, 0xb5, 0xff},
    {0x05, 0x49, 0x03, 0x03, 0x9f},
    {0x03, 0x06, 0x43, 0x18, 0x6f},
    {0x04, 0x0e, 0x43, 0x43, 0x9f},
    {0x02, 0x06, 0x43, 0x18, 0x6f},
    {0x71, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0x03, 0x9f},
    {0x01, 0x3d, 0x43, 0xf5, 0xbd},
    {0x02, 0x13, 0x43, 0x03, 0x9f},
    {0x06, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0x03, 0x7f},
    {0x04, 0x3d, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x46, 0x03, 0x7f},
    {0x08, 0xc2, 0x43, 0xb5, 0xff},
    {0x03, 0x38, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x46, 0x43, 0x7f},
    {0x02, 0x38, 0x41, 0xb5, 0xad},
    {0x05, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x67, 0xb5, 0xff},
    {0x04, 0x04, 0x46, 0x43, 0x7f},
    {0x02, 0x81, 0x67, 0xb5, 0xff},
    {0x0c, 0x67, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x46, 0x03, 0x7f},
    {0x01, 0x02, 0x46, 0x43, 0x7f},
    {0x02, 0x0a, 0x46, 0x03, 0x7f},
    {0x06, 0x46, 0x01, 0x03, 0x8f},
    {0x03, 0x04, 0x43, 0x18, 0x6f},
    {0x04, 0x02, 0x46, 0x43, 0x7f},
    {0x02, 0x04, 0x43, 0x18, 0x6f},
    {0x07, 0x45, 0x03, 0x43, 0x9f},
    {0x03, 0x02, 0x43, 0x18, 0x6f},
    {0x01, 0x07, 0x46, 0x43, 0x7f},
    {0x02, 0x02, 0x43, 0x18, 0x6f},
    {0x05, 0x46, 0x01, 0x03, 0x8f},
    {0x03, 0x07, 0x43, 0x18, 0x6f},
    {0x04, 0x07, 0x46, 0x43, 0x7f},
    {0x02, 0x07, 0x43, 0x18, 0x6f},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2e, 0x41, 0xb5, 0xad},
    {0x01, 0x2f, 0x43, 0xf5, 0xbd},
    {0x02, 0x2e, 0x41, 0xb5, 0xad},
    {0x06, 0x64, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x09, 0x6e},
    {0x04, 0x2f, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x09, 0x6e},
    {0x09, 0x73, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x09, 0x7e},
    {0x01, 0x03, 0x43, 0x49, 0x7e},
    {0x02, 0x0b, 0x43, 0x09, 0x7e},
    {0x05, 0x64, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x09, 0x6e},
    {0x04, 0x03, 0x43, 0x49, 0x7e},
    {0x02, 0x05, 0x41, 0x09, 0x6e},
    {0x0a, 0x50, 0xf5, 0x40, 0xdd},
    {0x03, 0x36, 0x41, 0xb5, 0xad},
    {0x01, 0x3b, 0x43, 0xf5, 0xbd},
    {0x02, 0x36, 0x41, 0xb5, 0xad},
    {0x06, 0xc2, 0x09, 0xb5, 0xee},
    {0x03, 0x09, 0x43, 0x09, 0x7e},
    {0x04, 0x3b, 0x43, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x09, 0x7e},
    {0x07, 0x69, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0x4b, 0xb5, 0xff},
    {0x01, 0x05, 0x43, 0x49, 0x7e},
    {0x02, 0x88, 0x4b, 0xb5, 0xff},
    {0x05, 0xc2, 0x09, 0xb5, 0xee},
    {0x03, 0x06, 0x41, 0x09, 0x6e},
    {0x04, 0x05, 0x43, 0x49, 0x7e},
    {0x02, 0x06, 0x41, 0x09, 0x6e},
    {0x6d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x41, 0xb5, 0xad},
    {0x01, 0x29, 0x43, 0xf5, 0xbd},
    {0x02, 0x24, 0x41, 0xb5, 0xad},
    {0x06, 0x74, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x50, 0xb5, 0xdd},
    {0x04, 0x29, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x50, 0xb5, 0xdd},
    {0x08, 0x73, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x41, 0xb5, 0xad},
    {0x01, 0x10, 0x43, 0x43, 0x9f},
    {0x02, 0x34, 0x41, 0xb5, 0xad},
    {0x05, 0x74, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x41, 0x03, 0x8f},
    {0x04, 0x10, 0x43, 0x43, 0x9f},
    {0x02, 0x0f, 0x41, 0x03, 0x8f},
    {0x65, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x41, 0xb5, 0xad},
    {0x01, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x41, 0xb5, 0xad},
    {0x06, 0x4f, 0x01, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x09, 0x6e},
    {0x04, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x09, 0x6e},
    {0x07, 0x50, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x09, 0x6e},
    {0x01, 0x06, 0x43, 0x49, 0x7e},
    {0x02, 0x02, 0x41, 0x09, 0x6e},
    {0x05, 0x4f, 0x01, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x09, 0x6e},
    {0x04, 0x06, 0x43, 0x49, 0x7e},
    {0x02, 0x07, 0x41, 0x09, 0x6e},
    {0x87, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x41, 0x03, 0x8f},
    {0x01, 0x1f, 0x43, 0xf5, 0xbd},
    {0x02, 0x0d, 0x41, 0x03, 0x8f},
    {0x06, 0x40, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x42, 0x18, 0x6f},
    {0x04, 0x1f, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x18, 0x6f},
    {0x09, 0x4f, 0xf5, 0x00, 0xcc},
    {0x03, 0x99, 0x43, 0xb5, 0xff},
    {0x01, 0x08, 0x41, 0x43, 0x8f},
    {0x02, 0x99, 0x43, 0xb5, 0xff},
    {0x05, 0x40, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x42, 0x18, 0x6f},
    {0x04, 0x08, 0x41, 0x43, 0x8f},
    {0x02, 0x05, 0x42, 0x18, 0x6f},
    {0x0b, 0x50, 0xf5, 0x40, 0xdd},
    {0x03, 0x2c, 0x41, 0xb5, 0xad},
    {0x01, 0x39, 0x43, 0xf5, 0xbd},
    {0x02, 0x2c, 0x41, 0xb5, 0xad},
    {0x06, 0x44, 0x01, 0x03, 0x8f},
    {0x03, 0x11, 0x41, 0x03, 0x8f},
    {0x04, 0x39, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x41, 0x03, 0x8f},
    {0x07, 0xcf, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0x43, 0xb5, 0xff},
    {0x01, 0x81, 0x58, 0xf5, 0xff},
    {0x02, 0x95, 0x43, 0xb5, 0xff},
    {0x05, 0x44, 0x01, 0x03, 0x8f},
    {0x03, 0x06, 0x42, 0x18, 0x6f},
    {0x04, 0x81, 0x58, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x18, 0x6f},
    {0x4e, 0x18, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x41, 0x03, 0x8f},
    {0x01, 0x0a, 0x41, 0x43, 0x8f},
    {0x02, 0x01, 0x41, 0x03, 0x8f},
    {0x06, 0x42, 0x01, 0x03, 0x8f},
    {0x03, 0x08, 0x43, 0x09, 0x7e},
    {0x04, 0x0a, 0x41, 0x43, 0x8f},
    {0x02, 0x08, 0x43, 0x09, 0x7e},
    {0x08, 0x4f, 0xf5, 0x00, 0xcc},
    {0x03, 0x83, 0x58, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0x49, 0x7e},
    {0x02, 0x83, 0x58, 0xb5, 0xff},
    {0x05, 0x42, 0x01, 0x03, 0x8f},
    {0x03, 0x81, 0x50, 0xb5, 0xdd},
    {0x04, 0x04, 0x43, 0x49, 0x7e},
    {0x02, 0x81, 0x50, 0xb5, 0xdd},
    {0x0c, 0x50, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x43, 0x09, 0x7e},
    {0x01, 0x02, 0x43, 0x49, 0x7e},
    {0x02, 0x0a, 0x43, 0x09, 0x7e},
    {0x06, 0x47, 0x01, 0x03, 0x8f},
    {0x03, 0x04, 0x42, 0x18, 0x6f},
    {0x04, 0x02, 0x43, 0x49, 0x7e},
    {0x02, 0x04, 0x42, 0x18, 0x6f},
    {0x07, 0x46, 0x03, 0x43, 0x9f},
    {0x03, 0x02, 0x42, 0x18, 0x6f},
    {0x01, 0x07, 0x43, 0x49, 0x7e},
    {0x02, 0x02, 0x42, 0x18, 0x6f},
    {0x05, 0x47, 0x01, 0x03, 0x8f},
    {0x03, 0x07, 0x42, 0x18, 0x6f},
    {0x04, 0x07, 0x43, 0x49, 0x7e},
    {0x02, 0x07, 0x42, 0x18, 0x6f},
    {0xf4, 0x49, 0xf5, 0x00, 0x0e},
    {0x03, 0x1e, 0x41, 0xb5, 0xad},
    {0x01, 0x16, 0x41, 0xf5, 0xad},
    {0x02, 0x1e, 0x41, 0xb5, 0xad},
    {0x06, 0x4d, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x45, 0x0b, 0x6f},
    {0x04, 0x16, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x45, 0x0b, 0x6f},
    {0x09, 0x7f, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x44, 0x0b, 0x7f},
    {0x01, 0x03, 0x44, 0x4b, 0x7f},
    {0x02, 0x0b, 0x44, 0x0b, 0x7f},
    {0x05, 0x4d, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x45, 0x0b, 0x6f},
    {0x04, 0x03, 0x44, 0x4b, 0x7f},
    {0x02, 0x05, 0x45, 0x0b, 0x6f},
    {0x0a, 0xc9, 0xf5, 0x40, 0x0f},
    {0x03, 0x0c, 0x42, 0x0b, 0x8f},
    {0x01, 0x0b, 0x42, 0x4b, 0x8f},
    {0x02, 0x0c, 0x42, 0x0b, 0x8f},
    {0x06, 0x43, 0x02, 0x0b, 0x8f},
    {0x03, 0x09, 0x44, 0x0b, 0x7f},
    {0x04, 0x0b, 0x42, 0x4b, 0x8f},
    {0x02, 0x09, 0x44, 0x0b, 0x7f},
    {0x07, 0x5f, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x4e, 0xb5, 0xee},
    {0x01, 0x05, 0x44, 0x4b, 0x7f},
    {0x02, 0x9a, 0x4e, 0xb5, 0xee},
    {0x05, 0x43, 0x02, 0x0b, 0x8f},
    {0x03, 0x06, 0x45, 0x0b, 0x6f},
    {0x04, 0x05, 0x44, 0x4b, 0x7f},
    {0x02, 0x06, 0x45, 0x0b, 0x6f},
    {0x4d, 0x0e, 0xb5, 0x00, 0xee},
    {0x03, 0x22, 0x41, 0xb5, 0xad},
    {0x01, 0x1a, 0x41, 0xf5, 0xad},
    {0x02, 0x22, 0x41, 0xb5, 0xad},
    {0x06, 0xd9, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xc9, 0xb5, 0x0f},
    {0x04, 0x1a, 0x41, 0xf5, 0xad},
    {0x02, 0x82, 0xc9, 0xb5, 0x0f},
    {0x08, 0x7f, 0xf5, 0x00, 0xee},
    {0x03, 0x32, 0x41, 0xb5, 0xad},
    {0x01, 0x09, 0x42, 0x4b, 0x8f},
    {0x02, 0x32, 0x41, 0xb5, 0xad},
    {0x05, 0xd9, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0x0b, 0x8f},
    {0x04, 0x09, 0x42, 0x4b, 0x8f},
    {0x02, 0x0e, 0x42, 0x0b, 0x8f},
    {0x5d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x41, 0xb5, 0xad},
    {0x01, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x41, 0xb5, 0xad},
    {0x06, 0x45, 0x02, 0x0b, 0x8f},
    {0x03, 0x04, 0x45, 0x0b, 0x6f},
    {0x04, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0x0b, 0x6f},
    {0x07, 0x48, 0x01, 0xf5, 0xad},
    {0x03, 0x02, 0x45, 0x0b, 0x6f},
    {0x01, 0x06, 0x44, 0x4b, 0x7f},
    {0x02, 0x02, 0x45, 0x0b, 0x6f},
    {0x05, 0x45, 0x02, 0x0b, 0x8f},
    {0x03, 0x07, 0x45, 0x0b, 0x6f},
    {0x04, 0x06, 0x44, 0x4b, 0x7f},
    {0x02, 0x07, 0x45, 0x0b, 0x6f},
    {0x98, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x30, 0x41, 0xb5, 0xad},
    {0x01, 0x25, 0x43, 0xf5, 0xbd},
    {0x02, 0x30, 0x41, 0xb5, 0xad},
    {0x06, 0x6c, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x0e, 0x6e},
    {0x04, 0x25, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x0e, 0x6e},
    {0x09, 0x44, 0x41, 0xb5, 0xad},
    {0x03, 0x3c, 0x41, 0xb5, 0xad},
    {0x01, 0x82, 0x4e, 0xf5, 0xee},
    {0x02, 0x3c, 0x41, 0xb5, 0xad},
    {0x05, 0x6c, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x0e, 0x6e},
    {0x04, 0x82, 0x4e, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x0e, 0x6e},
    {0x0b, 0xc9, 0xf5, 0x40, 0x0f},
    {0x03, 0x2a, 0x41, 0xb5, 0xad},
    {0x01, 0x19, 0x41, 0xf5, 0xad},
    {0x02, 0x2a, 0x41, 0xb5, 0xad},
    {0x06, 0x51, 0x01, 0xb5, 0xad},
    {0x03, 0x10, 0x42, 0x0b, 0x8f},
    {0x04, 0x19, 0x41, 0xf5, 0xad},
    {0x02, 0x10, 0x42, 0x0b, 0x8f},
    {0x07, 0x79, 0xb5, 0x40, 0xdd},
    {0x03, 0x91, 0x43, 0xb5, 0xff},
    {0x01, 0x0f, 0x43, 0x43, 0x9f},
    {0x02, 0x91, 0x43, 0xb5, 0xff},
    {0x05, 0x51, 0x01, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x0e, 0x6e},
    {0x04, 0x0f, 0x43, 0x43, 0x9f},
    {0x02, 0x06, 0x43, 0x0e, 0x6e},
    {0x69, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x41, 0xb5, 0xad},
    {0x01, 0x85, 0x43, 0xf5, 0xff},
    {0x02, 0x20, 0x41, 0xb5, 0xad},
    {0x06, 0xd5, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0x0b, 0x7f},
    {0x04, 0x85, 0x43, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0x0b, 0x7f},
    {0x08, 0x44, 0x41, 0xb5, 0xad},
    {0x03, 0x3a, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x44, 0x4b, 0x7f},
    {0x02, 0x3a, 0x41, 0xb5, 0xad},
    {0x05, 0xd5, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc9, 0xb5, 0x0f},
    {0x04, 0x04, 0x44, 0x4b, 0x7f},
    {0x02, 0x81, 0xc9, 0xb5, 0x0f},
    {0x0c, 0xc9, 0xf5, 0x40, 0x0f},
    {0x03, 0x0a, 0x44, 0x0b, 0x7f},
    {0x01, 0x02, 0x44, 0x4b, 0x7f},
    {0x02, 0x0a, 0x44, 0x0b, 0x7f},
    {0x06, 0x46, 0x02, 0x0b, 0x8f},
    {0x03, 0x04, 0x43, 0x0e, 0x6e},
    {0x04, 0x02, 0x44, 0x4b, 0x7f},
    {0x02, 0x04, 0x43, 0x0e, 0x6e},
    {0x07, 0xc1, 0x0b, 0xf5, 0xff},
    {0x03, 0x02, 0x43, 0x0e, 0x6e},
    {0x01, 0x07, 0x44, 0x4b, 0x7f},
    {0x02, 0x02, 0x43, 0x0e, 0x6e},
    {0x05, 0x46, 0x02, 0x0b, 0x8f},
    {0x03, 0x07, 0x43, 0x0e, 0x6e},
    {0x04, 0x07, 0x44, 0x4b, 0x7f},
    {0x02, 0x07, 0x43, 0x0e, 0x6e},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x16, 0x43, 0x03, 0x9f},
    {0x01, 0x0d, 0x43, 0x43, 0x9f},
    {0x02, 0x16, 0x43, 0x03, 0x9f},
    {0x06, 0x41, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x44, 0x09, 0x6e},
    {0x04, 0x0d, 0x43, 0x43, 0x9f},
    {0x02, 0x03, 0x44, 0x09, 0x6e},
    {0x09, 0x42, 0x41, 0xb5, 0xad},
    {0x03, 0x0b, 0x42, 0x09, 0x7e},
    {0x01, 0x03, 0x42, 0x49, 0x7e},
    {0x02, 0x0b, 0x42, 0x09, 0x7e},
    {0x05, 0x41, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x44, 0x09, 0x6e},
    {0x04, 0x03, 0x42, 0x49, 0x7e},
    {0x02, 0x05, 0x44, 0x09, 0x6e},
    {0x0a, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x43, 0x03, 0x9f},
    {0x01, 0x12, 0x41, 0xf5, 0xad},
    {0x02, 0x1a, 0x43, 0x03, 0x9f},
    {0x06, 0x48, 0x03, 0x03, 0x9f},
    {0x03, 0x09, 0x42, 0x09, 0x7e},
    {0x04, 0x12, 0x41, 0xf5, 0xad},
    {0x02, 0x09, 0x42, 0x09, 0x7e},
    {0x07, 0x4a, 0x01, 0xf5, 0xad},
    {0x03, 0x8a, 0x4b, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x49, 0x7e},
    {0x02, 0x8a, 0x4b, 0xb5, 0xff},
    {0x05, 0x48, 0x03, 0x03, 0x9f},
    {0x03, 0x06, 0x44, 0x09, 0x6e},
    {0x04, 0x05, 0x42, 0x49, 0x7e},
    {0x02, 0x06, 0x44, 0x09, 0x6e},
    {0x50, 0x0b, 0xf5, 0x00, 0xff},
    {0x03, 0x26, 0x41, 0xb5, 0xad},
    {0x01, 0x15, 0x41, 0xf5, 0xad},
    {0x02, 0x26, 0x41, 0xb5, 0xad},
    {0x06, 0xc3, 0x0b, 0xb5, 0xff},
    {0x03, 0x82, 0x46, 0x03, 0xbd},
    {0x04, 0x15, 0x41, 0xf5, 0xad},
    {0x02, 0x82, 0x46, 0x03, 0xbd},
    {0x08, 0x42, 0x41, 0xb5, 0xad},
    {0x03, 0x19, 0x43, 0x03, 0x9f},
    {0x01, 0x11, 0x43, 0x43, 0x9f},
    {0x02, 0x19, 0x43, 0x03, 0x9f},
    {0x05, 0xc3, 0x0b, 0xb5, 0xff},
    {0x03, 0x0f, 0x42, 0x0b, 0x8f},
    {0x04, 0x11, 0x43, 0x43, 0x9f},
    {0x02, 0x0f, 0x42, 0x0b, 0x8f},
    {0x40, 0x0b, 0xf5, 0x00, 0xff},
    {0x03, 0x86, 0x4b, 0xb5, 0xff},
    {0x01, 0x84, 0x4b, 0xf5, 0xff},
    {0x02, 0x86, 0x4b, 0xb5, 0xff},
    {0x06, 0xc1, 0x09, 0xb5, 0xee},
    {0x03, 0x04, 0x44, 0x09, 0x6e},
    {0x04, 0x84, 0x4b, 0xf5, 0xff},
    {0x02, 0x04, 0x44, 0x09, 0x6e},
    {0x07, 0x44, 0x03, 0x43, 0x9f},
    {0x03, 0x02, 0x44, 0x09, 0x6e},
    {0x01, 0x06, 0x42, 0x49, 0x7e},
    {0x02, 0x02, 0x44, 0x09, 0x6e},
    {0x05, 0xc1, 0x09, 0xb5, 0xee},
    {0x03, 0x07, 0x44, 0x09, 0x6e},
    {0x04, 0x06, 0x42, 0x49, 0x7e},
    {0x02, 0x07, 0x44, 0x09, 0x6e},
    {0xc1, 0x41, 0xb5, 0x40, 0x0d},
    {0x03, 0x0d, 0x42, 0x0b, 0x8f},
    {0x01, 0x01, 0x43, 0x43, 0x9f},
    {0x02, 0x0d, 0x42, 0x0b, 0x8f},
    {0x06, 0x4a, 0x03, 0x03, 0x9f},
    {0x03, 0x03, 0x42, 0x0e, 0x6e},
    {0x04, 0x01, 0x43, 0x43, 0x9f},
    {0x02, 0x03, 0x42, 0x0e, 0x6e},
    {0x09, 0x47, 0x41, 0xb5, 0xad},
    {0x03, 0x12, 0x43, 0x03, 0x9f},
    {0x01, 0x08, 0x42, 0x4b, 0x8f},
    {0x02, 0x12, 0x43, 0x03, 0x9f},
    {0x05, 0x4a, 0x03, 0x03, 0x9f},
    {0x03, 0x05, 0x42, 0x0e, 0x6e},
    {0x04, 0x08, 0x42, 0x4b, 0x8f},
    {0x02, 0x05, 0x42, 0x0e, 0x6e},
    {0x0b, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x43, 0x03, 0x9f},
    {0x01, 0x83, 0x49, 0xf5, 0xee},
    {0x02, 0x15, 0x43, 0x03, 0x9f},
    {0x06, 0x44, 0x02, 0x0b, 0x8f},
    {0x03, 0x11, 0x42, 0x0b, 0x8f},
    {0x04, 0x83, 0x49, 0xf5, 0xee},
    {0x02, 0x11, 0x42, 0x0b, 0x8f},
    {0x07, 0x42, 0x03, 0x43, 0x9f},
    {0x03, 0x84, 0x49, 0xb5, 0xee},
    {0x01, 0x81, 0x4e, 0xf5, 0xee},
    {0x02, 0x84, 0x49, 0xb5, 0xee},
    {0x05, 0x44, 0x02, 0x0b, 0x8f},
    {0x03, 0x06, 0x42, 0x0e, 0x6e},
    {0x04, 0x81, 0x4e, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x0e, 0x6e},
    {0x4e, 0x0e, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x42, 0x0b, 0x8f},
    {0x01, 0x0a, 0x42, 0x4b, 0x8f},
    {0x02, 0x01, 0x42, 0x0b, 0x8f},
    {0x06, 0x42, 0x02, 0x0b, 0x8f},
    {0x03, 0x08, 0x42, 0x09, 0x7e},
    {0x04, 0x0a, 0x42, 0x4b, 0x8f},
    {0x02, 0x08, 0x42, 0x09, 0x7e},
    {0x08, 0x47, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0x4e, 0xb5, 0xee},
    {0x01, 0x04, 0x42, 0x49, 0x7e},
    {0x02, 0x83, 0x4e, 0xb5, 0xee},
    {0x05, 0x42, 0x02, 0x0b, 0x8f},
    {0x03, 0x81, 0x46, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0x49, 0x7e},
    {0x02, 0x81, 0x46, 0x03, 0xbd},
    {0x0c, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x09, 0x7e},
    {0x01, 0x02, 0x42, 0x49, 0x7e},
    {0x02, 0x0a, 0x42, 0x09, 0x7e},
    {0x06, 0x47, 0x02, 0x0b, 0x8f},
    {0x03, 0x04, 0x42, 0x0e, 0x6e},
    {0x04, 0x02, 0x42, 0x49, 0x7e},
    {0x02, 0x04, 0x42, 0x0e, 0x6e},
    {0x07, 0x47, 0x03, 0x43, 0x9f},
    {0x03, 0x02, 0x42, 0x0e, 0x6e},
    {0x01, 0x07, 0x42, 0x49, 0x7e},
    {0x02, 0x02, 0x42, 0x0e, 0x6e},
    {0x05, 0x47, 0x02, 0x0b, 0x8f},
    {0x03, 0x07, 0x42, 0x0e, 0x6e},
    {0x04, 0x07, 0x42, 0x49, 0x7e},
    {0x02, 0x07, 0x42, 0x0e, 0x6e},
    {0xf4, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0xb4, 0x43, 0xb5, 0xff},
    {0x01, 0x9d, 0xf5, 0x40, 0x0e},
    {0x02, 0xb4, 0x43, 0xb5, 0xff},
    {0x06, 0x5e, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x4f, 0xb5, 0x6f},
    {0x04, 0x9d, 0xf5, 0x40, 0x0e},
    {0x02, 0x03, 0x4f, 0xb5, 0x6f},
    {0x09, 0x4d, 0xf5, 0x00, 0xcc},
    {0x03, 0x0b, 0x47, 0xb5, 0x7c},
    {0x01, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x0b, 0x47, 0xb5, 0x7c},
    {0x05, 0x5e, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x4f, 0xb5, 0x6f},
    {0x04, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x05, 0x4f, 0xb5, 0x6f},
    {0x0a, 0x53, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x45, 0xb5, 0x8c},
    {0x01, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x0c, 0x45, 0xb5, 0x8c},
    {0x06, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x09, 0x47, 0xb5, 0x7c},
    {0x04, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x09, 0x47, 0xb5, 0x7c},
    {0x07, 0x56, 0xb5, 0x40, 0xcc},
    {0x03, 0x9a, 0x5c, 0xb5, 0xff},
    {0x01, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x9a, 0x5c, 0xb5, 0xff},
    {0x05, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x4f, 0xb5, 0x6f},
    {0x04, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x06, 0x4f, 0xb5, 0x6f},
    {0x4d, 0x1c, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x44, 0xb5, 0x9c},
    {0x01, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x14, 0x44, 0xb5, 0x9c},
    {0x06, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x82, 0x53, 0xb5, 0xee},
    {0x04, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x82, 0x53, 0xb5, 0xee},
    {0x08, 0x4d, 0xf5, 0x00, 0xcc},
    {0x03, 0x18, 0x44, 0xb5, 0x9c},
    {0x01, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x18, 0x44, 0xb5, 0x9c},
    {0x05, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x0e, 0x45, 0xb5, 0x8c},
    {0x04, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x0e, 0x45, 0xb5, 0x8c},
    {0x4f, 0x9a, 0xb5, 0x40, 0x0f},
    {0x03, 0x1c, 0x44, 0xb5, 0x9c},
    {0x01, 0x9a, 0xda, 0xf5, 0x0f},
    {0x02, 0x1c, 0x44, 0xb5, 0x9c},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x4f, 0xb5, 0x6f},
    {0x04, 0x9a, 0xda, 0xf5, 0x0f},
    {0x02, 0x04, 0x4f, 0xb5, 0x6f},
    {0x07, 0x43, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x4f, 0xb5, 0x6f},
    {0x01, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x4f, 0xb5, 0x6f},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x4f, 0xb5, 0x6f},
    {0x04, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x4f, 0xb5, 0x6f},
    {0x52, 0x05, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x44, 0xb5, 0x9c},
    {0x01, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x17, 0x44, 0xb5, 0x9c},
    {0x06, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0x1c, 0x6f},
    {0x04, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0x1c, 0x6f},
    {0x09, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x1b, 0x44, 0xb5, 0x9c},
    {0x01, 0x82, 0x5c, 0xf5, 0xff},
    {0x02, 0x1b, 0x44, 0xb5, 0x9c},
    {0x05, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0x1c, 0x6f},
    {0x04, 0x82, 0x5c, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x1c, 0x6f},
    {0x0b, 0x53, 0xf5, 0x40, 0xee},
    {0x03, 0x27, 0x42, 0xb5, 0xac},
    {0x01, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x27, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x10, 0x45, 0xb5, 0x8c},
    {0x04, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x45, 0xb5, 0x8c},
    {0x07, 0x4b, 0x02, 0xf5, 0xac},
    {0x03, 0x89, 0x45, 0xb5, 0xee},
    {0x01, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x89, 0x45, 0xb5, 0xee},
    {0x05, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0x1c, 0x6f},
    {0x04, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x1c, 0x6f},
    {0x51, 0x05, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x44, 0xb5, 0x9c},
    {0x01, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x13, 0x44, 0xb5, 0x9c},
    {0x06, 0xda, 0x05, 0xb5, 0xee},
    {0x03, 0x08, 0x47, 0xb5, 0x7c},
    {0x04, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x08, 0x47, 0xb5, 0x7c},
    {0x08, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x37, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x37, 0x42, 0xb5, 0xac},
    {0x05, 0xda, 0x05, 0xb5, 0xee},
    {0x03, 0x81, 0x53, 0xb5, 0xee},
    {0x04, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x81, 0x53, 0xb5, 0xee},
    {0x0c, 0x53, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x47, 0xb5, 0x7c},
    {0x01, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x0a, 0x47, 0xb5, 0x7c},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0x1c, 0x6f},
    {0x04, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x04, 0x43, 0x1c, 0x6f},
    {0x07, 0x45, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0x1c, 0x6f},
    {0x01, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x43, 0x1c, 0x6f},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0x1c, 0x6f},
    {0x04, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x43, 0x1c, 0x6f},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2d, 0x42, 0xb5, 0xac},
    {0x01, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x2d, 0x42, 0xb5, 0xac},
    {0x06, 0x62, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x9a, 0x6f},
    {0x04, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0x9a, 0x6f},
    {0x09, 0xd7, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x43, 0x9a, 0x7f},
    {0x01, 0x03, 0x43, 0xda, 0x7f},
    {0x02, 0x0b, 0x43, 0x9a, 0x7f},
    {0x05, 0x62, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x9a, 0x6f},
    {0x04, 0x03, 0x43, 0xda, 0x7f},
    {0x02, 0x05, 0x41, 0x9a, 0x6f},
    {0x0a, 0x48, 0xf5, 0x40, 0xcc},
    {0x03, 0x35, 0x42, 0xb5, 0xac},
    {0x01, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x35, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x9a, 0xb5, 0x0f},
    {0x03, 0x09, 0x43, 0x9a, 0x7f},
    {0x04, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0x9a, 0x7f},
    {0x07, 0x5a, 0xb5, 0x40, 0xcc},
    {0x03, 0x87, 0x45, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0xda, 0x7f},
    {0x02, 0x87, 0x45, 0xb5, 0xee},
    {0x05, 0xc2, 0x9a, 0xb5, 0x0f},
    {0x03, 0x06, 0x41, 0x9a, 0x6f},
    {0x04, 0x05, 0x43, 0xda, 0x7f},
    {0x02, 0x06, 0x41, 0x9a, 0x6f},
    {0x73, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x42, 0xb5, 0xac},
    {0x01, 0x28, 0x43, 0xf5, 0xbd},
    {0x02, 0x23, 0x42, 0xb5, 0xac},
    {0x06, 0x72, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x48, 0xb5, 0xcc},
    {0x04, 0x28, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x48, 0xb5, 0xcc},
    {0x08, 0xd7, 0xf5, 0x00, 0x0f},
    {0x03, 0x33, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x33, 0x42, 0xb5, 0xac},
    {0x05, 0x72, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x45, 0xb5, 0x8c},
    {0x04, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x45, 0xb5, 0x8c},
    {0x63, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x42, 0xb5, 0xac},
    {0x01, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x42, 0xb5, 0xac},
    {0x06, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x9a, 0x6f},
    {0x04, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x9a, 0x6f},
    {0x07, 0x49, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0x9a, 0x6f},
    {0x01, 0x06, 0x43, 0xda, 0x7f},
    {0x02, 0x02, 0x41, 0x9a, 0x6f},
    {0x05, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x9a, 0x6f},
    {0x04, 0x06, 0x43, 0xda, 0x7f},
    {0x02, 0x07, 0x41, 0x9a, 0x6f},
    {0x85, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x45, 0xb5, 0x8c},
    {0x01, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x0d, 0x45, 0xb5, 0x8c},
    {0x06, 0x7e, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x42, 0x1c, 0x6f},
    {0x04, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0x1c, 0x6f},
    {0x09, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x98, 0x43, 0xb5, 0xff},
    {0x01, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x98, 0x43, 0xb5, 0xff},
    {0x05, 0x7e, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x42, 0x1c, 0x6f},
    {0x04, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0x1c, 0x6f},
    {0x0b, 0x48, 0xf5, 0x40, 0xcc},
    {0x03, 0x2b, 0x42, 0xb5, 0xac},
    {0x01, 0x38, 0x43, 0xf5, 0xbd},
    {0x02, 0x2b, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x11, 0x45, 0xb5, 0x8c},
    {0x04, 0x38, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x45, 0xb5, 0x8c},
    {0x07, 0xcb, 0xb5, 0x40, 0x0e},
    {0x03, 0x94, 0x43, 0xb5, 0xff},
    {0x01, 0x81, 0x5c, 0xf5, 0xff},
    {0x02, 0x94, 0x43, 0xb5, 0xff},
    {0x05, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0x1c, 0x6f},
    {0x04, 0x81, 0x5c, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x1c, 0x6f},
    {0x4e, 0x1c, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x45, 0xb5, 0x8c},
    {0x01, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x01, 0x45, 0xb5, 0x8c},
    {0x06, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0x9a, 0x7f},
    {0x04, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0x9a, 0x7f},
    {0x08, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x5c, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0xda, 0x7f},
    {0x02, 0x83, 0x5c, 0xb5, 0xff},
    {0x05, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x81, 0x48, 0xb5, 0xcc},
    {0x04, 0x04, 0x43, 0xda, 0x7f},
    {0x02, 0x81, 0x48, 0xb5, 0xcc},
    {0x0c, 0x48, 0xf5, 0x40, 0xcc},
    {0x03, 0x0a, 0x43, 0x9a, 0x7f},
    {0x01, 0x02, 0x43, 0xda, 0x7f},
    {0x02, 0x0a, 0x43, 0x9a, 0x7f},
    {0x06, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0x1c, 0x6f},
    {0x04, 0x02, 0x43, 0xda, 0x7f},
    {0x02, 0x04, 0x42, 0x1c, 0x6f},
    {0x07, 0x46, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x1c, 0x6f},
    {0x01, 0x07, 0x43, 0xda, 0x7f},
    {0x02, 0x02, 0x42, 0x1c, 0x6f},
    {0x05, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0x1c, 0x6f},
    {0x04, 0x07, 0x43, 0xda, 0x7f},
    {0x02, 0x07, 0x42, 0x1c, 0x6f},
    {0xb4, 0x9a, 0xb5, 0x00, 0x0f},
    {0x03, 0x1d, 0x42, 0xb5, 0xac},
    {0x01, 0x2e, 0x43, 0xf5, 0xbd},
    {0x02, 0x1d, 0x42, 0xb5, 0xac},
    {0x06, 0x70, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x46, 0x05, 0x6e},
    {0x04, 0x2e, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0x05, 0x6e},
    {0x09, 0x6b, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x05, 0x7e},
    {0x01, 0x03, 0x41, 0x45, 0x7e},
    {0x02, 0x0b, 0x41, 0x05, 0x7e},
    {0x05, 0x70, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x46, 0x05, 0x6e},
    {0x04, 0x03, 0x41, 0x45, 0x7e},
    {0x02, 0x05, 0x46, 0x05, 0x6e},
    {0x0a, 0x77, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x43, 0x05, 0x8e},
    {0x01, 0x0b, 0x43, 0x45, 0x8e},
    {0x02, 0x0c, 0x43, 0x05, 0x8e},
    {0x06, 0x43, 0x03, 0x05, 0x8e},
    {0x03, 0x09, 0x41, 0x05, 0x7e},
    {0x04, 0x0b, 0x43, 0x45, 0x8e},
    {0x02, 0x09, 0x41, 0x05, 0x7e},
    {0x07, 0x65, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x44, 0xb5, 0xcc},
    {0x01, 0x05, 0x41, 0x45, 0x7e},
    {0x02, 0x9a, 0x44, 0xb5, 0xcc},
    {0x05, 0x43, 0x03, 0x05, 0x8e},
    {0x03, 0x06, 0x46, 0x05, 0x6e},
    {0x04, 0x05, 0x41, 0x45, 0x7e},
    {0x02, 0x06, 0x46, 0x05, 0x6e},
    {0x4d, 0x04, 0xb5, 0x00, 0xcc},
    {0x03, 0x21, 0x42, 0xb5, 0xac},
    {0x01, 0x36, 0x43, 0xf5, 0xbd},
    {0x02, 0x21, 0x42, 0xb5, 0xac},
    {0x06, 0x7c, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x77, 0xb5, 0xff},
    {0x04, 0x36, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x77, 0xb5, 0xff},
    {0x08, 0x6b, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x45, 0x8e},
    {0x02, 0x31, 0x42, 0xb5, 0xac},
    {0x05, 0x7c, 0xb5, 0x00, 0xcc},
    {0x03, 0x0e, 0x43, 0x05, 0x8e},
    {0x04, 0x09, 0x43, 0x45, 0x8e},
    {0x02, 0x0e, 0x43, 0x05, 0x8e},
    {0x5b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x42, 0xb5, 0xac},
    {0x01, 0x88, 0x43, 0xf5, 0xff},
    {0x02, 0x3d, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x05, 0x8e},
    {0x03, 0x04, 0x46, 0x05, 0x6e},
    {0x04, 0x88, 0x43, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0x05, 0x6e},
    {0x07, 0xc2, 0x05, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x05, 0x6e},
    {0x01, 0x06, 0x41, 0x45, 0x7e},
    {0x02, 0x02, 0x46, 0x05, 0x6e},
    {0x05, 0x45, 0x03, 0x05, 0x8e},
    {0x03, 0x07, 0x46, 0x05, 0x6e},
    {0x04, 0x06, 0x41, 0x45, 0x7e},
    {0x02, 0x07, 0x46, 0x05, 0x6e},
    {0x7b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x42, 0xb5, 0xac},
    {0x01, 0x24, 0x43, 0xf5, 0xbd},
    {0x02, 0x2f, 0x42, 0xb5, 0xac},
    {0x06, 0x6a, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x04, 0x6c},
    {0x04, 0x24, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x04, 0x6c},
    {0x09, 0x51, 0xf5, 0x00, 0xcc},
    {0x03, 0x3b, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x44, 0xf5, 0xcc},
    {0x02, 0x3b, 0x42, 0xb5, 0xac},
    {0x05, 0x6a, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x04, 0x6c},
    {0x04, 0x82, 0x44, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x04, 0x6c},
    {0x0b, 0x77, 0xf5, 0x40, 0xff},
    {0x03, 0x29, 0x42, 0xb5, 0xac},
    {0x01, 0x34, 0x43, 0xf5, 0xbd},
    {0x02, 0x29, 0x42, 0xb5, 0xac},
    {0x06, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x05, 0x8e},
    {0x04, 0x34, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0x05, 0x8e},
    {0x07, 0x59, 0xb5, 0x40, 0xcc},
    {0x03, 0x90, 0x43, 0xb5, 0xff},
    {0x01, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x90, 0x43, 0xb5, 0xff},
    {0x05, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x04, 0x6c},
    {0x04, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x04, 0x6c},
    {0x61, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x42, 0xb5, 0xac},
    {0x01, 0x00, 0x43, 0xf5, 0xbd},
    {0x02, 0x1f, 0x42, 0xb5, 0xac},
    {0x06, 0xd1, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x05, 0x7e},
    {0x04, 0x00, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0x05, 0x7e},
    {0x08, 0x51, 0xf5, 0x00, 0xcc},
    {0x03, 0x39, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x45, 0x7e},
    {0x02, 0x39, 0x42, 0xb5, 0xac},
    {0x05, 0xd1, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x77, 0xb5, 0xff},
    {0x04, 0x04, 0x41, 0x45, 0x7e},
    {0x02, 0x81, 0x77, 0xb5, 0xff},
    {0x0c, 0x77, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x41, 0x05, 0x7e},
    {0x01, 0x02, 0x41, 0x45, 0x7e},
    {0x02, 0x0a, 0x41, 0x05, 0x7e},
    {0x06, 0x46, 0x03, 0x05, 0x8e},
    {0x03, 0x04, 0x43, 0x04, 0x6c},
    {0x04, 0x02, 0x41, 0x45, 0x7e},
    {0x02, 0x04, 0x43, 0x04, 0x6c},
    {0x07, 0x4f, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x04, 0x6c},
    {0x01, 0x07, 0x41, 0x45, 0x7e},
    {0x02, 0x02, 0x43, 0x04, 0x6c},
    {0x05, 0x46, 0x03, 0x05, 0x8e},
    {0x03, 0x07, 0x43, 0x04, 0x6c},
    {0x04, 0x07, 0x41, 0x45, 0x7e},
    {0x02, 0x07, 0x43, 0x04, 0x6c},
    {0xde, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x44, 0xb5, 0x9c},
    {0x01, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x16, 0x44, 0xb5, 0x9c},
    {0x06, 0x60, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x44, 0x9a, 0x6f},
    {0x04, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0x9a, 0x6f},
    {0x09, 0xd3, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0x9a, 0x7f},
    {0x01, 0x03, 0x42, 0xda, 0x7f},
    {0x02, 0x0b, 0x42, 0x9a, 0x7f},
    {0x05, 0x60, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x44, 0x9a, 0x6f},
    {0x04, 0x03, 0x42, 0xda, 0x7f},
    {0x02, 0x05, 0x44, 0x9a, 0x6f},
    {0x0a, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x1a, 0x44, 0xb5, 0x9c},
    {0x01, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x44, 0xb5, 0x9c},
    {0x06, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0x9a, 0x7f},
    {0x04, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x9a, 0x7f},
    {0x07, 0xc5, 0xb5, 0x40, 0x0d},
    {0x03, 0x8c, 0x43, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0xda, 0x7f},
    {0x02, 0x8c, 0x43, 0xb5, 0xff},
    {0x05, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0x9a, 0x6f},
    {0x04, 0x05, 0x42, 0xda, 0x7f},
    {0x02, 0x06, 0x44, 0x9a, 0x6f},
    {0x84, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x42, 0xb5, 0xac},
    {0x01, 0x2c, 0x43, 0xf5, 0xbd},
    {0x02, 0x25, 0x42, 0xb5, 0xac},
    {0x06, 0x7a, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0xc1, 0xb5, 0x0c},
    {0x04, 0x2c, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0xc1, 0xb5, 0x0c},
    {0x08, 0xd3, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x44, 0xb5, 0x9c},
    {0x01, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x19, 0x44, 0xb5, 0x9c},
    {0x05, 0x7a, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x43, 0x05, 0x8e},
    {0x04, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x05, 0x8e},
    {0x6b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x45, 0xb5, 0xee},
    {0x01, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x45, 0xb5, 0xee},
    {0x06, 0xc1, 0x9a, 0xb5, 0x0f},
    {0x03, 0x04, 0x44, 0x9a, 0x6f},
    {0x04, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x9a, 0x6f},
    {0x07, 0x44, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0x9a, 0x6f},
    {0x01, 0x06, 0x42, 0xda, 0x7f},
    {0x02, 0x02, 0x44, 0x9a, 0x6f},
    {0x05, 0xc1, 0x9a, 0xb5, 0x0f},
    {0x03, 0x07, 0x44, 0x9a, 0x6f},
    {0x04, 0x06, 0x42, 0xda, 0x7f},
    {0x02, 0x07, 0x44, 0x9a, 0x6f},
    {0x92, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0x05, 0x8e},
    {0x01, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x05, 0x8e},
    {0x06, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x04, 0x6c},
    {0x04, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x04, 0x6c},
    {0x09, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x44, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x45, 0x8e},
    {0x02, 0x12, 0x44, 0xb5, 0x9c},
    {0x05, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x04, 0x6c},
    {0x04, 0x08, 0x43, 0x45, 0x8e},
    {0x02, 0x05, 0x42, 0x04, 0x6c},
    {0x0b, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x15, 0x44, 0xb5, 0x9c},
    {0x01, 0x83, 0xda, 0xf5, 0x0f},
    {0x02, 0x15, 0x44, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x05, 0x8e},
    {0x03, 0x11, 0x43, 0x05, 0x8e},
    {0x04, 0x83, 0xda, 0xf5, 0x0f},
    {0x02, 0x11, 0x43, 0x05, 0x8e},
    {0x07, 0x42, 0x04, 0xf5, 0x9c},
    {0x03, 0x84, 0xda, 0xb5, 0x0f},
    {0x01, 0x81, 0x44, 0xf5, 0xcc},
    {0x02, 0x84, 0xda, 0xb5, 0x0f},
    {0x05, 0x44, 0x03, 0x05, 0x8e},
    {0x03, 0x06, 0x42, 0x04, 0x6c},
    {0x04, 0x81, 0x44, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x04, 0x6c},
    {0x4e, 0x04, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x43, 0x05, 0x8e},
    {0x01, 0x0a, 0x43, 0x45, 0x8e},
    {0x02, 0x01, 0x43, 0x05, 0x8e},
    {0x06, 0x42, 0x03, 0x05, 0x8e},
    {0x03, 0x08, 0x42, 0x9a, 0x7f},
    {0x04, 0x0a, 0x43, 0x45, 0x8e},
    {0x02, 0x08, 0x42, 0x9a, 0x7f},
    {0x08, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x44, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0xda, 0x7f},
    {0x02, 0x83, 0x44, 0xb5, 0xcc},
    {0x05, 0x42, 0x03, 0x05, 0x8e},
    {0x03, 0x81, 0xc1, 0xb5, 0x0c},
    {0x04, 0x04, 0x42, 0xda, 0x7f},
    {0x02, 0x81, 0xc1, 0xb5, 0x0c},
    {0x0c, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x42, 0x9a, 0x7f},
    {0x01, 0x02, 0x42, 0xda, 0x7f},
    {0x02, 0x0a, 0x42, 0x9a, 0x7f},
    {0x06, 0x47, 0x03, 0x05, 0x8e},
    {0x03, 0x04, 0x42, 0x04, 0x6c},
    {0x04, 0x02, 0x42, 0xda, 0x7f},
    {0x02, 0x04, 0x42, 0x04, 0x6c},
    {0x07, 0x47, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x04, 0x6c},
    {0x01, 0x07, 0x42, 0xda, 0x7f},
    {0x02, 0x02, 0x42, 0x04, 0x6c},
    {0x05, 0x47, 0x03, 0x05, 0x8e},
    {0x03, 0x07, 0x42, 0x04, 0x6c},
    {0x04, 0x07, 0x42, 0xda, 0x7f},
    {0x02, 0x07, 0x42, 0x04, 0x6c},
    {0xf4, 0x45, 0xf5, 0x00, 0x0e},
    {0x03, 0xa5, 0xf5, 0x00, 0x0e},
    {0x01, 0x1e, 0x43, 0xf5, 0xbd},
    {0x02, 0xa5, 0xf5, 0x00, 0x0e},
    {0x06, 0x56, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x47, 0x03, 0x6f},
    {0x04, 0x1e, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x47, 0x03, 0x6f},
    {0x09, 0x41, 0xf5, 0x00, 0xcc},
    {0x03, 0x0b, 0x45, 0x03, 0x7f},
    {0x01, 0x03, 0x45, 0x43, 0x7f},
    {0x02, 0x0b, 0x45, 0x03, 0x7f},
    {0x05, 0x56, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x47, 0x03, 0x6f},
    {0x04, 0x03, 0x45, 0x43, 0x7f},
    {0x02, 0x05, 0x47, 0x03, 0x6f},
    {0x0a, 0x4a, 0xf5, 0x40, 0xcc},
    {0x03, 0x0c, 0x44, 0x03, 0x8f},
    {0x01, 0x0b, 0x44, 0x43, 0x8f},
    {0x02, 0x0c, 0x44, 0x03, 0x8f},
    {0x06, 0x43, 0x04, 0x03, 0x8f},
    {0x03, 0x09, 0x45, 0x03, 0x7f},
    {0x04, 0x0b, 0x44, 0x43, 0x8f},
    {0x02, 0x09, 0x45, 0x03, 0x7f},
    {0x07, 0x4d, 0x03, 0xf5, 0xbd},
    {0x03, 0x9a, 0x42, 0xb5, 0xcc},
    {0x01, 0x05, 0x45, 0x43, 0x7f},
    {0x02, 0x9a, 0x42, 0xb5, 0xcc},
    {0x05, 0x43, 0x04, 0x03, 0x8f},
    {0x03, 0x06, 0x47, 0x03, 0x6f},
    {0x04, 0x05, 0x45, 0x43, 0x7f},
    {0x02, 0x06, 0x47, 0x03, 0x6f},
    {0x4d, 0x02, 0xb5, 0x00, 0xcc},
    {0x03, 0x14, 0x42, 0x03, 0x9f},
    {0x01, 0x0c, 0x42, 0x43, 0x9f},
    {0x02, 0x14, 0x42, 0x03, 0x9f},
    {0x06, 0x4b, 0x02, 0x03, 0x9f},
    {0x03, 0x82, 0x4a, 0xb5, 0xcc},
    {0x04, 0x0c, 0x42, 0x43, 0x9f},
    {0x02, 0x82, 0x4a, 0xb5, 0xcc},
    {0x08, 0x41, 0xf5, 0x00, 0xcc},
    {0x03, 0x18, 0x42, 0x03, 0x9f},
    {0x01, 0x09, 0x44, 0x43, 0x8f},
    {0x02, 0x18, 0x42, 0x03, 0x9f},
    {0x05, 0x4b, 0x02, 0x03, 0x9f},
    {0x03, 0x0e, 0x44, 0x03, 0x8f},
    {0x04, 0x09, 0x44, 0x43, 0x8f},
    {0x02, 0x0e, 0x44, 0x03, 0x8f},
    {0x4f, 0x06, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x42, 0x03, 0x9f},
    {0x01, 0x9a, 0x46, 0xf5, 0xdd},
    {0x02, 0x1c, 0x42, 0x03, 0x9f},
    {0x06, 0x45, 0x04, 0x03, 0x8f},
    {0x03, 0x04, 0x47, 0x03, 0x6f},
    {0x04, 0x9a, 0x46, 0xf5, 0xdd},
    {0x02, 0x04, 0x47, 0x03, 0x6f},
    {0x07, 0x43, 0x02, 0x43, 0x9f},
    {0x03, 0x02, 0x47, 0x03, 0x6f},
    {0x01, 0x06, 0x45, 0x43, 0x7f},
    {0x02, 0x02, 0x47, 0x03, 0x6f},
    {0x05, 0x45, 0x04, 0x03, 0x8f},
    {0x03, 0x07, 0x47, 0x03, 0x6f},
    {0x04, 0x06, 0x45, 0x43, 0x7f},
    {0x02, 0x07, 0x47, 0x03, 0x6f},
    {0x77, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x42, 0x03, 0x9f},
    {0x01, 0x22, 0x43, 0xf5, 0xbd},
    {0x02, 0x17, 0x42, 0x03, 0x9f},
    {0x06, 0x5a, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x02, 0x6c},
    {0x04, 0x22, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x02, 0x6c},
    {0x09, 0x48, 0x43, 0xb5, 0xbd},
    {0x03, 0x1b, 0x42, 0x03, 0x9f},
    {0x01, 0x82, 0x42, 0xf5, 0xcc},
    {0x02, 0x1b, 0x42, 0x03, 0x9f},
    {0x05, 0x5a, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x02, 0x6c},
    {0x04, 0x82, 0x42, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x02, 0x6c},
    {0x0b, 0x4a, 0xf5, 0x40, 0xcc},
    {0x03, 0x28, 0x42, 0xb5, 0xac},
    {0x01, 0x32, 0x43, 0xf5, 0xbd},
    {0x02, 0x28, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0x03, 0x9f},
    {0x03, 0x10, 0x44, 0x03, 0x8f},
    {0x04, 0x32, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x44, 0x03, 0x8f},
    {0x07, 0x52, 0xb5, 0x40, 0xcc},
    {0x03, 0x8e, 0x43, 0xb5, 0xff},
    {0x01, 0x0e, 0x42, 0x43, 0x9f},
    {0x02, 0x8e, 0x43, 0xb5, 0xff},
    {0x05, 0x49, 0x02, 0x03, 0x9f},
    {0x03, 0x06, 0x43, 0x02, 0x6c},
    {0x04, 0x0e, 0x42, 0x43, 0x9f},
    {0x02, 0x06, 0x43, 0x02, 0x6c},
    {0x7f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0x03, 0x9f},
    {0x01, 0x3e, 0x43, 0xf5, 0xbd},
    {0x02, 0x13, 0x42, 0x03, 0x9f},
    {0x06, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x45, 0x03, 0x7f},
    {0x04, 0x3e, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x45, 0x03, 0x7f},
    {0x08, 0x48, 0x43, 0xb5, 0xbd},
    {0x03, 0x38, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0x43, 0x7f},
    {0x02, 0x38, 0x42, 0xb5, 0xac},
    {0x05, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4a, 0xb5, 0xcc},
    {0x04, 0x04, 0x45, 0x43, 0x7f},
    {0x02, 0x81, 0x4a, 0xb5, 0xcc},
    {0x0c, 0x4a, 0xf5, 0x40, 0xcc},
    {0x03, 0x0a, 0x45, 0x03, 0x7f},
    {0x01, 0x02, 0x45, 0x43, 0x7f},
    {0x02, 0x0a, 0x45, 0x03, 0x7f},
    {0x06, 0x46, 0x04, 0x03, 0x8f},
    {0x03, 0x04, 0x43, 0x02, 0x6c},
    {0x04, 0x02, 0x45, 0x43, 0x7f},
    {0x02, 0x04, 0x43, 0x02, 0x6c},
    {0x07, 0x45, 0x02, 0x43, 0x9f},
    {0x03, 0x02, 0x43, 0x02, 0x6c},
    {0x01, 0x07, 0x45, 0x43, 0x7f},
    {0x02, 0x02, 0x43, 0x02, 0x6c},
    {0x05, 0x46, 0x04, 0x03, 0x8f},
    {0x03, 0x07, 0x43, 0x02, 0x6c},
    {0x04, 0x07, 0x45, 0x43, 0x7f},
    {0x02, 0x07, 0x43, 0x02, 0x6c},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2e, 0x42, 0xb5, 0xac},
    {0x01, 0x30, 0x43, 0xf5, 0xbd},
    {0x02, 0x2e, 0x42, 0xb5, 0xac},
    {0x06, 0x66, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x06, 0x6d},
    {0x04, 0x30, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x06, 0x6d},
    {0x09, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x43, 0x06, 0x7d},
    {0x01, 0x03, 0x43, 0x46, 0x7d},
    {0x02, 0x0b, 0x43, 0x06, 0x7d},
    {0x05, 0x66, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x06, 0x6d},
    {0x04, 0x03, 0x43, 0x46, 0x7d},
    {0x02, 0x05, 0x41, 0x06, 0x6d},
    {0x0a, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x36, 0x42, 0xb5, 0xac},
    {0x01, 0x3c, 0x43, 0xf5, 0xbd},
    {0x02, 0x36, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x06, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x06, 0x7d},
    {0x04, 0x3c, 0x43, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x06, 0x7d},
    {0x07, 0x55, 0xb5, 0x40, 0xcc},
    {0x03, 0x88, 0x45, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x46, 0x7d},
    {0x02, 0x88, 0x45, 0xb5, 0xee},
    {0x05, 0xc2, 0x06, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x06, 0x6d},
    {0x04, 0x05, 0x43, 0x46, 0x7d},
    {0x02, 0x06, 0x41, 0x06, 0x6d},
    {0x6f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x42, 0xb5, 0xac},
    {0x01, 0x2a, 0x43, 0xf5, 0xbd},
    {0x02, 0x24, 0x42, 0xb5, 0xac},
    {0x06, 0x59, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x44, 0x03, 0xbd},
    {0x04, 0x2a, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x44, 0x03, 0xbd},
    {0x08, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x34, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0x43, 0x9f},
    {0x02, 0x34, 0x42, 0xb5, 0xac},
    {0x05, 0x59, 0x03, 0xb5, 0xbd},
    {0x03, 0x0f, 0x44, 0x03, 0x8f},
    {0x04, 0x10, 0x42, 0x43, 0x9f},
    {0x02, 0x0f, 0x44, 0x03, 0x8f},
    {0x67, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x42, 0xb5, 0xac},
    {0x01, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x42, 0xb5, 0xac},
    {0x06, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x06, 0x6d},
    {0x04, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x06, 0x6d},
    {0x07, 0x51, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x06, 0x6d},
    {0x01, 0x06, 0x43, 0x46, 0x7d},
    {0x02, 0x02, 0x41, 0x06, 0x6d},
    {0x05, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x06, 0x6d},
    {0x04, 0x06, 0x43, 0x46, 0x7d},
    {0x02, 0x07, 0x41, 0x06, 0x6d},
    {0x75, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x44, 0x03, 0x8f},
    {0x01, 0x20, 0x43, 0xf5, 0xbd},
    {0x02, 0x0d, 0x44, 0x03, 0x8f},
    {0x06, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x02, 0x6c},
    {0x04, 0x20, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x02, 0x6c},
    {0x09, 0xc1, 0x43, 0xb5, 0xff},
    {0x03, 0x9b, 0x43, 0xb5, 0xff},
    {0x01, 0x08, 0x44, 0x43, 0x8f},
    {0x02, 0x9b, 0x43, 0xb5, 0xff},
    {0x05, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x02, 0x6c},
    {0x04, 0x08, 0x44, 0x43, 0x8f},
    {0x02, 0x05, 0x42, 0x02, 0x6c},
    {0x0b, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x2c, 0x42, 0xb5, 0xac},
    {0x01, 0x3a, 0x43, 0xf5, 0xbd},
    {0x02, 0x2c, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0x03, 0x8f},
    {0x03, 0x11, 0x44, 0x03, 0x8f},
    {0x04, 0x3a, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x44, 0x03, 0x8f},
    {0x07, 0xc4, 0xb5, 0x40, 0x0c},
    {0x03, 0x96, 0x43, 0xb5, 0xff},
    {0x01, 0x81, 0x42, 0xf5, 0xcc},
    {0x02, 0x96, 0x43, 0xb5, 0xff},
    {0x05, 0x44, 0x04, 0x03, 0x8f},
    {0x03, 0x06, 0x42, 0x02, 0x6c},
    {0x04, 0x81, 0x42, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x02, 0x6c},
    {0x4e, 0x02, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x44, 0x03, 0x8f},
    {0x01, 0x0a, 0x44, 0x43, 0x8f},
    {0x02, 0x01, 0x44, 0x03, 0x8f},
    {0x06, 0x42, 0x04, 0x03, 0x8f},
    {0x03, 0x08, 0x43, 0x06, 0x7d},
    {0x04, 0x0a, 0x44, 0x43, 0x8f},
    {0x02, 0x08, 0x43, 0x06, 0x7d},
    {0x08, 0xc1, 0x43, 0xb5, 0xff},
    {0x03, 0x83, 0x42, 0xb5, 0xcc},
    {0x01, 0x04, 0x43, 0x46, 0x7d},
    {0x02, 0x83, 0x42, 0xb5, 0xcc},
    {0x05, 0x42, 0x04, 0x03, 0x8f},
    {0x03, 0x81, 0x44, 0x03, 0xbd},
    {0x04, 0x04, 0x43, 0x46, 0x7d},
    {0x02, 0x81, 0x44, 0x03, 0xbd},
    {0x0c, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x06, 0x7d},
    {0x01, 0x02, 0x43, 0x46, 0x7d},
    {0x02, 0x0a, 0x43, 0x06, 0x7d},
    {0x06, 0x47, 0x04, 0x03, 0x8f},
    {0x03, 0x04, 0x42, 0x02, 0x6c},
    {0x04, 0x02, 0x43, 0x46, 0x7d},
    {0x02, 0x04, 0x42, 0x02, 0x6c},
    {0x07, 0x46, 0x02, 0x43, 0x9f},
    {0x03, 0x02, 0x42, 0x02, 0x6c},
    {0x01, 0x07, 0x43, 0x46, 0x7d},
    {0x02, 0x02, 0x42, 0x02, 0x6c},
    {0x05, 0x47, 0x04, 0x03, 0x8f},
    {0x03, 0x07, 0x42, 0x02, 0x6c},
    {0x04, 0x07, 0x43, 0x46, 0x7d},
    {0x02, 0x07, 0x42, 0x02, 0x6c},
    {0xf4, 0x46, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0x42, 0xb5, 0xac},
    {0x01, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x1e, 0x42, 0xb5, 0xac},
    {0x06, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x05, 0x6e},
    {0x04, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x05, 0x6e},
    {0x09, 0x4a, 0x43, 0xb5, 0xbd},
    {0x03, 0x0b, 0x44, 0x05, 0x7e},
    {0x01, 0x03, 0x44, 0x45, 0x7e},
    {0x02, 0x0b, 0x44, 0x05, 0x7e},
    {0x05, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x05, 0x6e},
    {0x04, 0x03, 0x44, 0x45, 0x7e},
    {0x02, 0x05, 0x45, 0x05, 0x6e},
    {0x0a, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x0c, 0x42, 0x05, 0x8e},
    {0x01, 0x0b, 0x42, 0x45, 0x8e},
    {0x02, 0x0c, 0x42, 0x05, 0x8e},
    {0x06, 0x43, 0x02, 0x05, 0x8e},
    {0x03, 0x09, 0x44, 0x05, 0x7e},
    {0x04, 0x0b, 0x42, 0x45, 0x8e},
    {0x02, 0x09, 0x44, 0x05, 0x7e},
    {0x07, 0x41, 0x03, 0xf5, 0xbd},
    {0x03, 0x9a, 0x47, 0xb5, 0xcc},
    {0x01, 0x05, 0x44, 0x45, 0x7e},
    {0x02, 0x9a, 0x47, 0xb5, 0xcc},
    {0x05, 0x43, 0x02, 0x05, 0x8e},
    {0x03, 0x06, 0x45, 0x05, 0x6e},
    {0x04, 0x05, 0x44, 0x45, 0x7e},
    {0x02, 0x06, 0x45, 0x05, 0x6e},
    {0x4d, 0x07, 0xb5, 0x00, 0xcc},
    {0x03, 0x22, 0x42, 0xb5, 0xac},
    {0x01, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x22, 0x42, 0xb5, 0xac},
    {0x06, 0x52, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x42, 0x03, 0xbd},
    {0x04, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x03, 0xbd},
    {0x08, 0x4a, 0x43, 0xb5, 0xbd},
    {0x03, 0x32, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x45, 0x8e},
    {0x02, 0x32, 0x42, 0xb5, 0xac},
    {0x05, 0x52, 0x03, 0xb5, 0xbd},
    {0x03, 0x0e, 0x42, 0x05, 0x8e},
    {0x04, 0x09, 0x42, 0x45, 0x8e},
    {0x02, 0x0e, 0x42, 0x05, 0x8e},
    {0x53, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x3e, 0x42, 0xb5, 0xac},
    {0x01, 0x8a, 0x43, 0xf5, 0xff},
    {0x02, 0x3e, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x05, 0x8e},
    {0x03, 0x04, 0x45, 0x05, 0x6e},
    {0x04, 0x8a, 0x43, 0xf5, 0xff},
    {0x02, 0x04, 0x45, 0x05, 0x6e},
    {0x07, 0x48, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x05, 0x6e},
    {0x01, 0x06, 0x44, 0x45, 0x7e},
    {0x02, 0x02, 0x45, 0x05, 0x6e},
    {0x05, 0x45, 0x02, 0x05, 0x8e},
    {0x03, 0x07, 0x45, 0x05, 0x6e},
    {0x04, 0x06, 0x44, 0x45, 0x7e},
    {0x02, 0x07, 0x45, 0x05, 0x6e},
    {0x58, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x30, 0x42, 0xb5, 0xac},
    {0x01, 0x26, 0x43, 0xf5, 0xbd},
    {0x02, 0x30, 0x42, 0xb5, 0xac},
    {0x06, 0x55, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x07, 0x6c},
    {0x04, 0x26, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x07, 0x6c},
    {0x09, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3c, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x47, 0xf5, 0xcc},
    {0x02, 0x3c, 0x42, 0xb5, 0xac},
    {0x05, 0x55, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x07, 0x6c},
    {0x04, 0x82, 0x47, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x07, 0x6c},
    {0x0b, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x2a, 0x42, 0xb5, 0xac},
    {0x01, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x2a, 0x42, 0xb5, 0xac},
    {0x06, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x05, 0x8e},
    {0x04, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x05, 0x8e},
    {0x07, 0xc3, 0x03, 0xf5, 0xff},
    {0x03, 0x92, 0x43, 0xb5, 0xff},
    {0x01, 0x0f, 0x42, 0x43, 0x9f},
    {0x02, 0x92, 0x43, 0xb5, 0xff},
    {0x05, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x07, 0x6c},
    {0x04, 0x0f, 0x42, 0x43, 0x9f},
    {0x02, 0x06, 0x43, 0x07, 0x6c},
    {0x56, 0x03, 0xf5, 0x40, 0xff},
    {0x03, 0x20, 0x42, 0xb5, 0xac},
    {0x01, 0x86, 0x43, 0xf5, 0xff},
    {0x02, 0x20, 0x42, 0xb5, 0xac},
    {0x06, 0xc4, 0x03, 0xb5, 0xff},
    {0x03, 0x08, 0x44, 0x05, 0x7e},
    {0x04, 0x86, 0x43, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0x05, 0x7e},
    {0x08, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3a, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x45, 0x7e},
    {0x02, 0x3a, 0x42, 0xb5, 0xac},
    {0x05, 0xc4, 0x03, 0xb5, 0xff},
    {0x03, 0x81, 0x42, 0x03, 0xbd},
    {0x04, 0x04, 0x44, 0x45, 0x7e},
    {0x02, 0x81, 0x42, 0x03, 0xbd},
    {0x0c, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x44, 0x05, 0x7e},
    {0x01, 0x02, 0x44, 0x45, 0x7e},
    {0x02, 0x0a, 0x44, 0x05, 0x7e},
    {0x06, 0x46, 0x02, 0x05, 0x8e},
    {0x03, 0x04, 0x43, 0x07, 0x6c},
    {0x04, 0x02, 0x44, 0x45, 0x7e},
    {0x02, 0x04, 0x43, 0x07, 0x6c},
    {0x07, 0xc1, 0x05, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x07, 0x6c},
    {0x01, 0x07, 0x44, 0x45, 0x7e},
    {0x02, 0x02, 0x43, 0x07, 0x6c},
    {0x05, 0x46, 0x02, 0x05, 0x8e},
    {0x03, 0x07, 0x43, 0x07, 0x6c},
    {0x04, 0x07, 0x44, 0x45, 0x7e},
    {0x02, 0x07, 0x43, 0x07, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x16, 0x42, 0x03, 0x9f},
    {0x01, 0x0d, 0x42, 0x43, 0x9f},
    {0x02, 0x16, 0x42, 0x03, 0x9f},
    {0x06, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x06, 0x6d},
    {0x04, 0x0d, 0x42, 0x43, 0x9f},
    {0x02, 0x03, 0x44, 0x06, 0x6d},
    {0x09, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x06, 0x7d},
    {0x01, 0x03, 0x42, 0x46, 0x7d},
    {0x02, 0x0b, 0x42, 0x06, 0x7d},
    {0x05, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x06, 0x6d},
    {0x04, 0x03, 0x42, 0x46, 0x7d},
    {0x02, 0x05, 0x44, 0x06, 0x6d},
    {0x0a, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x42, 0x03, 0x9f},
    {0x01, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0x03, 0x9f},
    {0x06, 0x48, 0x02, 0x03, 0x9f},
    {0x03, 0x09, 0x42, 0x06, 0x7d},
    {0x04, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x06, 0x7d},
    {0x07, 0x4a, 0x02, 0xf5, 0xac},
    {0x03, 0x8a, 0x45, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0x46, 0x7d},
    {0x02, 0x8a, 0x45, 0xb5, 0xee},
    {0x05, 0x48, 0x02, 0x03, 0x9f},
    {0x03, 0x06, 0x44, 0x06, 0x6d},
    {0x04, 0x05, 0x42, 0x46, 0x7d},
    {0x02, 0x06, 0x44, 0x06, 0x6d},
    {0x50, 0x05, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x42, 0xb5, 0xac},
    {0x01, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x26, 0x42, 0xb5, 0xac},
    {0x06, 0xc3, 0x05, 0xb5, 0xee},
    {0x03, 0x82, 0x47, 0x03, 0xbd},
    {0x04, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x03, 0xbd},
    {0x08, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0x03, 0x9f},
    {0x01, 0x11, 0x42, 0x43, 0x9f},
    {0x02, 0x19, 0x42, 0x03, 0x9f},
    {0x05, 0xc3, 0x05, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x05, 0x8e},
    {0x04, 0x11, 0x42, 0x43, 0x9f},
    {0x02, 0x0f, 0x42, 0x05, 0x8e},
    {0x40, 0x05, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x45, 0xb5, 0xee},
    {0x01, 0x84, 0x45, 0xf5, 0xee},
    {0x02, 0x86, 0x45, 0xb5, 0xee},
    {0x06, 0xc1, 0x06, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x06, 0x6d},
    {0x04, 0x84, 0x45, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x06, 0x6d},
    {0x07, 0x44, 0x02, 0x43, 0x9f},
    {0x03, 0x02, 0x44, 0x06, 0x6d},
    {0x01, 0x06, 0x42, 0x46, 0x7d},
    {0x02, 0x02, 0x44, 0x06, 0x6d},
    {0x05, 0xc1, 0x06, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x06, 0x6d},
    {0x04, 0x06, 0x42, 0x46, 0x7d},
    {0x02, 0x07, 0x44, 0x06, 0x6d},
    {0xc1, 0x42, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x05, 0x8e},
    {0x01, 0x01, 0x42, 0x43, 0x9f},
    {0x02, 0x0d, 0x42, 0x05, 0x8e},
    {0x06, 0x4a, 0x02, 0x03, 0x9f},
    {0x03, 0x03, 0x42, 0x07, 0x6c},
    {0x04, 0x01, 0x42, 0x43, 0x9f},
    {0x02, 0x03, 0x42, 0x07, 0x6c},
    {0x09, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0x03, 0x9f},
    {0x01, 0x08, 0x42, 0x45, 0x8e},
    {0x02, 0x12, 0x42, 0x03, 0x9f},
    {0x05, 0x4a, 0x02, 0x03, 0x9f},
    {0x03, 0x05, 0x42, 0x07, 0x6c},
    {0x04, 0x08, 0x42, 0x45, 0x8e},
    {0x02, 0x05, 0x42, 0x07, 0x6c},
    {0x0b, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x42, 0x03, 0x9f},
    {0x01, 0x83, 0x46, 0xf5, 0xdd},
    {0x02, 0x15, 0x42, 0x03, 0x9f},
    {0x06, 0x44, 0x02, 0x05, 0x8e},
    {0x03, 0x11, 0x42, 0x05, 0x8e},
    {0x04, 0x83, 0x46, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0x05, 0x8e},
    {0x07, 0x42, 0x02, 0x43, 0x9f},
    {0x03, 0x84, 0x46, 0xb5, 0xdd},
    {0x01, 0x81, 0x47, 0xf5, 0xcc},
    {0x02, 0x84, 0x46, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0x05, 0x8e},
    {0x03, 0x06, 0x42, 0x07, 0x6c},
    {0x04, 0x81, 0x47, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x07, 0x6c},
    {0x4e, 0x07, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x42, 0x05, 0x8e},
    {0x01, 0x0a, 0x42, 0x45, 0x8e},
    {0x02, 0x01, 0x42, 0x05, 0x8e},
    {0x06, 0x42, 0x02, 0x05, 0x8e},
    {0x03, 0x08, 0x42, 0x06, 0x7d},
    {0x04, 0x0a, 0x42, 0x45, 0x8e},
    {0x02, 0x08, 0x42, 0x06, 0x7d},
    {0x08, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x47, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0x46, 0x7d},
    {0x02, 0x83, 0x47, 0xb5, 0xcc},
    {0x05, 0x42, 0x02, 0x05, 0x8e},
    {0x03, 0x81, 0x47, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0x46, 0x7d},
    {0x02, 0x81, 0x47, 0x03, 0xbd},
    {0x0c, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x06, 0x7d},
    {0x01, 0x02, 0x42, 0x46, 0x7d},
    {0x02, 0x0a, 0x42, 0x06, 0x7d},
    {0x06, 0x47, 0x02, 0x05, 0x8e},
    {0x03, 0x04, 0x42, 0x07, 0x6c},
    {0x04, 0x02, 0x42, 0x46, 0x7d},
    {0x02, 0x04, 0x42, 0x07, 0x6c},
    {0x07, 0x47, 0x02, 0x43, 0x9f},
    {0x03, 0x02, 0x42, 0x07, 0x6c},
    {0x01, 0x07, 0x42, 0x46, 0x7d},
    {0x02, 0x02, 0x42, 0x07, 0x6c},
    {0x05, 0x47, 0x02, 0x05, 0x8e},
    {0x03, 0x07, 0x42, 0x07, 0x6c},
    {0x04, 0x07, 0x42, 0x46, 0x7d},
    {0x02, 0x07, 0x42, 0x07, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0xb4, 0xf5, 0x00, 0x0d},
    {0x01, 0xb4, 0xf5, 0x40, 0x0d},
    {0x02, 0xb4, 0xf5, 0x00, 0x0d},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0xb4, 0xf5, 0x40, 0x0d},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0x5d, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x4d, 0xb5, 0x7f},
    {0x01, 0x03, 0x4d, 0xf5, 0x7f},
    {0x02, 0x0b, 0x4d, 0xb5, 0x7f},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0x4d, 0xf5, 0x7f},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x6d, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x4a, 0xb5, 0x8f},
    {0x01, 0x0b, 0x4a, 0xf5, 0x8f},
    {0x02, 0x0c, 0x4a, 0xb5, 0x8f},
    {0x06, 0x43, 0x0a, 0xb5, 0x8f},
    {0x03, 0x09, 0x4d, 0xb5, 0x7f},
    {0x04, 0x0b, 0x4a, 0xf5, 0x8f},
    {0x02, 0x09, 0x4d, 0xb5, 0x7f},
    {0x07, 0xf5, 0x00, 0x40, 0x05},
    {0x03, 0x9a, 0x57, 0xb5, 0xff},
    {0x01, 0x05, 0x4d, 0xf5, 0x7f},
    {0x02, 0x9a, 0x57, 0xb5, 0xff},
    {0x05, 0x43, 0x0a, 0xb5, 0x8f},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0x4d, 0xf5, 0x7f},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0x17, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x49, 0xb5, 0x9f},
    {0x01, 0x0c, 0x49, 0xf5, 0x9f},
    {0x02, 0x14, 0x49, 0xb5, 0x9f},
    {0x06, 0x4b, 0x09, 0xb5, 0x9f},
    {0x03, 0x82, 0x6d, 0xb5, 0xff},
    {0x04, 0x0c, 0x49, 0xf5, 0x9f},
    {0x02, 0x82, 0x6d, 0xb5, 0xff},
    {0x08, 0x5d, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x49, 0xb5, 0x9f},
    {0x01, 0x09, 0x4a, 0xf5, 0x8f},
    {0x02, 0x18, 0x49, 0xb5, 0x9f},
    {0x05, 0x4b, 0x09, 0xb5, 0x9f},
    {0x03, 0x0e, 0x4a, 0xb5, 0x8f},
    {0x04, 0x09, 0x4a, 0xf5, 0x8f},
    {0x02, 0x0e, 0x4a, 0xb5, 0x8f},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x49, 0xb5, 0x9f},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x49, 0xb5, 0x9f},
    {0x06, 0x45, 0x0a, 0xb5, 0x8f},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0x09, 0xf5, 0x9f},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0x4d, 0xf5, 0x7f},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0x0a, 0xb5, 0x8f},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0x4d, 0xf5, 0x7f},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0x49, 0xb5, 0x9f},
    {0x01, 0x14, 0x46, 0xf5, 0xae},
    {0x02, 0x17, 0x49, 0xb5, 0x9f},
    {0x06, 0x4c, 0x06, 0xb5, 0xae},
    {0x03, 0x03, 0x43, 0x17, 0x6f},
    {0x04, 0x14, 0x46, 0xf5, 0xae},
    {0x02, 0x03, 0x43, 0x17, 0x6f},
    {0x09, 0x43, 0x46, 0xb5, 0xae},
    {0x03, 0x1b, 0x49, 0xb5, 0x9f},
    {0x01, 0x82, 0x57, 0xf5, 0xff},
    {0x02, 0x1b, 0x49, 0xb5, 0x9f},
    {0x05, 0x4c, 0x06, 0xb5, 0xae},
    {0x03, 0x05, 0x43, 0x17, 0x6f},
    {0x04, 0x82, 0x57, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x17, 0x6f},
    {0x0b, 0x6d, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x46, 0xb5, 0xae},
    {0x01, 0x18, 0x46, 0xf5, 0xae},
    {0x02, 0x27, 0x46, 0xb5, 0xae},
    {0x06, 0x49, 0x09, 0xb5, 0x9f},
    {0x03, 0x10, 0x4a, 0xb5, 0x8f},
    {0x04, 0x18, 0x46, 0xf5, 0xae},
    {0x02, 0x10, 0x4a, 0xb5, 0x8f},
    {0x07, 0x4b, 0x06, 0xf5, 0xae},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0x49, 0xf5, 0x9f},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0x09, 0xb5, 0x9f},
    {0x03, 0x06, 0x43, 0x17, 0x6f},
    {0x04, 0x0e, 0x49, 0xf5, 0x9f},
    {0x02, 0x06, 0x43, 0x17, 0x6f},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0x49, 0xb5, 0x9f},
    {0x01, 0x1c, 0x46, 0xf5, 0xae},
    {0x02, 0x13, 0x49, 0xb5, 0x9f},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0x4d, 0xb5, 0x7f},
    {0x04, 0x1c, 0x46, 0xf5, 0xae},
    {0x02, 0x08, 0x4d, 0xb5, 0x7f},
    {0x08, 0x43, 0x46, 0xb5, 0xae},
    {0x03, 0x37, 0x46, 0xb5, 0xae},
    {0x01, 0x04, 0x4d, 0xf5, 0x7f},
    {0x02, 0x37, 0x46, 0xb5, 0xae},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x6d, 0xb5, 0xff},
    {0x04, 0x04, 0x4d, 0xf5, 0x7f},
    {0x02, 0x81, 0x6d, 0xb5, 0xff},
    {0x0c, 0x6d, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x4d, 0xb5, 0x7f},
    {0x01, 0x02, 0x4d, 0xf5, 0x7f},
    {0x02, 0x0a, 0x4d, 0xb5, 0x7f},
    {0x06, 0x46, 0x0a, 0xb5, 0x8f},
    {0x03, 0x04, 0x43, 0x17, 0x6f},
    {0x04, 0x02, 0x4d, 0xf5, 0x7f},
    {0x02, 0x04, 0x43, 0x17, 0x6f},
    {0x07, 0x45, 0x09, 0xf5, 0x9f},
    {0x03, 0x02, 0x43, 0x17, 0x6f},
    {0x01, 0x07, 0x4d, 0xf5, 0x7f},
    {0x02, 0x02, 0x43, 0x17, 0x6f},
    {0x05, 0x46, 0x0a, 0xb5, 0x8f},
    {0x03, 0x07, 0x43, 0x17, 0x6f},
    {0x04, 0x07, 0x4d, 0xf5, 0x7f},
    {0x02, 0x07, 0x43, 0x17, 0x6f},
    {0xdc, 0x41, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x46, 0xb5, 0xae},
    {0x01, 0x17, 0x46, 0xf5, 0xae},
    {0x02, 0x2d, 0x46, 0xb5, 0xae},
    {0x06, 0x54, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x46, 0xf5, 0xae},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0x41, 0xb5, 0xbe},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0x41, 0xf5, 0xbe},
    {0x03, 0x35, 0x46, 0xb5, 0xae},
    {0x01, 0x1b, 0x46, 0xf5, 0xae},
    {0x02, 0x35, 0x46, 0xb5, 0xae},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x46, 0xf5, 0xae},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0x01, 0xf5, 0xbe},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x23, 0x46, 0xb5, 0xae},
    {0x01, 0x27, 0x41, 0xf5, 0xbe},
    {0x02, 0x23, 0x46, 0xb5, 0xae},
    {0x06, 0x58, 0x01, 0xb5, 0xbe},
    {0x03, 0x82, 0x43, 0x01, 0xbe},
    {0x04, 0x27, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x43, 0x01, 0xbe},
    {0x08, 0x4b, 0x41, 0xb5, 0xbe},
    {0x03, 0x33, 0x46, 0xb5, 0xae},
    {0x01, 0x10, 0x49, 0xf5, 0x9f},
    {0x02, 0x33, 0x46, 0xb5, 0xae},
    {0x05, 0x58, 0x01, 0xb5, 0xbe},
    {0x03, 0x0f, 0x4a, 0xb5, 0x8f},
    {0x04, 0x10, 0x49, 0xf5, 0x9f},
    {0x02, 0x0f, 0x4a, 0xb5, 0x8f},
    {0x54, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3f, 0x46, 0xb5, 0xae},
    {0x01, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x3f, 0x46, 0xb5, 0xae},
    {0x06, 0x4e, 0x06, 0xb5, 0xae},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x06, 0xf5, 0xae},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x06, 0xb5, 0xae},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x0d, 0x4a, 0xb5, 0x8f},
    {0x01, 0x13, 0x46, 0xf5, 0xae},
    {0x02, 0x0d, 0x4a, 0xb5, 0x8f},
    {0x06, 0x5c, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x42, 0x17, 0x6f},
    {0x04, 0x13, 0x46, 0xf5, 0xae},
    {0x02, 0x03, 0x42, 0x17, 0x6f},
    {0x09, 0x45, 0x46, 0xb5, 0xae},
    {0x03, 0x97, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x4a, 0xf5, 0x8f},
    {0x02, 0x97, 0xf5, 0x00, 0x0b},
    {0x05, 0x5c, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x42, 0x17, 0x6f},
    {0x04, 0x08, 0x4a, 0xf5, 0x8f},
    {0x02, 0x05, 0x42, 0x17, 0x6f},
    {0x0b, 0x43, 0x41, 0xf5, 0xbe},
    {0x03, 0x2b, 0x46, 0xb5, 0xae},
    {0x01, 0x37, 0x41, 0xf5, 0xbe},
    {0x02, 0x2b, 0x46, 0xb5, 0xae},
    {0x06, 0x44, 0x0a, 0xb5, 0x8f},
    {0x03, 0x11, 0x4a, 0xb5, 0x8f},
    {0x04, 0x37, 0x41, 0xf5, 0xbe},
    {0x02, 0x11, 0x4a, 0xb5, 0x8f},
    {0x07, 0xda, 0xb5, 0x40, 0x0b},
    {0x03, 0x93, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x57, 0xf5, 0xff},
    {0x02, 0x93, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x0a, 0xb5, 0x8f},
    {0x03, 0x06, 0x42, 0x17, 0x6f},
    {0x04, 0x81, 0x57, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x17, 0x6f},
    {0x4e, 0x17, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x4a, 0xb5, 0x8f},
    {0x01, 0x0a, 0x4a, 0xf5, 0x8f},
    {0x02, 0x01, 0x4a, 0xb5, 0x8f},
    {0x06, 0x42, 0x0a, 0xb5, 0x8f},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x4a, 0xf5, 0x8f},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x46, 0xb5, 0xae},
    {0x03, 0x83, 0x57, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0x57, 0xb5, 0xff},
    {0x05, 0x42, 0x0a, 0xb5, 0x8f},
    {0x03, 0x81, 0x43, 0x01, 0xbe},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0x01, 0xbe},
    {0x0c, 0x43, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x0a, 0xb5, 0x8f},
    {0x03, 0x04, 0x42, 0x17, 0x6f},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x17, 0x6f},
    {0x07, 0x46, 0x09, 0xf5, 0x9f},
    {0x03, 0x02, 0x42, 0x17, 0x6f},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x17, 0x6f},
    {0x05, 0x47, 0x0a, 0xb5, 0x8f},
    {0x03, 0x07, 0x42, 0x17, 0x6f},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x17, 0x6f},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x46, 0xb5, 0xae},
    {0x01, 0x2d, 0x41, 0xf5, 0xbe},
    {0x02, 0x1d, 0x46, 0xb5, 0xae},
    {0x06, 0x57, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x4c, 0x43, 0xb5, 0xce},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x4b, 0x43, 0xf5, 0xce},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x54, 0x03, 0xf5, 0xce},
    {0x03, 0x9a, 0x43, 0x03, 0xce},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x43, 0x03, 0xce},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x03, 0x03, 0xb5, 0xce},
    {0x03, 0x21, 0x46, 0xb5, 0xae},
    {0x01, 0x35, 0x41, 0xf5, 0xbe},
    {0x02, 0x21, 0x46, 0xb5, 0xae},
    {0x06, 0x5b, 0x01, 0xb5, 0xbe},
    {0x03, 0x82, 0x4b, 0x03, 0xce},
    {0x04, 0x35, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x4b, 0x03, 0xce},
    {0x08, 0x4c, 0x43, 0xb5, 0xce},
    {0x03, 0x31, 0x46, 0xb5, 0xae},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0x46, 0xb5, 0xae},
    {0x05, 0x5b, 0x01, 0xb5, 0xbe},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0xc2, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x3d, 0x46, 0xb5, 0xae},
    {0x01, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x46, 0xb5, 0xae},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x78, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x46, 0xb5, 0xae},
    {0x01, 0x23, 0x41, 0xf5, 0xbe},
    {0x02, 0x2f, 0x46, 0xb5, 0xae},
    {0x06, 0x67, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x03, 0x6c},
    {0x04, 0x23, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x03, 0x6c},
    {0x09, 0x49, 0x41, 0xb5, 0xbe},
    {0x03, 0x3b, 0x46, 0xb5, 0xae},
    {0x01, 0x82, 0x43, 0x43, 0xce},
    {0x02, 0x3b, 0x46, 0xb5, 0xae},
    {0x05, 0x67, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x03, 0x6c},
    {0x04, 0x82, 0x43, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x03, 0x6c},
    {0x0b, 0x4b, 0x43, 0xf5, 0xce},
    {0x03, 0x29, 0x46, 0xb5, 0xae},
    {0x01, 0x33, 0x41, 0xf5, 0xbe},
    {0x02, 0x29, 0x46, 0xb5, 0xae},
    {0x06, 0x50, 0x06, 0xb5, 0xae},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0x41, 0xf5, 0xbe},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x58, 0x03, 0xf5, 0xce},
    {0x03, 0x8f, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x49, 0xf5, 0x9f},
    {0x02, 0x8f, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x06, 0xb5, 0xae},
    {0x03, 0x06, 0x43, 0x03, 0x6c},
    {0x04, 0x0f, 0x49, 0xf5, 0x9f},
    {0x02, 0x06, 0x43, 0x03, 0x6c},
    {0x5e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x46, 0xb5, 0xae},
    {0x01, 0x3f, 0x41, 0xf5, 0xbe},
    {0x02, 0x1f, 0x46, 0xb5, 0xae},
    {0x06, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0x41, 0xf5, 0xbe},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0x41, 0xb5, 0xbe},
    {0x03, 0x39, 0x46, 0xb5, 0xae},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0x46, 0xb5, 0xae},
    {0x05, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4b, 0x03, 0xce},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x4b, 0x03, 0xce},
    {0x0c, 0x4b, 0x43, 0xf5, 0xce},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x03, 0x6c},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x03, 0x6c},
    {0x07, 0x4e, 0x01, 0xf5, 0xbe},
    {0x03, 0x02, 0x43, 0x03, 0x6c},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x03, 0x6c},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x03, 0x6c},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x03, 0x6c},
    {0xdd, 0x41, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x49, 0xb5, 0x9f},
    {0x01, 0x0d, 0x49, 0xf5, 0x9f},
    {0x02, 0x16, 0x49, 0xb5, 0x9f},
    {0x06, 0x53, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x49, 0xf5, 0x9f},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0x41, 0xf5, 0xbe},
    {0x03, 0x1a, 0x49, 0xb5, 0x9f},
    {0x01, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x49, 0xb5, 0x9f},
    {0x06, 0x48, 0x09, 0xb5, 0x9f},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x5c, 0x03, 0xf5, 0xce},
    {0x03, 0x8b, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x09, 0xb5, 0x9f},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x79, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x46, 0xb5, 0xae},
    {0x01, 0x2b, 0x41, 0xf5, 0xbe},
    {0x02, 0x25, 0x46, 0xb5, 0xae},
    {0x06, 0x77, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x45, 0x01, 0xbe},
    {0x04, 0x2b, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x45, 0x01, 0xbe},
    {0x08, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x19, 0x49, 0xb5, 0x9f},
    {0x01, 0x11, 0x49, 0xf5, 0x9f},
    {0x02, 0x19, 0x49, 0xb5, 0x9f},
    {0x05, 0x77, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0x49, 0xf5, 0x9f},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x09, 0xf5, 0x9f},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x76, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0x49, 0xf5, 0x9f},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0x09, 0xb5, 0x9f},
    {0x03, 0x03, 0x42, 0x03, 0x6c},
    {0x04, 0x01, 0x49, 0xf5, 0x9f},
    {0x02, 0x03, 0x42, 0x03, 0x6c},
    {0x09, 0x46, 0x46, 0xb5, 0xae},
    {0x03, 0x12, 0x49, 0xb5, 0x9f},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0x49, 0xb5, 0x9f},
    {0x05, 0x4a, 0x09, 0xb5, 0x9f},
    {0x03, 0x05, 0x42, 0x03, 0x6c},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x03, 0x6c},
    {0x0b, 0x45, 0x41, 0xf5, 0xbe},
    {0x03, 0x15, 0x49, 0xb5, 0x9f},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x49, 0xb5, 0x9f},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0x09, 0xf5, 0x9f},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x43, 0x43, 0xce},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x03, 0x6c},
    {0x04, 0x81, 0x43, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x03, 0x6c},
    {0x4e, 0x03, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x46, 0xb5, 0xae},
    {0x03, 0x83, 0x43, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x43, 0x03, 0xce},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0x01, 0xbe},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0x01, 0xbe},
    {0x0c, 0x45, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x03, 0x6c},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x03, 0x6c},
    {0x07, 0x47, 0x09, 0xf5, 0x9f},
    {0x03, 0x02, 0x42, 0x03, 0x6c},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x03, 0x6c},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x03, 0x6c},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x9f, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x41, 0xf5, 0xbe},
    {0x02, 0x9f, 0xf5, 0x00, 0x0e},
    {0x06, 0x6d, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x49, 0xb5, 0x6c},
    {0x04, 0x1d, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x49, 0xb5, 0x6c},
    {0x09, 0x61, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0xb5, 0x7b},
    {0x01, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x0b, 0x46, 0xb5, 0x7b},
    {0x05, 0x6d, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x49, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x05, 0x49, 0xb5, 0x6c},
    {0x0a, 0x75, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x41, 0xb5, 0x8b},
    {0x01, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x0c, 0x41, 0xb5, 0x8b},
    {0x06, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x09, 0x46, 0xb5, 0x7b},
    {0x04, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x09, 0x46, 0xb5, 0x7b},
    {0x07, 0x57, 0x03, 0xf5, 0xce},
    {0x03, 0x9a, 0x5b, 0xb5, 0xff},
    {0x01, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x9a, 0x5b, 0xb5, 0xff},
    {0x05, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x49, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x06, 0x49, 0xb5, 0x6c},
    {0x4d, 0x1b, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x43, 0xb5, 0x9b},
    {0x01, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x14, 0x43, 0xb5, 0x9b},
    {0x06, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x82, 0x75, 0xb5, 0xff},
    {0x04, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x82, 0x75, 0xb5, 0xff},
    {0x08, 0x61, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0xb5, 0x9b},
    {0x01, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x18, 0x43, 0xb5, 0x9b},
    {0x05, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x0e, 0x41, 0xb5, 0x8b},
    {0x04, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x0e, 0x41, 0xb5, 0x8b},
    {0x4f, 0x82, 0xb5, 0x40, 0x0e},
    {0x03, 0x1c, 0x43, 0xb5, 0x9b},
    {0x01, 0x9a, 0xc2, 0xf5, 0x0e},
    {0x02, 0x1c, 0x43, 0xb5, 0x9b},
    {0x06, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x49, 0xb5, 0x6c},
    {0x04, 0x9a, 0xc2, 0xf5, 0x0e},
    {0x02, 0x04, 0x49, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x49, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x49, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x49, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x49, 0xb5, 0x6c},
    {0x74, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x43, 0xb5, 0x9b},
    {0x01, 0x21, 0x41, 0xf5, 0xbe},
    {0x02, 0x17, 0x43, 0xb5, 0x9b},
    {0x06, 0x75, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x1b, 0x6f},
    {0x04, 0x21, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x1b, 0x6f},
    {0x09, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x1b, 0x43, 0xb5, 0x9b},
    {0x01, 0x82, 0x5b, 0xf5, 0xff},
    {0x02, 0x1b, 0x43, 0xb5, 0x9b},
    {0x05, 0x75, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x1b, 0x6f},
    {0x04, 0x82, 0x5b, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x1b, 0x6f},
    {0x0b, 0x75, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x46, 0xb5, 0xae},
    {0x01, 0x31, 0x41, 0xf5, 0xbe},
    {0x02, 0x28, 0x46, 0xb5, 0xae},
    {0x06, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x10, 0x41, 0xb5, 0x8b},
    {0x04, 0x31, 0x41, 0xf5, 0xbe},
    {0x02, 0x10, 0x41, 0xb5, 0x8b},
    {0x07, 0x5b, 0x03, 0xf5, 0xce},
    {0x03, 0x8d, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x8d, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0x1b, 0x6f},
    {0x04, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x1b, 0x6f},
    {0x70, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0xb5, 0x9b},
    {0x01, 0x3d, 0x41, 0xf5, 0xbe},
    {0x02, 0x13, 0x43, 0xb5, 0x9b},
    {0x06, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0xb5, 0x7b},
    {0x04, 0x3d, 0x41, 0xf5, 0xbe},
    {0x02, 0x08, 0x46, 0xb5, 0x7b},
    {0x08, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x38, 0x46, 0xb5, 0xae},
    {0x01, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x38, 0x46, 0xb5, 0xae},
    {0x05, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x75, 0xb5, 0xff},
    {0x04, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x81, 0x75, 0xb5, 0xff},
    {0x0c, 0x75, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x46, 0xb5, 0x7b},
    {0x01, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x0a, 0x46, 0xb5, 0x7b},
    {0x06, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0x1b, 0x6f},
    {0x04, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0x1b, 0x6f},
    {0x07, 0x45, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0x1b, 0x6f},
    {0x01, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0x1b, 0x6f},
    {0x05, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0x1b, 0x6f},
    {0x04, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0x1b, 0x6f},
    {0xe1, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x46, 0xb5, 0xae},
    {0x01, 0x2f, 0x41, 0xf5, 0xbe},
    {0x02, 0x2e, 0x46, 0xb5, 0xae},
    {0x06, 0x63, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x82, 0x6e},
    {0x04, 0x2f, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x41, 0x82, 0x6e},
    {0x09, 0x71, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x82, 0x7e},
    {0x01, 0x03, 0x43, 0xc2, 0x7e},
    {0x02, 0x0b, 0x43, 0x82, 0x7e},
    {0x05, 0x63, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x82, 0x6e},
    {0x04, 0x03, 0x43, 0xc2, 0x7e},
    {0x02, 0x05, 0x41, 0x82, 0x6e},
    {0x0a, 0x49, 0x43, 0xf5, 0xce},
    {0x03, 0x36, 0x46, 0xb5, 0xae},
    {0x01, 0x3b, 0x41, 0xf5, 0xbe},
    {0x02, 0x36, 0x46, 0xb5, 0xae},
    {0x06, 0xc2, 0x82, 0xb5, 0x0e},
    {0x03, 0x09, 0x43, 0x82, 0x7e},
    {0x04, 0x3b, 0x41, 0xf5, 0xbe},
    {0x02, 0x09, 0x43, 0x82, 0x7e},
    {0x07, 0x68, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xc2, 0x7e},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x82, 0xb5, 0x0e},
    {0x03, 0x06, 0x41, 0x82, 0x6e},
    {0x04, 0x05, 0x43, 0xc2, 0x7e},
    {0x02, 0x06, 0x41, 0x82, 0x6e},
    {0x6c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x46, 0xb5, 0xae},
    {0x01, 0x29, 0x41, 0xf5, 0xbe},
    {0x02, 0x24, 0x46, 0xb5, 0xae},
    {0x06, 0x73, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x49, 0x03, 0xce},
    {0x04, 0x29, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x49, 0x03, 0xce},
    {0x08, 0x71, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x46, 0xb5, 0xae},
    {0x01, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x34, 0x46, 0xb5, 0xae},
    {0x05, 0x73, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x41, 0xb5, 0x8b},
    {0x04, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x41, 0xb5, 0x8b},
    {0x64, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x46, 0xb5, 0xae},
    {0x01, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x46, 0xb5, 0xae},
    {0x06, 0x4f, 0x06, 0xb5, 0xae},
    {0x03, 0x04, 0x41, 0x82, 0x6e},
    {0x04, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x82, 0x6e},
    {0x07, 0x50, 0x01, 0xf5, 0xbe},
    {0x03, 0x02, 0x41, 0x82, 0x6e},
    {0x01, 0x06, 0x43, 0xc2, 0x7e},
    {0x02, 0x02, 0x41, 0x82, 0x6e},
    {0x05, 0x4f, 0x06, 0xb5, 0xae},
    {0x03, 0x07, 0x41, 0x82, 0x6e},
    {0x04, 0x06, 0x43, 0xc2, 0x7e},
    {0x02, 0x07, 0x41, 0x82, 0x6e},
    {0xc6, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x41, 0xb5, 0x8b},
    {0x01, 0x1f, 0x41, 0xf5, 0xbe},
    {0x02, 0x0d, 0x41, 0xb5, 0x8b},
    {0x06, 0x7f, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0x1b, 0x6f},
    {0x04, 0x1f, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x42, 0x1b, 0x6f},
    {0x09, 0x4e, 0x43, 0xb5, 0xce},
    {0x03, 0x99, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x99, 0xf5, 0x00, 0x0b},
    {0x05, 0x7f, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0x1b, 0x6f},
    {0x04, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0x1b, 0x6f},
    {0x0b, 0x49, 0x43, 0xf5, 0xce},
    {0x03, 0x2c, 0x46, 0xb5, 0xae},
    {0x01, 0x39, 0x41, 0xf5, 0xbe},
    {0x02, 0x2c, 0x46, 0xb5, 0xae},
    {0x06, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x11, 0x41, 0xb5, 0x8b},
    {0x04, 0x39, 0x41, 0xf5, 0xbe},
    {0x02, 0x11, 0x41, 0xb5, 0x8b},
    {0x07, 0xcd, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x5b, 0xf5, 0xff},
    {0x02, 0x95, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0x1b, 0x6f},
    {0x04, 0x81, 0x5b, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x1b, 0x6f},
    {0x4e, 0x1b, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x41, 0xb5, 0x8b},
    {0x01, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x01, 0x41, 0xb5, 0x8b},
    {0x06, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x82, 0x7e},
    {0x04, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x82, 0x7e},
    {0x08, 0x4e, 0x43, 0xb5, 0xce},
    {0x03, 0x83, 0x5b, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0xc2, 0x7e},
    {0x02, 0x83, 0x5b, 0xb5, 0xff},
    {0x05, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x81, 0x49, 0x03, 0xce},
    {0x04, 0x04, 0x43, 0xc2, 0x7e},
    {0x02, 0x81, 0x49, 0x03, 0xce},
    {0x0c, 0x49, 0x43, 0xf5, 0xce},
    {0x03, 0x0a, 0x43, 0x82, 0x7e},
    {0x01, 0x02, 0x43, 0xc2, 0x7e},
    {0x02, 0x0a, 0x43, 0x82, 0x7e},
    {0x06, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0x1b, 0x6f},
    {0x04, 0x02, 0x43, 0xc2, 0x7e},
    {0x02, 0x04, 0x42, 0x1b, 0x6f},
    {0x07, 0x46, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x1b, 0x6f},
    {0x01, 0x07, 0x43, 0xc2, 0x7e},
    {0x02, 0x02, 0x42, 0x1b, 0x6f},
    {0x05, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0x1b, 0x6f},
    {0x04, 0x07, 0x43, 0xc2, 0x7e},
    {0x02, 0x07, 0x42, 0x1b, 0x6f},
    {0xb4, 0x82, 0xb5, 0x00, 0x0e},
    {0x03, 0x1e, 0x46, 0xb5, 0xae},
    {0x01, 0x16, 0x46, 0xf5, 0xae},
    {0x02, 0x1e, 0x46, 0xb5, 0xae},
    {0x06, 0x4d, 0x06, 0xb5, 0xae},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0x46, 0xf5, 0xae},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x7d, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0x06, 0xb5, 0xae},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xc7, 0xf5, 0x40, 0x0f},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x53, 0x03, 0xf5, 0xce},
    {0x03, 0x9a, 0x45, 0x03, 0xce},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x45, 0x03, 0xce},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x05, 0x03, 0xb5, 0xce},
    {0x03, 0x22, 0x46, 0xb5, 0xae},
    {0x01, 0x1a, 0x46, 0xf5, 0xae},
    {0x02, 0x22, 0x46, 0xb5, 0xae},
    {0x06, 0xd8, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xc7, 0xb5, 0x0f},
    {0x04, 0x1a, 0x46, 0xf5, 0xae},
    {0x02, 0x82, 0xc7, 0xb5, 0x0f},
    {0x08, 0x7d, 0xf5, 0x00, 0xee},
    {0x03, 0x32, 0x46, 0xb5, 0xae},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0x46, 0xb5, 0xae},
    {0x05, 0xd8, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x46, 0xb5, 0xae},
    {0x01, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x46, 0xb5, 0xae},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0x06, 0xf5, 0xae},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x7c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x30, 0x46, 0xb5, 0xae},
    {0x01, 0x25, 0x41, 0xf5, 0xbe},
    {0x02, 0x30, 0x46, 0xb5, 0xae},
    {0x06, 0x6b, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x05, 0x6c},
    {0x04, 0x25, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x05, 0x6c},
    {0x09, 0x44, 0x46, 0xb5, 0xae},
    {0x03, 0x3c, 0x46, 0xb5, 0xae},
    {0x01, 0x82, 0x45, 0x43, 0xce},
    {0x02, 0x3c, 0x46, 0xb5, 0xae},
    {0x05, 0x6b, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x05, 0x6c},
    {0x04, 0x82, 0x45, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x05, 0x6c},
    {0x0b, 0xc7, 0xf5, 0x40, 0x0f},
    {0x03, 0x2a, 0x46, 0xb5, 0xae},
    {0x01, 0x19, 0x46, 0xf5, 0xae},
    {0x02, 0x2a, 0x46, 0xb5, 0xae},
    {0x06, 0x51, 0x06, 0xb5, 0xae},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0x46, 0xf5, 0xae},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x78, 0xb5, 0x40, 0xdd},
    {0x03, 0x91, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x91, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x06, 0xb5, 0xae},
    {0x03, 0x06, 0x43, 0x05, 0x6c},
    {0x04, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x05, 0x6c},
    {0x68, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x46, 0xb5, 0xae},
    {0x01, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x46, 0xb5, 0xae},
    {0x06, 0xd4, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0x46, 0xb5, 0xae},
    {0x03, 0x3a, 0x46, 0xb5, 0xae},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0x46, 0xb5, 0xae},
    {0x05, 0xd4, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc7, 0xb5, 0x0f},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xc7, 0xb5, 0x0f},
    {0x0c, 0xc7, 0xf5, 0x40, 0x0f},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x05, 0x6c},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x05, 0x6c},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x05, 0x6c},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x05, 0x6c},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x05, 0x6c},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x05, 0x6c},
    {0xe5, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x43, 0xb5, 0x9b},
    {0x01, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x16, 0x43, 0xb5, 0x9b},
    {0x06, 0x41, 0x06, 0xb5, 0xae},
    {0x03, 0x03, 0x44, 0x82, 0x6e},
    {0x04, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x82, 0x6e},
    {0x09, 0x42, 0x46, 0xb5, 0xae},
    {0x03, 0x0b, 0x42, 0x82, 0x7e},
    {0x01, 0x03, 0x42, 0xc2, 0x7e},
    {0x02, 0x0b, 0x42, 0x82, 0x7e},
    {0x05, 0x41, 0x06, 0xb5, 0xae},
    {0x03, 0x05, 0x44, 0x82, 0x6e},
    {0x04, 0x03, 0x42, 0xc2, 0x7e},
    {0x02, 0x05, 0x44, 0x82, 0x6e},
    {0x0a, 0x46, 0x41, 0xf5, 0xbe},
    {0x03, 0x1a, 0x43, 0xb5, 0x9b},
    {0x01, 0x12, 0x46, 0xf5, 0xae},
    {0x02, 0x1a, 0x43, 0xb5, 0x9b},
    {0x06, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x82, 0x7e},
    {0x04, 0x12, 0x46, 0xf5, 0xae},
    {0x02, 0x09, 0x42, 0x82, 0x7e},
    {0x07, 0x4a, 0x06, 0xf5, 0xae},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0xc2, 0x7e},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x82, 0x6e},
    {0x04, 0x05, 0x42, 0xc2, 0x7e},
    {0x02, 0x06, 0x44, 0x82, 0x6e},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0x46, 0xb5, 0xae},
    {0x01, 0x15, 0x46, 0xf5, 0xae},
    {0x02, 0x26, 0x46, 0xb5, 0xae},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0x01, 0xbe},
    {0x04, 0x15, 0x46, 0xf5, 0xae},
    {0x02, 0x82, 0x46, 0x01, 0xbe},
    {0x08, 0x42, 0x46, 0xb5, 0xae},
    {0x03, 0x19, 0x43, 0xb5, 0x9b},
    {0x01, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x19, 0x43, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x82, 0xb5, 0x0e},
    {0x03, 0x04, 0x44, 0x82, 0x6e},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x82, 0x6e},
    {0x07, 0x44, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x82, 0x6e},
    {0x01, 0x06, 0x42, 0xc2, 0x7e},
    {0x02, 0x02, 0x44, 0x82, 0x6e},
    {0x05, 0xc1, 0x82, 0xb5, 0x0e},
    {0x03, 0x07, 0x44, 0x82, 0x6e},
    {0x04, 0x06, 0x42, 0xc2, 0x7e},
    {0x02, 0x07, 0x44, 0x82, 0x6e},
    {0xc1, 0x46, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x05, 0x6c},
    {0x04, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x05, 0x6c},
    {0x09, 0x47, 0x46, 0xb5, 0xae},
    {0x03, 0x12, 0x43, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0xb5, 0x9b},
    {0x05, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x05, 0x6c},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x05, 0x6c},
    {0x0b, 0x46, 0x41, 0xf5, 0xbe},
    {0x03, 0x15, 0x43, 0xb5, 0x9b},
    {0x01, 0x83, 0xc2, 0xf5, 0x0e},
    {0x02, 0x15, 0x43, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0xc2, 0xf5, 0x0e},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0xf5, 0x9b},
    {0x03, 0x84, 0xc2, 0xb5, 0x0e},
    {0x01, 0x81, 0x45, 0x43, 0xce},
    {0x02, 0x84, 0xc2, 0xb5, 0x0e},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x05, 0x6c},
    {0x04, 0x81, 0x45, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x05, 0x6c},
    {0x4e, 0x05, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x82, 0x7e},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x82, 0x7e},
    {0x08, 0x47, 0x46, 0xb5, 0xae},
    {0x03, 0x83, 0x45, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0xc2, 0x7e},
    {0x02, 0x83, 0x45, 0x03, 0xce},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0x01, 0xbe},
    {0x04, 0x04, 0x42, 0xc2, 0x7e},
    {0x02, 0x81, 0x46, 0x01, 0xbe},
    {0x0c, 0x46, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0x82, 0x7e},
    {0x01, 0x02, 0x42, 0xc2, 0x7e},
    {0x02, 0x0a, 0x42, 0x82, 0x7e},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x05, 0x6c},
    {0x04, 0x02, 0x42, 0xc2, 0x7e},
    {0x02, 0x04, 0x42, 0x05, 0x6c},
    {0x07, 0x47, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x05, 0x6c},
    {0x01, 0x07, 0x42, 0xc2, 0x7e},
    {0x02, 0x02, 0x42, 0x05, 0x6c},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x05, 0x6c},
    {0x04, 0x07, 0x42, 0xc2, 0x7e},
    {0x02, 0x07, 0x42, 0x05, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xb4, 0xf5, 0x00, 0x0b},
    {0x01, 0xa1, 0xf5, 0x40, 0x0f},
    {0x02, 0xb4, 0xf5, 0x00, 0x0b},
    {0x06, 0x5d, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x4b, 0xb5, 0x6d},
    {0x04, 0xa1, 0xf5, 0x40, 0x0f},
    {0x02, 0x03, 0x4b, 0xb5, 0x6d},
    {0x09, 0x6f, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x48, 0xb5, 0x7d},
    {0x01, 0x03, 0x48, 0xf5, 0x7d},
    {0x02, 0x0b, 0x48, 0xb5, 0x7d},
    {0x05, 0x5d, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x4b, 0xb5, 0x6d},
    {0x04, 0x03, 0x48, 0xf5, 0x7d},
    {0x02, 0x05, 0x4b, 0xb5, 0x6d},
    {0x0a, 0x63, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x46, 0xb5, 0x8c},
    {0x01, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x0c, 0x46, 0xb5, 0x8c},
    {0x06, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x09, 0x48, 0xb5, 0x7d},
    {0x04, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x09, 0x48, 0xb5, 0x7d},
    {0x07, 0x6e, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x48, 0xf5, 0x7d},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x4b, 0xb5, 0x6d},
    {0x04, 0x05, 0x48, 0xf5, 0x7d},
    {0x02, 0x06, 0x4b, 0xb5, 0x6d},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x41, 0xb5, 0x9c},
    {0x01, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x14, 0x41, 0xb5, 0x9c},
    {0x06, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x82, 0x63, 0xb5, 0xff},
    {0x04, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x82, 0x63, 0xb5, 0xff},
    {0x08, 0x6f, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x41, 0xb5, 0x9c},
    {0x01, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x18, 0x41, 0xb5, 0x9c},
    {0x05, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x0e, 0x46, 0xb5, 0x8c},
    {0x04, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x0e, 0x46, 0xb5, 0x8c},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x41, 0xb5, 0x9c},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x41, 0xb5, 0x9c},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x4b, 0xb5, 0x6d},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0x4b, 0xb5, 0x6d},
    {0x07, 0x43, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x4b, 0xb5, 0x6d},
    {0x01, 0x06, 0x48, 0xf5, 0x7d},
    {0x02, 0x02, 0x4b, 0xb5, 0x6d},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x4b, 0xb5, 0x6d},
    {0x04, 0x06, 0x48, 0xf5, 0x7d},
    {0x02, 0x07, 0x4b, 0xb5, 0x6d},
    {0x52, 0x09, 0xf5, 0x00, 0xff},
    {0x03, 0x17, 0x41, 0xb5, 0x9c},
    {0x01, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x17, 0x41, 0xb5, 0x9c},
    {0x06, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x1b, 0x41, 0xb5, 0x9c},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x41, 0xb5, 0x9c},
    {0x05, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x63, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x43, 0xb5, 0xac},
    {0x01, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x27, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x10, 0x46, 0xb5, 0x8c},
    {0x04, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x46, 0xb5, 0x8c},
    {0x07, 0x4b, 0x03, 0xf5, 0xac},
    {0x03, 0x89, 0x49, 0xb5, 0xff},
    {0x01, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x89, 0x49, 0xb5, 0xff},
    {0x05, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0x09, 0xf5, 0x00, 0xff},
    {0x03, 0x13, 0x41, 0xb5, 0x9c},
    {0x01, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x13, 0x41, 0xb5, 0x9c},
    {0x06, 0xda, 0x09, 0xb5, 0xff},
    {0x03, 0x08, 0x48, 0xb5, 0x7d},
    {0x04, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x08, 0x48, 0xb5, 0x7d},
    {0x08, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x37, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x48, 0xf5, 0x7d},
    {0x02, 0x37, 0x43, 0xb5, 0xac},
    {0x05, 0xda, 0x09, 0xb5, 0xff},
    {0x03, 0x81, 0x63, 0xb5, 0xff},
    {0x04, 0x04, 0x48, 0xf5, 0x7d},
    {0x02, 0x81, 0x63, 0xb5, 0xff},
    {0x0c, 0x63, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x48, 0xb5, 0x7d},
    {0x01, 0x02, 0x48, 0xf5, 0x7d},
    {0x02, 0x0a, 0x48, 0xb5, 0x7d},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x48, 0xf5, 0x7d},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x48, 0xf5, 0x7d},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x48, 0xf5, 0x7d},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xdf, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x43, 0xb5, 0xac},
    {0x01, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x2d, 0x43, 0xb5, 0xac},
    {0x06, 0x61, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x7b, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x61, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x35, 0x43, 0xb5, 0xac},
    {0x01, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x35, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x76, 0xb5, 0x40, 0xdd},
    {0x03, 0x87, 0x49, 0xb5, 0xff},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0x49, 0xb5, 0xff},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x72, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x43, 0xb5, 0xac},
    {0x01, 0x28, 0x41, 0xf5, 0xbe},
    {0x02, 0x23, 0x43, 0xb5, 0xac},
    {0x06, 0x71, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0xc2, 0xb5, 0x0c},
    {0x04, 0x28, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0xc2, 0xb5, 0x0c},
    {0x08, 0x7b, 0xf5, 0x00, 0xee},
    {0x03, 0x33, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x33, 0x43, 0xb5, 0xac},
    {0x05, 0x71, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x46, 0xb5, 0x8c},
    {0x04, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x46, 0xb5, 0x8c},
    {0x62, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x43, 0xb5, 0xac},
    {0x01, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x43, 0xb5, 0xac},
    {0x06, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x9b, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x46, 0xb5, 0x8c},
    {0x01, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x0d, 0x46, 0xb5, 0x8c},
    {0x06, 0x7d, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x98, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x98, 0xf5, 0x00, 0x0b},
    {0x05, 0x7d, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x2b, 0x43, 0xb5, 0xac},
    {0x01, 0x38, 0x41, 0xf5, 0xbe},
    {0x02, 0x2b, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x11, 0x46, 0xb5, 0x8c},
    {0x04, 0x38, 0x41, 0xf5, 0xbe},
    {0x02, 0x11, 0x46, 0xb5, 0x8c},
    {0x07, 0xc8, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x94, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x46, 0xb5, 0x8c},
    {0x01, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x01, 0x46, 0xb5, 0x8c},
    {0x06, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x81, 0xc2, 0xb5, 0x0c},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0xc2, 0xb5, 0x0c},
    {0x0c, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x43, 0xb5, 0xac},
    {0x01, 0x2e, 0x41, 0xf5, 0xbe},
    {0x02, 0x1d, 0x43, 0xb5, 0xac},
    {0x06, 0x6f, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x46, 0x09, 0x6f},
    {0x04, 0x2e, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x46, 0x09, 0x6f},
    {0x09, 0x69, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x09, 0x7f},
    {0x01, 0x03, 0x41, 0x49, 0x7f},
    {0x02, 0x0b, 0x41, 0x09, 0x7f},
    {0x05, 0x6f, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x46, 0x09, 0x6f},
    {0x04, 0x03, 0x41, 0x49, 0x7f},
    {0x02, 0x05, 0x46, 0x09, 0x6f},
    {0x0a, 0x73, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x43, 0x09, 0x8f},
    {0x01, 0x0b, 0x43, 0x49, 0x8f},
    {0x02, 0x0c, 0x43, 0x09, 0x8f},
    {0x06, 0x43, 0x03, 0x09, 0x8f},
    {0x03, 0x09, 0x41, 0x09, 0x7f},
    {0x04, 0x0b, 0x43, 0x49, 0x8f},
    {0x02, 0x09, 0x41, 0x09, 0x7f},
    {0x07, 0x64, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x50, 0xb5, 0xee},
    {0x01, 0x05, 0x41, 0x49, 0x7f},
    {0x02, 0x9a, 0x50, 0xb5, 0xee},
    {0x05, 0x43, 0x03, 0x09, 0x8f},
    {0x03, 0x06, 0x46, 0x09, 0x6f},
    {0x04, 0x05, 0x41, 0x49, 0x7f},
    {0x02, 0x06, 0x46, 0x09, 0x6f},
    {0x4d, 0x10, 0xb5, 0x00, 0xee},
    {0x03, 0x21, 0x43, 0xb5, 0xac},
    {0x01, 0x36, 0x41, 0xf5, 0xbe},
    {0x02, 0x21, 0x43, 0xb5, 0xac},
    {0x06, 0x7b, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x73, 0xb5, 0xff},
    {0x04, 0x36, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x73, 0xb5, 0xff},
    {0x08, 0x69, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x49, 0x8f},
    {0x02, 0x31, 0x43, 0xb5, 0xac},
    {0x05, 0x7b, 0x03, 0xb5, 0xce},
    {0x03, 0x0e, 0x43, 0x09, 0x8f},
    {0x04, 0x09, 0x43, 0x49, 0x8f},
    {0x02, 0x0e, 0x43, 0x09, 0x8f},
    {0x5a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x43, 0xb5, 0xac},
    {0x01, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x09, 0x8f},
    {0x03, 0x04, 0x46, 0x09, 0x6f},
    {0x04, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0x09, 0x6f},
    {0x07, 0xc2, 0x09, 0xf5, 0xff},
    {0x03, 0x02, 0x46, 0x09, 0x6f},
    {0x01, 0x06, 0x41, 0x49, 0x7f},
    {0x02, 0x02, 0x46, 0x09, 0x6f},
    {0x05, 0x45, 0x03, 0x09, 0x8f},
    {0x03, 0x07, 0x46, 0x09, 0x6f},
    {0x04, 0x06, 0x41, 0x49, 0x7f},
    {0x02, 0x07, 0x46, 0x09, 0x6f},
    {0x97, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x2f, 0x43, 0xb5, 0xac},
    {0x01, 0x24, 0x41, 0xf5, 0xbe},
    {0x02, 0x2f, 0x43, 0xb5, 0xac},
    {0x06, 0x69, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x10, 0x6e},
    {0x04, 0x24, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x10, 0x6e},
    {0x09, 0x50, 0x43, 0xb5, 0xce},
    {0x03, 0x3b, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x50, 0xf5, 0xee},
    {0x02, 0x3b, 0x43, 0xb5, 0xac},
    {0x05, 0x69, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x10, 0x6e},
    {0x04, 0x82, 0x50, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x10, 0x6e},
    {0x0b, 0x73, 0xf5, 0x40, 0xff},
    {0x03, 0x29, 0x43, 0xb5, 0xac},
    {0x01, 0x34, 0x41, 0xf5, 0xbe},
    {0x02, 0x29, 0x43, 0xb5, 0xac},
    {0x06, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x09, 0x8f},
    {0x04, 0x34, 0x41, 0xf5, 0xbe},
    {0x02, 0x10, 0x43, 0x09, 0x8f},
    {0x07, 0x74, 0xb5, 0x40, 0xdd},
    {0x03, 0x90, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x90, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x10, 0x6e},
    {0x04, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x10, 0x6e},
    {0x60, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x43, 0xb5, 0xac},
    {0x01, 0x00, 0x41, 0xf5, 0xbe},
    {0x02, 0x1f, 0x43, 0xb5, 0xac},
    {0x06, 0xd0, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x09, 0x7f},
    {0x04, 0x00, 0x41, 0xf5, 0xbe},
    {0x02, 0x08, 0x41, 0x09, 0x7f},
    {0x08, 0x50, 0x43, 0xb5, 0xce},
    {0x03, 0x39, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x49, 0x7f},
    {0x02, 0x39, 0x43, 0xb5, 0xac},
    {0x05, 0xd0, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x73, 0xb5, 0xff},
    {0x04, 0x04, 0x41, 0x49, 0x7f},
    {0x02, 0x81, 0x73, 0xb5, 0xff},
    {0x0c, 0x73, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x41, 0x09, 0x7f},
    {0x01, 0x02, 0x41, 0x49, 0x7f},
    {0x02, 0x0a, 0x41, 0x09, 0x7f},
    {0x06, 0x46, 0x03, 0x09, 0x8f},
    {0x03, 0x04, 0x43, 0x10, 0x6e},
    {0x04, 0x02, 0x41, 0x49, 0x7f},
    {0x02, 0x04, 0x43, 0x10, 0x6e},
    {0x07, 0x4f, 0x01, 0xf5, 0xbe},
    {0x03, 0x02, 0x43, 0x10, 0x6e},
    {0x01, 0x07, 0x41, 0x49, 0x7f},
    {0x02, 0x02, 0x43, 0x10, 0x6e},
    {0x05, 0x46, 0x03, 0x09, 0x8f},
    {0x03, 0x07, 0x43, 0x10, 0x6e},
    {0x04, 0x07, 0x41, 0x49, 0x7f},
    {0x02, 0x07, 0x43, 0x10, 0x6e},
    {0xde, 0x41, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x41, 0xb5, 0x9c},
    {0x01, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x16, 0x41, 0xb5, 0x9c},
    {0x06, 0x5f, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xcf, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x5f, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x4f, 0xf5, 0x40, 0xdd},
    {0x03, 0x1a, 0x41, 0xb5, 0x9c},
    {0x01, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x41, 0xb5, 0x9c},
    {0x06, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x40, 0xb5, 0x40, 0xdd},
    {0x03, 0x8c, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8c, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x7d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x43, 0xb5, 0xac},
    {0x01, 0x2c, 0x41, 0xf5, 0xbe},
    {0x02, 0x25, 0x43, 0xb5, 0xac},
    {0x06, 0x79, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x4f, 0xb5, 0xdd},
    {0x04, 0x2c, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x4f, 0xb5, 0xdd},
    {0x08, 0xcf, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x41, 0xb5, 0x9c},
    {0x01, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x19, 0x41, 0xb5, 0x9c},
    {0x05, 0x79, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0x09, 0x8f},
    {0x04, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x09, 0x8f},
    {0x6a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x49, 0xb5, 0xff},
    {0x01, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x49, 0xb5, 0xff},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x91, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0x09, 0x8f},
    {0x01, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x09, 0x8f},
    {0x06, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x10, 0x6e},
    {0x04, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x10, 0x6e},
    {0x09, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x41, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x49, 0x8f},
    {0x02, 0x12, 0x41, 0xb5, 0x9c},
    {0x05, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x10, 0x6e},
    {0x04, 0x08, 0x43, 0x49, 0x8f},
    {0x02, 0x05, 0x42, 0x10, 0x6e},
    {0x0b, 0x4f, 0xf5, 0x40, 0xdd},
    {0x03, 0x15, 0x41, 0xb5, 0x9c},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x41, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x09, 0x8f},
    {0x03, 0x11, 0x43, 0x09, 0x8f},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0x09, 0x8f},
    {0x07, 0x42, 0x01, 0xf5, 0x9c},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x50, 0xf5, 0xee},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0x09, 0x8f},
    {0x03, 0x06, 0x42, 0x10, 0x6e},
    {0x04, 0x81, 0x50, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x10, 0x6e},
    {0x4e, 0x10, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x43, 0x09, 0x8f},
    {0x01, 0x0a, 0x43, 0x49, 0x8f},
    {0x02, 0x01, 0x43, 0x09, 0x8f},
    {0x06, 0x42, 0x03, 0x09, 0x8f},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0x49, 0x8f},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x50, 0xb5, 0xee},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x50, 0xb5, 0xee},
    {0x05, 0x42, 0x03, 0x09, 0x8f},
    {0x03, 0x81, 0x4f, 0xb5, 0xdd},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x4f, 0xb5, 0xdd},
    {0x0c, 0x4f, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0x09, 0x8f},
    {0x03, 0x04, 0x42, 0x10, 0x6e},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x10, 0x6e},
    {0x07, 0x47, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x10, 0x6e},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x10, 0x6e},
    {0x05, 0x47, 0x03, 0x09, 0x8f},
    {0x03, 0x07, 0x42, 0x10, 0x6e},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x10, 0x6e},
    {0xf4, 0x49, 0xf5, 0x40, 0x0f},
    {0x03, 0x9e, 0xf5, 0x00, 0x0d},
    {0x01, 0x1e, 0x41, 0xf5, 0xbe},
    {0x02, 0x9e, 0xf5, 0x00, 0x0d},
    {0x06, 0x56, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x47, 0xb5, 0x6b},
    {0x04, 0x1e, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x47, 0xb5, 0x6b},
    {0x09, 0x5f, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x45, 0xb5, 0x7b},
    {0x01, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x0b, 0x45, 0xb5, 0x7b},
    {0x05, 0x56, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x47, 0xb5, 0x6b},
    {0x04, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x05, 0x47, 0xb5, 0x6b},
    {0x0a, 0x7f, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x44, 0xb5, 0x8b},
    {0x01, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x0c, 0x44, 0xb5, 0x8b},
    {0x06, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x09, 0x45, 0xb5, 0x7b},
    {0x04, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x09, 0x45, 0xb5, 0x7b},
    {0x07, 0x4d, 0x01, 0xf5, 0xbe},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x47, 0xb5, 0x6b},
    {0x04, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x06, 0x47, 0xb5, 0x6b},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x42, 0xb5, 0x9b},
    {0x01, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x14, 0x42, 0xb5, 0x9b},
    {0x06, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x82, 0x7f, 0xb5, 0xff},
    {0x04, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x82, 0x7f, 0xb5, 0xff},
    {0x08, 0x5f, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x42, 0xb5, 0x9b},
    {0x01, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x18, 0x42, 0xb5, 0x9b},
    {0x05, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x0e, 0x44, 0xb5, 0x8b},
    {0x04, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x0e, 0x44, 0xb5, 0x8b},
    {0x4f, 0x0e, 0xb5, 0x40, 0xff},
    {0x03, 0x1c, 0x42, 0xb5, 0x9b},
    {0x01, 0x9a, 0x4e, 0xf5, 0xff},
    {0x02, 0x1c, 0x42, 0xb5, 0x9b},
    {0x06, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x47, 0xb5, 0x6b},
    {0x04, 0x9a, 0x4e, 0xf5, 0xff},
    {0x02, 0x04, 0x47, 0xb5, 0x6b},
    {0x07, 0x43, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x47, 0xb5, 0x6b},
    {0x01, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x47, 0xb5, 0x6b},
    {0x05, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x47, 0xb5, 0x6b},
    {0x04, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x47, 0xb5, 0x6b},
    {0x8d, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x17, 0x42, 0xb5, 0x9b},
    {0x01, 0x22, 0x41, 0xf5, 0xbe},
    {0x02, 0x17, 0x42, 0xb5, 0x9b},
    {0x06, 0x5a, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x22, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x48, 0x41, 0xb5, 0xbe},
    {0x03, 0x1b, 0x42, 0xb5, 0x9b},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x42, 0xb5, 0x9b},
    {0x05, 0x5a, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x7f, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x43, 0xb5, 0xac},
    {0x01, 0x32, 0x41, 0xf5, 0xbe},
    {0x02, 0x28, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x10, 0x44, 0xb5, 0x8b},
    {0x04, 0x32, 0x41, 0xf5, 0xbe},
    {0x02, 0x10, 0x44, 0xb5, 0x8b},
    {0x07, 0xd9, 0xb5, 0x40, 0x0e},
    {0x03, 0x8e, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x8e, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x7e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0xb5, 0x9b},
    {0x01, 0x3e, 0x41, 0xf5, 0xbe},
    {0x02, 0x13, 0x42, 0xb5, 0x9b},
    {0x06, 0xcc, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x45, 0xb5, 0x7b},
    {0x04, 0x3e, 0x41, 0xf5, 0xbe},
    {0x02, 0x08, 0x45, 0xb5, 0x7b},
    {0x08, 0x48, 0x41, 0xb5, 0xbe},
    {0x03, 0x38, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x38, 0x43, 0xb5, 0xac},
    {0x05, 0xcc, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x7f, 0xb5, 0xff},
    {0x04, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x81, 0x7f, 0xb5, 0xff},
    {0x0c, 0x7f, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x45, 0xb5, 0x7b},
    {0x01, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x0a, 0x45, 0xb5, 0x7b},
    {0x06, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe3, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x43, 0xb5, 0xac},
    {0x01, 0x30, 0x41, 0xf5, 0xbe},
    {0x02, 0x2e, 0x43, 0xb5, 0xac},
    {0x06, 0x65, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x0e, 0x6f},
    {0x04, 0x30, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x41, 0x0e, 0x6f},
    {0x09, 0x79, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x0e, 0x7f},
    {0x01, 0x03, 0x43, 0x4e, 0x7f},
    {0x02, 0x0b, 0x43, 0x0e, 0x7f},
    {0x05, 0x65, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x0e, 0x6f},
    {0x04, 0x03, 0x43, 0x4e, 0x7f},
    {0x02, 0x05, 0x41, 0x0e, 0x6f},
    {0x0a, 0x44, 0x41, 0xf5, 0xbe},
    {0x03, 0x36, 0x43, 0xb5, 0xac},
    {0x01, 0x3c, 0x41, 0xf5, 0xbe},
    {0x02, 0x36, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x0e, 0xb5, 0xff},
    {0x03, 0x09, 0x43, 0x0e, 0x7f},
    {0x04, 0x3c, 0x41, 0xf5, 0xbe},
    {0x02, 0x09, 0x43, 0x0e, 0x7f},
    {0x07, 0x6c, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0x49, 0xb5, 0xff},
    {0x01, 0x05, 0x43, 0x4e, 0x7f},
    {0x02, 0x88, 0x49, 0xb5, 0xff},
    {0x05, 0xc2, 0x0e, 0xb5, 0xff},
    {0x03, 0x06, 0x41, 0x0e, 0x6f},
    {0x04, 0x05, 0x43, 0x4e, 0x7f},
    {0x02, 0x06, 0x41, 0x0e, 0x6f},
    {0x6e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x43, 0xb5, 0xac},
    {0x01, 0x2a, 0x41, 0xf5, 0xbe},
    {0x02, 0x24, 0x43, 0xb5, 0xac},
    {0x06, 0x59, 0x01, 0xb5, 0xbe},
    {0x03, 0x82, 0x44, 0x01, 0xbe},
    {0x04, 0x2a, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x44, 0x01, 0xbe},
    {0x08, 0x79, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x34, 0x43, 0xb5, 0xac},
    {0x05, 0x59, 0x01, 0xb5, 0xbe},
    {0x03, 0x0f, 0x44, 0xb5, 0x8b},
    {0x04, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x44, 0xb5, 0x8b},
    {0x66, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x43, 0xb5, 0xac},
    {0x01, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x43, 0xb5, 0xac},
    {0x06, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x0e, 0x6f},
    {0x04, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x0e, 0x6f},
    {0x07, 0x51, 0x01, 0xf5, 0xbe},
    {0x03, 0x02, 0x41, 0x0e, 0x6f},
    {0x01, 0x06, 0x43, 0x4e, 0x7f},
    {0x02, 0x02, 0x41, 0x0e, 0x6f},
    {0x05, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x0e, 0x6f},
    {0x04, 0x06, 0x43, 0x4e, 0x7f},
    {0x02, 0x07, 0x41, 0x0e, 0x6f},
    {0x89, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x44, 0xb5, 0x8b},
    {0x01, 0x20, 0x41, 0xf5, 0xbe},
    {0x02, 0x0d, 0x44, 0xb5, 0x8b},
    {0x06, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x20, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x9b, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x9b, 0xf5, 0x00, 0x0b},
    {0x05, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x44, 0x41, 0xf5, 0xbe},
    {0x03, 0x2c, 0x43, 0xb5, 0xac},
    {0x01, 0x3a, 0x41, 0xf5, 0xbe},
    {0x02, 0x2c, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x11, 0x44, 0xb5, 0x8b},
    {0x04, 0x3a, 0x41, 0xf5, 0xbe},
    {0x02, 0x11, 0x44, 0xb5, 0x8b},
    {0x07, 0xd5, 0xb5, 0x40, 0x0e},
    {0x03, 0x96, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x96, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x44, 0xb5, 0x8b},
    {0x01, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x01, 0x44, 0xb5, 0x8b},
    {0x06, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x0e, 0x7f},
    {0x04, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x0e, 0x7f},
    {0x08, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0x4e, 0x7f},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x81, 0x44, 0x01, 0xbe},
    {0x04, 0x04, 0x43, 0x4e, 0x7f},
    {0x02, 0x81, 0x44, 0x01, 0xbe},
    {0x0c, 0x44, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x43, 0x0e, 0x7f},
    {0x01, 0x02, 0x43, 0x4e, 0x7f},
    {0x02, 0x0a, 0x43, 0x0e, 0x7f},
    {0x06, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0x4e, 0x7f},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0x4e, 0x7f},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0x4e, 0x7f},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xf4, 0x4e, 0xf5, 0x40, 0x0f},
    {0x03, 0x1e, 0x43, 0xb5, 0xac},
    {0x01, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x1e, 0x43, 0xb5, 0xac},
    {0x06, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x09, 0x6f},
    {0x04, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x09, 0x6f},
    {0x09, 0x4a, 0x41, 0xb5, 0xbe},
    {0x03, 0x0b, 0x44, 0x09, 0x7f},
    {0x01, 0x03, 0x44, 0x49, 0x7f},
    {0x02, 0x0b, 0x44, 0x09, 0x7f},
    {0x05, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x09, 0x6f},
    {0x04, 0x03, 0x44, 0x49, 0x7f},
    {0x02, 0x05, 0x45, 0x09, 0x6f},
    {0x0a, 0x42, 0x41, 0xf5, 0xbe},
    {0x03, 0x0c, 0x42, 0x09, 0x8f},
    {0x01, 0x0b, 0x42, 0x49, 0x8f},
    {0x02, 0x0c, 0x42, 0x09, 0x8f},
    {0x06, 0x43, 0x02, 0x09, 0x8f},
    {0x03, 0x09, 0x44, 0x09, 0x7f},
    {0x04, 0x0b, 0x42, 0x49, 0x8f},
    {0x02, 0x09, 0x44, 0x09, 0x7f},
    {0x07, 0x41, 0x01, 0xf5, 0xbe},
    {0x03, 0x9a, 0x46, 0x03, 0xce},
    {0x01, 0x05, 0x44, 0x49, 0x7f},
    {0x02, 0x9a, 0x46, 0x03, 0xce},
    {0x05, 0x43, 0x02, 0x09, 0x8f},
    {0x03, 0x06, 0x45, 0x09, 0x6f},
    {0x04, 0x05, 0x44, 0x49, 0x7f},
    {0x02, 0x06, 0x45, 0x09, 0x6f},
    {0x4d, 0x06, 0x03, 0xb5, 0xce},
    {0x03, 0x22, 0x43, 0xb5, 0xac},
    {0x01, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x22, 0x43, 0xb5, 0xac},
    {0x06, 0x52, 0x01, 0xb5, 0xbe},
    {0x03, 0x82, 0x42, 0x01, 0xbe},
    {0x04, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x01, 0xbe},
    {0x08, 0x4a, 0x41, 0xb5, 0xbe},
    {0x03, 0x32, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x49, 0x8f},
    {0x02, 0x32, 0x43, 0xb5, 0xac},
    {0x05, 0x52, 0x01, 0xb5, 0xbe},
    {0x03, 0x0e, 0x42, 0x09, 0x8f},
    {0x04, 0x09, 0x42, 0x49, 0x8f},
    {0x02, 0x0e, 0x42, 0x09, 0x8f},
    {0x53, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3e, 0x43, 0xb5, 0xac},
    {0x01, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x3e, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x09, 0x8f},
    {0x03, 0x04, 0x45, 0x09, 0x6f},
    {0x04, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x45, 0x09, 0x6f},
    {0x07, 0x48, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x09, 0x6f},
    {0x01, 0x06, 0x44, 0x49, 0x7f},
    {0x02, 0x02, 0x45, 0x09, 0x6f},
    {0x05, 0x45, 0x02, 0x09, 0x8f},
    {0x03, 0x07, 0x45, 0x09, 0x6f},
    {0x04, 0x06, 0x44, 0x49, 0x7f},
    {0x02, 0x07, 0x45, 0x09, 0x6f},
    {0x58, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x30, 0x43, 0xb5, 0xac},
    {0x01, 0x26, 0x41, 0xf5, 0xbe},
    {0x02, 0x30, 0x43, 0xb5, 0xac},
    {0x06, 0x55, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x43, 0x06, 0x6c},
    {0x04, 0x26, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x06, 0x6c},
    {0x09, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3c, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x46, 0x43, 0xce},
    {0x02, 0x3c, 0x43, 0xb5, 0xac},
    {0x05, 0x55, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x43, 0x06, 0x6c},
    {0x04, 0x82, 0x46, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x06, 0x6c},
    {0x0b, 0x42, 0x41, 0xf5, 0xbe},
    {0x03, 0x2a, 0x43, 0xb5, 0xac},
    {0x01, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x2a, 0x43, 0xb5, 0xac},
    {0x06, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x09, 0x8f},
    {0x04, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x09, 0x8f},
    {0x07, 0xc3, 0xb5, 0x40, 0x0b},
    {0x03, 0x92, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x92, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x06, 0x6c},
    {0x04, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x06, 0x6c},
    {0x56, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x20, 0x43, 0xb5, 0xac},
    {0x01, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x43, 0xb5, 0xac},
    {0x06, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x08, 0x44, 0x09, 0x7f},
    {0x04, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0x09, 0x7f},
    {0x08, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3a, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x49, 0x7f},
    {0x02, 0x3a, 0x43, 0xb5, 0xac},
    {0x05, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x81, 0x42, 0x01, 0xbe},
    {0x04, 0x04, 0x44, 0x49, 0x7f},
    {0x02, 0x81, 0x42, 0x01, 0xbe},
    {0x0c, 0x42, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x44, 0x09, 0x7f},
    {0x01, 0x02, 0x44, 0x49, 0x7f},
    {0x02, 0x0a, 0x44, 0x09, 0x7f},
    {0x06, 0x46, 0x02, 0x09, 0x8f},
    {0x03, 0x04, 0x43, 0x06, 0x6c},
    {0x04, 0x02, 0x44, 0x49, 0x7f},
    {0x02, 0x04, 0x43, 0x06, 0x6c},
    {0x07, 0xc1, 0x09, 0xf5, 0xff},
    {0x03, 0x02, 0x43, 0x06, 0x6c},
    {0x01, 0x07, 0x44, 0x49, 0x7f},
    {0x02, 0x02, 0x43, 0x06, 0x6c},
    {0x05, 0x46, 0x02, 0x09, 0x8f},
    {0x03, 0x07, 0x43, 0x06, 0x6c},
    {0x04, 0x07, 0x44, 0x49, 0x7f},
    {0x02, 0x07, 0x43, 0x06, 0x6c},
    {0xe7, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x42, 0xb5, 0x9b},
    {0x01, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x16, 0x42, 0xb5, 0x9b},
    {0x06, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x0e, 0x6f},
    {0x04, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x0e, 0x6f},
    {0x09, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x0e, 0x7f},
    {0x01, 0x03, 0x42, 0x4e, 0x7f},
    {0x02, 0x0b, 0x42, 0x0e, 0x7f},
    {0x05, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x0e, 0x6f},
    {0x04, 0x03, 0x42, 0x4e, 0x7f},
    {0x02, 0x05, 0x44, 0x0e, 0x6f},
    {0x0a, 0x47, 0x41, 0xf5, 0xbe},
    {0x03, 0x1a, 0x42, 0xb5, 0x9b},
    {0x01, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0xb5, 0x9b},
    {0x06, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x0e, 0x7f},
    {0x04, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x0e, 0x7f},
    {0x07, 0x4a, 0x03, 0xf5, 0xac},
    {0x03, 0x8a, 0x49, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x4e, 0x7f},
    {0x02, 0x8a, 0x49, 0xb5, 0xff},
    {0x05, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x0e, 0x6f},
    {0x04, 0x05, 0x42, 0x4e, 0x7f},
    {0x02, 0x06, 0x44, 0x0e, 0x6f},
    {0x50, 0x09, 0xf5, 0x00, 0xff},
    {0x03, 0x26, 0x43, 0xb5, 0xac},
    {0x01, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x26, 0x43, 0xb5, 0xac},
    {0x06, 0xc3, 0x09, 0xb5, 0xff},
    {0x03, 0x82, 0x47, 0x01, 0xbe},
    {0x04, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x01, 0xbe},
    {0x08, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0xb5, 0x9b},
    {0x01, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x19, 0x42, 0xb5, 0x9b},
    {0x05, 0xc3, 0x09, 0xb5, 0xff},
    {0x03, 0x0f, 0x42, 0x09, 0x8f},
    {0x04, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0x09, 0x8f},
    {0x40, 0x09, 0xf5, 0x00, 0xff},
    {0x03, 0x86, 0x49, 0xb5, 0xff},
    {0x01, 0x84, 0x49, 0xf5, 0xff},
    {0x02, 0x86, 0x49, 0xb5, 0xff},
    {0x06, 0xc1, 0x0e, 0xb5, 0xff},
    {0x03, 0x04, 0x44, 0x0e, 0x6f},
    {0x04, 0x84, 0x49, 0xf5, 0xff},
    {0x02, 0x04, 0x44, 0x0e, 0x6f},
    {0x07, 0x44, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x0e, 0x6f},
    {0x01, 0x06, 0x42, 0x4e, 0x7f},
    {0x02, 0x02, 0x44, 0x0e, 0x6f},
    {0x05, 0xc1, 0x0e, 0xb5, 0xff},
    {0x03, 0x07, 0x44, 0x0e, 0x6f},
    {0x04, 0x06, 0x42, 0x4e, 0x7f},
    {0x02, 0x07, 0x44, 0x0e, 0x6f},
    {0xc1, 0x43, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x09, 0x8f},
    {0x01, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0x09, 0x8f},
    {0x06, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x06, 0x6c},
    {0x04, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x06, 0x6c},
    {0x09, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0x49, 0x8f},
    {0x02, 0x12, 0x42, 0xb5, 0x9b},
    {0x05, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x06, 0x6c},
    {0x04, 0x08, 0x42, 0x49, 0x8f},
    {0x02, 0x05, 0x42, 0x06, 0x6c},
    {0x0b, 0x47, 0x41, 0xf5, 0xbe},
    {0x03, 0x15, 0x42, 0xb5, 0x9b},
    {0x01, 0x83, 0x4e, 0xf5, 0xff},
    {0x02, 0x15, 0x42, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0x09, 0x8f},
    {0x03, 0x11, 0x42, 0x09, 0x8f},
    {0x04, 0x83, 0x4e, 0xf5, 0xff},
    {0x02, 0x11, 0x42, 0x09, 0x8f},
    {0x07, 0x42, 0x02, 0xf5, 0x9b},
    {0x03, 0x84, 0x4e, 0xb5, 0xff},
    {0x01, 0x81, 0x46, 0x43, 0xce},
    {0x02, 0x84, 0x4e, 0xb5, 0xff},
    {0x05, 0x44, 0x02, 0x09, 0x8f},
    {0x03, 0x06, 0x42, 0x06, 0x6c},
    {0x04, 0x81, 0x46, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x06, 0x6c},
    {0x4e, 0x06, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0x09, 0x8f},
    {0x01, 0x0a, 0x42, 0x49, 0x8f},
    {0x02, 0x01, 0x42, 0x09, 0x8f},
    {0x06, 0x42, 0x02, 0x09, 0x8f},
    {0x03, 0x08, 0x42, 0x0e, 0x7f},
    {0x04, 0x0a, 0x42, 0x49, 0x8f},
    {0x02, 0x08, 0x42, 0x0e, 0x7f},
    {0x08, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x46, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0x4e, 0x7f},
    {0x02, 0x83, 0x46, 0x03, 0xce},
    {0x05, 0x42, 0x02, 0x09, 0x8f},
    {0x03, 0x81, 0x47, 0x01, 0xbe},
    {0x04, 0x04, 0x42, 0x4e, 0x7f},
    {0x02, 0x81, 0x47, 0x01, 0xbe},
    {0x0c, 0x47, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0x0e, 0x7f},
    {0x01, 0x02, 0x42, 0x4e, 0x7f},
    {0x02, 0x0a, 0x42, 0x0e, 0x7f},
    {0x06, 0x47, 0x02, 0x09, 0x8f},
    {0x03, 0x04, 0x42, 0x06, 0x6c},
    {0x04, 0x02, 0x42, 0x4e, 0x7f},
    {0x02, 0x04, 0x42, 0x06, 0x6c},
    {0x07, 0x47, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x06, 0x6c},
    {0x01, 0x07, 0x42, 0x4e, 0x7f},
    {0x02, 0x02, 0x42, 0x06, 0x6c},
    {0x05, 0x47, 0x02, 0x09, 0x8f},
    {0x03, 0x07, 0x42, 0x06, 0x6c},
    {0x04, 0x07, 0x42, 0x4e, 0x7f},
    {0x02, 0x07, 0x42, 0x06, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xb4, 0xf5, 0x00, 0x0c},
    {0x01, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0xb4, 0xf5, 0x00, 0x0c},
    {0x06, 0xdd, 0xb5, 0x00, 0x0f},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0x56, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0xf5, 0x00, 0x77},
    {0x01, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x0b, 0xf5, 0x00, 0x77},
    {0x05, 0xdd, 0xb5, 0x00, 0x0f},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x4d, 0xf5, 0x40, 0xdd},
    {0x03, 0x0c, 0x47, 0xb5, 0x8d},
    {0x01, 0x0b, 0x47, 0xf5, 0x8d},
    {0x02, 0x0c, 0x47, 0xb5, 0x8d},
    {0x06, 0x43, 0x07, 0xb5, 0x8d},
    {0x03, 0x09, 0xf5, 0x00, 0x77},
    {0x04, 0x0b, 0x47, 0xf5, 0x8d},
    {0x02, 0x09, 0xf5, 0x00, 0x77},
    {0x07, 0x5e, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x53, 0xb5, 0xff},
    {0x01, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x9a, 0x53, 0xb5, 0xff},
    {0x05, 0x43, 0x07, 0xb5, 0x8d},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0x13, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x45, 0xb5, 0x9d},
    {0x01, 0x0c, 0x45, 0xf5, 0x9d},
    {0x02, 0x14, 0x45, 0xb5, 0x9d},
    {0x06, 0x4b, 0x05, 0xb5, 0x9d},
    {0x03, 0x82, 0x4d, 0xb5, 0xdd},
    {0x04, 0x0c, 0x45, 0xf5, 0x9d},
    {0x02, 0x82, 0x4d, 0xb5, 0xdd},
    {0x08, 0x56, 0xf5, 0x00, 0xdd},
    {0x03, 0x18, 0x45, 0xb5, 0x9d},
    {0x01, 0x09, 0x47, 0xf5, 0x8d},
    {0x02, 0x18, 0x45, 0xb5, 0x9d},
    {0x05, 0x4b, 0x05, 0xb5, 0x9d},
    {0x03, 0x0e, 0x47, 0xb5, 0x8d},
    {0x04, 0x09, 0x47, 0xf5, 0x8d},
    {0x02, 0x0e, 0x47, 0xb5, 0x8d},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x45, 0xb5, 0x9d},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x45, 0xb5, 0x9d},
    {0x06, 0x45, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0x45, 0xb5, 0x9d},
    {0x01, 0x14, 0x44, 0xf5, 0xad},
    {0x02, 0x17, 0x45, 0xb5, 0x9d},
    {0x06, 0x4c, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x43, 0x13, 0x6f},
    {0x04, 0x14, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x43, 0x13, 0x6f},
    {0x09, 0x43, 0x44, 0xb5, 0xad},
    {0x03, 0x1b, 0x45, 0xb5, 0x9d},
    {0x01, 0x82, 0x53, 0xf5, 0xff},
    {0x02, 0x1b, 0x45, 0xb5, 0x9d},
    {0x05, 0x4c, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x43, 0x13, 0x6f},
    {0x04, 0x82, 0x53, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x13, 0x6f},
    {0x0b, 0x4d, 0xf5, 0x40, 0xdd},
    {0x03, 0x27, 0x44, 0xb5, 0xad},
    {0x01, 0x18, 0x44, 0xf5, 0xad},
    {0x02, 0x27, 0x44, 0xb5, 0xad},
    {0x06, 0x49, 0x05, 0xb5, 0x9d},
    {0x03, 0x10, 0x47, 0xb5, 0x8d},
    {0x04, 0x18, 0x44, 0xf5, 0xad},
    {0x02, 0x10, 0x47, 0xb5, 0x8d},
    {0x07, 0x4b, 0x04, 0xf5, 0xad},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0x45, 0xf5, 0x9d},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0x05, 0xb5, 0x9d},
    {0x03, 0x06, 0x43, 0x13, 0x6f},
    {0x04, 0x0e, 0x45, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x13, 0x6f},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0x45, 0xb5, 0x9d},
    {0x01, 0x1c, 0x44, 0xf5, 0xad},
    {0x02, 0x13, 0x45, 0xb5, 0x9d},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0xf5, 0x00, 0x77},
    {0x04, 0x1c, 0x44, 0xf5, 0xad},
    {0x02, 0x08, 0xf5, 0x00, 0x77},
    {0x08, 0x43, 0x44, 0xb5, 0xad},
    {0x03, 0x37, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x37, 0x44, 0xb5, 0xad},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x4d, 0xb5, 0xdd},
    {0x04, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x81, 0x4d, 0xb5, 0xdd},
    {0x0c, 0x4d, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0xf5, 0x00, 0x77},
    {0x01, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x0a, 0xf5, 0x00, 0x77},
    {0x06, 0x46, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0x43, 0x13, 0x6f},
    {0x04, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x04, 0x43, 0x13, 0x6f},
    {0x07, 0x45, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x43, 0x13, 0x6f},
    {0x01, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0x43, 0x13, 0x6f},
    {0x05, 0x46, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0x43, 0x13, 0x6f},
    {0x04, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0x43, 0x13, 0x6f},
    {0xdc, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x2d, 0x44, 0xb5, 0xad},
    {0x01, 0x17, 0x44, 0xf5, 0xad},
    {0x02, 0x2d, 0x44, 0xb5, 0xad},
    {0x06, 0x54, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0x42, 0xb5, 0xbd},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x35, 0x44, 0xb5, 0xad},
    {0x01, 0x1b, 0x44, 0xf5, 0xad},
    {0x02, 0x35, 0x44, 0xb5, 0xad},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x44, 0xf5, 0xad},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0x02, 0xf5, 0xbd},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x23, 0x44, 0xb5, 0xad},
    {0x01, 0x27, 0x42, 0xf5, 0xbd},
    {0x02, 0x23, 0x44, 0xb5, 0xad},
    {0x06, 0x58, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x43, 0x02, 0xbd},
    {0x04, 0x27, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x43, 0x02, 0xbd},
    {0x08, 0x4b, 0x42, 0xb5, 0xbd},
    {0x03, 0x33, 0x44, 0xb5, 0xad},
    {0x01, 0x10, 0x45, 0xf5, 0x9d},
    {0x02, 0x33, 0x44, 0xb5, 0xad},
    {0x05, 0x58, 0x02, 0xb5, 0xbd},
    {0x03, 0x0f, 0x47, 0xb5, 0x8d},
    {0x04, 0x10, 0x45, 0xf5, 0x9d},
    {0x02, 0x0f, 0x47, 0xb5, 0x8d},
    {0x54, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x3f, 0x44, 0xb5, 0xad},
    {0x01, 0x89, 0x45, 0xf5, 0xff},
    {0x02, 0x3f, 0x44, 0xb5, 0xad},
    {0x06, 0x4e, 0x04, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0x45, 0xf5, 0xff},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x04, 0xf5, 0xad},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x04, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x0d, 0x47, 0xb5, 0x8d},
    {0x01, 0x13, 0x44, 0xf5, 0xad},
    {0x02, 0x0d, 0x47, 0xb5, 0x8d},
    {0x06, 0x5c, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x42, 0x13, 0x6f},
    {0x04, 0x13, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x42, 0x13, 0x6f},
    {0x09, 0x45, 0x44, 0xb5, 0xad},
    {0x03, 0x97, 0x45, 0xb5, 0xff},
    {0x01, 0x08, 0x47, 0xf5, 0x8d},
    {0x02, 0x97, 0x45, 0xb5, 0xff},
    {0x05, 0x5c, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x42, 0x13, 0x6f},
    {0x04, 0x08, 0x47, 0xf5, 0x8d},
    {0x02, 0x05, 0x42, 0x13, 0x6f},
    {0x0b, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x2b, 0x44, 0xb5, 0xad},
    {0x01, 0x37, 0x42, 0xf5, 0xbd},
    {0x02, 0x2b, 0x44, 0xb5, 0xad},
    {0x06, 0x44, 0x07, 0xb5, 0x8d},
    {0x03, 0x11, 0x47, 0xb5, 0x8d},
    {0x04, 0x37, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x47, 0xb5, 0x8d},
    {0x07, 0xda, 0x05, 0xf5, 0xff},
    {0x03, 0x93, 0x45, 0xb5, 0xff},
    {0x01, 0x81, 0x53, 0xf5, 0xff},
    {0x02, 0x93, 0x45, 0xb5, 0xff},
    {0x05, 0x44, 0x07, 0xb5, 0x8d},
    {0x03, 0x06, 0x42, 0x13, 0x6f},
    {0x04, 0x81, 0x53, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x13, 0x6f},
    {0x4e, 0x13, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x47, 0xb5, 0x8d},
    {0x01, 0x0a, 0x47, 0xf5, 0x8d},
    {0x02, 0x01, 0x47, 0xb5, 0x8d},
    {0x06, 0x42, 0x07, 0xb5, 0x8d},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x47, 0xf5, 0x8d},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0x53, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0x53, 0xb5, 0xff},
    {0x05, 0x42, 0x07, 0xb5, 0x8d},
    {0x03, 0x81, 0x43, 0x02, 0xbd},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0x02, 0xbd},
    {0x0c, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0x42, 0x13, 0x6f},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x13, 0x6f},
    {0x07, 0x46, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x13, 0x6f},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x13, 0x6f},
    {0x05, 0x47, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0x42, 0x13, 0x6f},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x13, 0x6f},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x44, 0xb5, 0xad},
    {0x01, 0x2d, 0x42, 0xf5, 0xbd},
    {0x02, 0x1d, 0x44, 0xb5, 0xad},
    {0x06, 0x57, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x5a, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x62, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x48, 0xb5, 0xdd},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x48, 0xb5, 0xdd},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x08, 0xb5, 0x00, 0xdd},
    {0x03, 0x21, 0x44, 0xb5, 0xad},
    {0x01, 0x35, 0x42, 0xf5, 0xbd},
    {0x02, 0x21, 0x44, 0xb5, 0xad},
    {0x06, 0x5b, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0xf5, 0x00, 0x07},
    {0x04, 0x35, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0xf5, 0x00, 0x07},
    {0x08, 0x5a, 0xf5, 0x00, 0xdd},
    {0x03, 0x31, 0x44, 0xb5, 0xad},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0x44, 0xb5, 0xad},
    {0x05, 0x5b, 0x02, 0xb5, 0xbd},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0xc3, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x3d, 0x44, 0xb5, 0xad},
    {0x01, 0x87, 0x45, 0xf5, 0xff},
    {0x02, 0x3d, 0x44, 0xb5, 0xad},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0x45, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x95, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x2f, 0x44, 0xb5, 0xad},
    {0x01, 0x23, 0x42, 0xf5, 0xbd},
    {0x02, 0x2f, 0x44, 0xb5, 0xad},
    {0x06, 0x68, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x08, 0x6d},
    {0x04, 0x23, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x08, 0x6d},
    {0x09, 0x49, 0x42, 0xb5, 0xbd},
    {0x03, 0x3b, 0x44, 0xb5, 0xad},
    {0x01, 0x82, 0x48, 0xf5, 0xdd},
    {0x02, 0x3b, 0x44, 0xb5, 0xad},
    {0x05, 0x68, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x08, 0x6d},
    {0x04, 0x82, 0x48, 0xf5, 0xdd},
    {0x02, 0x05, 0x43, 0x08, 0x6d},
    {0x0b, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x29, 0x44, 0xb5, 0xad},
    {0x01, 0x33, 0x42, 0xf5, 0xbd},
    {0x02, 0x29, 0x44, 0xb5, 0xad},
    {0x06, 0x50, 0x04, 0xb5, 0xad},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x72, 0xb5, 0x40, 0xdd},
    {0x03, 0x8f, 0x45, 0xb5, 0xff},
    {0x01, 0x0f, 0x45, 0xf5, 0x9d},
    {0x02, 0x8f, 0x45, 0xb5, 0xff},
    {0x05, 0x50, 0x04, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x08, 0x6d},
    {0x04, 0x0f, 0x45, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x08, 0x6d},
    {0x5f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x44, 0xb5, 0xad},
    {0x01, 0x3f, 0x42, 0xf5, 0xbd},
    {0x02, 0x1f, 0x44, 0xb5, 0xad},
    {0x06, 0xce, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0x42, 0xb5, 0xbd},
    {0x03, 0x39, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0x44, 0xb5, 0xad},
    {0x05, 0xce, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xf5, 0x00, 0x07},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0xf5, 0x00, 0x07},
    {0x0c, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x08, 0x6d},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x08, 0x6d},
    {0x07, 0x4e, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x08, 0x6d},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x08, 0x6d},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x08, 0x6d},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x08, 0x6d},
    {0xdd, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x45, 0xb5, 0x9d},
    {0x01, 0x0d, 0x45, 0xf5, 0x9d},
    {0x02, 0x16, 0x45, 0xb5, 0x9d},
    {0x06, 0x53, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x45, 0xf5, 0x9d},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xcb, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x45, 0xb5, 0x9d},
    {0x01, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x45, 0xb5, 0x9d},
    {0x06, 0x48, 0x05, 0xb5, 0x9d},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x7e, 0xb5, 0x40, 0xdd},
    {0x03, 0x8b, 0x45, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0x45, 0xb5, 0xff},
    {0x05, 0x48, 0x05, 0xb5, 0x9d},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x7a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x44, 0xb5, 0xad},
    {0x01, 0x2b, 0x42, 0xf5, 0xbd},
    {0x02, 0x25, 0x44, 0xb5, 0xad},
    {0x06, 0x78, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x45, 0x02, 0xbd},
    {0x04, 0x2b, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x45, 0x02, 0xbd},
    {0x08, 0xcb, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x45, 0xb5, 0x9d},
    {0x01, 0x11, 0x45, 0xf5, 0x9d},
    {0x02, 0x19, 0x45, 0xb5, 0x9d},
    {0x05, 0x78, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0x45, 0xf5, 0x9d},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x8f, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0x45, 0xf5, 0x9d},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0x05, 0xb5, 0x9d},
    {0x03, 0x03, 0x42, 0x08, 0x6d},
    {0x04, 0x01, 0x45, 0xf5, 0x9d},
    {0x02, 0x03, 0x42, 0x08, 0x6d},
    {0x09, 0x46, 0x44, 0xb5, 0xad},
    {0x03, 0x12, 0x45, 0xb5, 0x9d},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0x45, 0xb5, 0x9d},
    {0x05, 0x4a, 0x05, 0xb5, 0x9d},
    {0x03, 0x05, 0x42, 0x08, 0x6d},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x08, 0x6d},
    {0x0b, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x45, 0xb5, 0x9d},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x45, 0xb5, 0x9d},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0x05, 0xf5, 0x9d},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x48, 0xf5, 0xdd},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x08, 0x6d},
    {0x04, 0x81, 0x48, 0xf5, 0xdd},
    {0x02, 0x06, 0x42, 0x08, 0x6d},
    {0x4e, 0x08, 0xb5, 0x00, 0xdd},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0x48, 0xb5, 0xdd},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x48, 0xb5, 0xdd},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0x02, 0xbd},
    {0x0c, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x08, 0x6d},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x08, 0x6d},
    {0x07, 0x47, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x08, 0x6d},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x08, 0x6d},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x08, 0x6d},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x08, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xa3, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x42, 0xf5, 0xbd},
    {0x02, 0xa3, 0xf5, 0x00, 0x0e},
    {0x06, 0x6e, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x48, 0xb5, 0x6c},
    {0x04, 0x1d, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x48, 0xb5, 0x6c},
    {0x09, 0x65, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0x05, 0x7f},
    {0x01, 0x03, 0x46, 0x45, 0x7f},
    {0x02, 0x0b, 0x46, 0x05, 0x7f},
    {0x05, 0x6e, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x48, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0x45, 0x7f},
    {0x02, 0x05, 0x48, 0xb5, 0x6c},
    {0x0a, 0x6b, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x41, 0x05, 0x8f},
    {0x01, 0x0b, 0x41, 0x45, 0x8f},
    {0x02, 0x0c, 0x41, 0x05, 0x8f},
    {0x06, 0x43, 0x01, 0x05, 0x8f},
    {0x03, 0x09, 0x46, 0x05, 0x7f},
    {0x04, 0x0b, 0x41, 0x45, 0x8f},
    {0x02, 0x09, 0x46, 0x05, 0x7f},
    {0x07, 0x70, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x46, 0x45, 0x7f},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x01, 0x05, 0x8f},
    {0x03, 0x06, 0x48, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0x45, 0x7f},
    {0x02, 0x06, 0x48, 0xb5, 0x6c},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x43, 0x05, 0x9f},
    {0x01, 0x0c, 0x43, 0x45, 0x9f},
    {0x02, 0x14, 0x43, 0x05, 0x9f},
    {0x06, 0x4b, 0x03, 0x05, 0x9f},
    {0x03, 0x82, 0x6b, 0xb5, 0xff},
    {0x04, 0x0c, 0x43, 0x45, 0x9f},
    {0x02, 0x82, 0x6b, 0xb5, 0xff},
    {0x08, 0x65, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0x05, 0x9f},
    {0x01, 0x09, 0x41, 0x45, 0x8f},
    {0x02, 0x18, 0x43, 0x05, 0x9f},
    {0x05, 0x4b, 0x03, 0x05, 0x9f},
    {0x03, 0x0e, 0x41, 0x05, 0x8f},
    {0x04, 0x09, 0x41, 0x45, 0x8f},
    {0x02, 0x0e, 0x41, 0x05, 0x8f},
    {0x4f, 0x04, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x43, 0x05, 0x9f},
    {0x01, 0x9a, 0x44, 0xf5, 0xdd},
    {0x02, 0x1c, 0x43, 0x05, 0x9f},
    {0x06, 0x45, 0x01, 0x05, 0x8f},
    {0x03, 0x04, 0x48, 0xb5, 0x6c},
    {0x04, 0x9a, 0x44, 0xf5, 0xdd},
    {0x02, 0x04, 0x48, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0x45, 0x9f},
    {0x03, 0x02, 0x48, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0x45, 0x7f},
    {0x02, 0x02, 0x48, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0x05, 0x8f},
    {0x03, 0x07, 0x48, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0x45, 0x7f},
    {0x02, 0x07, 0x48, 0xb5, 0x6c},
    {0x8b, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x17, 0x43, 0x05, 0x9f},
    {0x01, 0x21, 0x42, 0xf5, 0xbd},
    {0x02, 0x17, 0x43, 0x05, 0x9f},
    {0x06, 0x76, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x21, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0xc2, 0x45, 0xb5, 0xff},
    {0x03, 0x1b, 0x43, 0x05, 0x9f},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x43, 0x05, 0x9f},
    {0x05, 0x76, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x6b, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x44, 0xb5, 0xad},
    {0x01, 0x31, 0x42, 0xf5, 0xbd},
    {0x02, 0x28, 0x44, 0xb5, 0xad},
    {0x06, 0x49, 0x03, 0x05, 0x9f},
    {0x03, 0x10, 0x41, 0x05, 0x8f},
    {0x04, 0x31, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x41, 0x05, 0x8f},
    {0x07, 0x7c, 0xb5, 0x40, 0xdd},
    {0x03, 0x8d, 0x45, 0xb5, 0xff},
    {0x01, 0x0e, 0x43, 0x45, 0x9f},
    {0x02, 0x8d, 0x45, 0xb5, 0xff},
    {0x05, 0x49, 0x03, 0x05, 0x9f},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x43, 0x45, 0x9f},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x71, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0x05, 0x9f},
    {0x01, 0x3d, 0x42, 0xf5, 0xbd},
    {0x02, 0x13, 0x43, 0x05, 0x9f},
    {0x06, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0x05, 0x7f},
    {0x04, 0x3d, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x46, 0x05, 0x7f},
    {0x08, 0xc2, 0x45, 0xb5, 0xff},
    {0x03, 0x38, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x46, 0x45, 0x7f},
    {0x02, 0x38, 0x44, 0xb5, 0xad},
    {0x05, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x6b, 0xb5, 0xff},
    {0x04, 0x04, 0x46, 0x45, 0x7f},
    {0x02, 0x81, 0x6b, 0xb5, 0xff},
    {0x0c, 0x6b, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x46, 0x05, 0x7f},
    {0x01, 0x02, 0x46, 0x45, 0x7f},
    {0x02, 0x0a, 0x46, 0x05, 0x7f},
    {0x06, 0x46, 0x01, 0x05, 0x8f},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x46, 0x45, 0x7f},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x03, 0x45, 0x9f},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x46, 0x45, 0x7f},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x01, 0x05, 0x8f},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x46, 0x45, 0x7f},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe2, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x44, 0xb5, 0xad},
    {0x01, 0x2f, 0x42, 0xf5, 0xbd},
    {0x02, 0x2e, 0x44, 0xb5, 0xad},
    {0x06, 0x64, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x04, 0x6d},
    {0x04, 0x2f, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x04, 0x6d},
    {0x09, 0x59, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x43, 0x04, 0x7d},
    {0x01, 0x03, 0x43, 0x44, 0x7d},
    {0x02, 0x0b, 0x43, 0x04, 0x7d},
    {0x05, 0x64, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x04, 0x6d},
    {0x04, 0x03, 0x43, 0x44, 0x7d},
    {0x02, 0x05, 0x41, 0x04, 0x6d},
    {0x0a, 0x51, 0xf5, 0x40, 0xdd},
    {0x03, 0x36, 0x44, 0xb5, 0xad},
    {0x01, 0x3b, 0x42, 0xf5, 0xbd},
    {0x02, 0x36, 0x44, 0xb5, 0xad},
    {0x06, 0xc2, 0x04, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x04, 0x7d},
    {0x04, 0x3b, 0x42, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x04, 0x7d},
    {0x07, 0x6a, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x44, 0x7d},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x04, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x04, 0x6d},
    {0x04, 0x05, 0x43, 0x44, 0x7d},
    {0x02, 0x06, 0x41, 0x04, 0x6d},
    {0x6d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x44, 0xb5, 0xad},
    {0x01, 0x29, 0x42, 0xf5, 0xbd},
    {0x02, 0x24, 0x44, 0xb5, 0xad},
    {0x06, 0x74, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x51, 0xb5, 0xdd},
    {0x04, 0x29, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x51, 0xb5, 0xdd},
    {0x08, 0x59, 0xf5, 0x00, 0xdd},
    {0x03, 0x34, 0x44, 0xb5, 0xad},
    {0x01, 0x10, 0x43, 0x45, 0x9f},
    {0x02, 0x34, 0x44, 0xb5, 0xad},
    {0x05, 0x74, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x41, 0x05, 0x8f},
    {0x04, 0x10, 0x43, 0x45, 0x9f},
    {0x02, 0x0f, 0x41, 0x05, 0x8f},
    {0x65, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x44, 0xb5, 0xad},
    {0x01, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x44, 0xb5, 0xad},
    {0x06, 0x4f, 0x04, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x04, 0x6d},
    {0x04, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x04, 0x6d},
    {0x07, 0x50, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x04, 0x6d},
    {0x01, 0x06, 0x43, 0x44, 0x7d},
    {0x02, 0x02, 0x41, 0x04, 0x6d},
    {0x05, 0x4f, 0x04, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x04, 0x6d},
    {0x04, 0x06, 0x43, 0x44, 0x7d},
    {0x02, 0x07, 0x41, 0x04, 0x6d},
    {0xc7, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x41, 0x05, 0x8f},
    {0x01, 0x1f, 0x42, 0xf5, 0xbd},
    {0x02, 0x0d, 0x41, 0x05, 0x8f},
    {0x06, 0x40, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x1f, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x4f, 0x43, 0xb5, 0xce},
    {0x03, 0x99, 0x45, 0xb5, 0xff},
    {0x01, 0x08, 0x41, 0x45, 0x8f},
    {0x02, 0x99, 0x45, 0xb5, 0xff},
    {0x05, 0x40, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x41, 0x45, 0x8f},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x51, 0xf5, 0x40, 0xdd},
    {0x03, 0x2c, 0x44, 0xb5, 0xad},
    {0x01, 0x39, 0x42, 0xf5, 0xbd},
    {0x02, 0x2c, 0x44, 0xb5, 0xad},
    {0x06, 0x44, 0x01, 0x05, 0x8f},
    {0x03, 0x11, 0x41, 0x05, 0x8f},
    {0x04, 0x39, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x41, 0x05, 0x8f},
    {0x07, 0xd1, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0x45, 0xb5, 0xff},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x95, 0x45, 0xb5, 0xff},
    {0x05, 0x44, 0x01, 0x05, 0x8f},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x41, 0x05, 0x8f},
    {0x01, 0x0a, 0x41, 0x45, 0x8f},
    {0x02, 0x01, 0x41, 0x05, 0x8f},
    {0x06, 0x42, 0x01, 0x05, 0x8f},
    {0x03, 0x08, 0x43, 0x04, 0x7d},
    {0x04, 0x0a, 0x41, 0x45, 0x8f},
    {0x02, 0x08, 0x43, 0x04, 0x7d},
    {0x08, 0x4f, 0x43, 0xb5, 0xce},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0x44, 0x7d},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x01, 0x05, 0x8f},
    {0x03, 0x81, 0x51, 0xb5, 0xdd},
    {0x04, 0x04, 0x43, 0x44, 0x7d},
    {0x02, 0x81, 0x51, 0xb5, 0xdd},
    {0x0c, 0x51, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x43, 0x04, 0x7d},
    {0x01, 0x02, 0x43, 0x44, 0x7d},
    {0x02, 0x0a, 0x43, 0x04, 0x7d},
    {0x06, 0x47, 0x01, 0x05, 0x8f},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0x44, 0x7d},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x03, 0x45, 0x9f},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0x44, 0x7d},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x01, 0x05, 0x8f},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0x44, 0x7d},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xf4, 0x44, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0x44, 0xb5, 0xad},
    {0x01, 0x16, 0x44, 0xf5, 0xad},
    {0x02, 0x1e, 0x44, 0xb5, 0xad},
    {0x06, 0x4d, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0xc5, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x60, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xc1, 0xb5, 0x0d},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0xc1, 0xb5, 0x0d},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x81, 0xb5, 0x00, 0x0d},
    {0x03, 0x22, 0x44, 0xb5, 0xad},
    {0x01, 0x1a, 0x44, 0xf5, 0xad},
    {0x02, 0x22, 0x44, 0xb5, 0xad},
    {0x06, 0xdb, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xf5, 0x00, 0x07},
    {0x04, 0x1a, 0x44, 0xf5, 0xad},
    {0x02, 0x82, 0xf5, 0x00, 0x07},
    {0x08, 0xc5, 0xf5, 0x00, 0x0e},
    {0x03, 0x32, 0x44, 0xb5, 0xad},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0x44, 0xb5, 0xad},
    {0x05, 0xdb, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x44, 0xb5, 0xad},
    {0x01, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x44, 0xb5, 0xad},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0x04, 0xf5, 0xad},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x99, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x30, 0x44, 0xb5, 0xad},
    {0x01, 0x25, 0x42, 0xf5, 0xbd},
    {0x02, 0x30, 0x44, 0xb5, 0xad},
    {0x06, 0x6c, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x81, 0x6d},
    {0x04, 0x25, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x81, 0x6d},
    {0x09, 0x44, 0x44, 0xb5, 0xad},
    {0x03, 0x3c, 0x44, 0xb5, 0xad},
    {0x01, 0x82, 0xc1, 0xf5, 0x0d},
    {0x02, 0x3c, 0x44, 0xb5, 0xad},
    {0x05, 0x6c, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x81, 0x6d},
    {0x04, 0x82, 0xc1, 0xf5, 0x0d},
    {0x02, 0x05, 0x43, 0x81, 0x6d},
    {0x0b, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x2a, 0x44, 0xb5, 0xad},
    {0x01, 0x19, 0x44, 0xf5, 0xad},
    {0x02, 0x2a, 0x44, 0xb5, 0xad},
    {0x06, 0x51, 0x04, 0xb5, 0xad},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0x44, 0xf5, 0xad},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x7a, 0xb5, 0x40, 0xdd},
    {0x03, 0x91, 0x45, 0xb5, 0xff},
    {0x01, 0x0f, 0x43, 0x45, 0x9f},
    {0x02, 0x91, 0x45, 0xb5, 0xff},
    {0x05, 0x51, 0x04, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x81, 0x6d},
    {0x04, 0x0f, 0x43, 0x45, 0x9f},
    {0x02, 0x06, 0x43, 0x81, 0x6d},
    {0x69, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x44, 0xb5, 0xad},
    {0x01, 0x85, 0x45, 0xf5, 0xff},
    {0x02, 0x20, 0x44, 0xb5, 0xad},
    {0x06, 0xd6, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0x45, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0x44, 0xb5, 0xad},
    {0x03, 0x3a, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0x44, 0xb5, 0xad},
    {0x05, 0xd6, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xf5, 0x00, 0x07},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xf5, 0x00, 0x07},
    {0x0c, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x81, 0x6d},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x81, 0x6d},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x81, 0x6d},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x81, 0x6d},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x81, 0x6d},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x81, 0x6d},
    {0xe6, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x43, 0x05, 0x9f},
    {0x01, 0x0d, 0x43, 0x45, 0x9f},
    {0x02, 0x16, 0x43, 0x05, 0x9f},
    {0x06, 0x41, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x44, 0x04, 0x6d},
    {0x04, 0x0d, 0x43, 0x45, 0x9f},
    {0x02, 0x03, 0x44, 0x04, 0x6d},
    {0x09, 0x42, 0x44, 0xb5, 0xad},
    {0x03, 0x0b, 0x42, 0x04, 0x7d},
    {0x01, 0x03, 0x42, 0x44, 0x7d},
    {0x02, 0x0b, 0x42, 0x04, 0x7d},
    {0x05, 0x41, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x44, 0x04, 0x6d},
    {0x04, 0x03, 0x42, 0x44, 0x7d},
    {0x02, 0x05, 0x44, 0x04, 0x6d},
    {0x0a, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x43, 0x05, 0x9f},
    {0x01, 0x12, 0x44, 0xf5, 0xad},
    {0x02, 0x1a, 0x43, 0x05, 0x9f},
    {0x06, 0x48, 0x03, 0x05, 0x9f},
    {0x03, 0x09, 0x42, 0x04, 0x7d},
    {0x04, 0x12, 0x44, 0xf5, 0xad},
    {0x02, 0x09, 0x42, 0x04, 0x7d},
    {0x07, 0x4a, 0x04, 0xf5, 0xad},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x44, 0x7d},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0x05, 0x9f},
    {0x03, 0x06, 0x44, 0x04, 0x6d},
    {0x04, 0x05, 0x42, 0x44, 0x7d},
    {0x02, 0x06, 0x44, 0x04, 0x6d},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0x44, 0xb5, 0xad},
    {0x01, 0x15, 0x44, 0xf5, 0xad},
    {0x02, 0x26, 0x44, 0xb5, 0xad},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0x02, 0xbd},
    {0x04, 0x15, 0x44, 0xf5, 0xad},
    {0x02, 0x82, 0x46, 0x02, 0xbd},
    {0x08, 0x42, 0x44, 0xb5, 0xad},
    {0x03, 0x19, 0x43, 0x05, 0x9f},
    {0x01, 0x11, 0x43, 0x45, 0x9f},
    {0x02, 0x19, 0x43, 0x05, 0x9f},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0x45, 0x9f},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x04, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x04, 0x6d},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x04, 0x6d},
    {0x07, 0x44, 0x03, 0x45, 0x9f},
    {0x03, 0x02, 0x44, 0x04, 0x6d},
    {0x01, 0x06, 0x42, 0x44, 0x7d},
    {0x02, 0x02, 0x44, 0x04, 0x6d},
    {0x05, 0xc1, 0x04, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x04, 0x6d},
    {0x04, 0x06, 0x42, 0x44, 0x7d},
    {0x02, 0x07, 0x44, 0x04, 0x6d},
    {0xc1, 0x44, 0xb5, 0x40, 0x0d},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0x45, 0x9f},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0x05, 0x9f},
    {0x03, 0x03, 0x42, 0x81, 0x6d},
    {0x04, 0x01, 0x43, 0x45, 0x9f},
    {0x02, 0x03, 0x42, 0x81, 0x6d},
    {0x09, 0x47, 0x44, 0xb5, 0xad},
    {0x03, 0x12, 0x43, 0x05, 0x9f},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0x05, 0x9f},
    {0x05, 0x4a, 0x03, 0x05, 0x9f},
    {0x03, 0x05, 0x42, 0x81, 0x6d},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x81, 0x6d},
    {0x0b, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x43, 0x05, 0x9f},
    {0x01, 0x83, 0x44, 0xf5, 0xdd},
    {0x02, 0x15, 0x43, 0x05, 0x9f},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x44, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0x45, 0x9f},
    {0x03, 0x84, 0x44, 0xb5, 0xdd},
    {0x01, 0x81, 0xc1, 0xf5, 0x0d},
    {0x02, 0x84, 0x44, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x81, 0x6d},
    {0x04, 0x81, 0xc1, 0xf5, 0x0d},
    {0x02, 0x06, 0x42, 0x81, 0x6d},
    {0x4e, 0x81, 0xb5, 0x00, 0x0d},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x04, 0x7d},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x04, 0x7d},
    {0x08, 0x47, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0xc1, 0xb5, 0x0d},
    {0x01, 0x04, 0x42, 0x44, 0x7d},
    {0x02, 0x83, 0xc1, 0xb5, 0x0d},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0x44, 0x7d},
    {0x02, 0x81, 0x46, 0x02, 0xbd},
    {0x0c, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x04, 0x7d},
    {0x01, 0x02, 0x42, 0x44, 0x7d},
    {0x02, 0x0a, 0x42, 0x04, 0x7d},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x81, 0x6d},
    {0x04, 0x02, 0x42, 0x44, 0x7d},
    {0x02, 0x04, 0x42, 0x81, 0x6d},
    {0x07, 0x47, 0x03, 0x45, 0x9f},
    {0x03, 0x02, 0x42, 0x81, 0x6d},
    {0x01, 0x07, 0x42, 0x44, 0x7d},
    {0x02, 0x02, 0x42, 0x81, 0x6d},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x81, 0x6d},
    {0x04, 0x07, 0x42, 0x44, 0x7d},
    {0x02, 0x07, 0x42, 0x81, 0x6d},
    {0xf4, 0x45, 0xf5, 0x40, 0x0f},
    {0x03, 0xb4, 0x45, 0xb5, 0xff},
    {0x01, 0xa5, 0xf5, 0x40, 0x0f},
    {0x02, 0xb4, 0x45, 0xb5, 0xff},
    {0x06, 0x5e, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x4c, 0xb5, 0x6d},
    {0x04, 0xa5, 0xf5, 0x40, 0x0f},
    {0x02, 0x03, 0x4c, 0xb5, 0x6d},
    {0x09, 0x4d, 0x43, 0xb5, 0xce},
    {0x03, 0x0b, 0x47, 0xb5, 0x7c},
    {0x01, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x0b, 0x47, 0xb5, 0x7c},
    {0x05, 0x5e, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x4c, 0xb5, 0x6d},
    {0x04, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x05, 0x4c, 0xb5, 0x6d},
    {0x0a, 0x41, 0xf5, 0x40, 0xdd},
    {0x03, 0x0c, 0x45, 0xb5, 0x8c},
    {0x01, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x0c, 0x45, 0xb5, 0x8c},
    {0x06, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x09, 0x47, 0xb5, 0x7c},
    {0x04, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x09, 0x47, 0xb5, 0x7c},
    {0x07, 0x56, 0x03, 0xf5, 0xce},
    {0x03, 0x9a, 0x4a, 0xb5, 0xdd},
    {0x01, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x9a, 0x4a, 0xb5, 0xdd},
    {0x05, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x4c, 0xb5, 0x6d},
    {0x04, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x06, 0x4c, 0xb5, 0x6d},
    {0x4d, 0x0a, 0xb5, 0x00, 0xdd},
    {0x03, 0x14, 0x44, 0xb5, 0x9c},
    {0x01, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x14, 0x44, 0xb5, 0x9c},
    {0x06, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x82, 0x41, 0xb5, 0xdd},
    {0x04, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x82, 0x41, 0xb5, 0xdd},
    {0x08, 0x4d, 0x43, 0xb5, 0xce},
    {0x03, 0x18, 0x44, 0xb5, 0x9c},
    {0x01, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x18, 0x44, 0xb5, 0x9c},
    {0x05, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x0e, 0x45, 0xb5, 0x8c},
    {0x04, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x0e, 0x45, 0xb5, 0x8c},
    {0x4f, 0x02, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x44, 0xb5, 0x9c},
    {0x01, 0x9a, 0x42, 0xf5, 0xdd},
    {0x02, 0x1c, 0x44, 0xb5, 0x9c},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x4c, 0xb5, 0x6d},
    {0x04, 0x9a, 0x42, 0xf5, 0xdd},
    {0x02, 0x04, 0x4c, 0xb5, 0x6d},
    {0x07, 0x43, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x4c, 0xb5, 0x6d},
    {0x01, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x4c, 0xb5, 0x6d},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x4c, 0xb5, 0x6d},
    {0x04, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x4c, 0xb5, 0x6d},
    {0x52, 0x06, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x44, 0xb5, 0x9c},
    {0x01, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x17, 0x44, 0xb5, 0x9c},
    {0x06, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0x0a, 0x6d},
    {0x04, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0x0a, 0x6d},
    {0x09, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x1b, 0x44, 0xb5, 0x9c},
    {0x01, 0x82, 0x4a, 0xf5, 0xdd},
    {0x02, 0x1b, 0x44, 0xb5, 0x9c},
    {0x05, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0x0a, 0x6d},
    {0x04, 0x82, 0x4a, 0xf5, 0xdd},
    {0x02, 0x05, 0x43, 0x0a, 0x6d},
    {0x0b, 0x41, 0xf5, 0x40, 0xdd},
    {0x03, 0x27, 0x42, 0xb5, 0xac},
    {0x01, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x27, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x10, 0x45, 0xb5, 0x8c},
    {0x04, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x45, 0xb5, 0x8c},
    {0x07, 0x4b, 0x02, 0xf5, 0xac},
    {0x03, 0x89, 0x46, 0xb5, 0xee},
    {0x01, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x89, 0x46, 0xb5, 0xee},
    {0x05, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0x0a, 0x6d},
    {0x04, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x0a, 0x6d},
    {0x51, 0x06, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x44, 0xb5, 0x9c},
    {0x01, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x13, 0x44, 0xb5, 0x9c},
    {0x06, 0xda, 0x06, 0xb5, 0xee},
    {0x03, 0x08, 0x47, 0xb5, 0x7c},
    {0x04, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x08, 0x47, 0xb5, 0x7c},
    {0x08, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x37, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x37, 0x42, 0xb5, 0xac},
    {0x05, 0xda, 0x06, 0xb5, 0xee},
    {0x03, 0x81, 0x41, 0xb5, 0xdd},
    {0x04, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x81, 0x41, 0xb5, 0xdd},
    {0x0c, 0x41, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x47, 0xb5, 0x7c},
    {0x01, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x0a, 0x47, 0xb5, 0x7c},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0x0a, 0x6d},
    {0x04, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x04, 0x43, 0x0a, 0x6d},
    {0x07, 0x45, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0x0a, 0x6d},
    {0x01, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x43, 0x0a, 0x6d},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0x0a, 0x6d},
    {0x04, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x43, 0x0a, 0x6d},
    {0xe0, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x42, 0xb5, 0xac},
    {0x01, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x2d, 0x42, 0xb5, 0xac},
    {0x06, 0x62, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x02, 0x6d},
    {0x04, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0x02, 0x6d},
    {0x09, 0x52, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x43, 0x02, 0x7d},
    {0x01, 0x03, 0x43, 0x42, 0x7d},
    {0x02, 0x0b, 0x43, 0x02, 0x7d},
    {0x05, 0x62, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x02, 0x6d},
    {0x04, 0x03, 0x43, 0x42, 0x7d},
    {0x02, 0x05, 0x41, 0x02, 0x6d},
    {0x0a, 0x48, 0x43, 0xf5, 0xce},
    {0x03, 0x35, 0x42, 0xb5, 0xac},
    {0x01, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x35, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x02, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x02, 0x7d},
    {0x04, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0x02, 0x7d},
    {0x07, 0x5a, 0x03, 0xf5, 0xce},
    {0x03, 0x87, 0x46, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x42, 0x7d},
    {0x02, 0x87, 0x46, 0xb5, 0xee},
    {0x05, 0xc2, 0x02, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x02, 0x6d},
    {0x04, 0x05, 0x43, 0x42, 0x7d},
    {0x02, 0x06, 0x41, 0x02, 0x6d},
    {0x73, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x42, 0xb5, 0xac},
    {0x01, 0x28, 0x42, 0xf5, 0xbd},
    {0x02, 0x23, 0x42, 0xb5, 0xac},
    {0x06, 0x72, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x48, 0x03, 0xce},
    {0x04, 0x28, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x48, 0x03, 0xce},
    {0x08, 0x52, 0xf5, 0x00, 0xdd},
    {0x03, 0x33, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x33, 0x42, 0xb5, 0xac},
    {0x05, 0x72, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x45, 0xb5, 0x8c},
    {0x04, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x45, 0xb5, 0x8c},
    {0x63, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x42, 0xb5, 0xac},
    {0x01, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x42, 0xb5, 0xac},
    {0x06, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x02, 0x6d},
    {0x04, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x02, 0x6d},
    {0x07, 0x49, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0x02, 0x6d},
    {0x01, 0x06, 0x43, 0x42, 0x7d},
    {0x02, 0x02, 0x41, 0x02, 0x6d},
    {0x05, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x02, 0x6d},
    {0x04, 0x06, 0x43, 0x42, 0x7d},
    {0x02, 0x07, 0x41, 0x02, 0x6d},
    {0xc5, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x45, 0xb5, 0x8c},
    {0x01, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x0d, 0x45, 0xb5, 0x8c},
    {0x06, 0x7e, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0x0a, 0x6d},
    {0x04, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0x0a, 0x6d},
    {0x09, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x98, 0x45, 0xb5, 0xff},
    {0x01, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x98, 0x45, 0xb5, 0xff},
    {0x05, 0x7e, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0x0a, 0x6d},
    {0x04, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0x0a, 0x6d},
    {0x0b, 0x48, 0x43, 0xf5, 0xce},
    {0x03, 0x2b, 0x42, 0xb5, 0xac},
    {0x01, 0x38, 0x42, 0xf5, 0xbd},
    {0x02, 0x2b, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x11, 0x45, 0xb5, 0x8c},
    {0x04, 0x38, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x45, 0xb5, 0x8c},
    {0x07, 0xca, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0x45, 0xb5, 0xff},
    {0x01, 0x81, 0x4a, 0xf5, 0xdd},
    {0x02, 0x94, 0x45, 0xb5, 0xff},
    {0x05, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0x0a, 0x6d},
    {0x04, 0x81, 0x4a, 0xf5, 0xdd},
    {0x02, 0x06, 0x42, 0x0a, 0x6d},
    {0x4e, 0x0a, 0xb5, 0x00, 0xdd},
    {0x03, 0x01, 0x45, 0xb5, 0x8c},
    {0x01, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x01, 0x45, 0xb5, 0x8c},
    {0x06, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0x02, 0x7d},
    {0x04, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0x02, 0x7d},
    {0x08, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x4a, 0xb5, 0xdd},
    {0x01, 0x04, 0x43, 0x42, 0x7d},
    {0x02, 0x83, 0x4a, 0xb5, 0xdd},
    {0x05, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x81, 0x48, 0x03, 0xce},
    {0x04, 0x04, 0x43, 0x42, 0x7d},
    {0x02, 0x81, 0x48, 0x03, 0xce},
    {0x0c, 0x48, 0x43, 0xf5, 0xce},
    {0x03, 0x0a, 0x43, 0x02, 0x7d},
    {0x01, 0x02, 0x43, 0x42, 0x7d},
    {0x02, 0x0a, 0x43, 0x02, 0x7d},
    {0x06, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0x0a, 0x6d},
    {0x04, 0x02, 0x43, 0x42, 0x7d},
    {0x02, 0x04, 0x42, 0x0a, 0x6d},
    {0x07, 0x46, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x0a, 0x6d},
    {0x01, 0x07, 0x43, 0x42, 0x7d},
    {0x02, 0x02, 0x42, 0x0a, 0x6d},
    {0x05, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0x0a, 0x6d},
    {0x04, 0x07, 0x43, 0x42, 0x7d},
    {0x02, 0x07, 0x42, 0x0a, 0x6d},
    {0xf4, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x1d, 0x42, 0xb5, 0xac},
    {0x01, 0x2e, 0x42, 0xf5, 0xbd},
    {0x02, 0x1d, 0x42, 0xb5, 0xac},
    {0x06, 0x70, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x46, 0x06, 0x6e},
    {0x04, 0x2e, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0x06, 0x6e},
    {0x09, 0x55, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x41, 0x06, 0x7e},
    {0x01, 0x03, 0x41, 0x46, 0x7e},
    {0x02, 0x0b, 0x41, 0x06, 0x7e},
    {0x05, 0x70, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x46, 0x06, 0x6e},
    {0x04, 0x03, 0x41, 0x46, 0x7e},
    {0x02, 0x05, 0x46, 0x06, 0x6e},
    {0x0a, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x0c, 0x43, 0x06, 0x8e},
    {0x01, 0x0b, 0x43, 0x46, 0x8e},
    {0x02, 0x0c, 0x43, 0x06, 0x8e},
    {0x06, 0x43, 0x03, 0x06, 0x8e},
    {0x03, 0x09, 0x41, 0x06, 0x7e},
    {0x04, 0x0b, 0x43, 0x46, 0x8e},
    {0x02, 0x09, 0x41, 0x06, 0x7e},
    {0x07, 0x66, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x44, 0x03, 0xce},
    {0x01, 0x05, 0x41, 0x46, 0x7e},
    {0x02, 0x9a, 0x44, 0x03, 0xce},
    {0x05, 0x43, 0x03, 0x06, 0x8e},
    {0x03, 0x06, 0x46, 0x06, 0x6e},
    {0x04, 0x05, 0x41, 0x46, 0x7e},
    {0x02, 0x06, 0x46, 0x06, 0x6e},
    {0x4d, 0x04, 0x03, 0xb5, 0xce},
    {0x03, 0x21, 0x42, 0xb5, 0xac},
    {0x01, 0x36, 0x42, 0xf5, 0xbd},
    {0x02, 0x21, 0x42, 0xb5, 0xac},
    {0x06, 0x7c, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0xc3, 0xb5, 0x0d},
    {0x04, 0x36, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0xc3, 0xb5, 0x0d},
    {0x08, 0x55, 0xf5, 0x00, 0xdd},
    {0x03, 0x31, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x46, 0x8e},
    {0x02, 0x31, 0x42, 0xb5, 0xac},
    {0x05, 0x7c, 0x03, 0xb5, 0xce},
    {0x03, 0x0e, 0x43, 0x06, 0x8e},
    {0x04, 0x09, 0x43, 0x46, 0x8e},
    {0x02, 0x0e, 0x43, 0x06, 0x8e},
    {0x5b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x42, 0xb5, 0xac},
    {0x01, 0x88, 0x45, 0xf5, 0xff},
    {0x02, 0x3d, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x06, 0x8e},
    {0x03, 0x04, 0x46, 0x06, 0x6e},
    {0x04, 0x88, 0x45, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0x06, 0x6e},
    {0x07, 0xc2, 0x06, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x06, 0x6e},
    {0x01, 0x06, 0x41, 0x46, 0x7e},
    {0x02, 0x02, 0x46, 0x06, 0x6e},
    {0x05, 0x45, 0x03, 0x06, 0x8e},
    {0x03, 0x07, 0x46, 0x06, 0x6e},
    {0x04, 0x06, 0x41, 0x46, 0x7e},
    {0x02, 0x07, 0x46, 0x06, 0x6e},
    {0x7b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x42, 0xb5, 0xac},
    {0x01, 0x24, 0x42, 0xf5, 0xbd},
    {0x02, 0x2f, 0x42, 0xb5, 0xac},
    {0x06, 0x6a, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x04, 0x6c},
    {0x04, 0x24, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x04, 0x6c},
    {0x09, 0x51, 0x43, 0xb5, 0xce},
    {0x03, 0x3b, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x44, 0x43, 0xce},
    {0x02, 0x3b, 0x42, 0xb5, 0xac},
    {0x05, 0x6a, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x04, 0x6c},
    {0x04, 0x82, 0x44, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x04, 0x6c},
    {0x0b, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x29, 0x42, 0xb5, 0xac},
    {0x01, 0x34, 0x42, 0xf5, 0xbd},
    {0x02, 0x29, 0x42, 0xb5, 0xac},
    {0x06, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x06, 0x8e},
    {0x04, 0x34, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0x06, 0x8e},
    {0x07, 0x59, 0x03, 0xf5, 0xce},
    {0x03, 0x90, 0x45, 0xb5, 0xff},
    {0x01, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x90, 0x45, 0xb5, 0xff},
    {0x05, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x04, 0x6c},
    {0x04, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x04, 0x6c},
    {0x61, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x42, 0xb5, 0xac},
    {0x01, 0x00, 0x42, 0xf5, 0xbd},
    {0x02, 0x1f, 0x42, 0xb5, 0xac},
    {0x06, 0xd2, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x06, 0x7e},
    {0x04, 0x00, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0x06, 0x7e},
    {0x08, 0x51, 0x43, 0xb5, 0xce},
    {0x03, 0x39, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x46, 0x7e},
    {0x02, 0x39, 0x42, 0xb5, 0xac},
    {0x05, 0xd2, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc3, 0xb5, 0x0d},
    {0x04, 0x04, 0x41, 0x46, 0x7e},
    {0x02, 0x81, 0xc3, 0xb5, 0x0d},
    {0x0c, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x0a, 0x41, 0x06, 0x7e},
    {0x01, 0x02, 0x41, 0x46, 0x7e},
    {0x02, 0x0a, 0x41, 0x06, 0x7e},
    {0x06, 0x46, 0x03, 0x06, 0x8e},
    {0x03, 0x04, 0x43, 0x04, 0x6c},
    {0x04, 0x02, 0x41, 0x46, 0x7e},
    {0x02, 0x04, 0x43, 0x04, 0x6c},
    {0x07, 0x4f, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x04, 0x6c},
    {0x01, 0x07, 0x41, 0x46, 0x7e},
    {0x02, 0x02, 0x43, 0x04, 0x6c},
    {0x05, 0x46, 0x03, 0x06, 0x8e},
    {0x03, 0x07, 0x43, 0x04, 0x6c},
    {0x04, 0x07, 0x41, 0x46, 0x7e},
    {0x02, 0x07, 0x43, 0x04, 0x6c},
    {0xde, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x44, 0xb5, 0x9c},
    {0x01, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x16, 0x44, 0xb5, 0x9c},
    {0x06, 0x60, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x44, 0x02, 0x6d},
    {0x04, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0x02, 0x6d},
    {0x09, 0xc4, 0xf5, 0x00, 0x0d},
    {0x03, 0x0b, 0x42, 0x02, 0x7d},
    {0x01, 0x03, 0x42, 0x42, 0x7d},
    {0x02, 0x0b, 0x42, 0x02, 0x7d},
    {0x05, 0x60, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x44, 0x02, 0x6d},
    {0x04, 0x03, 0x42, 0x42, 0x7d},
    {0x02, 0x05, 0x44, 0x02, 0x6d},
    {0x0a, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x1a, 0x44, 0xb5, 0x9c},
    {0x01, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x44, 0xb5, 0x9c},
    {0x06, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0x02, 0x7d},
    {0x04, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x02, 0x7d},
    {0x07, 0xc6, 0xb5, 0x40, 0x0d},
    {0x03, 0x8c, 0x45, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x42, 0x7d},
    {0x02, 0x8c, 0x45, 0xb5, 0xff},
    {0x05, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0x02, 0x6d},
    {0x04, 0x05, 0x42, 0x42, 0x7d},
    {0x02, 0x06, 0x44, 0x02, 0x6d},
    {0xc4, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x25, 0x42, 0xb5, 0xac},
    {0x01, 0x2c, 0x42, 0xf5, 0xbd},
    {0x02, 0x25, 0x42, 0xb5, 0xac},
    {0x06, 0x7a, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0xc1, 0xb5, 0x0c},
    {0x04, 0x2c, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0xc1, 0xb5, 0x0c},
    {0x08, 0xc4, 0xf5, 0x00, 0x0d},
    {0x03, 0x19, 0x44, 0xb5, 0x9c},
    {0x01, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x19, 0x44, 0xb5, 0x9c},
    {0x05, 0x7a, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0x06, 0x8e},
    {0x04, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x06, 0x8e},
    {0x6b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x46, 0xb5, 0xee},
    {0x01, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x46, 0xb5, 0xee},
    {0x06, 0xc1, 0x02, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x02, 0x6d},
    {0x04, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x02, 0x6d},
    {0x07, 0x44, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0x02, 0x6d},
    {0x01, 0x06, 0x42, 0x42, 0x7d},
    {0x02, 0x02, 0x44, 0x02, 0x6d},
    {0x05, 0xc1, 0x02, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x02, 0x6d},
    {0x04, 0x06, 0x42, 0x42, 0x7d},
    {0x02, 0x07, 0x44, 0x02, 0x6d},
    {0x93, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0x06, 0x8e},
    {0x01, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x06, 0x8e},
    {0x06, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x04, 0x6c},
    {0x04, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x04, 0x6c},
    {0x09, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x44, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x46, 0x8e},
    {0x02, 0x12, 0x44, 0xb5, 0x9c},
    {0x05, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x04, 0x6c},
    {0x04, 0x08, 0x43, 0x46, 0x8e},
    {0x02, 0x05, 0x42, 0x04, 0x6c},
    {0x0b, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x15, 0x44, 0xb5, 0x9c},
    {0x01, 0x83, 0x42, 0xf5, 0xdd},
    {0x02, 0x15, 0x44, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x06, 0x8e},
    {0x03, 0x11, 0x43, 0x06, 0x8e},
    {0x04, 0x83, 0x42, 0xf5, 0xdd},
    {0x02, 0x11, 0x43, 0x06, 0x8e},
    {0x07, 0x42, 0x04, 0xf5, 0x9c},
    {0x03, 0x84, 0x42, 0xb5, 0xdd},
    {0x01, 0x81, 0x44, 0x43, 0xce},
    {0x02, 0x84, 0x42, 0xb5, 0xdd},
    {0x05, 0x44, 0x03, 0x06, 0x8e},
    {0x03, 0x06, 0x42, 0x04, 0x6c},
    {0x04, 0x81, 0x44, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x04, 0x6c},
    {0x4e, 0x04, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x43, 0x06, 0x8e},
    {0x01, 0x0a, 0x43, 0x46, 0x8e},
    {0x02, 0x01, 0x43, 0x06, 0x8e},
    {0x06, 0x42, 0x03, 0x06, 0x8e},
    {0x03, 0x08, 0x42, 0x02, 0x7d},
    {0x04, 0x0a, 0x43, 0x46, 0x8e},
    {0x02, 0x08, 0x42, 0x02, 0x7d},
    {0x08, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x44, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0x42, 0x7d},
    {0x02, 0x83, 0x44, 0x03, 0xce},
    {0x05, 0x42, 0x03, 0x06, 0x8e},
    {0x03, 0x81, 0xc1, 0xb5, 0x0c},
    {0x04, 0x04, 0x42, 0x42, 0x7d},
    {0x02, 0x81, 0xc1, 0xb5, 0x0c},
    {0x0c, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x42, 0x02, 0x7d},
    {0x01, 0x02, 0x42, 0x42, 0x7d},
    {0x02, 0x0a, 0x42, 0x02, 0x7d},
    {0x06, 0x47, 0x03, 0x06, 0x8e},
    {0x03, 0x04, 0x42, 0x04, 0x6c},
    {0x04, 0x02, 0x42, 0x42, 0x7d},
    {0x02, 0x04, 0x42, 0x04, 0x6c},
    {0x07, 0x47, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x04, 0x6c},
    {0x01, 0x07, 0x42, 0x42, 0x7d},
    {0x02, 0x02, 0x42, 0x04, 0x6c},
    {0x05, 0x47, 0x03, 0x06, 0x8e},
    {0x03, 0x07, 0x42, 0x04, 0x6c},
    {0x04, 0x07, 0x42, 0x42, 0x7d},
    {0x02, 0x07, 0x42, 0x04, 0x6c},
    {0xf4, 0x46, 0xf5, 0x00, 0x0e},
    {0x03, 0xa7, 0xf5, 0x00, 0x0e},
    {0x01, 0x1e, 0x42, 0xf5, 0xbd},
    {0x02, 0xa7, 0xf5, 0x00, 0x0e},
    {0x06, 0x56, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x47, 0x05, 0x6f},
    {0x04, 0x1e, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x47, 0x05, 0x6f},
    {0x09, 0x41, 0x43, 0xb5, 0xce},
    {0x03, 0x0b, 0x45, 0x05, 0x7f},
    {0x01, 0x03, 0x45, 0x45, 0x7f},
    {0x02, 0x0b, 0x45, 0x05, 0x7f},
    {0x05, 0x56, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x47, 0x05, 0x6f},
    {0x04, 0x03, 0x45, 0x45, 0x7f},
    {0x02, 0x05, 0x47, 0x05, 0x6f},
    {0x0a, 0x4a, 0x43, 0xf5, 0xce},
    {0x03, 0x0c, 0x44, 0x05, 0x8f},
    {0x01, 0x0b, 0x44, 0x45, 0x8f},
    {0x02, 0x0c, 0x44, 0x05, 0x8f},
    {0x06, 0x43, 0x04, 0x05, 0x8f},
    {0x03, 0x09, 0x45, 0x05, 0x7f},
    {0x04, 0x0b, 0x44, 0x45, 0x8f},
    {0x02, 0x09, 0x45, 0x05, 0x7f},
    {0x07, 0x4d, 0x02, 0xf5, 0xbd},
    {0x03, 0x9a, 0x42, 0x03, 0xce},
    {0x01, 0x05, 0x45, 0x45, 0x7f},
    {0x02, 0x9a, 0x42, 0x03, 0xce},
    {0x05, 0x43, 0x04, 0x05, 0x8f},
    {0x03, 0x06, 0x47, 0x05, 0x6f},
    {0x04, 0x05, 0x45, 0x45, 0x7f},
    {0x02, 0x06, 0x47, 0x05, 0x6f},
    {0x4d, 0x02, 0x03, 0xb5, 0xce},
    {0x03, 0x14, 0x42, 0x05, 0x9f},
    {0x01, 0x0c, 0x42, 0x45, 0x9f},
    {0x02, 0x14, 0x42, 0x05, 0x9f},
    {0x06, 0x4b, 0x02, 0x05, 0x9f},
    {0x03, 0x82, 0x4a, 0x03, 0xce},
    {0x04, 0x0c, 0x42, 0x45, 0x9f},
    {0x02, 0x82, 0x4a, 0x03, 0xce},
    {0x08, 0x41, 0x43, 0xb5, 0xce},
    {0x03, 0x18, 0x42, 0x05, 0x9f},
    {0x01, 0x09, 0x44, 0x45, 0x8f},
    {0x02, 0x18, 0x42, 0x05, 0x9f},
    {0x05, 0x4b, 0x02, 0x05, 0x9f},
    {0x03, 0x0e, 0x44, 0x05, 0x8f},
    {0x04, 0x09, 0x44, 0x45, 0x8f},
    {0x02, 0x0e, 0x44, 0x05, 0x8f},
    {0x4f, 0x07, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x42, 0x05, 0x9f},
    {0x01, 0x9a, 0x47, 0xf5, 0xdd},
    {0x02, 0x1c, 0x42, 0x05, 0x9f},
    {0x06, 0x45, 0x04, 0x05, 0x8f},
    {0x03, 0x04, 0x47, 0x05, 0x6f},
    {0x04, 0x9a, 0x47, 0xf5, 0xdd},
    {0x02, 0x04, 0x47, 0x05, 0x6f},
    {0x07, 0x43, 0x02, 0x45, 0x9f},
    {0x03, 0x02, 0x47, 0x05, 0x6f},
    {0x01, 0x06, 0x45, 0x45, 0x7f},
    {0x02, 0x02, 0x47, 0x05, 0x6f},
    {0x05, 0x45, 0x04, 0x05, 0x8f},
    {0x03, 0x07, 0x47, 0x05, 0x6f},
    {0x04, 0x06, 0x45, 0x45, 0x7f},
    {0x02, 0x07, 0x47, 0x05, 0x6f},
    {0x77, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x42, 0x05, 0x9f},
    {0x01, 0x22, 0x42, 0xf5, 0xbd},
    {0x02, 0x17, 0x42, 0x05, 0x9f},
    {0x06, 0x5a, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x02, 0x6c},
    {0x04, 0x22, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x02, 0x6c},
    {0x09, 0x48, 0x42, 0xb5, 0xbd},
    {0x03, 0x1b, 0x42, 0x05, 0x9f},
    {0x01, 0x82, 0x42, 0x43, 0xce},
    {0x02, 0x1b, 0x42, 0x05, 0x9f},
    {0x05, 0x5a, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x02, 0x6c},
    {0x04, 0x82, 0x42, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x02, 0x6c},
    {0x0b, 0x4a, 0x43, 0xf5, 0xce},
    {0x03, 0x28, 0x42, 0xb5, 0xac},
    {0x01, 0x32, 0x42, 0xf5, 0xbd},
    {0x02, 0x28, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0x05, 0x9f},
    {0x03, 0x10, 0x44, 0x05, 0x8f},
    {0x04, 0x32, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x44, 0x05, 0x8f},
    {0x07, 0x52, 0x03, 0xf5, 0xce},
    {0x03, 0x8e, 0x45, 0xb5, 0xff},
    {0x01, 0x0e, 0x42, 0x45, 0x9f},
    {0x02, 0x8e, 0x45, 0xb5, 0xff},
    {0x05, 0x49, 0x02, 0x05, 0x9f},
    {0x03, 0x06, 0x43, 0x02, 0x6c},
    {0x04, 0x0e, 0x42, 0x45, 0x9f},
    {0x02, 0x06, 0x43, 0x02, 0x6c},
    {0x7f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0x05, 0x9f},
    {0x01, 0x3e, 0x42, 0xf5, 0xbd},
    {0x02, 0x13, 0x42, 0x05, 0x9f},
    {0x06, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x45, 0x05, 0x7f},
    {0x04, 0x3e, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x45, 0x05, 0x7f},
    {0x08, 0x48, 0x42, 0xb5, 0xbd},
    {0x03, 0x38, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0x45, 0x7f},
    {0x02, 0x38, 0x42, 0xb5, 0xac},
    {0x05, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4a, 0x03, 0xce},
    {0x04, 0x04, 0x45, 0x45, 0x7f},
    {0x02, 0x81, 0x4a, 0x03, 0xce},
    {0x0c, 0x4a, 0x43, 0xf5, 0xce},
    {0x03, 0x0a, 0x45, 0x05, 0x7f},
    {0x01, 0x02, 0x45, 0x45, 0x7f},
    {0x02, 0x0a, 0x45, 0x05, 0x7f},
    {0x06, 0x46, 0x04, 0x05, 0x8f},
    {0x03, 0x04, 0x43, 0x02, 0x6c},
    {0x04, 0x02, 0x45, 0x45, 0x7f},
    {0x02, 0x04, 0x43, 0x02, 0x6c},
    {0x07, 0x45, 0x02, 0x45, 0x9f},
    {0x03, 0x02, 0x43, 0x02, 0x6c},
    {0x01, 0x07, 0x45, 0x45, 0x7f},
    {0x02, 0x02, 0x43, 0x02, 0x6c},
    {0x05, 0x46, 0x04, 0x05, 0x8f},
    {0x03, 0x07, 0x43, 0x02, 0x6c},
    {0x04, 0x07, 0x45, 0x45, 0x7f},
    {0x02, 0x07, 0x43, 0x02, 0x6c},
    {0xe4, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x42, 0xb5, 0xac},
    {0x01, 0x30, 0x42, 0xf5, 0xbd},
    {0x02, 0x2e, 0x42, 0xb5, 0xac},
    {0x06, 0x66, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x07, 0x6d},
    {0x04, 0x30, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x07, 0x6d},
    {0x09, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x43, 0x07, 0x7d},
    {0x01, 0x03, 0x43, 0x47, 0x7d},
    {0x02, 0x0b, 0x43, 0x07, 0x7d},
    {0x05, 0x66, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x07, 0x6d},
    {0x04, 0x03, 0x43, 0x47, 0x7d},
    {0x02, 0x05, 0x41, 0x07, 0x6d},
    {0x0a, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x36, 0x42, 0xb5, 0xac},
    {0x01, 0x3c, 0x42, 0xf5, 0xbd},
    {0x02, 0x36, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x07, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x07, 0x7d},
    {0x04, 0x3c, 0x42, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x07, 0x7d},
    {0x07, 0x55, 0x03, 0xf5, 0xce},
    {0x03, 0x88, 0x46, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x47, 0x7d},
    {0x02, 0x88, 0x46, 0xb5, 0xee},
    {0x05, 0xc2, 0x07, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x07, 0x6d},
    {0x04, 0x05, 0x43, 0x47, 0x7d},
    {0x02, 0x06, 0x41, 0x07, 0x6d},
    {0x6f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x42, 0xb5, 0xac},
    {0x01, 0x2a, 0x42, 0xf5, 0xbd},
    {0x02, 0x24, 0x42, 0xb5, 0xac},
    {0x06, 0x59, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x44, 0x02, 0xbd},
    {0x04, 0x2a, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x44, 0x02, 0xbd},
    {0x08, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x34, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0x45, 0x9f},
    {0x02, 0x34, 0x42, 0xb5, 0xac},
    {0x05, 0x59, 0x02, 0xb5, 0xbd},
    {0x03, 0x0f, 0x44, 0x05, 0x8f},
    {0x04, 0x10, 0x42, 0x45, 0x9f},
    {0x02, 0x0f, 0x44, 0x05, 0x8f},
    {0x67, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x42, 0xb5, 0xac},
    {0x01, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x42, 0xb5, 0xac},
    {0x06, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x07, 0x6d},
    {0x04, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x07, 0x6d},
    {0x07, 0x51, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x07, 0x6d},
    {0x01, 0x06, 0x43, 0x47, 0x7d},
    {0x02, 0x02, 0x41, 0x07, 0x6d},
    {0x05, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x07, 0x6d},
    {0x04, 0x06, 0x43, 0x47, 0x7d},
    {0x02, 0x07, 0x41, 0x07, 0x6d},
    {0x75, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x44, 0x05, 0x8f},
    {0x01, 0x20, 0x42, 0xf5, 0xbd},
    {0x02, 0x0d, 0x44, 0x05, 0x8f},
    {0x06, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x02, 0x6c},
    {0x04, 0x20, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x02, 0x6c},
    {0x09, 0xc1, 0x45, 0xb5, 0xff},
    {0x03, 0x9b, 0x45, 0xb5, 0xff},
    {0x01, 0x08, 0x44, 0x45, 0x8f},
    {0x02, 0x9b, 0x45, 0xb5, 0xff},
    {0x05, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x02, 0x6c},
    {0x04, 0x08, 0x44, 0x45, 0x8f},
    {0x02, 0x05, 0x42, 0x02, 0x6c},
    {0x0b, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x2c, 0x42, 0xb5, 0xac},
    {0x01, 0x3a, 0x42, 0xf5, 0xbd},
    {0x02, 0x2c, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0x05, 0x8f},
    {0x03, 0x11, 0x44, 0x05, 0x8f},
    {0x04, 0x3a, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x44, 0x05, 0x8f},
    {0x07, 0xc4, 0xb5, 0x40, 0x0c},
    {0x03, 0x96, 0x45, 0xb5, 0xff},
    {0x01, 0x81, 0x42, 0x43, 0xce},
    {0x02, 0x96, 0x45, 0xb5, 0xff},
    {0x05, 0x44, 0x04, 0x05, 0x8f},
    {0x03, 0x06, 0x42, 0x02, 0x6c},
    {0x04, 0x81, 0x42, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x02, 0x6c},
    {0x4e, 0x02, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x44, 0x05, 0x8f},
    {0x01, 0x0a, 0x44, 0x45, 0x8f},
    {0x02, 0x01, 0x44, 0x05, 0x8f},
    {0x06, 0x42, 0x04, 0x05, 0x8f},
    {0x03, 0x08, 0x43, 0x07, 0x7d},
    {0x04, 0x0a, 0x44, 0x45, 0x8f},
    {0x02, 0x08, 0x43, 0x07, 0x7d},
    {0x08, 0xc1, 0x45, 0xb5, 0xff},
    {0x03, 0x83, 0x42, 0x03, 0xce},
    {0x01, 0x04, 0x43, 0x47, 0x7d},
    {0x02, 0x83, 0x42, 0x03, 0xce},
    {0x05, 0x42, 0x04, 0x05, 0x8f},
    {0x03, 0x81, 0x44, 0x02, 0xbd},
    {0x04, 0x04, 0x43, 0x47, 0x7d},
    {0x02, 0x81, 0x44, 0x02, 0xbd},
    {0x0c, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x07, 0x7d},
    {0x01, 0x02, 0x43, 0x47, 0x7d},
    {0x02, 0x0a, 0x43, 0x07, 0x7d},
    {0x06, 0x47, 0x04, 0x05, 0x8f},
    {0x03, 0x04, 0x42, 0x02, 0x6c},
    {0x04, 0x02, 0x43, 0x47, 0x7d},
    {0x02, 0x04, 0x42, 0x02, 0x6c},
    {0x07, 0x46, 0x02, 0x45, 0x9f},
    {0x03, 0x02, 0x42, 0x02, 0x6c},
    {0x01, 0x07, 0x43, 0x47, 0x7d},
    {0x02, 0x02, 0x42, 0x02, 0x6c},
    {0x05, 0x47, 0x04, 0x05, 0x8f},
    {0x03, 0x07, 0x42, 0x02, 0x6c},
    {0x04, 0x07, 0x43, 0x47, 0x7d},
    {0x02, 0x07, 0x42, 0x02, 0x6c},
    {0xf4, 0x47, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0x42, 0xb5, 0xac},
    {0x01, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x1e, 0x42, 0xb5, 0xac},
    {0x06, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x06, 0x6e},
    {0x04, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x06, 0x6e},
    {0x09, 0x4a, 0x42, 0xb5, 0xbd},
    {0x03, 0x0b, 0x44, 0x06, 0x7e},
    {0x01, 0x03, 0x44, 0x46, 0x7e},
    {0x02, 0x0b, 0x44, 0x06, 0x7e},
    {0x05, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x06, 0x6e},
    {0x04, 0x03, 0x44, 0x46, 0x7e},
    {0x02, 0x05, 0x45, 0x06, 0x6e},
    {0x0a, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x0c, 0x42, 0x06, 0x8e},
    {0x01, 0x0b, 0x42, 0x46, 0x8e},
    {0x02, 0x0c, 0x42, 0x06, 0x8e},
    {0x06, 0x43, 0x02, 0x06, 0x8e},
    {0x03, 0x09, 0x44, 0x06, 0x7e},
    {0x04, 0x0b, 0x42, 0x46, 0x8e},
    {0x02, 0x09, 0x44, 0x06, 0x7e},
    {0x07, 0x41, 0x02, 0xf5, 0xbd},
    {0x03, 0x9a, 0x47, 0x03, 0xce},
    {0x01, 0x05, 0x44, 0x46, 0x7e},
    {0x02, 0x9a, 0x47, 0x03, 0xce},
    {0x05, 0x43, 0x02, 0x06, 0x8e},
    {0x03, 0x06, 0x45, 0x06, 0x6e},
    {0x04, 0x05, 0x44, 0x46, 0x7e},
    {0x02, 0x06, 0x45, 0x06, 0x6e},
    {0x4d, 0x07, 0x03, 0xb5, 0xce},
    {0x03, 0x22, 0x42, 0xb5, 0xac},
    {0x01, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x22, 0x42, 0xb5, 0xac},
    {0x06, 0x52, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x42, 0x02, 0xbd},
    {0x04, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x02, 0xbd},
    {0x08, 0x4a, 0x42, 0xb5, 0xbd},
    {0x03, 0x32, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x46, 0x8e},
    {0x02, 0x32, 0x42, 0xb5, 0xac},
    {0x05, 0x52, 0x02, 0xb5, 0xbd},
    {0x03, 0x0e, 0x42, 0x06, 0x8e},
    {0x04, 0x09, 0x42, 0x46, 0x8e},
    {0x02, 0x0e, 0x42, 0x06, 0x8e},
    {0x53, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x3e, 0x42, 0xb5, 0xac},
    {0x01, 0x8a, 0x45, 0xf5, 0xff},
    {0x02, 0x3e, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x06, 0x8e},
    {0x03, 0x04, 0x45, 0x06, 0x6e},
    {0x04, 0x8a, 0x45, 0xf5, 0xff},
    {0x02, 0x04, 0x45, 0x06, 0x6e},
    {0x07, 0x48, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x06, 0x6e},
    {0x01, 0x06, 0x44, 0x46, 0x7e},
    {0x02, 0x02, 0x45, 0x06, 0x6e},
    {0x05, 0x45, 0x02, 0x06, 0x8e},
    {0x03, 0x07, 0x45, 0x06, 0x6e},
    {0x04, 0x06, 0x44, 0x46, 0x7e},
    {0x02, 0x07, 0x45, 0x06, 0x6e},
    {0x58, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x30, 0x42, 0xb5, 0xac},
    {0x01, 0x26, 0x42, 0xf5, 0xbd},
    {0x02, 0x30, 0x42, 0xb5, 0xac},
    {0x06, 0x55, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x07, 0x6c},
    {0x04, 0x26, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x07, 0x6c},
    {0x09, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3c, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x47, 0x43, 0xce},
    {0x02, 0x3c, 0x42, 0xb5, 0xac},
    {0x05, 0x55, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x07, 0x6c},
    {0x04, 0x82, 0x47, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x07, 0x6c},
    {0x0b, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x2a, 0x42, 0xb5, 0xac},
    {0x01, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x2a, 0x42, 0xb5, 0xac},
    {0x06, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x06, 0x8e},
    {0x04, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x06, 0x8e},
    {0x07, 0xc3, 0x05, 0xf5, 0xff},
    {0x03, 0x92, 0x45, 0xb5, 0xff},
    {0x01, 0x0f, 0x42, 0x45, 0x9f},
    {0x02, 0x92, 0x45, 0xb5, 0xff},
    {0x05, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x07, 0x6c},
    {0x04, 0x0f, 0x42, 0x45, 0x9f},
    {0x02, 0x06, 0x43, 0x07, 0x6c},
    {0x56, 0x05, 0xf5, 0x40, 0xff},
    {0x03, 0x20, 0x42, 0xb5, 0xac},
    {0x01, 0x86, 0x45, 0xf5, 0xff},
    {0x02, 0x20, 0x42, 0xb5, 0xac},
    {0x06, 0xc4, 0x05, 0xb5, 0xff},
    {0x03, 0x08, 0x44, 0x06, 0x7e},
    {0x04, 0x86, 0x45, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0x06, 0x7e},
    {0x08, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3a, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x46, 0x7e},
    {0x02, 0x3a, 0x42, 0xb5, 0xac},
    {0x05, 0xc4, 0x05, 0xb5, 0xff},
    {0x03, 0x81, 0x42, 0x02, 0xbd},
    {0x04, 0x04, 0x44, 0x46, 0x7e},
    {0x02, 0x81, 0x42, 0x02, 0xbd},
    {0x0c, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x44, 0x06, 0x7e},
    {0x01, 0x02, 0x44, 0x46, 0x7e},
    {0x02, 0x0a, 0x44, 0x06, 0x7e},
    {0x06, 0x46, 0x02, 0x06, 0x8e},
    {0x03, 0x04, 0x43, 0x07, 0x6c},
    {0x04, 0x02, 0x44, 0x46, 0x7e},
    {0x02, 0x04, 0x43, 0x07, 0x6c},
    {0x07, 0xc1, 0x06, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x07, 0x6c},
    {0x01, 0x07, 0x44, 0x46, 0x7e},
    {0x02, 0x02, 0x43, 0x07, 0x6c},
    {0x05, 0x46, 0x02, 0x06, 0x8e},
    {0x03, 0x07, 0x43, 0x07, 0x6c},
    {0x04, 0x07, 0x44, 0x46, 0x7e},
    {0x02, 0x07, 0x43, 0x07, 0x6c},
    {0xe8, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x42, 0x05, 0x9f},
    {0x01, 0x0d, 0x42, 0x45, 0x9f},
    {0x02, 0x16, 0x42, 0x05, 0x9f},
    {0x06, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x07, 0x6d},
    {0x04, 0x0d, 0x42, 0x45, 0x9f},
    {0x02, 0x03, 0x44, 0x07, 0x6d},
    {0x09, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x07, 0x7d},
    {0x01, 0x03, 0x42, 0x47, 0x7d},
    {0x02, 0x0b, 0x42, 0x07, 0x7d},
    {0x05, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x07, 0x6d},
    {0x04, 0x03, 0x42, 0x47, 0x7d},
    {0x02, 0x05, 0x44, 0x07, 0x6d},
    {0x0a, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x42, 0x05, 0x9f},
    {0x01, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0x05, 0x9f},
    {0x06, 0x48, 0x02, 0x05, 0x9f},
    {0x03, 0x09, 0x42, 0x07, 0x7d},
    {0x04, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x07, 0x7d},
    {0x07, 0x4a, 0x02, 0xf5, 0xac},
    {0x03, 0x8a, 0x46, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0x47, 0x7d},
    {0x02, 0x8a, 0x46, 0xb5, 0xee},
    {0x05, 0x48, 0x02, 0x05, 0x9f},
    {0x03, 0x06, 0x44, 0x07, 0x6d},
    {0x04, 0x05, 0x42, 0x47, 0x7d},
    {0x02, 0x06, 0x44, 0x07, 0x6d},
    {0x50, 0x06, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x42, 0xb5, 0xac},
    {0x01, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x26, 0x42, 0xb5, 0xac},
    {0x06, 0xc3, 0x06, 0xb5, 0xee},
    {0x03, 0x82, 0x47, 0x02, 0xbd},
    {0x04, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x02, 0xbd},
    {0x08, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0x05, 0x9f},
    {0x01, 0x11, 0x42, 0x45, 0x9f},
    {0x02, 0x19, 0x42, 0x05, 0x9f},
    {0x05, 0xc3, 0x06, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x06, 0x8e},
    {0x04, 0x11, 0x42, 0x45, 0x9f},
    {0x02, 0x0f, 0x42, 0x06, 0x8e},
    {0x40, 0x06, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x46, 0xb5, 0xee},
    {0x01, 0x84, 0x46, 0xf5, 0xee},
    {0x02, 0x86, 0x46, 0xb5, 0xee},
    {0x06, 0xc1, 0x07, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x07, 0x6d},
    {0x04, 0x84, 0x46, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x07, 0x6d},
    {0x07, 0x44, 0x02, 0x45, 0x9f},
    {0x03, 0x02, 0x44, 0x07, 0x6d},
    {0x01, 0x06, 0x42, 0x47, 0x7d},
    {0x02, 0x02, 0x44, 0x07, 0x6d},
    {0x05, 0xc1, 0x07, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x07, 0x6d},
    {0x04, 0x06, 0x42, 0x47, 0x7d},
    {0x02, 0x07, 0x44, 0x07, 0x6d},
    {0xc1, 0x42, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x06, 0x8e},
    {0x01, 0x01, 0x42, 0x45, 0x9f},
    {0x02, 0x0d, 0x42, 0x06, 0x8e},
    {0x06, 0x4a, 0x02, 0x05, 0x9f},
    {0x03, 0x03, 0x42, 0x07, 0x6c},
    {0x04, 0x01, 0x42, 0x45, 0x9f},
    {0x02, 0x03, 0x42, 0x07, 0x6c},
    {0x09, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0x05, 0x9f},
    {0x01, 0x08, 0x42, 0x46, 0x8e},
    {0x02, 0x12, 0x42, 0x05, 0x9f},
    {0x05, 0x4a, 0x02, 0x05, 0x9f},
    {0x03, 0x05, 0x42, 0x07, 0x6c},
    {0x04, 0x08, 0x42, 0x46, 0x8e},
    {0x02, 0x05, 0x42, 0x07, 0x6c},
    {0x0b, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x42, 0x05, 0x9f},
    {0x01, 0x83, 0x47, 0xf5, 0xdd},
    {0x02, 0x15, 0x42, 0x05, 0x9f},
    {0x06, 0x44, 0x02, 0x06, 0x8e},
    {0x03, 0x11, 0x42, 0x06, 0x8e},
    {0x04, 0x83, 0x47, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0x06, 0x8e},
    {0x07, 0x42, 0x02, 0x45, 0x9f},
    {0x03, 0x84, 0x47, 0xb5, 0xdd},
    {0x01, 0x81, 0x47, 0x43, 0xce},
    {0x02, 0x84, 0x47, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0x06, 0x8e},
    {0x03, 0x06, 0x42, 0x07, 0x6c},
    {0x04, 0x81, 0x47, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x07, 0x6c},
    {0x4e, 0x07, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0x06, 0x8e},
    {0x01, 0x0a, 0x42, 0x46, 0x8e},
    {0x02, 0x01, 0x42, 0x06, 0x8e},
    {0x06, 0x42, 0x02, 0x06, 0x8e},
    {0x03, 0x08, 0x42, 0x07, 0x7d},
    {0x04, 0x0a, 0x42, 0x46, 0x8e},
    {0x02, 0x08, 0x42, 0x07, 0x7d},
    {0x08, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x47, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0x47, 0x7d},
    {0x02, 0x83, 0x47, 0x03, 0xce},
    {0x05, 0x42, 0x02, 0x06, 0x8e},
    {0x03, 0x81, 0x47, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0x47, 0x7d},
    {0x02, 0x81, 0x47, 0x02, 0xbd},
    {0x0c, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x07, 0x7d},
    {0x01, 0x02, 0x42, 0x47, 0x7d},
    {0x02, 0x0a, 0x42, 0x07, 0x7d},
    {0x06, 0x47, 0x02, 0x06, 0x8e},
    {0x03, 0x04, 0x42, 0x07, 0x6c},
    {0x04, 0x02, 0x42, 0x47, 0x7d},
    {0x02, 0x04, 0x42, 0x07, 0x6c},
    {0x07, 0x47, 0x02, 0x45, 0x9f},
    {0x03, 0x02, 0x42, 0x07, 0x6c},
    {0x01, 0x07, 0x42, 0x47, 0x7d},
    {0x02, 0x02, 0x42, 0x07, 0x6c},
    {0x05, 0x47, 0x02, 0x06, 0x8e},
    {0x03, 0x07, 0x42, 0x07, 0x6c},
    {0x04, 0x07, 0x42, 0x47, 0x7d},
    {0x02, 0x07, 0x42, 0x07, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0e},
    {0x03, 0xb4, 0xf5, 0x00, 0x0e},
    {0x01, 0xb4, 0xf5, 0x40, 0x0e},
    {0x02, 0xb4, 0xf5, 0x00, 0x0e},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0xb4, 0xf5, 0x40, 0x0e},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x0b, 0xf5, 0x00, 0x77},
    {0x01, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x0b, 0xf5, 0x00, 0x77},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x5d, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0xf5, 0x00, 0x88},
    {0x01, 0x0b, 0xf5, 0x40, 0x88},
    {0x02, 0x0c, 0xf5, 0x00, 0x88},
    {0x06, 0x43, 0xb5, 0x00, 0x88},
    {0x03, 0x09, 0xf5, 0x00, 0x77},
    {0x04, 0x0b, 0xf5, 0x40, 0x88},
    {0x02, 0x09, 0xf5, 0x00, 0x77},
    {0x07, 0xf2, 0x00, 0x40, 0x05},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0xb5, 0x00, 0x88},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0xf5, 0x00, 0x99},
    {0x01, 0x0c, 0xf5, 0x40, 0x99},
    {0x02, 0x14, 0xf5, 0x00, 0x99},
    {0x06, 0x4b, 0xb5, 0x00, 0x99},
    {0x03, 0x82, 0x5d, 0xb5, 0xff},
    {0x04, 0x0c, 0xf5, 0x40, 0x99},
    {0x02, 0x82, 0x5d, 0xb5, 0xff},
    {0x08, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x18, 0xf5, 0x00, 0x99},
    {0x01, 0x09, 0xf5, 0x40, 0x88},
    {0x02, 0x18, 0xf5, 0x00, 0x99},
    {0x05, 0x4b, 0xb5, 0x00, 0x99},
    {0x03, 0x0e, 0xf5, 0x00, 0x88},
    {0x04, 0x09, 0xf5, 0x40, 0x88},
    {0x02, 0x0e, 0xf5, 0x00, 0x88},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0xf5, 0x00, 0x99},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0xf5, 0x00, 0x99},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0xf5, 0x00, 0x99},
    {0x01, 0x14, 0xf5, 0x40, 0xaa},
    {0x02, 0x17, 0xf5, 0x00, 0x99},
    {0x06, 0x4c, 0xb5, 0x00, 0xaa},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0xf5, 0x00, 0xaa},
    {0x03, 0x1b, 0xf5, 0x00, 0x99},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0xf5, 0x00, 0x99},
    {0x05, 0x4c, 0xb5, 0x00, 0xaa},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x5d, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0xf5, 0x00, 0xaa},
    {0x01, 0x18, 0xf5, 0x40, 0xaa},
    {0x02, 0x27, 0xf5, 0x00, 0xaa},
    {0x06, 0x49, 0xb5, 0x00, 0x99},
    {0x03, 0x10, 0xf5, 0x00, 0x88},
    {0x04, 0x18, 0xf5, 0x40, 0xaa},
    {0x02, 0x10, 0xf5, 0x00, 0x88},
    {0x07, 0x4b, 0xb5, 0x40, 0xaa},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0xf5, 0x40, 0x99},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0xb5, 0x00, 0x99},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0xf5, 0x40, 0x99},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0xf5, 0x00, 0x99},
    {0x01, 0x1c, 0xf5, 0x40, 0xaa},
    {0x02, 0x13, 0xf5, 0x00, 0x99},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0xf5, 0x00, 0x77},
    {0x04, 0x1c, 0xf5, 0x40, 0xaa},
    {0x02, 0x08, 0xf5, 0x00, 0x77},
    {0x08, 0x43, 0xf5, 0x00, 0xaa},
    {0x03, 0x37, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x37, 0xf5, 0x00, 0xaa},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x5d, 0xb5, 0xff},
    {0x04, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x81, 0x5d, 0xb5, 0xff},
    {0x0c, 0x5d, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0xf5, 0x00, 0x77},
    {0x01, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x0a, 0xf5, 0x00, 0x77},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xdc, 0x46, 0xf5, 0x40, 0x0f},
    {0x03, 0x2d, 0xf5, 0x00, 0xaa},
    {0x01, 0x17, 0xf5, 0x40, 0xaa},
    {0x02, 0x2d, 0xf5, 0x00, 0xaa},
    {0x06, 0x54, 0x06, 0xb5, 0xbf},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0x46, 0xb5, 0xbf},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0x06, 0xb5, 0xbf},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0x46, 0xf5, 0xbf},
    {0x03, 0x35, 0xf5, 0x00, 0xaa},
    {0x01, 0x1b, 0xf5, 0x40, 0xaa},
    {0x02, 0x35, 0xf5, 0x00, 0xaa},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0xf5, 0x40, 0xaa},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0x06, 0xf5, 0xbf},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x23, 0xf5, 0x00, 0xaa},
    {0x01, 0x27, 0x46, 0xf5, 0xbf},
    {0x02, 0x23, 0xf5, 0x00, 0xaa},
    {0x06, 0x58, 0x06, 0xb5, 0xbf},
    {0x03, 0x82, 0x43, 0x06, 0xbf},
    {0x04, 0x27, 0x46, 0xf5, 0xbf},
    {0x02, 0x82, 0x43, 0x06, 0xbf},
    {0x08, 0x4b, 0x46, 0xb5, 0xbf},
    {0x03, 0x33, 0xf5, 0x00, 0xaa},
    {0x01, 0x10, 0xf5, 0x40, 0x99},
    {0x02, 0x33, 0xf5, 0x00, 0xaa},
    {0x05, 0x58, 0x06, 0xb5, 0xbf},
    {0x03, 0x0f, 0xf5, 0x00, 0x88},
    {0x04, 0x10, 0xf5, 0x40, 0x99},
    {0x02, 0x0f, 0xf5, 0x00, 0x88},
    {0x54, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3f, 0xf5, 0x00, 0xaa},
    {0x01, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x3f, 0xf5, 0x00, 0xaa},
    {0x06, 0x4e, 0xb5, 0x00, 0xaa},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0xb5, 0x40, 0xaa},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0xb5, 0x00, 0xaa},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x0d, 0xf5, 0x00, 0x88},
    {0x01, 0x13, 0xf5, 0x40, 0xaa},
    {0x02, 0x0d, 0xf5, 0x00, 0x88},
    {0x06, 0x5c, 0x06, 0xb5, 0xbf},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x97, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0xf5, 0x40, 0x88},
    {0x02, 0x97, 0xf5, 0x00, 0x0b},
    {0x05, 0x5c, 0x06, 0xb5, 0xbf},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0xf5, 0x40, 0x88},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x43, 0x46, 0xf5, 0xbf},
    {0x03, 0x2b, 0xf5, 0x00, 0xaa},
    {0x01, 0x37, 0x46, 0xf5, 0xbf},
    {0x02, 0x2b, 0xf5, 0x00, 0xaa},
    {0x06, 0x44, 0xb5, 0x00, 0x88},
    {0x03, 0x11, 0xf5, 0x00, 0x88},
    {0x04, 0x37, 0x46, 0xf5, 0xbf},
    {0x02, 0x11, 0xf5, 0x00, 0x88},
    {0x07, 0xda, 0xb5, 0x40, 0x0b},
    {0x03, 0x93, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x93, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0xb5, 0x00, 0x88},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0xf5, 0x00, 0x88},
    {0x01, 0x0a, 0xf5, 0x40, 0x88},
    {0x02, 0x01, 0xf5, 0x00, 0x88},
    {0x06, 0x42, 0xb5, 0x00, 0x88},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0xf5, 0x40, 0x88},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0xb5, 0x00, 0x88},
    {0x03, 0x81, 0x43, 0x06, 0xbf},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0x06, 0xbf},
    {0x0c, 0x43, 0x46, 0xf5, 0xbf},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0xf5, 0x00, 0xaa},
    {0x01, 0x2d, 0x46, 0xf5, 0xbf},
    {0x02, 0x1d, 0xf5, 0x00, 0xaa},
    {0x06, 0x57, 0x06, 0xb5, 0xbf},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x4c, 0x41, 0xb5, 0xcf},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0x06, 0xb5, 0xbf},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x4b, 0x41, 0xf5, 0xcf},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x54, 0x01, 0xf5, 0xcf},
    {0x03, 0x9a, 0x43, 0x01, 0xcf},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x43, 0x01, 0xcf},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x03, 0x01, 0xb5, 0xcf},
    {0x03, 0x21, 0xf5, 0x00, 0xaa},
    {0x01, 0x35, 0x46, 0xf5, 0xbf},
    {0x02, 0x21, 0xf5, 0x00, 0xaa},
    {0x06, 0x5b, 0x06, 0xb5, 0xbf},
    {0x03, 0x82, 0x4b, 0x01, 0xcf},
    {0x04, 0x35, 0x46, 0xf5, 0xbf},
    {0x02, 0x82, 0x4b, 0x01, 0xcf},
    {0x08, 0x4c, 0x41, 0xb5, 0xcf},
    {0x03, 0x31, 0xf5, 0x00, 0xaa},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0xf5, 0x00, 0xaa},
    {0x05, 0x5b, 0x06, 0xb5, 0xbf},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0xc2, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x3d, 0xf5, 0x00, 0xaa},
    {0x01, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0xf5, 0x00, 0xaa},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x78, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0xf5, 0x00, 0xaa},
    {0x01, 0x23, 0x46, 0xf5, 0xbf},
    {0x02, 0x2f, 0xf5, 0x00, 0xaa},
    {0x06, 0x67, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x03, 0x6c},
    {0x04, 0x23, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x43, 0x03, 0x6c},
    {0x09, 0x49, 0x46, 0xb5, 0xbf},
    {0x03, 0x3b, 0xf5, 0x00, 0xaa},
    {0x01, 0x82, 0x43, 0x41, 0xcf},
    {0x02, 0x3b, 0xf5, 0x00, 0xaa},
    {0x05, 0x67, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x03, 0x6c},
    {0x04, 0x82, 0x43, 0x41, 0xcf},
    {0x02, 0x05, 0x43, 0x03, 0x6c},
    {0x0b, 0x4b, 0x41, 0xf5, 0xcf},
    {0x03, 0x29, 0xf5, 0x00, 0xaa},
    {0x01, 0x33, 0x46, 0xf5, 0xbf},
    {0x02, 0x29, 0xf5, 0x00, 0xaa},
    {0x06, 0x50, 0xb5, 0x00, 0xaa},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0x46, 0xf5, 0xbf},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x58, 0x01, 0xf5, 0xcf},
    {0x03, 0x8f, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0xf5, 0x40, 0x99},
    {0x02, 0x8f, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0xb5, 0x00, 0xaa},
    {0x03, 0x06, 0x43, 0x03, 0x6c},
    {0x04, 0x0f, 0xf5, 0x40, 0x99},
    {0x02, 0x06, 0x43, 0x03, 0x6c},
    {0x5e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0xf5, 0x00, 0xaa},
    {0x01, 0x3f, 0x46, 0xf5, 0xbf},
    {0x02, 0x1f, 0xf5, 0x00, 0xaa},
    {0x06, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0x46, 0xf5, 0xbf},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0x46, 0xb5, 0xbf},
    {0x03, 0x39, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0xf5, 0x00, 0xaa},
    {0x05, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4b, 0x01, 0xcf},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x4b, 0x01, 0xcf},
    {0x0c, 0x4b, 0x41, 0xf5, 0xcf},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x03, 0x6c},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x03, 0x6c},
    {0x07, 0x4e, 0x06, 0xf5, 0xbf},
    {0x03, 0x02, 0x43, 0x03, 0x6c},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x03, 0x6c},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x03, 0x6c},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x03, 0x6c},
    {0xdd, 0x46, 0xf5, 0x40, 0x0f},
    {0x03, 0x16, 0xf5, 0x00, 0x99},
    {0x01, 0x0d, 0xf5, 0x40, 0x99},
    {0x02, 0x16, 0xf5, 0x00, 0x99},
    {0x06, 0x53, 0x06, 0xb5, 0xbf},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0xf5, 0x40, 0x99},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0x06, 0xb5, 0xbf},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0x46, 0xf5, 0xbf},
    {0x03, 0x1a, 0xf5, 0x00, 0x99},
    {0x01, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0xf5, 0x00, 0x99},
    {0x06, 0x48, 0xb5, 0x00, 0x99},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x5c, 0x01, 0xf5, 0xcf},
    {0x03, 0x8b, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0xb5, 0x00, 0x99},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x79, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0xf5, 0x00, 0xaa},
    {0x01, 0x2b, 0x46, 0xf5, 0xbf},
    {0x02, 0x25, 0xf5, 0x00, 0xaa},
    {0x06, 0x77, 0x01, 0xb5, 0xcf},
    {0x03, 0x82, 0x45, 0x06, 0xbf},
    {0x04, 0x2b, 0x46, 0xf5, 0xbf},
    {0x02, 0x82, 0x45, 0x06, 0xbf},
    {0x08, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x19, 0xf5, 0x00, 0x99},
    {0x01, 0x11, 0xf5, 0x40, 0x99},
    {0x02, 0x19, 0xf5, 0x00, 0x99},
    {0x05, 0x77, 0x01, 0xb5, 0xcf},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0xf5, 0x40, 0x99},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x76, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0xf5, 0x40, 0x99},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0xb5, 0x00, 0x99},
    {0x03, 0x03, 0x42, 0x03, 0x6c},
    {0x04, 0x01, 0xf5, 0x40, 0x99},
    {0x02, 0x03, 0x42, 0x03, 0x6c},
    {0x09, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x12, 0xf5, 0x00, 0x99},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0xf5, 0x00, 0x99},
    {0x05, 0x4a, 0xb5, 0x00, 0x99},
    {0x03, 0x05, 0x42, 0x03, 0x6c},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x03, 0x6c},
    {0x0b, 0x45, 0x46, 0xf5, 0xbf},
    {0x03, 0x15, 0xf5, 0x00, 0x99},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0xf5, 0x00, 0x99},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0xb5, 0x40, 0x99},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x43, 0x41, 0xcf},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x03, 0x6c},
    {0x04, 0x81, 0x43, 0x41, 0xcf},
    {0x02, 0x06, 0x42, 0x03, 0x6c},
    {0x4e, 0x03, 0x01, 0xb5, 0xcf},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x83, 0x43, 0x01, 0xcf},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x43, 0x01, 0xcf},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0x06, 0xbf},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0x06, 0xbf},
    {0x0c, 0x45, 0x46, 0xf5, 0xbf},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x03, 0x6c},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x03, 0x6c},
    {0x07, 0x47, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x42, 0x03, 0x6c},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x03, 0x6c},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x03, 0x6c},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x9c, 0xf5, 0x00, 0x0d},
    {0x01, 0x1d, 0x46, 0xf5, 0xbf},
    {0x02, 0x9c, 0xf5, 0x00, 0x0d},
    {0x06, 0x6d, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x49, 0xb5, 0x6c},
    {0x04, 0x1d, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x49, 0xb5, 0x6c},
    {0x09, 0x54, 0x43, 0xb5, 0xdf},
    {0x03, 0x0b, 0x46, 0xb5, 0x7b},
    {0x01, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x0b, 0x46, 0xb5, 0x7b},
    {0x05, 0x6d, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x49, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x05, 0x49, 0xb5, 0x6c},
    {0x0a, 0x4c, 0x43, 0xf5, 0xdf},
    {0x03, 0x0c, 0x41, 0xb5, 0x8b},
    {0x01, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x0c, 0x41, 0xb5, 0x8b},
    {0x06, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x09, 0x46, 0xb5, 0x7b},
    {0x04, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x09, 0x46, 0xb5, 0x7b},
    {0x07, 0x57, 0x01, 0xf5, 0xcf},
    {0x03, 0x9a, 0x4b, 0x03, 0xdf},
    {0x01, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x9a, 0x4b, 0x03, 0xdf},
    {0x05, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x49, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x06, 0x49, 0xb5, 0x6c},
    {0x4d, 0x0b, 0x03, 0xb5, 0xdf},
    {0x03, 0x14, 0x43, 0xb5, 0x9b},
    {0x01, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x14, 0x43, 0xb5, 0x9b},
    {0x06, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x82, 0x4c, 0x03, 0xdf},
    {0x04, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x82, 0x4c, 0x03, 0xdf},
    {0x08, 0x54, 0x43, 0xb5, 0xdf},
    {0x03, 0x18, 0x43, 0xb5, 0x9b},
    {0x01, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x18, 0x43, 0xb5, 0x9b},
    {0x05, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x0e, 0x41, 0xb5, 0x8b},
    {0x04, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x0e, 0x41, 0xb5, 0x8b},
    {0x4f, 0x03, 0x03, 0xf5, 0xdf},
    {0x03, 0x1c, 0x43, 0xb5, 0x9b},
    {0x01, 0x9a, 0x43, 0x43, 0xdf},
    {0x02, 0x1c, 0x43, 0xb5, 0x9b},
    {0x06, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x49, 0xb5, 0x6c},
    {0x04, 0x9a, 0x43, 0x43, 0xdf},
    {0x02, 0x04, 0x49, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x49, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x49, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x49, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x49, 0xb5, 0x6c},
    {0x74, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x43, 0xb5, 0x9b},
    {0x01, 0x21, 0x46, 0xf5, 0xbf},
    {0x02, 0x17, 0x43, 0xb5, 0x9b},
    {0x06, 0x75, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x0b, 0x6d},
    {0x04, 0x21, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x43, 0x0b, 0x6d},
    {0x09, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x1b, 0x43, 0xb5, 0x9b},
    {0x01, 0x82, 0x4b, 0x43, 0xdf},
    {0x02, 0x1b, 0x43, 0xb5, 0x9b},
    {0x05, 0x75, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x0b, 0x6d},
    {0x04, 0x82, 0x4b, 0x43, 0xdf},
    {0x02, 0x05, 0x43, 0x0b, 0x6d},
    {0x0b, 0x4c, 0x43, 0xf5, 0xdf},
    {0x03, 0x28, 0xf5, 0x00, 0xaa},
    {0x01, 0x31, 0x46, 0xf5, 0xbf},
    {0x02, 0x28, 0xf5, 0x00, 0xaa},
    {0x06, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x10, 0x41, 0xb5, 0x8b},
    {0x04, 0x31, 0x46, 0xf5, 0xbf},
    {0x02, 0x10, 0x41, 0xb5, 0x8b},
    {0x07, 0x5b, 0x01, 0xf5, 0xcf},
    {0x03, 0x8d, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x8d, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0x0b, 0x6d},
    {0x04, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x0b, 0x6d},
    {0x70, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0xb5, 0x9b},
    {0x01, 0x3d, 0x46, 0xf5, 0xbf},
    {0x02, 0x13, 0x43, 0xb5, 0x9b},
    {0x06, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0xb5, 0x7b},
    {0x04, 0x3d, 0x46, 0xf5, 0xbf},
    {0x02, 0x08, 0x46, 0xb5, 0x7b},
    {0x08, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x38, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x38, 0xf5, 0x00, 0xaa},
    {0x05, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4c, 0x03, 0xdf},
    {0x04, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x81, 0x4c, 0x03, 0xdf},
    {0x0c, 0x4c, 0x43, 0xf5, 0xdf},
    {0x03, 0x0a, 0x46, 0xb5, 0x7b},
    {0x01, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x0a, 0x46, 0xb5, 0x7b},
    {0x06, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0x0b, 0x6d},
    {0x04, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0x0b, 0x6d},
    {0x07, 0x45, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0x0b, 0x6d},
    {0x01, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0x0b, 0x6d},
    {0x05, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0x0b, 0x6d},
    {0x04, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0x0b, 0x6d},
    {0xe1, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x2e, 0xf5, 0x00, 0xaa},
    {0x01, 0x2f, 0x46, 0xf5, 0xbf},
    {0x02, 0x2e, 0xf5, 0x00, 0xaa},
    {0x06, 0x63, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x41, 0x03, 0x6d},
    {0x04, 0x2f, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x41, 0x03, 0x6d},
    {0x09, 0x58, 0x43, 0xb5, 0xdf},
    {0x03, 0x0b, 0x43, 0x03, 0x7d},
    {0x01, 0x03, 0x43, 0x43, 0x7d},
    {0x02, 0x0b, 0x43, 0x03, 0x7d},
    {0x05, 0x63, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x41, 0x03, 0x6d},
    {0x04, 0x03, 0x43, 0x43, 0x7d},
    {0x02, 0x05, 0x41, 0x03, 0x6d},
    {0x0a, 0x49, 0x41, 0xf5, 0xcf},
    {0x03, 0x36, 0xf5, 0x00, 0xaa},
    {0x01, 0x3b, 0x46, 0xf5, 0xbf},
    {0x02, 0x36, 0xf5, 0x00, 0xaa},
    {0x06, 0xc2, 0x03, 0x03, 0xdf},
    {0x03, 0x09, 0x43, 0x03, 0x7d},
    {0x04, 0x3b, 0x46, 0xf5, 0xbf},
    {0x02, 0x09, 0x43, 0x03, 0x7d},
    {0x07, 0x67, 0x03, 0xf5, 0xdf},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x43, 0x7d},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x03, 0x03, 0xdf},
    {0x03, 0x06, 0x41, 0x03, 0x6d},
    {0x04, 0x05, 0x43, 0x43, 0x7d},
    {0x02, 0x06, 0x41, 0x03, 0x6d},
    {0x6c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0xf5, 0x00, 0xaa},
    {0x01, 0x29, 0x46, 0xf5, 0xbf},
    {0x02, 0x24, 0xf5, 0x00, 0xaa},
    {0x06, 0x73, 0x01, 0xb5, 0xcf},
    {0x03, 0x82, 0x49, 0x01, 0xcf},
    {0x04, 0x29, 0x46, 0xf5, 0xbf},
    {0x02, 0x82, 0x49, 0x01, 0xcf},
    {0x08, 0x58, 0x43, 0xb5, 0xdf},
    {0x03, 0x34, 0xf5, 0x00, 0xaa},
    {0x01, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x34, 0xf5, 0x00, 0xaa},
    {0x05, 0x73, 0x01, 0xb5, 0xcf},
    {0x03, 0x0f, 0x41, 0xb5, 0x8b},
    {0x04, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x41, 0xb5, 0x8b},
    {0x64, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0xf5, 0x00, 0xaa},
    {0x01, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0xf5, 0x00, 0xaa},
    {0x06, 0x4f, 0xb5, 0x00, 0xaa},
    {0x03, 0x04, 0x41, 0x03, 0x6d},
    {0x04, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x03, 0x6d},
    {0x07, 0x50, 0x06, 0xf5, 0xbf},
    {0x03, 0x02, 0x41, 0x03, 0x6d},
    {0x01, 0x06, 0x43, 0x43, 0x7d},
    {0x02, 0x02, 0x41, 0x03, 0x6d},
    {0x05, 0x4f, 0xb5, 0x00, 0xaa},
    {0x03, 0x07, 0x41, 0x03, 0x6d},
    {0x04, 0x06, 0x43, 0x43, 0x7d},
    {0x02, 0x07, 0x41, 0x03, 0x6d},
    {0xc6, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x41, 0xb5, 0x8b},
    {0x01, 0x1f, 0x46, 0xf5, 0xbf},
    {0x02, 0x0d, 0x41, 0xb5, 0x8b},
    {0x06, 0x7f, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x42, 0x0b, 0x6d},
    {0x04, 0x1f, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x42, 0x0b, 0x6d},
    {0x09, 0x4e, 0x41, 0xb5, 0xcf},
    {0x03, 0x99, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x99, 0xf5, 0x00, 0x0b},
    {0x05, 0x7f, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x42, 0x0b, 0x6d},
    {0x04, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0x0b, 0x6d},
    {0x0b, 0x49, 0x41, 0xf5, 0xcf},
    {0x03, 0x2c, 0xf5, 0x00, 0xaa},
    {0x01, 0x39, 0x46, 0xf5, 0xbf},
    {0x02, 0x2c, 0xf5, 0x00, 0xaa},
    {0x06, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x11, 0x41, 0xb5, 0x8b},
    {0x04, 0x39, 0x46, 0xf5, 0xbf},
    {0x02, 0x11, 0x41, 0xb5, 0x8b},
    {0x07, 0xc9, 0xb5, 0x40, 0x0d},
    {0x03, 0x95, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x4b, 0x43, 0xdf},
    {0x02, 0x95, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0x0b, 0x6d},
    {0x04, 0x81, 0x4b, 0x43, 0xdf},
    {0x02, 0x06, 0x42, 0x0b, 0x6d},
    {0x4e, 0x0b, 0x03, 0xb5, 0xdf},
    {0x03, 0x01, 0x41, 0xb5, 0x8b},
    {0x01, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x01, 0x41, 0xb5, 0x8b},
    {0x06, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x03, 0x7d},
    {0x04, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x03, 0x7d},
    {0x08, 0x4e, 0x41, 0xb5, 0xcf},
    {0x03, 0x83, 0x4b, 0x03, 0xdf},
    {0x01, 0x04, 0x43, 0x43, 0x7d},
    {0x02, 0x83, 0x4b, 0x03, 0xdf},
    {0x05, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x81, 0x49, 0x01, 0xcf},
    {0x04, 0x04, 0x43, 0x43, 0x7d},
    {0x02, 0x81, 0x49, 0x01, 0xcf},
    {0x0c, 0x49, 0x41, 0xf5, 0xcf},
    {0x03, 0x0a, 0x43, 0x03, 0x7d},
    {0x01, 0x02, 0x43, 0x43, 0x7d},
    {0x02, 0x0a, 0x43, 0x03, 0x7d},
    {0x06, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0x0b, 0x6d},
    {0x04, 0x02, 0x43, 0x43, 0x7d},
    {0x02, 0x04, 0x42, 0x0b, 0x6d},
    {0x07, 0x46, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x0b, 0x6d},
    {0x01, 0x07, 0x43, 0x43, 0x7d},
    {0x02, 0x02, 0x42, 0x0b, 0x6d},
    {0x05, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0x0b, 0x6d},
    {0x04, 0x07, 0x43, 0x43, 0x7d},
    {0x02, 0x07, 0x42, 0x0b, 0x6d},
    {0xf4, 0x43, 0x03, 0xf5, 0xff},
    {0x03, 0x1e, 0xf5, 0x00, 0xaa},
    {0x01, 0x16, 0xf5, 0x40, 0xaa},
    {0x02, 0x1e, 0xf5, 0x00, 0xaa},
    {0x06, 0x4d, 0xb5, 0x00, 0xaa},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x5c, 0x43, 0xb5, 0xdf},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0xb5, 0x00, 0xaa},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x53, 0x01, 0xf5, 0xcf},
    {0x03, 0x9a, 0x45, 0x01, 0xcf},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x45, 0x01, 0xcf},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x05, 0x01, 0xb5, 0xcf},
    {0x03, 0x22, 0xf5, 0x00, 0xaa},
    {0x01, 0x1a, 0xf5, 0x40, 0xaa},
    {0x02, 0x22, 0xf5, 0x00, 0xaa},
    {0x06, 0xd7, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xda, 0xb5, 0x0d},
    {0x04, 0x1a, 0xf5, 0x40, 0xaa},
    {0x02, 0x82, 0xda, 0xb5, 0x0d},
    {0x08, 0x5c, 0x43, 0xb5, 0xdf},
    {0x03, 0x32, 0xf5, 0x00, 0xaa},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0xf5, 0x00, 0xaa},
    {0x05, 0xd7, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0xf5, 0x00, 0xaa},
    {0x01, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0xf5, 0x00, 0xaa},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0xb5, 0x40, 0xaa},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x7c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x30, 0xf5, 0x00, 0xaa},
    {0x01, 0x25, 0x46, 0xf5, 0xbf},
    {0x02, 0x30, 0xf5, 0x00, 0xaa},
    {0x06, 0x6b, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x05, 0x6c},
    {0x04, 0x25, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x43, 0x05, 0x6c},
    {0x09, 0x44, 0xf5, 0x00, 0xaa},
    {0x03, 0x3c, 0xf5, 0x00, 0xaa},
    {0x01, 0x82, 0x45, 0x41, 0xcf},
    {0x02, 0x3c, 0xf5, 0x00, 0xaa},
    {0x05, 0x6b, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x05, 0x6c},
    {0x04, 0x82, 0x45, 0x41, 0xcf},
    {0x02, 0x05, 0x43, 0x05, 0x6c},
    {0x0b, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x2a, 0xf5, 0x00, 0xaa},
    {0x01, 0x19, 0xf5, 0x40, 0xaa},
    {0x02, 0x2a, 0xf5, 0x00, 0xaa},
    {0x06, 0x51, 0xb5, 0x00, 0xaa},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0xf5, 0x40, 0xaa},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x77, 0x03, 0xf5, 0xdf},
    {0x03, 0x91, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x91, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0xb5, 0x00, 0xaa},
    {0x03, 0x06, 0x43, 0x05, 0x6c},
    {0x04, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x05, 0x6c},
    {0x68, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0xf5, 0x00, 0xaa},
    {0x01, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0xf5, 0x00, 0xaa},
    {0x06, 0xd3, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0xf5, 0x00, 0xaa},
    {0x03, 0x3a, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0xf5, 0x00, 0xaa},
    {0x05, 0xd3, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xda, 0xb5, 0x0d},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xda, 0xb5, 0x0d},
    {0x0c, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x05, 0x6c},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x05, 0x6c},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x05, 0x6c},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x05, 0x6c},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x05, 0x6c},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x05, 0x6c},
    {0xe5, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x16, 0x43, 0xb5, 0x9b},
    {0x01, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x16, 0x43, 0xb5, 0x9b},
    {0x06, 0x41, 0xb5, 0x00, 0xaa},
    {0x03, 0x03, 0x44, 0x03, 0x6d},
    {0x04, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x03, 0x6d},
    {0x09, 0x42, 0xf5, 0x00, 0xaa},
    {0x03, 0x0b, 0x42, 0x03, 0x7d},
    {0x01, 0x03, 0x42, 0x43, 0x7d},
    {0x02, 0x0b, 0x42, 0x03, 0x7d},
    {0x05, 0x41, 0xb5, 0x00, 0xaa},
    {0x03, 0x05, 0x44, 0x03, 0x6d},
    {0x04, 0x03, 0x42, 0x43, 0x7d},
    {0x02, 0x05, 0x44, 0x03, 0x6d},
    {0x0a, 0x46, 0x46, 0xf5, 0xbf},
    {0x03, 0x1a, 0x43, 0xb5, 0x9b},
    {0x01, 0x12, 0xf5, 0x40, 0xaa},
    {0x02, 0x1a, 0x43, 0xb5, 0x9b},
    {0x06, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x03, 0x7d},
    {0x04, 0x12, 0xf5, 0x40, 0xaa},
    {0x02, 0x09, 0x42, 0x03, 0x7d},
    {0x07, 0x4a, 0xb5, 0x40, 0xaa},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x43, 0x7d},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x03, 0x6d},
    {0x04, 0x05, 0x42, 0x43, 0x7d},
    {0x02, 0x06, 0x44, 0x03, 0x6d},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0xf5, 0x00, 0xaa},
    {0x01, 0x15, 0xf5, 0x40, 0xaa},
    {0x02, 0x26, 0xf5, 0x00, 0xaa},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0x06, 0xbf},
    {0x04, 0x15, 0xf5, 0x40, 0xaa},
    {0x02, 0x82, 0x46, 0x06, 0xbf},
    {0x08, 0x42, 0xf5, 0x00, 0xaa},
    {0x03, 0x19, 0x43, 0xb5, 0x9b},
    {0x01, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x19, 0x43, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x03, 0x03, 0xdf},
    {0x03, 0x04, 0x44, 0x03, 0x6d},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x03, 0x6d},
    {0x07, 0x44, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x03, 0x6d},
    {0x01, 0x06, 0x42, 0x43, 0x7d},
    {0x02, 0x02, 0x44, 0x03, 0x6d},
    {0x05, 0xc1, 0x03, 0x03, 0xdf},
    {0x03, 0x07, 0x44, 0x03, 0x6d},
    {0x04, 0x06, 0x42, 0x43, 0x7d},
    {0x02, 0x07, 0x44, 0x03, 0x6d},
    {0x81, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x05, 0x6c},
    {0x04, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x05, 0x6c},
    {0x09, 0x47, 0xf5, 0x00, 0xaa},
    {0x03, 0x12, 0x43, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0xb5, 0x9b},
    {0x05, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x05, 0x6c},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x05, 0x6c},
    {0x0b, 0x46, 0x46, 0xf5, 0xbf},
    {0x03, 0x15, 0x43, 0xb5, 0x9b},
    {0x01, 0x83, 0x43, 0x43, 0xdf},
    {0x02, 0x15, 0x43, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x43, 0x43, 0xdf},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0xf5, 0x9b},
    {0x03, 0x84, 0x43, 0x03, 0xdf},
    {0x01, 0x81, 0x45, 0x41, 0xcf},
    {0x02, 0x84, 0x43, 0x03, 0xdf},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x05, 0x6c},
    {0x04, 0x81, 0x45, 0x41, 0xcf},
    {0x02, 0x06, 0x42, 0x05, 0x6c},
    {0x4e, 0x05, 0x01, 0xb5, 0xcf},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x03, 0x7d},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x03, 0x7d},
    {0x08, 0x47, 0xf5, 0x00, 0xaa},
    {0x03, 0x83, 0x45, 0x01, 0xcf},
    {0x01, 0x04, 0x42, 0x43, 0x7d},
    {0x02, 0x83, 0x45, 0x01, 0xcf},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0x06, 0xbf},
    {0x04, 0x04, 0x42, 0x43, 0x7d},
    {0x02, 0x81, 0x46, 0x06, 0xbf},
    {0x0c, 0x46, 0x46, 0xf5, 0xbf},
    {0x03, 0x0a, 0x42, 0x03, 0x7d},
    {0x01, 0x02, 0x42, 0x43, 0x7d},
    {0x02, 0x0a, 0x42, 0x03, 0x7d},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x05, 0x6c},
    {0x04, 0x02, 0x42, 0x43, 0x7d},
    {0x02, 0x04, 0x42, 0x05, 0x6c},
    {0x07, 0x47, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x05, 0x6c},
    {0x01, 0x07, 0x42, 0x43, 0x7d},
    {0x02, 0x02, 0x42, 0x05, 0x6c},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x05, 0x6c},
    {0x04, 0x07, 0x42, 0x43, 0x7d},
    {0x02, 0x07, 0x42, 0x05, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xb4, 0xf5, 0x00, 0x0b},
    {0x01, 0x9f, 0xf5, 0x40, 0x0f},
    {0x02, 0xb4, 0xf5, 0x00, 0x0b},
    {0x06, 0x5d, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x4a, 0xb5, 0x6d},
    {0x04, 0x9f, 0xf5, 0x40, 0x0f},
    {0x02, 0x03, 0x4a, 0xb5, 0x6d},
    {0x09, 0x57, 0x43, 0xb5, 0xdf},
    {0x03, 0x0b, 0x49, 0xb5, 0x7d},
    {0x01, 0x03, 0x49, 0xf5, 0x7d},
    {0x02, 0x0b, 0x49, 0xb5, 0x7d},
    {0x05, 0x5d, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x4a, 0xb5, 0x6d},
    {0x04, 0x03, 0x49, 0xf5, 0x7d},
    {0x02, 0x05, 0x4a, 0xb5, 0x6d},
    {0x0a, 0x61, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x46, 0xb5, 0x8c},
    {0x01, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x0c, 0x46, 0xb5, 0x8c},
    {0x06, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x09, 0x49, 0xb5, 0x7d},
    {0x04, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x09, 0x49, 0xb5, 0x7d},
    {0x07, 0x6d, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x49, 0xf5, 0x7d},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x4a, 0xb5, 0x6d},
    {0x04, 0x05, 0x49, 0xf5, 0x7d},
    {0x02, 0x06, 0x4a, 0xb5, 0x6d},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x41, 0xb5, 0x9c},
    {0x01, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x14, 0x41, 0xb5, 0x9c},
    {0x06, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x82, 0x61, 0xb5, 0xff},
    {0x04, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x82, 0x61, 0xb5, 0xff},
    {0x08, 0x57, 0x43, 0xb5, 0xdf},
    {0x03, 0x18, 0x41, 0xb5, 0x9c},
    {0x01, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x18, 0x41, 0xb5, 0x9c},
    {0x05, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x0e, 0x46, 0xb5, 0x8c},
    {0x04, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x0e, 0x46, 0xb5, 0x8c},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x41, 0xb5, 0x9c},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x41, 0xb5, 0x9c},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x4a, 0xb5, 0x6d},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0x4a, 0xb5, 0x6d},
    {0x07, 0x43, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x4a, 0xb5, 0x6d},
    {0x01, 0x06, 0x49, 0xf5, 0x7d},
    {0x02, 0x02, 0x4a, 0xb5, 0x6d},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x4a, 0xb5, 0x6d},
    {0x04, 0x06, 0x49, 0xf5, 0x7d},
    {0x02, 0x07, 0x4a, 0xb5, 0x6d},
    {0x52, 0x82, 0xf5, 0x00, 0x0f},
    {0x03, 0x17, 0x41, 0xb5, 0x9c},
    {0x01, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x17, 0x41, 0xb5, 0x9c},
    {0x06, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x1b, 0x41, 0xb5, 0x9c},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x41, 0xb5, 0x9c},
    {0x05, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x61, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x43, 0xb5, 0xac},
    {0x01, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x27, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x10, 0x46, 0xb5, 0x8c},
    {0x04, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x46, 0xb5, 0x8c},
    {0x07, 0x4b, 0x03, 0xf5, 0xac},
    {0x03, 0x89, 0xc2, 0xb5, 0x0f},
    {0x01, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x89, 0xc2, 0xb5, 0x0f},
    {0x05, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0x82, 0xf5, 0x00, 0x0f},
    {0x03, 0x13, 0x41, 0xb5, 0x9c},
    {0x01, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x13, 0x41, 0xb5, 0x9c},
    {0x06, 0xda, 0x82, 0xb5, 0x0f},
    {0x03, 0x08, 0x49, 0xb5, 0x7d},
    {0x04, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x08, 0x49, 0xb5, 0x7d},
    {0x08, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x37, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x49, 0xf5, 0x7d},
    {0x02, 0x37, 0x43, 0xb5, 0xac},
    {0x05, 0xda, 0x82, 0xb5, 0x0f},
    {0x03, 0x81, 0x61, 0xb5, 0xff},
    {0x04, 0x04, 0x49, 0xf5, 0x7d},
    {0x02, 0x81, 0x61, 0xb5, 0xff},
    {0x0c, 0x61, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x49, 0xb5, 0x7d},
    {0x01, 0x02, 0x49, 0xf5, 0x7d},
    {0x02, 0x0a, 0x49, 0xb5, 0x7d},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x49, 0xf5, 0x7d},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x49, 0xf5, 0x7d},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x49, 0xf5, 0x7d},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xdf, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x2d, 0x43, 0xb5, 0xac},
    {0x01, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x2d, 0x43, 0xb5, 0xac},
    {0x06, 0x61, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x5b, 0x43, 0xb5, 0xdf},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x61, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x35, 0x43, 0xb5, 0xac},
    {0x01, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x35, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x75, 0x03, 0xf5, 0xdf},
    {0x03, 0x87, 0xc2, 0xb5, 0x0f},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xc2, 0xb5, 0x0f},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x72, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x43, 0xb5, 0xac},
    {0x01, 0x28, 0x46, 0xf5, 0xbf},
    {0x02, 0x23, 0x43, 0xb5, 0xac},
    {0x06, 0x71, 0x01, 0xb5, 0xcf},
    {0x03, 0x82, 0xc2, 0xb5, 0x0c},
    {0x04, 0x28, 0x46, 0xf5, 0xbf},
    {0x02, 0x82, 0xc2, 0xb5, 0x0c},
    {0x08, 0x5b, 0x43, 0xb5, 0xdf},
    {0x03, 0x33, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x33, 0x43, 0xb5, 0xac},
    {0x05, 0x71, 0x01, 0xb5, 0xcf},
    {0x03, 0x0f, 0x46, 0xb5, 0x8c},
    {0x04, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x46, 0xb5, 0x8c},
    {0x62, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x43, 0xb5, 0xac},
    {0x01, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x43, 0xb5, 0xac},
    {0x06, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0xda, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x46, 0xb5, 0x8c},
    {0x01, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x0d, 0x46, 0xb5, 0x8c},
    {0x06, 0x7d, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x98, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x98, 0xf5, 0x00, 0x0b},
    {0x05, 0x7d, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x2b, 0x43, 0xb5, 0xac},
    {0x01, 0x38, 0x46, 0xf5, 0xbf},
    {0x02, 0x2b, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x11, 0x46, 0xb5, 0x8c},
    {0x04, 0x38, 0x46, 0xf5, 0xbf},
    {0x02, 0x11, 0x46, 0xb5, 0x8c},
    {0x07, 0xc7, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x94, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x46, 0xb5, 0x8c},
    {0x01, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x01, 0x46, 0xb5, 0x8c},
    {0x06, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x81, 0xc2, 0xb5, 0x0c},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0xc2, 0xb5, 0x0c},
    {0x0c, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x43, 0xb5, 0xac},
    {0x01, 0x2e, 0x46, 0xf5, 0xbf},
    {0x02, 0x1d, 0x43, 0xb5, 0xac},
    {0x06, 0x6f, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x46, 0x82, 0x6f},
    {0x04, 0x2e, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x46, 0x82, 0x6f},
    {0x09, 0x68, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x82, 0x7f},
    {0x01, 0x03, 0x41, 0xc2, 0x7f},
    {0x02, 0x0b, 0x41, 0x82, 0x7f},
    {0x05, 0x6f, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x46, 0x82, 0x6f},
    {0x04, 0x03, 0x41, 0xc2, 0x7f},
    {0x02, 0x05, 0x46, 0x82, 0x6f},
    {0x0a, 0x71, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x43, 0x82, 0x8f},
    {0x01, 0x0b, 0x43, 0xc2, 0x8f},
    {0x02, 0x0c, 0x43, 0x82, 0x8f},
    {0x06, 0x43, 0x03, 0x82, 0x8f},
    {0x03, 0x09, 0x41, 0x82, 0x7f},
    {0x04, 0x0b, 0x43, 0xc2, 0x8f},
    {0x02, 0x09, 0x41, 0x82, 0x7f},
    {0x07, 0x63, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0x49, 0x03, 0xdf},
    {0x01, 0x05, 0x41, 0xc2, 0x7f},
    {0x02, 0x9a, 0x49, 0x03, 0xdf},
    {0x05, 0x43, 0x03, 0x82, 0x8f},
    {0x03, 0x06, 0x46, 0x82, 0x6f},
    {0x04, 0x05, 0x41, 0xc2, 0x7f},
    {0x02, 0x06, 0x46, 0x82, 0x6f},
    {0x4d, 0x09, 0x03, 0xb5, 0xdf},
    {0x03, 0x21, 0x43, 0xb5, 0xac},
    {0x01, 0x36, 0x46, 0xf5, 0xbf},
    {0x02, 0x21, 0x43, 0xb5, 0xac},
    {0x06, 0x7b, 0x01, 0xb5, 0xcf},
    {0x03, 0x82, 0x71, 0xb5, 0xff},
    {0x04, 0x36, 0x46, 0xf5, 0xbf},
    {0x02, 0x82, 0x71, 0xb5, 0xff},
    {0x08, 0x68, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0xc2, 0x8f},
    {0x02, 0x31, 0x43, 0xb5, 0xac},
    {0x05, 0x7b, 0x01, 0xb5, 0xcf},
    {0x03, 0x0e, 0x43, 0x82, 0x8f},
    {0x04, 0x09, 0x43, 0xc2, 0x8f},
    {0x02, 0x0e, 0x43, 0x82, 0x8f},
    {0x5a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x43, 0xb5, 0xac},
    {0x01, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x82, 0x8f},
    {0x03, 0x04, 0x46, 0x82, 0x6f},
    {0x04, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0x82, 0x6f},
    {0x07, 0xc2, 0x82, 0xf5, 0x0f},
    {0x03, 0x02, 0x46, 0x82, 0x6f},
    {0x01, 0x06, 0x41, 0xc2, 0x7f},
    {0x02, 0x02, 0x46, 0x82, 0x6f},
    {0x05, 0x45, 0x03, 0x82, 0x8f},
    {0x03, 0x07, 0x46, 0x82, 0x6f},
    {0x04, 0x06, 0x41, 0xc2, 0x7f},
    {0x02, 0x07, 0x46, 0x82, 0x6f},
    {0xd6, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x2f, 0x43, 0xb5, 0xac},
    {0x01, 0x24, 0x46, 0xf5, 0xbf},
    {0x02, 0x2f, 0x43, 0xb5, 0xac},
    {0x06, 0x69, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x09, 0x6d},
    {0x04, 0x24, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x43, 0x09, 0x6d},
    {0x09, 0x50, 0x41, 0xb5, 0xcf},
    {0x03, 0x3b, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x49, 0x43, 0xdf},
    {0x02, 0x3b, 0x43, 0xb5, 0xac},
    {0x05, 0x69, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x09, 0x6d},
    {0x04, 0x82, 0x49, 0x43, 0xdf},
    {0x02, 0x05, 0x43, 0x09, 0x6d},
    {0x0b, 0x71, 0xf5, 0x40, 0xff},
    {0x03, 0x29, 0x43, 0xb5, 0xac},
    {0x01, 0x34, 0x46, 0xf5, 0xbf},
    {0x02, 0x29, 0x43, 0xb5, 0xac},
    {0x06, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x82, 0x8f},
    {0x04, 0x34, 0x46, 0xf5, 0xbf},
    {0x02, 0x10, 0x43, 0x82, 0x8f},
    {0x07, 0x73, 0x03, 0xf5, 0xdf},
    {0x03, 0x90, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x90, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x09, 0x6d},
    {0x04, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x09, 0x6d},
    {0x60, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x43, 0xb5, 0xac},
    {0x01, 0x00, 0x46, 0xf5, 0xbf},
    {0x02, 0x1f, 0x43, 0xb5, 0xac},
    {0x06, 0xcf, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x82, 0x7f},
    {0x04, 0x00, 0x46, 0xf5, 0xbf},
    {0x02, 0x08, 0x41, 0x82, 0x7f},
    {0x08, 0x50, 0x41, 0xb5, 0xcf},
    {0x03, 0x39, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0xc2, 0x7f},
    {0x02, 0x39, 0x43, 0xb5, 0xac},
    {0x05, 0xcf, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x71, 0xb5, 0xff},
    {0x04, 0x04, 0x41, 0xc2, 0x7f},
    {0x02, 0x81, 0x71, 0xb5, 0xff},
    {0x0c, 0x71, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x41, 0x82, 0x7f},
    {0x01, 0x02, 0x41, 0xc2, 0x7f},
    {0x02, 0x0a, 0x41, 0x82, 0x7f},
    {0x06, 0x46, 0x03, 0x82, 0x8f},
    {0x03, 0x04, 0x43, 0x09, 0x6d},
    {0x04, 0x02, 0x41, 0xc2, 0x7f},
    {0x02, 0x04, 0x43, 0x09, 0x6d},
    {0x07, 0x4f, 0x06, 0xf5, 0xbf},
    {0x03, 0x02, 0x43, 0x09, 0x6d},
    {0x01, 0x07, 0x41, 0xc2, 0x7f},
    {0x02, 0x02, 0x43, 0x09, 0x6d},
    {0x05, 0x46, 0x03, 0x82, 0x8f},
    {0x03, 0x07, 0x43, 0x09, 0x6d},
    {0x04, 0x07, 0x41, 0xc2, 0x7f},
    {0x02, 0x07, 0x43, 0x09, 0x6d},
    {0xde, 0x46, 0xf5, 0x40, 0x0f},
    {0x03, 0x16, 0x41, 0xb5, 0x9c},
    {0x01, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x16, 0x41, 0xb5, 0x9c},
    {0x06, 0x5f, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xcd, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x5f, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x4e, 0x43, 0xf5, 0xdf},
    {0x03, 0x1a, 0x41, 0xb5, 0x9c},
    {0x01, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x41, 0xb5, 0x9c},
    {0x06, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x7f, 0x03, 0xf5, 0xdf},
    {0x03, 0x8c, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8c, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x7d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x43, 0xb5, 0xac},
    {0x01, 0x2c, 0x46, 0xf5, 0xbf},
    {0x02, 0x25, 0x43, 0xb5, 0xac},
    {0x06, 0x79, 0x01, 0xb5, 0xcf},
    {0x03, 0x82, 0x4e, 0x03, 0xdf},
    {0x04, 0x2c, 0x46, 0xf5, 0xbf},
    {0x02, 0x82, 0x4e, 0x03, 0xdf},
    {0x08, 0xcd, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x41, 0xb5, 0x9c},
    {0x01, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x19, 0x41, 0xb5, 0x9c},
    {0x05, 0x79, 0x01, 0xb5, 0xcf},
    {0x03, 0x0f, 0x43, 0x82, 0x8f},
    {0x04, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x82, 0x8f},
    {0x6a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0xc2, 0xb5, 0x0f},
    {0x01, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xc2, 0xb5, 0x0f},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0xd0, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x43, 0x82, 0x8f},
    {0x01, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x82, 0x8f},
    {0x06, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x09, 0x6d},
    {0x04, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x09, 0x6d},
    {0x09, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x41, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0xc2, 0x8f},
    {0x02, 0x12, 0x41, 0xb5, 0x9c},
    {0x05, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x09, 0x6d},
    {0x04, 0x08, 0x43, 0xc2, 0x8f},
    {0x02, 0x05, 0x42, 0x09, 0x6d},
    {0x0b, 0x4e, 0x43, 0xf5, 0xdf},
    {0x03, 0x15, 0x41, 0xb5, 0x9c},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x41, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x82, 0x8f},
    {0x03, 0x11, 0x43, 0x82, 0x8f},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0x82, 0x8f},
    {0x07, 0x42, 0x01, 0xf5, 0x9c},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x49, 0x43, 0xdf},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0x82, 0x8f},
    {0x03, 0x06, 0x42, 0x09, 0x6d},
    {0x04, 0x81, 0x49, 0x43, 0xdf},
    {0x02, 0x06, 0x42, 0x09, 0x6d},
    {0x4e, 0x09, 0x03, 0xb5, 0xdf},
    {0x03, 0x01, 0x43, 0x82, 0x8f},
    {0x01, 0x0a, 0x43, 0xc2, 0x8f},
    {0x02, 0x01, 0x43, 0x82, 0x8f},
    {0x06, 0x42, 0x03, 0x82, 0x8f},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xc2, 0x8f},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x49, 0x03, 0xdf},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x49, 0x03, 0xdf},
    {0x05, 0x42, 0x03, 0x82, 0x8f},
    {0x03, 0x81, 0x4e, 0x03, 0xdf},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x4e, 0x03, 0xdf},
    {0x0c, 0x4e, 0x43, 0xf5, 0xdf},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0x82, 0x8f},
    {0x03, 0x04, 0x42, 0x09, 0x6d},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x09, 0x6d},
    {0x07, 0x47, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x09, 0x6d},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x09, 0x6d},
    {0x05, 0x47, 0x03, 0x82, 0x8f},
    {0x03, 0x07, 0x42, 0x09, 0x6d},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x09, 0x6d},
    {0xb4, 0x82, 0xb5, 0x00, 0x0f},
    {0x03, 0x9d, 0xf5, 0x00, 0x0d},
    {0x01, 0x1e, 0x46, 0xf5, 0xbf},
    {0x02, 0x9d, 0xf5, 0x00, 0x0d},
    {0x06, 0x56, 0x06, 0xb5, 0xbf},
    {0x03, 0x03, 0x47, 0xb5, 0x6b},
    {0x04, 0x1e, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x47, 0xb5, 0x6b},
    {0x09, 0x53, 0x43, 0xb5, 0xdf},
    {0x03, 0x0b, 0x45, 0xb5, 0x7b},
    {0x01, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x0b, 0x45, 0xb5, 0x7b},
    {0x05, 0x56, 0x06, 0xb5, 0xbf},
    {0x03, 0x05, 0x47, 0xb5, 0x6b},
    {0x04, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x05, 0x47, 0xb5, 0x6b},
    {0x0a, 0x7d, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x44, 0xb5, 0x8b},
    {0x01, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x0c, 0x44, 0xb5, 0x8b},
    {0x06, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x09, 0x45, 0xb5, 0x7b},
    {0x04, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x09, 0x45, 0xb5, 0x7b},
    {0x07, 0x4d, 0x06, 0xf5, 0xbf},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x47, 0xb5, 0x6b},
    {0x04, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x06, 0x47, 0xb5, 0x6b},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x42, 0xb5, 0x9b},
    {0x01, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x14, 0x42, 0xb5, 0x9b},
    {0x06, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x82, 0x7d, 0xb5, 0xff},
    {0x04, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x82, 0x7d, 0xb5, 0xff},
    {0x08, 0x53, 0x43, 0xb5, 0xdf},
    {0x03, 0x18, 0x42, 0xb5, 0x9b},
    {0x01, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x18, 0x42, 0xb5, 0x9b},
    {0x05, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x0e, 0x44, 0xb5, 0x8b},
    {0x04, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x0e, 0x44, 0xb5, 0x8b},
    {0x4f, 0x05, 0x03, 0xf5, 0xdf},
    {0x03, 0x1c, 0x42, 0xb5, 0x9b},
    {0x01, 0x9a, 0x45, 0x43, 0xdf},
    {0x02, 0x1c, 0x42, 0xb5, 0x9b},
    {0x06, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x47, 0xb5, 0x6b},
    {0x04, 0x9a, 0x45, 0x43, 0xdf},
    {0x02, 0x04, 0x47, 0xb5, 0x6b},
    {0x07, 0x43, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x47, 0xb5, 0x6b},
    {0x01, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x47, 0xb5, 0x6b},
    {0x05, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x47, 0xb5, 0x6b},
    {0x04, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x47, 0xb5, 0x6b},
    {0xcc, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x17, 0x42, 0xb5, 0x9b},
    {0x01, 0x22, 0x46, 0xf5, 0xbf},
    {0x02, 0x17, 0x42, 0xb5, 0x9b},
    {0x06, 0x5a, 0x06, 0xb5, 0xbf},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x22, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x48, 0x46, 0xb5, 0xbf},
    {0x03, 0x1b, 0x42, 0xb5, 0x9b},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x42, 0xb5, 0x9b},
    {0x05, 0x5a, 0x06, 0xb5, 0xbf},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x7d, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x43, 0xb5, 0xac},
    {0x01, 0x32, 0x46, 0xf5, 0xbf},
    {0x02, 0x28, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x10, 0x44, 0xb5, 0x8b},
    {0x04, 0x32, 0x46, 0xf5, 0xbf},
    {0x02, 0x10, 0x44, 0xb5, 0x8b},
    {0x07, 0xd8, 0xb5, 0x40, 0x0e},
    {0x03, 0x8e, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x8e, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x7e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0xb5, 0x9b},
    {0x01, 0x3e, 0x46, 0xf5, 0xbf},
    {0x02, 0x13, 0x42, 0xb5, 0x9b},
    {0x06, 0xcb, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x45, 0xb5, 0x7b},
    {0x04, 0x3e, 0x46, 0xf5, 0xbf},
    {0x02, 0x08, 0x45, 0xb5, 0x7b},
    {0x08, 0x48, 0x46, 0xb5, 0xbf},
    {0x03, 0x38, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x38, 0x43, 0xb5, 0xac},
    {0x05, 0xcb, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x7d, 0xb5, 0xff},
    {0x04, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x81, 0x7d, 0xb5, 0xff},
    {0x0c, 0x7d, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x45, 0xb5, 0x7b},
    {0x01, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x0a, 0x45, 0xb5, 0x7b},
    {0x06, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe3, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x2e, 0x43, 0xb5, 0xac},
    {0x01, 0x30, 0x46, 0xf5, 0xbf},
    {0x02, 0x2e, 0x43, 0xb5, 0xac},
    {0x06, 0x65, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x41, 0x05, 0x6d},
    {0x04, 0x30, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x41, 0x05, 0x6d},
    {0x09, 0x78, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x05, 0x7d},
    {0x01, 0x03, 0x43, 0x45, 0x7d},
    {0x02, 0x0b, 0x43, 0x05, 0x7d},
    {0x05, 0x65, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x41, 0x05, 0x6d},
    {0x04, 0x03, 0x43, 0x45, 0x7d},
    {0x02, 0x05, 0x41, 0x05, 0x6d},
    {0x0a, 0x44, 0x46, 0xf5, 0xbf},
    {0x03, 0x36, 0x43, 0xb5, 0xac},
    {0x01, 0x3c, 0x46, 0xf5, 0xbf},
    {0x02, 0x36, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x05, 0x03, 0xdf},
    {0x03, 0x09, 0x43, 0x05, 0x7d},
    {0x04, 0x3c, 0x46, 0xf5, 0xbf},
    {0x02, 0x09, 0x43, 0x05, 0x7d},
    {0x07, 0x6b, 0x03, 0xf5, 0xdf},
    {0x03, 0x88, 0xc2, 0xb5, 0x0f},
    {0x01, 0x05, 0x43, 0x45, 0x7d},
    {0x02, 0x88, 0xc2, 0xb5, 0x0f},
    {0x05, 0xc2, 0x05, 0x03, 0xdf},
    {0x03, 0x06, 0x41, 0x05, 0x6d},
    {0x04, 0x05, 0x43, 0x45, 0x7d},
    {0x02, 0x06, 0x41, 0x05, 0x6d},
    {0x6e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x43, 0xb5, 0xac},
    {0x01, 0x2a, 0x46, 0xf5, 0xbf},
    {0x02, 0x24, 0x43, 0xb5, 0xac},
    {0x06, 0x59, 0x06, 0xb5, 0xbf},
    {0x03, 0x82, 0x44, 0x06, 0xbf},
    {0x04, 0x2a, 0x46, 0xf5, 0xbf},
    {0x02, 0x82, 0x44, 0x06, 0xbf},
    {0x08, 0x78, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x34, 0x43, 0xb5, 0xac},
    {0x05, 0x59, 0x06, 0xb5, 0xbf},
    {0x03, 0x0f, 0x44, 0xb5, 0x8b},
    {0x04, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x44, 0xb5, 0x8b},
    {0x66, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x43, 0xb5, 0xac},
    {0x01, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x43, 0xb5, 0xac},
    {0x06, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x05, 0x6d},
    {0x04, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x05, 0x6d},
    {0x07, 0x51, 0x06, 0xf5, 0xbf},
    {0x03, 0x02, 0x41, 0x05, 0x6d},
    {0x01, 0x06, 0x43, 0x45, 0x7d},
    {0x02, 0x02, 0x41, 0x05, 0x6d},
    {0x05, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x05, 0x6d},
    {0x04, 0x06, 0x43, 0x45, 0x7d},
    {0x02, 0x07, 0x41, 0x05, 0x6d},
    {0xc8, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x44, 0xb5, 0x8b},
    {0x01, 0x20, 0x46, 0xf5, 0xbf},
    {0x02, 0x0d, 0x44, 0xb5, 0x8b},
    {0x06, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x20, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x9b, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x9b, 0xf5, 0x00, 0x0b},
    {0x05, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x44, 0x46, 0xf5, 0xbf},
    {0x03, 0x2c, 0x43, 0xb5, 0xac},
    {0x01, 0x3a, 0x46, 0xf5, 0xbf},
    {0x02, 0x2c, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x11, 0x44, 0xb5, 0x8b},
    {0x04, 0x3a, 0x46, 0xf5, 0xbf},
    {0x02, 0x11, 0x44, 0xb5, 0x8b},
    {0x07, 0xd4, 0xb5, 0x40, 0x0e},
    {0x03, 0x96, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x96, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x44, 0xb5, 0x8b},
    {0x01, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x01, 0x44, 0xb5, 0x8b},
    {0x06, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x05, 0x7d},
    {0x04, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x05, 0x7d},
    {0x08, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0x45, 0x7d},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x81, 0x44, 0x06, 0xbf},
    {0x04, 0x04, 0x43, 0x45, 0x7d},
    {0x02, 0x81, 0x44, 0x06, 0xbf},
    {0x0c, 0x44, 0x46, 0xf5, 0xbf},
    {0x03, 0x0a, 0x43, 0x05, 0x7d},
    {0x01, 0x02, 0x43, 0x45, 0x7d},
    {0x02, 0x0a, 0x43, 0x05, 0x7d},
    {0x06, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0x45, 0x7d},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0x45, 0x7d},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0x45, 0x7d},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xf4, 0x45, 0x03, 0xf5, 0xff},
    {0x03, 0x1e, 0x43, 0xb5, 0xac},
    {0x01, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x1e, 0x43, 0xb5, 0xac},
    {0x06, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x82, 0x6f},
    {0x04, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x82, 0x6f},
    {0x09, 0x4a, 0x46, 0xb5, 0xbf},
    {0x03, 0x0b, 0x44, 0x82, 0x7f},
    {0x01, 0x03, 0x44, 0xc2, 0x7f},
    {0x02, 0x0b, 0x44, 0x82, 0x7f},
    {0x05, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x82, 0x6f},
    {0x04, 0x03, 0x44, 0xc2, 0x7f},
    {0x02, 0x05, 0x45, 0x82, 0x6f},
    {0x0a, 0x42, 0x46, 0xf5, 0xbf},
    {0x03, 0x0c, 0x42, 0x82, 0x8f},
    {0x01, 0x0b, 0x42, 0xc2, 0x8f},
    {0x02, 0x0c, 0x42, 0x82, 0x8f},
    {0x06, 0x43, 0x02, 0x82, 0x8f},
    {0x03, 0x09, 0x44, 0x82, 0x7f},
    {0x04, 0x0b, 0x42, 0xc2, 0x8f},
    {0x02, 0x09, 0x44, 0x82, 0x7f},
    {0x07, 0x41, 0x06, 0xf5, 0xbf},
    {0x03, 0x9a, 0x46, 0x01, 0xcf},
    {0x01, 0x05, 0x44, 0xc2, 0x7f},
    {0x02, 0x9a, 0x46, 0x01, 0xcf},
    {0x05, 0x43, 0x02, 0x82, 0x8f},
    {0x03, 0x06, 0x45, 0x82, 0x6f},
    {0x04, 0x05, 0x44, 0xc2, 0x7f},
    {0x02, 0x06, 0x45, 0x82, 0x6f},
    {0x4d, 0x06, 0x01, 0xb5, 0xcf},
    {0x03, 0x22, 0x43, 0xb5, 0xac},
    {0x01, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x22, 0x43, 0xb5, 0xac},
    {0x06, 0x52, 0x06, 0xb5, 0xbf},
    {0x03, 0x82, 0x42, 0x06, 0xbf},
    {0x04, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x06, 0xbf},
    {0x08, 0x4a, 0x46, 0xb5, 0xbf},
    {0x03, 0x32, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0xc2, 0x8f},
    {0x02, 0x32, 0x43, 0xb5, 0xac},
    {0x05, 0x52, 0x06, 0xb5, 0xbf},
    {0x03, 0x0e, 0x42, 0x82, 0x8f},
    {0x04, 0x09, 0x42, 0xc2, 0x8f},
    {0x02, 0x0e, 0x42, 0x82, 0x8f},
    {0x53, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3e, 0x43, 0xb5, 0xac},
    {0x01, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x3e, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x82, 0x8f},
    {0x03, 0x04, 0x45, 0x82, 0x6f},
    {0x04, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x45, 0x82, 0x6f},
    {0x07, 0x48, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x82, 0x6f},
    {0x01, 0x06, 0x44, 0xc2, 0x7f},
    {0x02, 0x02, 0x45, 0x82, 0x6f},
    {0x05, 0x45, 0x02, 0x82, 0x8f},
    {0x03, 0x07, 0x45, 0x82, 0x6f},
    {0x04, 0x06, 0x44, 0xc2, 0x7f},
    {0x02, 0x07, 0x45, 0x82, 0x6f},
    {0x58, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x30, 0x43, 0xb5, 0xac},
    {0x01, 0x26, 0x46, 0xf5, 0xbf},
    {0x02, 0x30, 0x43, 0xb5, 0xac},
    {0x06, 0x55, 0x06, 0xb5, 0xbf},
    {0x03, 0x03, 0x43, 0x06, 0x6c},
    {0x04, 0x26, 0x46, 0xf5, 0xbf},
    {0x02, 0x03, 0x43, 0x06, 0x6c},
    {0x09, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3c, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x46, 0x41, 0xcf},
    {0x02, 0x3c, 0x43, 0xb5, 0xac},
    {0x05, 0x55, 0x06, 0xb5, 0xbf},
    {0x03, 0x05, 0x43, 0x06, 0x6c},
    {0x04, 0x82, 0x46, 0x41, 0xcf},
    {0x02, 0x05, 0x43, 0x06, 0x6c},
    {0x0b, 0x42, 0x46, 0xf5, 0xbf},
    {0x03, 0x2a, 0x43, 0xb5, 0xac},
    {0x01, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x2a, 0x43, 0xb5, 0xac},
    {0x06, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x82, 0x8f},
    {0x04, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x82, 0x8f},
    {0x07, 0xc3, 0xb5, 0x40, 0x0b},
    {0x03, 0x92, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x92, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x06, 0x6c},
    {0x04, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x06, 0x6c},
    {0x56, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x20, 0x43, 0xb5, 0xac},
    {0x01, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x43, 0xb5, 0xac},
    {0x06, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x08, 0x44, 0x82, 0x7f},
    {0x04, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0x82, 0x7f},
    {0x08, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3a, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0xc2, 0x7f},
    {0x02, 0x3a, 0x43, 0xb5, 0xac},
    {0x05, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x81, 0x42, 0x06, 0xbf},
    {0x04, 0x04, 0x44, 0xc2, 0x7f},
    {0x02, 0x81, 0x42, 0x06, 0xbf},
    {0x0c, 0x42, 0x46, 0xf5, 0xbf},
    {0x03, 0x0a, 0x44, 0x82, 0x7f},
    {0x01, 0x02, 0x44, 0xc2, 0x7f},
    {0x02, 0x0a, 0x44, 0x82, 0x7f},
    {0x06, 0x46, 0x02, 0x82, 0x8f},
    {0x03, 0x04, 0x43, 0x06, 0x6c},
    {0x04, 0x02, 0x44, 0xc2, 0x7f},
    {0x02, 0x04, 0x43, 0x06, 0x6c},
    {0x07, 0xc1, 0x82, 0xf5, 0x0f},
    {0x03, 0x02, 0x43, 0x06, 0x6c},
    {0x01, 0x07, 0x44, 0xc2, 0x7f},
    {0x02, 0x02, 0x43, 0x06, 0x6c},
    {0x05, 0x46, 0x02, 0x82, 0x8f},
    {0x03, 0x07, 0x43, 0x06, 0x6c},
    {0x04, 0x07, 0x44, 0xc2, 0x7f},
    {0x02, 0x07, 0x43, 0x06, 0x6c},
    {0xe7, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x16, 0x42, 0xb5, 0x9b},
    {0x01, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x16, 0x42, 0xb5, 0x9b},
    {0x06, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x05, 0x6d},
    {0x04, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x05, 0x6d},
    {0x09, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x05, 0x7d},
    {0x01, 0x03, 0x42, 0x45, 0x7d},
    {0x02, 0x0b, 0x42, 0x05, 0x7d},
    {0x05, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x05, 0x6d},
    {0x04, 0x03, 0x42, 0x45, 0x7d},
    {0x02, 0x05, 0x44, 0x05, 0x6d},
    {0x0a, 0x47, 0x46, 0xf5, 0xbf},
    {0x03, 0x1a, 0x42, 0xb5, 0x9b},
    {0x01, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0xb5, 0x9b},
    {0x06, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x05, 0x7d},
    {0x04, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x05, 0x7d},
    {0x07, 0x4a, 0x03, 0xf5, 0xac},
    {0x03, 0x8a, 0xc2, 0xb5, 0x0f},
    {0x01, 0x05, 0x42, 0x45, 0x7d},
    {0x02, 0x8a, 0xc2, 0xb5, 0x0f},
    {0x05, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x05, 0x6d},
    {0x04, 0x05, 0x42, 0x45, 0x7d},
    {0x02, 0x06, 0x44, 0x05, 0x6d},
    {0x50, 0x82, 0xf5, 0x00, 0x0f},
    {0x03, 0x26, 0x43, 0xb5, 0xac},
    {0x01, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x26, 0x43, 0xb5, 0xac},
    {0x06, 0xc3, 0x82, 0xb5, 0x0f},
    {0x03, 0x82, 0x47, 0x06, 0xbf},
    {0x04, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x06, 0xbf},
    {0x08, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0xb5, 0x9b},
    {0x01, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x19, 0x42, 0xb5, 0x9b},
    {0x05, 0xc3, 0x82, 0xb5, 0x0f},
    {0x03, 0x0f, 0x42, 0x82, 0x8f},
    {0x04, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0x82, 0x8f},
    {0x40, 0x82, 0xf5, 0x00, 0x0f},
    {0x03, 0x86, 0xc2, 0xb5, 0x0f},
    {0x01, 0x84, 0xc2, 0xf5, 0x0f},
    {0x02, 0x86, 0xc2, 0xb5, 0x0f},
    {0x06, 0xc1, 0x05, 0x03, 0xdf},
    {0x03, 0x04, 0x44, 0x05, 0x6d},
    {0x04, 0x84, 0xc2, 0xf5, 0x0f},
    {0x02, 0x04, 0x44, 0x05, 0x6d},
    {0x07, 0x44, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x05, 0x6d},
    {0x01, 0x06, 0x42, 0x45, 0x7d},
    {0x02, 0x02, 0x44, 0x05, 0x6d},
    {0x05, 0xc1, 0x05, 0x03, 0xdf},
    {0x03, 0x07, 0x44, 0x05, 0x6d},
    {0x04, 0x06, 0x42, 0x45, 0x7d},
    {0x02, 0x07, 0x44, 0x05, 0x6d},
    {0xc1, 0x43, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x82, 0x8f},
    {0x01, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0x82, 0x8f},
    {0x06, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x06, 0x6c},
    {0x04, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x06, 0x6c},
    {0x09, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xc2, 0x8f},
    {0x02, 0x12, 0x42, 0xb5, 0x9b},
    {0x05, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x06, 0x6c},
    {0x04, 0x08, 0x42, 0xc2, 0x8f},
    {0x02, 0x05, 0x42, 0x06, 0x6c},
    {0x0b, 0x47, 0x46, 0xf5, 0xbf},
    {0x03, 0x15, 0x42, 0xb5, 0x9b},
    {0x01, 0x83, 0x45, 0x43, 0xdf},
    {0x02, 0x15, 0x42, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0x82, 0x8f},
    {0x03, 0x11, 0x42, 0x82, 0x8f},
    {0x04, 0x83, 0x45, 0x43, 0xdf},
    {0x02, 0x11, 0x42, 0x82, 0x8f},
    {0x07, 0x42, 0x02, 0xf5, 0x9b},
    {0x03, 0x84, 0x45, 0x03, 0xdf},
    {0x01, 0x81, 0x46, 0x41, 0xcf},
    {0x02, 0x84, 0x45, 0x03, 0xdf},
    {0x05, 0x44, 0x02, 0x82, 0x8f},
    {0x03, 0x06, 0x42, 0x06, 0x6c},
    {0x04, 0x81, 0x46, 0x41, 0xcf},
    {0x02, 0x06, 0x42, 0x06, 0x6c},
    {0x4e, 0x06, 0x01, 0xb5, 0xcf},
    {0x03, 0x01, 0x42, 0x82, 0x8f},
    {0x01, 0x0a, 0x42, 0xc2, 0x8f},
    {0x02, 0x01, 0x42, 0x82, 0x8f},
    {0x06, 0x42, 0x02, 0x82, 0x8f},
    {0x03, 0x08, 0x42, 0x05, 0x7d},
    {0x04, 0x0a, 0x42, 0xc2, 0x8f},
    {0x02, 0x08, 0x42, 0x05, 0x7d},
    {0x08, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x46, 0x01, 0xcf},
    {0x01, 0x04, 0x42, 0x45, 0x7d},
    {0x02, 0x83, 0x46, 0x01, 0xcf},
    {0x05, 0x42, 0x02, 0x82, 0x8f},
    {0x03, 0x81, 0x47, 0x06, 0xbf},
    {0x04, 0x04, 0x42, 0x45, 0x7d},
    {0x02, 0x81, 0x47, 0x06, 0xbf},
    {0x0c, 0x47, 0x46, 0xf5, 0xbf},
    {0x03, 0x0a, 0x42, 0x05, 0x7d},
    {0x01, 0x02, 0x42, 0x45, 0x7d},
    {0x02, 0x0a, 0x42, 0x05, 0x7d},
    {0x06, 0x47, 0x02, 0x82, 0x8f},
    {0x03, 0x04, 0x42, 0x06, 0x6c},
    {0x04, 0x02, 0x42, 0x45, 0x7d},
    {0x02, 0x04, 0x42, 0x06, 0x6c},
    {0x07, 0x47, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x06, 0x6c},
    {0x01, 0x07, 0x42, 0x45, 0x7d},
    {0x02, 0x02, 0x42, 0x06, 0x6c},
    {0x05, 0x47, 0x02, 0x82, 0x8f},
    {0x03, 0x07, 0x42, 0x06, 0x6c},
    {0x04, 0x07, 0x42, 0x45, 0x7d},
    {0x02, 0x07, 0x42, 0x06, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xb4, 0xf5, 0x00, 0x0c},
    {0x01, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0xb4, 0xf5, 0x00, 0x0c},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0x6e, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x4b, 0xb5, 0x7e},
    {0x01, 0x03, 0x4b, 0xf5, 0x7e},
    {0x02, 0x0b, 0x4b, 0xb5, 0x7e},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0x4b, 0xf5, 0x7e},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x6f, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x48, 0xb5, 0x8e},
    {0x01, 0x0b, 0x48, 0xf5, 0x8e},
    {0x02, 0x0c, 0x48, 0xb5, 0x8e},
    {0x06, 0x43, 0x08, 0xb5, 0x8e},
    {0x03, 0x09, 0x4b, 0xb5, 0x7e},
    {0x04, 0x0b, 0x48, 0xf5, 0x8e},
    {0x02, 0x09, 0x4b, 0xb5, 0x7e},
    {0x07, 0x5d, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x4b, 0xf5, 0x7e},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x08, 0xb5, 0x8e},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0x4b, 0xf5, 0x7e},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x46, 0xb5, 0x9d},
    {0x01, 0x0c, 0x46, 0xf5, 0x9d},
    {0x02, 0x14, 0x46, 0xb5, 0x9d},
    {0x06, 0x4b, 0x06, 0xb5, 0x9d},
    {0x03, 0x82, 0x6f, 0xb5, 0xff},
    {0x04, 0x0c, 0x46, 0xf5, 0x9d},
    {0x02, 0x82, 0x6f, 0xb5, 0xff},
    {0x08, 0x6e, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x46, 0xb5, 0x9d},
    {0x01, 0x09, 0x48, 0xf5, 0x8e},
    {0x02, 0x18, 0x46, 0xb5, 0x9d},
    {0x05, 0x4b, 0x06, 0xb5, 0x9d},
    {0x03, 0x0e, 0x48, 0xb5, 0x8e},
    {0x04, 0x09, 0x48, 0xf5, 0x8e},
    {0x02, 0x0e, 0x48, 0xb5, 0x8e},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x46, 0xb5, 0x9d},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x46, 0xb5, 0x9d},
    {0x06, 0x45, 0x08, 0xb5, 0x8e},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0x4b, 0xf5, 0x7e},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0x08, 0xb5, 0x8e},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0x4b, 0xf5, 0x7e},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0x46, 0xb5, 0x9d},
    {0x01, 0x14, 0x41, 0xf5, 0xad},
    {0x02, 0x17, 0x46, 0xb5, 0x9d},
    {0x06, 0x4c, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0x41, 0xb5, 0xad},
    {0x03, 0x1b, 0x46, 0xb5, 0x9d},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x46, 0xb5, 0x9d},
    {0x05, 0x4c, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x6f, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x41, 0xb5, 0xad},
    {0x01, 0x18, 0x41, 0xf5, 0xad},
    {0x02, 0x27, 0x41, 0xb5, 0xad},
    {0x06, 0x49, 0x06, 0xb5, 0x9d},
    {0x03, 0x10, 0x48, 0xb5, 0x8e},
    {0x04, 0x18, 0x41, 0xf5, 0xad},
    {0x02, 0x10, 0x48, 0xb5, 0x8e},
    {0x07, 0x4b, 0x01, 0xf5, 0xad},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0x46, 0xf5, 0x9d},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0x06, 0xb5, 0x9d},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x46, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0x46, 0xb5, 0x9d},
    {0x01, 0x1c, 0x41, 0xf5, 0xad},
    {0x02, 0x13, 0x46, 0xb5, 0x9d},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0x4b, 0xb5, 0x7e},
    {0x04, 0x1c, 0x41, 0xf5, 0xad},
    {0x02, 0x08, 0x4b, 0xb5, 0x7e},
    {0x08, 0x43, 0x41, 0xb5, 0xad},
    {0x03, 0x37, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x4b, 0xf5, 0x7e},
    {0x02, 0x37, 0x41, 0xb5, 0xad},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x6f, 0xb5, 0xff},
    {0x04, 0x04, 0x4b, 0xf5, 0x7e},
    {0x02, 0x81, 0x6f, 0xb5, 0xff},
    {0x0c, 0x6f, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x4b, 0xb5, 0x7e},
    {0x01, 0x02, 0x4b, 0xf5, 0x7e},
    {0x02, 0x0a, 0x4b, 0xb5, 0x7e},
    {0x06, 0x46, 0x08, 0xb5, 0x8e},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x4b, 0xf5, 0x7e},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x4b, 0xf5, 0x7e},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x08, 0xb5, 0x8e},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x4b, 0xf5, 0x7e},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xdc, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x2d, 0x41, 0xb5, 0xad},
    {0x01, 0x17, 0x41, 0xf5, 0xad},
    {0x02, 0x2d, 0x41, 0xb5, 0xad},
    {0x06, 0x54, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0x43, 0xb5, 0xbd},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x35, 0x41, 0xb5, 0xad},
    {0x01, 0x1b, 0x41, 0xf5, 0xad},
    {0x02, 0x35, 0x41, 0xb5, 0xad},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x41, 0xf5, 0xad},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0x03, 0xf5, 0xbd},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x23, 0x41, 0xb5, 0xad},
    {0x01, 0x27, 0x43, 0xf5, 0xbd},
    {0x02, 0x23, 0x41, 0xb5, 0xad},
    {0x06, 0x58, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x43, 0x03, 0xbd},
    {0x04, 0x27, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x43, 0x03, 0xbd},
    {0x08, 0x4b, 0x43, 0xb5, 0xbd},
    {0x03, 0x33, 0x41, 0xb5, 0xad},
    {0x01, 0x10, 0x46, 0xf5, 0x9d},
    {0x02, 0x33, 0x41, 0xb5, 0xad},
    {0x05, 0x58, 0x03, 0xb5, 0xbd},
    {0x03, 0x0f, 0x48, 0xb5, 0x8e},
    {0x04, 0x10, 0x46, 0xf5, 0x9d},
    {0x02, 0x0f, 0x48, 0xb5, 0x8e},
    {0x54, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3f, 0x41, 0xb5, 0xad},
    {0x01, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x3f, 0x41, 0xb5, 0xad},
    {0x06, 0x4e, 0x01, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x01, 0xf5, 0xad},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x01, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x0d, 0x48, 0xb5, 0x8e},
    {0x01, 0x13, 0x41, 0xf5, 0xad},
    {0x02, 0x0d, 0x48, 0xb5, 0x8e},
    {0x06, 0x5c, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0x41, 0xb5, 0xad},
    {0x03, 0x97, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x48, 0xf5, 0x8e},
    {0x02, 0x97, 0xf5, 0x00, 0x0b},
    {0x05, 0x5c, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x48, 0xf5, 0x8e},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x2b, 0x41, 0xb5, 0xad},
    {0x01, 0x37, 0x43, 0xf5, 0xbd},
    {0x02, 0x2b, 0x41, 0xb5, 0xad},
    {0x06, 0x44, 0x08, 0xb5, 0x8e},
    {0x03, 0x11, 0x48, 0xb5, 0x8e},
    {0x04, 0x37, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x48, 0xb5, 0x8e},
    {0x07, 0xda, 0xb5, 0x40, 0x0b},
    {0x03, 0x93, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x93, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x08, 0xb5, 0x8e},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x48, 0xb5, 0x8e},
    {0x01, 0x0a, 0x48, 0xf5, 0x8e},
    {0x02, 0x01, 0x48, 0xb5, 0x8e},
    {0x06, 0x42, 0x08, 0xb5, 0x8e},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x48, 0xf5, 0x8e},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x08, 0xb5, 0x8e},
    {0x03, 0x81, 0x43, 0x03, 0xbd},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0x03, 0xbd},
    {0x0c, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x08, 0xb5, 0x8e},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x08, 0xb5, 0x8e},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x41, 0xb5, 0xad},
    {0x01, 0x2d, 0x43, 0xf5, 0xbd},
    {0x02, 0x1d, 0x41, 0xb5, 0xad},
    {0x06, 0x57, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x76, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x7b, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x61, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0xc2, 0xb5, 0x0d},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0xc2, 0xb5, 0x0d},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x82, 0xb5, 0x00, 0x0d},
    {0x03, 0x21, 0x41, 0xb5, 0xad},
    {0x01, 0x35, 0x43, 0xf5, 0xbd},
    {0x02, 0x21, 0x41, 0xb5, 0xad},
    {0x06, 0x5b, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x7b, 0xb5, 0xff},
    {0x04, 0x35, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x7b, 0xb5, 0xff},
    {0x08, 0x76, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x41, 0xb5, 0xad},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0x41, 0xb5, 0xad},
    {0x05, 0x5b, 0x03, 0xb5, 0xbd},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0xc3, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x3d, 0x41, 0xb5, 0xad},
    {0x01, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x41, 0xb5, 0xad},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0xd4, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x2f, 0x41, 0xb5, 0xad},
    {0x01, 0x23, 0x43, 0xf5, 0xbd},
    {0x02, 0x2f, 0x41, 0xb5, 0xad},
    {0x06, 0x68, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x82, 0x6d},
    {0x04, 0x23, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x82, 0x6d},
    {0x09, 0x49, 0x43, 0xb5, 0xbd},
    {0x03, 0x3b, 0x41, 0xb5, 0xad},
    {0x01, 0x82, 0xc2, 0xf5, 0x0d},
    {0x02, 0x3b, 0x41, 0xb5, 0xad},
    {0x05, 0x68, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x82, 0x6d},
    {0x04, 0x82, 0xc2, 0xf5, 0x0d},
    {0x02, 0x05, 0x43, 0x82, 0x6d},
    {0x0b, 0x7b, 0xf5, 0x40, 0xff},
    {0x03, 0x29, 0x41, 0xb5, 0xad},
    {0x01, 0x33, 0x43, 0xf5, 0xbd},
    {0x02, 0x29, 0x41, 0xb5, 0xad},
    {0x06, 0x50, 0x01, 0xb5, 0xad},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x71, 0x03, 0xf5, 0xdf},
    {0x03, 0x8f, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x46, 0xf5, 0x9d},
    {0x02, 0x8f, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x01, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x82, 0x6d},
    {0x04, 0x0f, 0x46, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x82, 0x6d},
    {0x5f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x41, 0xb5, 0xad},
    {0x01, 0x3f, 0x43, 0xf5, 0xbd},
    {0x02, 0x1f, 0x41, 0xb5, 0xad},
    {0x06, 0xcd, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0x43, 0xb5, 0xbd},
    {0x03, 0x39, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0x41, 0xb5, 0xad},
    {0x05, 0xcd, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x7b, 0xb5, 0xff},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x7b, 0xb5, 0xff},
    {0x0c, 0x7b, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x82, 0x6d},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x82, 0x6d},
    {0x07, 0x4e, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x82, 0x6d},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x82, 0x6d},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x82, 0x6d},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x82, 0x6d},
    {0xdd, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x46, 0xb5, 0x9d},
    {0x01, 0x0d, 0x46, 0xf5, 0x9d},
    {0x02, 0x16, 0x46, 0xb5, 0x9d},
    {0x06, 0x53, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x46, 0xf5, 0x9d},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xc8, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x46, 0xb5, 0x9d},
    {0x01, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x46, 0xb5, 0x9d},
    {0x06, 0x48, 0x06, 0xb5, 0x9d},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x7d, 0x03, 0xf5, 0xdf},
    {0x03, 0x8b, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x06, 0xb5, 0x9d},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x7a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x41, 0xb5, 0xad},
    {0x01, 0x2b, 0x43, 0xf5, 0xbd},
    {0x02, 0x25, 0x41, 0xb5, 0xad},
    {0x06, 0x78, 0x01, 0xb5, 0xcf},
    {0x03, 0x82, 0x45, 0x03, 0xbd},
    {0x04, 0x2b, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x45, 0x03, 0xbd},
    {0x08, 0xc8, 0xf5, 0x00, 0x0e},
    {0x03, 0x19, 0x46, 0xb5, 0x9d},
    {0x01, 0x11, 0x46, 0xf5, 0x9d},
    {0x02, 0x19, 0x46, 0xb5, 0x9d},
    {0x05, 0x78, 0x01, 0xb5, 0xcf},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0x46, 0xf5, 0x9d},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0xce, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0x46, 0xf5, 0x9d},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0x06, 0xb5, 0x9d},
    {0x03, 0x03, 0x42, 0x82, 0x6d},
    {0x04, 0x01, 0x46, 0xf5, 0x9d},
    {0x02, 0x03, 0x42, 0x82, 0x6d},
    {0x09, 0x46, 0x41, 0xb5, 0xad},
    {0x03, 0x12, 0x46, 0xb5, 0x9d},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0x46, 0xb5, 0x9d},
    {0x05, 0x4a, 0x06, 0xb5, 0x9d},
    {0x03, 0x05, 0x42, 0x82, 0x6d},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x82, 0x6d},
    {0x0b, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x46, 0xb5, 0x9d},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x46, 0xb5, 0x9d},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0x06, 0xf5, 0x9d},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0xc2, 0xf5, 0x0d},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x82, 0x6d},
    {0x04, 0x81, 0xc2, 0xf5, 0x0d},
    {0x02, 0x06, 0x42, 0x82, 0x6d},
    {0x4e, 0x82, 0xb5, 0x00, 0x0d},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0xc2, 0xb5, 0x0d},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0xc2, 0xb5, 0x0d},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0x03, 0xbd},
    {0x0c, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x82, 0x6d},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x82, 0x6d},
    {0x07, 0x47, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x82, 0x6d},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x82, 0x6d},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x82, 0x6d},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x82, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xa2, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x43, 0xf5, 0xbd},
    {0x02, 0xa2, 0xf5, 0x00, 0x0e},
    {0x06, 0x6e, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x48, 0xb5, 0x6c},
    {0x04, 0x1d, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x48, 0xb5, 0x6c},
    {0x09, 0x64, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0xb5, 0x7b},
    {0x01, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x0b, 0x46, 0xb5, 0x7b},
    {0x05, 0x6e, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x48, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x05, 0x48, 0xb5, 0x6c},
    {0x0a, 0x69, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x41, 0xb5, 0x8b},
    {0x01, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x0c, 0x41, 0xb5, 0x8b},
    {0x06, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x09, 0x46, 0xb5, 0x7b},
    {0x04, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x09, 0x46, 0xb5, 0x7b},
    {0x07, 0x6f, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x48, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x06, 0x48, 0xb5, 0x6c},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x43, 0xb5, 0x9b},
    {0x01, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x14, 0x43, 0xb5, 0x9b},
    {0x06, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x82, 0x69, 0xb5, 0xff},
    {0x04, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x82, 0x69, 0xb5, 0xff},
    {0x08, 0x64, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0xb5, 0x9b},
    {0x01, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x18, 0x43, 0xb5, 0x9b},
    {0x05, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x0e, 0x41, 0xb5, 0x8b},
    {0x04, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x0e, 0x41, 0xb5, 0x8b},
    {0x4f, 0x10, 0xb5, 0x40, 0xff},
    {0x03, 0x1c, 0x43, 0xb5, 0x9b},
    {0x01, 0x9a, 0x50, 0xf5, 0xff},
    {0x02, 0x1c, 0x43, 0xb5, 0x9b},
    {0x06, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x48, 0xb5, 0x6c},
    {0x04, 0x9a, 0x50, 0xf5, 0xff},
    {0x02, 0x04, 0x48, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x48, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x48, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x48, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x48, 0xb5, 0x6c},
    {0xca, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x17, 0x43, 0xb5, 0x9b},
    {0x01, 0x21, 0x43, 0xf5, 0xbd},
    {0x02, 0x17, 0x43, 0xb5, 0x9b},
    {0x06, 0x76, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x21, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x1b, 0x43, 0xb5, 0x9b},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x43, 0xb5, 0x9b},
    {0x05, 0x76, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x69, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x41, 0xb5, 0xad},
    {0x01, 0x31, 0x43, 0xf5, 0xbd},
    {0x02, 0x28, 0x41, 0xb5, 0xad},
    {0x06, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x10, 0x41, 0xb5, 0x8b},
    {0x04, 0x31, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x41, 0xb5, 0x8b},
    {0x07, 0x7b, 0x03, 0xf5, 0xdf},
    {0x03, 0x8d, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x8d, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x71, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0xb5, 0x9b},
    {0x01, 0x3d, 0x43, 0xf5, 0xbd},
    {0x02, 0x13, 0x43, 0xb5, 0x9b},
    {0x06, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0xb5, 0x7b},
    {0x04, 0x3d, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x46, 0xb5, 0x7b},
    {0x08, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x38, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x38, 0x41, 0xb5, 0xad},
    {0x05, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x69, 0xb5, 0xff},
    {0x04, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x81, 0x69, 0xb5, 0xff},
    {0x0c, 0x69, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x46, 0xb5, 0x7b},
    {0x01, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x0a, 0x46, 0xb5, 0x7b},
    {0x06, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe2, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x2e, 0x41, 0xb5, 0xad},
    {0x01, 0x2f, 0x43, 0xf5, 0xbd},
    {0x02, 0x2e, 0x41, 0xb5, 0xad},
    {0x06, 0x64, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x41, 0x10, 0x6f},
    {0x04, 0x2f, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x10, 0x6f},
    {0x09, 0x74, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x10, 0x7f},
    {0x01, 0x03, 0x43, 0x50, 0x7f},
    {0x02, 0x0b, 0x43, 0x10, 0x7f},
    {0x05, 0x64, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x41, 0x10, 0x6f},
    {0x04, 0x03, 0x43, 0x50, 0x7f},
    {0x02, 0x05, 0x41, 0x10, 0x6f},
    {0x0a, 0x50, 0x43, 0xf5, 0xdf},
    {0x03, 0x36, 0x41, 0xb5, 0xad},
    {0x01, 0x3b, 0x43, 0xf5, 0xbd},
    {0x02, 0x36, 0x41, 0xb5, 0xad},
    {0x06, 0xc2, 0x10, 0xb5, 0xff},
    {0x03, 0x09, 0x43, 0x10, 0x7f},
    {0x04, 0x3b, 0x43, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x10, 0x7f},
    {0x07, 0x69, 0x03, 0xf5, 0xdf},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x50, 0x7f},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x10, 0xb5, 0xff},
    {0x03, 0x06, 0x41, 0x10, 0x6f},
    {0x04, 0x05, 0x43, 0x50, 0x7f},
    {0x02, 0x06, 0x41, 0x10, 0x6f},
    {0x6d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x41, 0xb5, 0xad},
    {0x01, 0x29, 0x43, 0xf5, 0xbd},
    {0x02, 0x24, 0x41, 0xb5, 0xad},
    {0x06, 0x74, 0x01, 0xb5, 0xcf},
    {0x03, 0x82, 0x50, 0x03, 0xdf},
    {0x04, 0x29, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x50, 0x03, 0xdf},
    {0x08, 0x74, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x41, 0xb5, 0xad},
    {0x01, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x34, 0x41, 0xb5, 0xad},
    {0x05, 0x74, 0x01, 0xb5, 0xcf},
    {0x03, 0x0f, 0x41, 0xb5, 0x8b},
    {0x04, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x41, 0xb5, 0x8b},
    {0x65, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x41, 0xb5, 0xad},
    {0x01, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x41, 0xb5, 0xad},
    {0x06, 0x4f, 0x01, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x10, 0x6f},
    {0x04, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x10, 0x6f},
    {0x07, 0x50, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x10, 0x6f},
    {0x01, 0x06, 0x43, 0x50, 0x7f},
    {0x02, 0x02, 0x41, 0x10, 0x6f},
    {0x05, 0x4f, 0x01, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x10, 0x6f},
    {0x04, 0x06, 0x43, 0x50, 0x7f},
    {0x02, 0x07, 0x41, 0x10, 0x6f},
    {0xc7, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x41, 0xb5, 0x8b},
    {0x01, 0x1f, 0x43, 0xf5, 0xbd},
    {0x02, 0x0d, 0x41, 0xb5, 0x8b},
    {0x06, 0x40, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x1f, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x4f, 0x41, 0xb5, 0xcf},
    {0x03, 0x99, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x99, 0xf5, 0x00, 0x0b},
    {0x05, 0x40, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x50, 0x43, 0xf5, 0xdf},
    {0x03, 0x2c, 0x41, 0xb5, 0xad},
    {0x01, 0x39, 0x43, 0xf5, 0xbd},
    {0x02, 0x2c, 0x41, 0xb5, 0xad},
    {0x06, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x11, 0x41, 0xb5, 0x8b},
    {0x04, 0x39, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x41, 0xb5, 0x8b},
    {0x07, 0xd0, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x95, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x41, 0xb5, 0x8b},
    {0x01, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x01, 0x41, 0xb5, 0x8b},
    {0x06, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x10, 0x7f},
    {0x04, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x10, 0x7f},
    {0x08, 0x4f, 0x41, 0xb5, 0xcf},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0x50, 0x7f},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x81, 0x50, 0x03, 0xdf},
    {0x04, 0x04, 0x43, 0x50, 0x7f},
    {0x02, 0x81, 0x50, 0x03, 0xdf},
    {0x0c, 0x50, 0x43, 0xf5, 0xdf},
    {0x03, 0x0a, 0x43, 0x10, 0x7f},
    {0x01, 0x02, 0x43, 0x50, 0x7f},
    {0x02, 0x0a, 0x43, 0x10, 0x7f},
    {0x06, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0x50, 0x7f},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0x50, 0x7f},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0x50, 0x7f},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xf4, 0x50, 0xf5, 0x40, 0x0f},
    {0x03, 0x1e, 0x41, 0xb5, 0xad},
    {0x01, 0x16, 0x41, 0xf5, 0xad},
    {0x02, 0x1e, 0x41, 0xb5, 0xad},
    {0x06, 0x4d, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x40, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x5f, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0x4f, 0xb5, 0xee},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x4f, 0xb5, 0xee},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x0f, 0xb5, 0x00, 0xee},
    {0x03, 0x22, 0x41, 0xb5, 0xad},
    {0x01, 0x1a, 0x41, 0xf5, 0xad},
    {0x02, 0x22, 0x41, 0xb5, 0xad},
    {0x06, 0xd9, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xf5, 0x00, 0x07},
    {0x04, 0x1a, 0x41, 0xf5, 0xad},
    {0x02, 0x82, 0xf5, 0x00, 0x07},
    {0x08, 0x40, 0xf5, 0x00, 0xee},
    {0x03, 0x32, 0x41, 0xb5, 0xad},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0x41, 0xb5, 0xad},
    {0x05, 0xd9, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x41, 0xb5, 0xad},
    {0x01, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x41, 0xb5, 0xad},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0x01, 0xf5, 0xad},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0xd8, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x30, 0x41, 0xb5, 0xad},
    {0x01, 0x25, 0x43, 0xf5, 0xbd},
    {0x02, 0x30, 0x41, 0xb5, 0xad},
    {0x06, 0x6c, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x0f, 0x6e},
    {0x04, 0x25, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x0f, 0x6e},
    {0x09, 0x44, 0x41, 0xb5, 0xad},
    {0x03, 0x3c, 0x41, 0xb5, 0xad},
    {0x01, 0x82, 0x4f, 0xf5, 0xee},
    {0x02, 0x3c, 0x41, 0xb5, 0xad},
    {0x05, 0x6c, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x0f, 0x6e},
    {0x04, 0x82, 0x4f, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x0f, 0x6e},
    {0x0b, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x2a, 0x41, 0xb5, 0xad},
    {0x01, 0x19, 0x41, 0xf5, 0xad},
    {0x02, 0x2a, 0x41, 0xb5, 0xad},
    {0x06, 0x51, 0x01, 0xb5, 0xad},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0x41, 0xf5, 0xad},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x79, 0x03, 0xf5, 0xdf},
    {0x03, 0x91, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x91, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x01, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x0f, 0x6e},
    {0x04, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x0f, 0x6e},
    {0x69, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x41, 0xb5, 0xad},
    {0x01, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x41, 0xb5, 0xad},
    {0x06, 0xd5, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0x41, 0xb5, 0xad},
    {0x03, 0x3a, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0x41, 0xb5, 0xad},
    {0x05, 0xd5, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xf5, 0x00, 0x07},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xf5, 0x00, 0x07},
    {0x0c, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x0f, 0x6e},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x0f, 0x6e},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x0f, 0x6e},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x0f, 0x6e},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x0f, 0x6e},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x0f, 0x6e},
    {0xe6, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x16, 0x43, 0xb5, 0x9b},
    {0x01, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x16, 0x43, 0xb5, 0x9b},
    {0x06, 0x41, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x44, 0x10, 0x6f},
    {0x04, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x10, 0x6f},
    {0x09, 0x42, 0x41, 0xb5, 0xad},
    {0x03, 0x0b, 0x42, 0x10, 0x7f},
    {0x01, 0x03, 0x42, 0x50, 0x7f},
    {0x02, 0x0b, 0x42, 0x10, 0x7f},
    {0x05, 0x41, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x44, 0x10, 0x6f},
    {0x04, 0x03, 0x42, 0x50, 0x7f},
    {0x02, 0x05, 0x44, 0x10, 0x6f},
    {0x0a, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x43, 0xb5, 0x9b},
    {0x01, 0x12, 0x41, 0xf5, 0xad},
    {0x02, 0x1a, 0x43, 0xb5, 0x9b},
    {0x06, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x10, 0x7f},
    {0x04, 0x12, 0x41, 0xf5, 0xad},
    {0x02, 0x09, 0x42, 0x10, 0x7f},
    {0x07, 0x4a, 0x01, 0xf5, 0xad},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x50, 0x7f},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x10, 0x6f},
    {0x04, 0x05, 0x42, 0x50, 0x7f},
    {0x02, 0x06, 0x44, 0x10, 0x6f},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0x41, 0xb5, 0xad},
    {0x01, 0x15, 0x41, 0xf5, 0xad},
    {0x02, 0x26, 0x41, 0xb5, 0xad},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0x03, 0xbd},
    {0x04, 0x15, 0x41, 0xf5, 0xad},
    {0x02, 0x82, 0x46, 0x03, 0xbd},
    {0x08, 0x42, 0x41, 0xb5, 0xad},
    {0x03, 0x19, 0x43, 0xb5, 0x9b},
    {0x01, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x19, 0x43, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x10, 0xb5, 0xff},
    {0x03, 0x04, 0x44, 0x10, 0x6f},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x10, 0x6f},
    {0x07, 0x44, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x10, 0x6f},
    {0x01, 0x06, 0x42, 0x50, 0x7f},
    {0x02, 0x02, 0x44, 0x10, 0x6f},
    {0x05, 0xc1, 0x10, 0xb5, 0xff},
    {0x03, 0x07, 0x44, 0x10, 0x6f},
    {0x04, 0x06, 0x42, 0x50, 0x7f},
    {0x02, 0x07, 0x44, 0x10, 0x6f},
    {0xc1, 0x41, 0xb5, 0x40, 0x0d},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x0f, 0x6e},
    {0x04, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x0f, 0x6e},
    {0x09, 0x47, 0x41, 0xb5, 0xad},
    {0x03, 0x12, 0x43, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0xb5, 0x9b},
    {0x05, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x0f, 0x6e},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x0f, 0x6e},
    {0x0b, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x43, 0xb5, 0x9b},
    {0x01, 0x83, 0x50, 0xf5, 0xff},
    {0x02, 0x15, 0x43, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x50, 0xf5, 0xff},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0xf5, 0x9b},
    {0x03, 0x84, 0x50, 0xb5, 0xff},
    {0x01, 0x81, 0x4f, 0xf5, 0xee},
    {0x02, 0x84, 0x50, 0xb5, 0xff},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x0f, 0x6e},
    {0x04, 0x81, 0x4f, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x0f, 0x6e},
    {0x4e, 0x0f, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x10, 0x7f},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x10, 0x7f},
    {0x08, 0x47, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0x4f, 0xb5, 0xee},
    {0x01, 0x04, 0x42, 0x50, 0x7f},
    {0x02, 0x83, 0x4f, 0xb5, 0xee},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0x50, 0x7f},
    {0x02, 0x81, 0x46, 0x03, 0xbd},
    {0x0c, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x10, 0x7f},
    {0x01, 0x02, 0x42, 0x50, 0x7f},
    {0x02, 0x0a, 0x42, 0x10, 0x7f},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x0f, 0x6e},
    {0x04, 0x02, 0x42, 0x50, 0x7f},
    {0x02, 0x04, 0x42, 0x0f, 0x6e},
    {0x07, 0x47, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x0f, 0x6e},
    {0x01, 0x07, 0x42, 0x50, 0x7f},
    {0x02, 0x02, 0x42, 0x0f, 0x6e},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x0f, 0x6e},
    {0x04, 0x07, 0x42, 0x50, 0x7f},
    {0x02, 0x07, 0x42, 0x0f, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xb4, 0xf5, 0x00, 0x0b},
    {0x01, 0x9e, 0xf5, 0x40, 0x0e},
    {0x02, 0xb4, 0xf5, 0x00, 0x0b},
    {0x06, 0x5e, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0x9e, 0xf5, 0x40, 0x0e},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0x4d, 0x41, 0xb5, 0xcf},
    {0x03, 0x0b, 0x47, 0xb5, 0x7c},
    {0x01, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x0b, 0x47, 0xb5, 0x7c},
    {0x05, 0x5e, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x5f, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x45, 0xb5, 0x8c},
    {0x01, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x0c, 0x45, 0xb5, 0x8c},
    {0x06, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x09, 0x47, 0xb5, 0x7c},
    {0x04, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x09, 0x47, 0xb5, 0x7c},
    {0x07, 0x56, 0x01, 0xf5, 0xcf},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x44, 0xb5, 0x9c},
    {0x01, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x14, 0x44, 0xb5, 0x9c},
    {0x06, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x82, 0x5f, 0xb5, 0xff},
    {0x04, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x82, 0x5f, 0xb5, 0xff},
    {0x08, 0x4d, 0x41, 0xb5, 0xcf},
    {0x03, 0x18, 0x44, 0xb5, 0x9c},
    {0x01, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x18, 0x44, 0xb5, 0x9c},
    {0x05, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x0e, 0x45, 0xb5, 0x8c},
    {0x04, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x0e, 0x45, 0xb5, 0x8c},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x44, 0xb5, 0x9c},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x44, 0xb5, 0x9c},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0x44, 0xb5, 0x9c},
    {0x01, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x17, 0x44, 0xb5, 0x9c},
    {0x06, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x1b, 0x44, 0xb5, 0x9c},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x44, 0xb5, 0x9c},
    {0x05, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x5f, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x42, 0xb5, 0xac},
    {0x01, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x27, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x10, 0x45, 0xb5, 0x8c},
    {0x04, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x45, 0xb5, 0x8c},
    {0x07, 0x4b, 0x02, 0xf5, 0xac},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0x44, 0xb5, 0x9c},
    {0x01, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x13, 0x44, 0xb5, 0x9c},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0x47, 0xb5, 0x7c},
    {0x04, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x08, 0x47, 0xb5, 0x7c},
    {0x08, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x37, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x37, 0x42, 0xb5, 0xac},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x5f, 0xb5, 0xff},
    {0x04, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x81, 0x5f, 0xb5, 0xff},
    {0x0c, 0x5f, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x47, 0xb5, 0x7c},
    {0x01, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x0a, 0x47, 0xb5, 0x7c},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe0, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x2d, 0x42, 0xb5, 0xac},
    {0x01, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x2d, 0x42, 0xb5, 0xac},
    {0x06, 0x62, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0xd9, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x62, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x48, 0x41, 0xf5, 0xcf},
    {0x03, 0x35, 0x42, 0xb5, 0xac},
    {0x01, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x35, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x5a, 0x01, 0xf5, 0xcf},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x73, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x42, 0xb5, 0xac},
    {0x01, 0x28, 0x43, 0xf5, 0xbd},
    {0x02, 0x23, 0x42, 0xb5, 0xac},
    {0x06, 0x72, 0x01, 0xb5, 0xcf},
    {0x03, 0x82, 0x48, 0x01, 0xcf},
    {0x04, 0x28, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x48, 0x01, 0xcf},
    {0x08, 0xd9, 0xf5, 0x00, 0x0f},
    {0x03, 0x33, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x33, 0x42, 0xb5, 0xac},
    {0x05, 0x72, 0x01, 0xb5, 0xcf},
    {0x03, 0x0f, 0x45, 0xb5, 0x8c},
    {0x04, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x45, 0xb5, 0x8c},
    {0x63, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x42, 0xb5, 0xac},
    {0x01, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x42, 0xb5, 0xac},
    {0x06, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0xc5, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x45, 0xb5, 0x8c},
    {0x01, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x0d, 0x45, 0xb5, 0x8c},
    {0x06, 0x7e, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x98, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x98, 0xf5, 0x00, 0x0b},
    {0x05, 0x7e, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x48, 0x41, 0xf5, 0xcf},
    {0x03, 0x2b, 0x42, 0xb5, 0xac},
    {0x01, 0x38, 0x43, 0xf5, 0xbd},
    {0x02, 0x2b, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x11, 0x45, 0xb5, 0x8c},
    {0x04, 0x38, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x45, 0xb5, 0x8c},
    {0x07, 0xcc, 0xb5, 0x40, 0x0e},
    {0x03, 0x94, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x94, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x45, 0xb5, 0x8c},
    {0x01, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x01, 0x45, 0xb5, 0x8c},
    {0x06, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x81, 0x48, 0x01, 0xcf},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x48, 0x01, 0xcf},
    {0x0c, 0x48, 0x41, 0xf5, 0xcf},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x42, 0xb5, 0xac},
    {0x01, 0x2e, 0x43, 0xf5, 0xbd},
    {0x02, 0x1d, 0x42, 0xb5, 0xac},
    {0x06, 0x70, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2e, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x6c, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x70, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x79, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x65, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0x44, 0x01, 0xcf},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x44, 0x01, 0xcf},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x04, 0x01, 0xb5, 0xcf},
    {0x03, 0x21, 0x42, 0xb5, 0xac},
    {0x01, 0x36, 0x43, 0xf5, 0xbd},
    {0x02, 0x21, 0x42, 0xb5, 0xac},
    {0x06, 0x7c, 0x01, 0xb5, 0xcf},
    {0x03, 0x82, 0x79, 0xb5, 0xff},
    {0x04, 0x36, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x79, 0xb5, 0xff},
    {0x08, 0x6c, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0x42, 0xb5, 0xac},
    {0x05, 0x7c, 0x01, 0xb5, 0xcf},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0x5b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x42, 0xb5, 0xac},
    {0x01, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x7b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x42, 0xb5, 0xac},
    {0x01, 0x24, 0x43, 0xf5, 0xbd},
    {0x02, 0x2f, 0x42, 0xb5, 0xac},
    {0x06, 0x6a, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x04, 0x6c},
    {0x04, 0x24, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x04, 0x6c},
    {0x09, 0x51, 0x41, 0xb5, 0xcf},
    {0x03, 0x3b, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x44, 0x41, 0xcf},
    {0x02, 0x3b, 0x42, 0xb5, 0xac},
    {0x05, 0x6a, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x04, 0x6c},
    {0x04, 0x82, 0x44, 0x41, 0xcf},
    {0x02, 0x05, 0x43, 0x04, 0x6c},
    {0x0b, 0x79, 0xf5, 0x40, 0xff},
    {0x03, 0x29, 0x42, 0xb5, 0xac},
    {0x01, 0x34, 0x43, 0xf5, 0xbd},
    {0x02, 0x29, 0x42, 0xb5, 0xac},
    {0x06, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x34, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x59, 0x01, 0xf5, 0xcf},
    {0x03, 0x90, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x90, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x04, 0x6c},
    {0x04, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x04, 0x6c},
    {0x61, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x42, 0xb5, 0xac},
    {0x01, 0x00, 0x43, 0xf5, 0xbd},
    {0x02, 0x1f, 0x42, 0xb5, 0xac},
    {0x06, 0xd1, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x00, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x51, 0x41, 0xb5, 0xcf},
    {0x03, 0x39, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0x42, 0xb5, 0xac},
    {0x05, 0xd1, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x79, 0xb5, 0xff},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x79, 0xb5, 0xff},
    {0x0c, 0x79, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x04, 0x6c},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x04, 0x6c},
    {0x07, 0x4f, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x04, 0x6c},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x04, 0x6c},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x04, 0x6c},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x04, 0x6c},
    {0xde, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x44, 0xb5, 0x9c},
    {0x01, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x16, 0x44, 0xb5, 0x9c},
    {0x06, 0x60, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xd5, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x60, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x1a, 0x44, 0xb5, 0x9c},
    {0x01, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x44, 0xb5, 0x9c},
    {0x06, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0xc5, 0xb5, 0x40, 0x0d},
    {0x03, 0x8c, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8c, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0xc4, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x25, 0x42, 0xb5, 0xac},
    {0x01, 0x2c, 0x43, 0xf5, 0xbd},
    {0x02, 0x25, 0x42, 0xb5, 0xac},
    {0x06, 0x7a, 0x01, 0xb5, 0xcf},
    {0x03, 0x82, 0xc1, 0xb5, 0x0c},
    {0x04, 0x2c, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0xc1, 0xb5, 0x0c},
    {0x08, 0xd5, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x44, 0xb5, 0x9c},
    {0x01, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x19, 0x44, 0xb5, 0x9c},
    {0x05, 0x7a, 0x01, 0xb5, 0xcf},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x6b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0xd2, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x04, 0x6c},
    {0x04, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x04, 0x6c},
    {0x09, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x44, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0x44, 0xb5, 0x9c},
    {0x05, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x04, 0x6c},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x04, 0x6c},
    {0x0b, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x15, 0x44, 0xb5, 0x9c},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x44, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0x04, 0xf5, 0x9c},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x44, 0x41, 0xcf},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x04, 0x6c},
    {0x04, 0x81, 0x44, 0x41, 0xcf},
    {0x02, 0x06, 0x42, 0x04, 0x6c},
    {0x4e, 0x04, 0x01, 0xb5, 0xcf},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x44, 0x01, 0xcf},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x44, 0x01, 0xcf},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0xc1, 0xb5, 0x0c},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0xc1, 0xb5, 0x0c},
    {0x0c, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x04, 0x6c},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x04, 0x6c},
    {0x07, 0x47, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x04, 0x6c},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x04, 0x6c},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x04, 0x6c},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x04, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xa6, 0xf5, 0x00, 0x0e},
    {0x01, 0x1e, 0x43, 0xf5, 0xbd},
    {0x02, 0xa6, 0xf5, 0x00, 0x0e},
    {0x06, 0x56, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x47, 0xb5, 0x6b},
    {0x04, 0x1e, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x47, 0xb5, 0x6b},
    {0x09, 0x41, 0x41, 0xb5, 0xcf},
    {0x03, 0x0b, 0x45, 0xb5, 0x7b},
    {0x01, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x0b, 0x45, 0xb5, 0x7b},
    {0x05, 0x56, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x47, 0xb5, 0x6b},
    {0x04, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x05, 0x47, 0xb5, 0x6b},
    {0x0a, 0x4a, 0x41, 0xf5, 0xcf},
    {0x03, 0x0c, 0x44, 0xb5, 0x8b},
    {0x01, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x0c, 0x44, 0xb5, 0x8b},
    {0x06, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x09, 0x45, 0xb5, 0x7b},
    {0x04, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x09, 0x45, 0xb5, 0x7b},
    {0x07, 0x4d, 0x03, 0xf5, 0xbd},
    {0x03, 0x9a, 0x42, 0x01, 0xcf},
    {0x01, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x9a, 0x42, 0x01, 0xcf},
    {0x05, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x47, 0xb5, 0x6b},
    {0x04, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x06, 0x47, 0xb5, 0x6b},
    {0x4d, 0x02, 0x01, 0xb5, 0xcf},
    {0x03, 0x14, 0x42, 0xb5, 0x9b},
    {0x01, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x14, 0x42, 0xb5, 0x9b},
    {0x06, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x82, 0x4a, 0x01, 0xcf},
    {0x04, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x82, 0x4a, 0x01, 0xcf},
    {0x08, 0x41, 0x41, 0xb5, 0xcf},
    {0x03, 0x18, 0x42, 0xb5, 0x9b},
    {0x01, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x18, 0x42, 0xb5, 0x9b},
    {0x05, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x0e, 0x44, 0xb5, 0x8b},
    {0x04, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x0e, 0x44, 0xb5, 0x8b},
    {0x4f, 0x06, 0x03, 0xf5, 0xdf},
    {0x03, 0x1c, 0x42, 0xb5, 0x9b},
    {0x01, 0x9a, 0x46, 0x43, 0xdf},
    {0x02, 0x1c, 0x42, 0xb5, 0x9b},
    {0x06, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x47, 0xb5, 0x6b},
    {0x04, 0x9a, 0x46, 0x43, 0xdf},
    {0x02, 0x04, 0x47, 0xb5, 0x6b},
    {0x07, 0x43, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x47, 0xb5, 0x6b},
    {0x01, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x47, 0xb5, 0x6b},
    {0x05, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x47, 0xb5, 0x6b},
    {0x04, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x47, 0xb5, 0x6b},
    {0x77, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x42, 0xb5, 0x9b},
    {0x01, 0x22, 0x43, 0xf5, 0xbd},
    {0x02, 0x17, 0x42, 0xb5, 0x9b},
    {0x06, 0x5a, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x02, 0x6c},
    {0x04, 0x22, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x02, 0x6c},
    {0x09, 0x48, 0x43, 0xb5, 0xbd},
    {0x03, 0x1b, 0x42, 0xb5, 0x9b},
    {0x01, 0x82, 0x42, 0x41, 0xcf},
    {0x02, 0x1b, 0x42, 0xb5, 0x9b},
    {0x05, 0x5a, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x02, 0x6c},
    {0x04, 0x82, 0x42, 0x41, 0xcf},
    {0x02, 0x05, 0x43, 0x02, 0x6c},
    {0x0b, 0x4a, 0x41, 0xf5, 0xcf},
    {0x03, 0x28, 0x42, 0xb5, 0xac},
    {0x01, 0x32, 0x43, 0xf5, 0xbd},
    {0x02, 0x28, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x10, 0x44, 0xb5, 0x8b},
    {0x04, 0x32, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x44, 0xb5, 0x8b},
    {0x07, 0x52, 0x01, 0xf5, 0xcf},
    {0x03, 0x8e, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x8e, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0x02, 0x6c},
    {0x04, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x02, 0x6c},
    {0x7f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0xb5, 0x9b},
    {0x01, 0x3e, 0x43, 0xf5, 0xbd},
    {0x02, 0x13, 0x42, 0xb5, 0x9b},
    {0x06, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x45, 0xb5, 0x7b},
    {0x04, 0x3e, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x45, 0xb5, 0x7b},
    {0x08, 0x48, 0x43, 0xb5, 0xbd},
    {0x03, 0x38, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x38, 0x42, 0xb5, 0xac},
    {0x05, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4a, 0x01, 0xcf},
    {0x04, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x81, 0x4a, 0x01, 0xcf},
    {0x0c, 0x4a, 0x41, 0xf5, 0xcf},
    {0x03, 0x0a, 0x45, 0xb5, 0x7b},
    {0x01, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x0a, 0x45, 0xb5, 0x7b},
    {0x06, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0x02, 0x6c},
    {0x04, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0x02, 0x6c},
    {0x07, 0x45, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0x02, 0x6c},
    {0x01, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0x02, 0x6c},
    {0x05, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0x02, 0x6c},
    {0x04, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0x02, 0x6c},
    {0xe4, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x2e, 0x42, 0xb5, 0xac},
    {0x01, 0x30, 0x43, 0xf5, 0xbd},
    {0x02, 0x2e, 0x42, 0xb5, 0xac},
    {0x06, 0x66, 0x01, 0xb5, 0xcf},
    {0x03, 0x03, 0x41, 0x06, 0x6d},
    {0x04, 0x30, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x06, 0x6d},
    {0x09, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x43, 0x06, 0x7d},
    {0x01, 0x03, 0x43, 0x46, 0x7d},
    {0x02, 0x0b, 0x43, 0x06, 0x7d},
    {0x05, 0x66, 0x01, 0xb5, 0xcf},
    {0x03, 0x05, 0x41, 0x06, 0x6d},
    {0x04, 0x03, 0x43, 0x46, 0x7d},
    {0x02, 0x05, 0x41, 0x06, 0x6d},
    {0x0a, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x36, 0x42, 0xb5, 0xac},
    {0x01, 0x3c, 0x43, 0xf5, 0xbd},
    {0x02, 0x36, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x06, 0x03, 0xdf},
    {0x03, 0x09, 0x43, 0x06, 0x7d},
    {0x04, 0x3c, 0x43, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x06, 0x7d},
    {0x07, 0x55, 0x01, 0xf5, 0xcf},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x46, 0x7d},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x06, 0x03, 0xdf},
    {0x03, 0x06, 0x41, 0x06, 0x6d},
    {0x04, 0x05, 0x43, 0x46, 0x7d},
    {0x02, 0x06, 0x41, 0x06, 0x6d},
    {0x6f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x42, 0xb5, 0xac},
    {0x01, 0x2a, 0x43, 0xf5, 0xbd},
    {0x02, 0x24, 0x42, 0xb5, 0xac},
    {0x06, 0x59, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x44, 0x03, 0xbd},
    {0x04, 0x2a, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x44, 0x03, 0xbd},
    {0x08, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x34, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x34, 0x42, 0xb5, 0xac},
    {0x05, 0x59, 0x03, 0xb5, 0xbd},
    {0x03, 0x0f, 0x44, 0xb5, 0x8b},
    {0x04, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x44, 0xb5, 0x8b},
    {0x67, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x42, 0xb5, 0xac},
    {0x01, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x42, 0xb5, 0xac},
    {0x06, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x06, 0x6d},
    {0x04, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x06, 0x6d},
    {0x07, 0x51, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x06, 0x6d},
    {0x01, 0x06, 0x43, 0x46, 0x7d},
    {0x02, 0x02, 0x41, 0x06, 0x6d},
    {0x05, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x06, 0x6d},
    {0x04, 0x06, 0x43, 0x46, 0x7d},
    {0x02, 0x07, 0x41, 0x06, 0x6d},
    {0x75, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x44, 0xb5, 0x8b},
    {0x01, 0x20, 0x43, 0xf5, 0xbd},
    {0x02, 0x0d, 0x44, 0xb5, 0x8b},
    {0x06, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x02, 0x6c},
    {0x04, 0x20, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x02, 0x6c},
    {0x09, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x9b, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x9b, 0xf5, 0x00, 0x0b},
    {0x05, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x02, 0x6c},
    {0x04, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0x02, 0x6c},
    {0x0b, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x2c, 0x42, 0xb5, 0xac},
    {0x01, 0x3a, 0x43, 0xf5, 0xbd},
    {0x02, 0x2c, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x11, 0x44, 0xb5, 0x8b},
    {0x04, 0x3a, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x44, 0xb5, 0x8b},
    {0x07, 0xc4, 0xb5, 0x40, 0x0c},
    {0x03, 0x96, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x42, 0x41, 0xcf},
    {0x02, 0x96, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0x02, 0x6c},
    {0x04, 0x81, 0x42, 0x41, 0xcf},
    {0x02, 0x06, 0x42, 0x02, 0x6c},
    {0x4e, 0x02, 0x01, 0xb5, 0xcf},
    {0x03, 0x01, 0x44, 0xb5, 0x8b},
    {0x01, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x01, 0x44, 0xb5, 0x8b},
    {0x06, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x06, 0x7d},
    {0x04, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x06, 0x7d},
    {0x08, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x83, 0x42, 0x01, 0xcf},
    {0x01, 0x04, 0x43, 0x46, 0x7d},
    {0x02, 0x83, 0x42, 0x01, 0xcf},
    {0x05, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x81, 0x44, 0x03, 0xbd},
    {0x04, 0x04, 0x43, 0x46, 0x7d},
    {0x02, 0x81, 0x44, 0x03, 0xbd},
    {0x0c, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x06, 0x7d},
    {0x01, 0x02, 0x43, 0x46, 0x7d},
    {0x02, 0x0a, 0x43, 0x06, 0x7d},
    {0x06, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0x02, 0x6c},
    {0x04, 0x02, 0x43, 0x46, 0x7d},
    {0x02, 0x04, 0x42, 0x02, 0x6c},
    {0x07, 0x46, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x02, 0x6c},
    {0x01, 0x07, 0x43, 0x46, 0x7d},
    {0x02, 0x02, 0x42, 0x02, 0x6c},
    {0x05, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0x02, 0x6c},
    {0x04, 0x07, 0x43, 0x46, 0x7d},
    {0x02, 0x07, 0x42, 0x02, 0x6c},
    {0xf4, 0x46, 0x03, 0xf5, 0xff},
    {0x03, 0x1e, 0x42, 0xb5, 0xac},
    {0x01, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x1e, 0x42, 0xb5, 0xac},
    {0x06, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x4a, 0x43, 0xb5, 0xbd},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x41, 0x03, 0xf5, 0xbd},
    {0x03, 0x9a, 0x47, 0x01, 0xcf},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x47, 0x01, 0xcf},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x07, 0x01, 0xb5, 0xcf},
    {0x03, 0x22, 0x42, 0xb5, 0xac},
    {0x01, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x22, 0x42, 0xb5, 0xac},
    {0x06, 0x52, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x42, 0x03, 0xbd},
    {0x04, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x03, 0xbd},
    {0x08, 0x4a, 0x43, 0xb5, 0xbd},
    {0x03, 0x32, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0x42, 0xb5, 0xac},
    {0x05, 0x52, 0x03, 0xb5, 0xbd},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x53, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3e, 0x42, 0xb5, 0xac},
    {0x01, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x3e, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x58, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x30, 0x42, 0xb5, 0xac},
    {0x01, 0x26, 0x43, 0xf5, 0xbd},
    {0x02, 0x30, 0x42, 0xb5, 0xac},
    {0x06, 0x55, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x07, 0x6c},
    {0x04, 0x26, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x07, 0x6c},
    {0x09, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3c, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x47, 0x41, 0xcf},
    {0x02, 0x3c, 0x42, 0xb5, 0xac},
    {0x05, 0x55, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x07, 0x6c},
    {0x04, 0x82, 0x47, 0x41, 0xcf},
    {0x02, 0x05, 0x43, 0x07, 0x6c},
    {0x0b, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x2a, 0x42, 0xb5, 0xac},
    {0x01, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x2a, 0x42, 0xb5, 0xac},
    {0x06, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0xc3, 0xb5, 0x40, 0x0b},
    {0x03, 0x92, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x92, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x07, 0x6c},
    {0x04, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x07, 0x6c},
    {0x56, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x20, 0x42, 0xb5, 0xac},
    {0x01, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x42, 0xb5, 0xac},
    {0x06, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3a, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0x42, 0xb5, 0xac},
    {0x05, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x81, 0x42, 0x03, 0xbd},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0x42, 0x03, 0xbd},
    {0x0c, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x07, 0x6c},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x07, 0x6c},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x07, 0x6c},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x07, 0x6c},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x07, 0x6c},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x07, 0x6c},
    {0xe8, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x16, 0x42, 0xb5, 0x9b},
    {0x01, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x16, 0x42, 0xb5, 0x9b},
    {0x06, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x06, 0x6d},
    {0x04, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x06, 0x6d},
    {0x09, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x06, 0x7d},
    {0x01, 0x03, 0x42, 0x46, 0x7d},
    {0x02, 0x0b, 0x42, 0x06, 0x7d},
    {0x05, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x06, 0x6d},
    {0x04, 0x03, 0x42, 0x46, 0x7d},
    {0x02, 0x05, 0x44, 0x06, 0x6d},
    {0x0a, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x42, 0xb5, 0x9b},
    {0x01, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0xb5, 0x9b},
    {0x06, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x06, 0x7d},
    {0x04, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x06, 0x7d},
    {0x07, 0x4a, 0x02, 0xf5, 0xac},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x46, 0x7d},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x06, 0x6d},
    {0x04, 0x05, 0x42, 0x46, 0x7d},
    {0x02, 0x06, 0x44, 0x06, 0x6d},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0x42, 0xb5, 0xac},
    {0x01, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x26, 0x42, 0xb5, 0xac},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x47, 0x03, 0xbd},
    {0x04, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x03, 0xbd},
    {0x08, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0xb5, 0x9b},
    {0x01, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x19, 0x42, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x06, 0x03, 0xdf},
    {0x03, 0x04, 0x44, 0x06, 0x6d},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x06, 0x6d},
    {0x07, 0x44, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x06, 0x6d},
    {0x01, 0x06, 0x42, 0x46, 0x7d},
    {0x02, 0x02, 0x44, 0x06, 0x6d},
    {0x05, 0xc1, 0x06, 0x03, 0xdf},
    {0x03, 0x07, 0x44, 0x06, 0x6d},
    {0x04, 0x06, 0x42, 0x46, 0x7d},
    {0x02, 0x07, 0x44, 0x06, 0x6d},
    {0xc1, 0x42, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x07, 0x6c},
    {0x04, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x07, 0x6c},
    {0x09, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x42, 0xb5, 0x9b},
    {0x05, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x07, 0x6c},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x07, 0x6c},
    {0x0b, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x42, 0xb5, 0x9b},
    {0x01, 0x83, 0x46, 0x43, 0xdf},
    {0x02, 0x15, 0x42, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x46, 0x43, 0xdf},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x02, 0xf5, 0x9b},
    {0x03, 0x84, 0x46, 0x03, 0xdf},
    {0x01, 0x81, 0x47, 0x41, 0xcf},
    {0x02, 0x84, 0x46, 0x03, 0xdf},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x07, 0x6c},
    {0x04, 0x81, 0x47, 0x41, 0xcf},
    {0x02, 0x06, 0x42, 0x07, 0x6c},
    {0x4e, 0x07, 0x01, 0xb5, 0xcf},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x06, 0x7d},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x06, 0x7d},
    {0x08, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x47, 0x01, 0xcf},
    {0x01, 0x04, 0x42, 0x46, 0x7d},
    {0x02, 0x83, 0x47, 0x01, 0xcf},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x47, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0x46, 0x7d},
    {0x02, 0x81, 0x47, 0x03, 0xbd},
    {0x0c, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x06, 0x7d},
    {0x01, 0x02, 0x42, 0x46, 0x7d},
    {0x02, 0x0a, 0x42, 0x06, 0x7d},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x07, 0x6c},
    {0x04, 0x02, 0x42, 0x46, 0x7d},
    {0x02, 0x04, 0x42, 0x07, 0x6c},
    {0x07, 0x47, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x07, 0x6c},
    {0x01, 0x07, 0x42, 0x46, 0x7d},
    {0x02, 0x02, 0x42, 0x07, 0x6c},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x07, 0x6c},
    {0x04, 0x07, 0x42, 0x46, 0x7d},
    {0x02, 0x07, 0x42, 0x07, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0xb4, 0xf5, 0x00, 0x0d},
    {0x01, 0xb4, 0xf5, 0x40, 0x0d},
    {0x02, 0xb4, 0xf5, 0x00, 0x0d},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0xb4, 0xf5, 0x40, 0x0d},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0x5e, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0xf5, 0x00, 0x77},
    {0x01, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x0b, 0xf5, 0x00, 0x77},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x56, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0xf5, 0x00, 0x88},
    {0x01, 0x0b, 0xf5, 0x40, 0x88},
    {0x02, 0x0c, 0xf5, 0x00, 0x88},
    {0x06, 0x43, 0xb5, 0x00, 0x88},
    {0x03, 0x09, 0xf5, 0x00, 0x77},
    {0x04, 0x0b, 0xf5, 0x40, 0x88},
    {0x02, 0x09, 0xf5, 0x00, 0x77},
    {0x07, 0xf5, 0x00, 0x40, 0x05},
    {0x03, 0x9a, 0x4d, 0xb5, 0xee},
    {0x01, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x9a, 0x4d, 0xb5, 0xee},
    {0x05, 0x43, 0xb5, 0x00, 0x88},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0x0d, 0xb5, 0x00, 0xee},
    {0x03, 0x14, 0x47, 0xb5, 0x9e},
    {0x01, 0x0c, 0x47, 0xf5, 0x9e},
    {0x02, 0x14, 0x47, 0xb5, 0x9e},
    {0x06, 0x4b, 0x07, 0xb5, 0x9e},
    {0x03, 0x82, 0x56, 0xb5, 0xee},
    {0x04, 0x0c, 0x47, 0xf5, 0x9e},
    {0x02, 0x82, 0x56, 0xb5, 0xee},
    {0x08, 0x5e, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x47, 0xb5, 0x9e},
    {0x01, 0x09, 0xf5, 0x40, 0x88},
    {0x02, 0x18, 0x47, 0xb5, 0x9e},
    {0x05, 0x4b, 0x07, 0xb5, 0x9e},
    {0x03, 0x0e, 0xf5, 0x00, 0x88},
    {0x04, 0x09, 0xf5, 0x40, 0x88},
    {0x02, 0x0e, 0xf5, 0x00, 0x88},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x47, 0xb5, 0x9e},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x47, 0xb5, 0x9e},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0x07, 0xf5, 0x9e},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0x47, 0xb5, 0x9e},
    {0x01, 0x14, 0x45, 0xf5, 0xae},
    {0x02, 0x17, 0x47, 0xb5, 0x9e},
    {0x06, 0x4c, 0x05, 0xb5, 0xae},
    {0x03, 0x03, 0x43, 0x0d, 0x6e},
    {0x04, 0x14, 0x45, 0xf5, 0xae},
    {0x02, 0x03, 0x43, 0x0d, 0x6e},
    {0x09, 0x43, 0x45, 0xb5, 0xae},
    {0x03, 0x1b, 0x47, 0xb5, 0x9e},
    {0x01, 0x82, 0x4d, 0xf5, 0xee},
    {0x02, 0x1b, 0x47, 0xb5, 0x9e},
    {0x05, 0x4c, 0x05, 0xb5, 0xae},
    {0x03, 0x05, 0x43, 0x0d, 0x6e},
    {0x04, 0x82, 0x4d, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x0d, 0x6e},
    {0x0b, 0x56, 0xf5, 0x40, 0xee},
    {0x03, 0x27, 0x45, 0xb5, 0xae},
    {0x01, 0x18, 0x45, 0xf5, 0xae},
    {0x02, 0x27, 0x45, 0xb5, 0xae},
    {0x06, 0x49, 0x07, 0xb5, 0x9e},
    {0x03, 0x10, 0xf5, 0x00, 0x88},
    {0x04, 0x18, 0x45, 0xf5, 0xae},
    {0x02, 0x10, 0xf5, 0x00, 0x88},
    {0x07, 0x4b, 0x05, 0xf5, 0xae},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0x47, 0xf5, 0x9e},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0x07, 0xb5, 0x9e},
    {0x03, 0x06, 0x43, 0x0d, 0x6e},
    {0x04, 0x0e, 0x47, 0xf5, 0x9e},
    {0x02, 0x06, 0x43, 0x0d, 0x6e},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0x47, 0xb5, 0x9e},
    {0x01, 0x1c, 0x45, 0xf5, 0xae},
    {0x02, 0x13, 0x47, 0xb5, 0x9e},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0xf5, 0x00, 0x77},
    {0x04, 0x1c, 0x45, 0xf5, 0xae},
    {0x02, 0x08, 0xf5, 0x00, 0x77},
    {0x08, 0x43, 0x45, 0xb5, 0xae},
    {0x03, 0x37, 0x45, 0xb5, 0xae},
    {0x01, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x37, 0x45, 0xb5, 0xae},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x56, 0xb5, 0xee},
    {0x04, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x81, 0x56, 0xb5, 0xee},
    {0x0c, 0x56, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0xf5, 0x00, 0x77},
    {0x01, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x0a, 0xf5, 0x00, 0x77},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0x43, 0x0d, 0x6e},
    {0x04, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x04, 0x43, 0x0d, 0x6e},
    {0x07, 0x45, 0x07, 0xf5, 0x9e},
    {0x03, 0x02, 0x43, 0x0d, 0x6e},
    {0x01, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0x43, 0x0d, 0x6e},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0x43, 0x0d, 0x6e},
    {0x04, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0x43, 0x0d, 0x6e},
    {0xdc, 0x44, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x45, 0xb5, 0xae},
    {0x01, 0x17, 0x45, 0xf5, 0xae},
    {0x02, 0x2d, 0x45, 0xb5, 0xae},
    {0x06, 0x54, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x45, 0xf5, 0xae},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0x44, 0xb5, 0xbe},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0x44, 0xf5, 0xbe},
    {0x03, 0x35, 0x45, 0xb5, 0xae},
    {0x01, 0x1b, 0x45, 0xf5, 0xae},
    {0x02, 0x35, 0x45, 0xb5, 0xae},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x45, 0xf5, 0xae},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0x04, 0xf5, 0xbe},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x23, 0x45, 0xb5, 0xae},
    {0x01, 0x27, 0x44, 0xf5, 0xbe},
    {0x02, 0x23, 0x45, 0xb5, 0xae},
    {0x06, 0x58, 0x04, 0xb5, 0xbe},
    {0x03, 0x82, 0x43, 0x04, 0xbe},
    {0x04, 0x27, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x43, 0x04, 0xbe},
    {0x08, 0x4b, 0x44, 0xb5, 0xbe},
    {0x03, 0x33, 0x45, 0xb5, 0xae},
    {0x01, 0x10, 0x47, 0xf5, 0x9e},
    {0x02, 0x33, 0x45, 0xb5, 0xae},
    {0x05, 0x58, 0x04, 0xb5, 0xbe},
    {0x03, 0x0f, 0xf5, 0x00, 0x88},
    {0x04, 0x10, 0x47, 0xf5, 0x9e},
    {0x02, 0x0f, 0xf5, 0x00, 0x88},
    {0x54, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3f, 0x45, 0xb5, 0xae},
    {0x01, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x3f, 0x45, 0xb5, 0xae},
    {0x06, 0x4e, 0x05, 0xb5, 0xae},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x05, 0xf5, 0xae},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x05, 0xb5, 0xae},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x0d, 0xf5, 0x00, 0x88},
    {0x01, 0x13, 0x45, 0xf5, 0xae},
    {0x02, 0x0d, 0xf5, 0x00, 0x88},
    {0x06, 0x5c, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x42, 0x0d, 0x6e},
    {0x04, 0x13, 0x45, 0xf5, 0xae},
    {0x02, 0x03, 0x42, 0x0d, 0x6e},
    {0x09, 0x45, 0x45, 0xb5, 0xae},
    {0x03, 0x97, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0xf5, 0x40, 0x88},
    {0x02, 0x97, 0xf5, 0x00, 0x0b},
    {0x05, 0x5c, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x42, 0x0d, 0x6e},
    {0x04, 0x08, 0xf5, 0x40, 0x88},
    {0x02, 0x05, 0x42, 0x0d, 0x6e},
    {0x0b, 0x43, 0x44, 0xf5, 0xbe},
    {0x03, 0x2b, 0x45, 0xb5, 0xae},
    {0x01, 0x37, 0x44, 0xf5, 0xbe},
    {0x02, 0x2b, 0x45, 0xb5, 0xae},
    {0x06, 0x44, 0xb5, 0x00, 0x88},
    {0x03, 0x11, 0xf5, 0x00, 0x88},
    {0x04, 0x37, 0x44, 0xf5, 0xbe},
    {0x02, 0x11, 0xf5, 0x00, 0x88},
    {0x07, 0xda, 0xb5, 0x40, 0x0b},
    {0x03, 0x93, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x4d, 0xf5, 0xee},
    {0x02, 0x93, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0xb5, 0x00, 0x88},
    {0x03, 0x06, 0x42, 0x0d, 0x6e},
    {0x04, 0x81, 0x4d, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x0d, 0x6e},
    {0x4e, 0x0d, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0xf5, 0x00, 0x88},
    {0x01, 0x0a, 0xf5, 0x40, 0x88},
    {0x02, 0x01, 0xf5, 0x00, 0x88},
    {0x06, 0x42, 0xb5, 0x00, 0x88},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0xf5, 0x40, 0x88},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x45, 0xb5, 0xae},
    {0x03, 0x83, 0x4d, 0xb5, 0xee},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0x4d, 0xb5, 0xee},
    {0x05, 0x42, 0xb5, 0x00, 0x88},
    {0x03, 0x81, 0x43, 0x04, 0xbe},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0x04, 0xbe},
    {0x0c, 0x43, 0x44, 0xf5, 0xbe},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0x42, 0x0d, 0x6e},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x0d, 0x6e},
    {0x07, 0x46, 0x07, 0xf5, 0x9e},
    {0x03, 0x02, 0x42, 0x0d, 0x6e},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x0d, 0x6e},
    {0x05, 0x47, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0x42, 0x0d, 0x6e},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x0d, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x45, 0xb5, 0xae},
    {0x01, 0x2d, 0x44, 0xf5, 0xbe},
    {0x02, 0x1d, 0x45, 0xb5, 0xae},
    {0x06, 0x57, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x4c, 0x42, 0xb5, 0xce},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x4b, 0x42, 0xf5, 0xce},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x54, 0x02, 0xf5, 0xce},
    {0x03, 0x9a, 0x43, 0x02, 0xce},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x43, 0x02, 0xce},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x03, 0x02, 0xb5, 0xce},
    {0x03, 0x21, 0x45, 0xb5, 0xae},
    {0x01, 0x35, 0x44, 0xf5, 0xbe},
    {0x02, 0x21, 0x45, 0xb5, 0xae},
    {0x06, 0x5b, 0x04, 0xb5, 0xbe},
    {0x03, 0x82, 0x4b, 0x02, 0xce},
    {0x04, 0x35, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x4b, 0x02, 0xce},
    {0x08, 0x4c, 0x42, 0xb5, 0xce},
    {0x03, 0x31, 0x45, 0xb5, 0xae},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0x45, 0xb5, 0xae},
    {0x05, 0x5b, 0x04, 0xb5, 0xbe},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0xc2, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x3d, 0x45, 0xb5, 0xae},
    {0x01, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x45, 0xb5, 0xae},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x78, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x45, 0xb5, 0xae},
    {0x01, 0x23, 0x44, 0xf5, 0xbe},
    {0x02, 0x2f, 0x45, 0xb5, 0xae},
    {0x06, 0x67, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x03, 0x6c},
    {0x04, 0x23, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x03, 0x6c},
    {0x09, 0x49, 0x44, 0xb5, 0xbe},
    {0x03, 0x3b, 0x45, 0xb5, 0xae},
    {0x01, 0x82, 0x43, 0x42, 0xce},
    {0x02, 0x3b, 0x45, 0xb5, 0xae},
    {0x05, 0x67, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x03, 0x6c},
    {0x04, 0x82, 0x43, 0x42, 0xce},
    {0x02, 0x05, 0x43, 0x03, 0x6c},
    {0x0b, 0x4b, 0x42, 0xf5, 0xce},
    {0x03, 0x29, 0x45, 0xb5, 0xae},
    {0x01, 0x33, 0x44, 0xf5, 0xbe},
    {0x02, 0x29, 0x45, 0xb5, 0xae},
    {0x06, 0x50, 0x05, 0xb5, 0xae},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0x44, 0xf5, 0xbe},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x58, 0x02, 0xf5, 0xce},
    {0x03, 0x8f, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x47, 0xf5, 0x9e},
    {0x02, 0x8f, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x05, 0xb5, 0xae},
    {0x03, 0x06, 0x43, 0x03, 0x6c},
    {0x04, 0x0f, 0x47, 0xf5, 0x9e},
    {0x02, 0x06, 0x43, 0x03, 0x6c},
    {0x5e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x45, 0xb5, 0xae},
    {0x01, 0x3f, 0x44, 0xf5, 0xbe},
    {0x02, 0x1f, 0x45, 0xb5, 0xae},
    {0x06, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0x44, 0xf5, 0xbe},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0x44, 0xb5, 0xbe},
    {0x03, 0x39, 0x45, 0xb5, 0xae},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0x45, 0xb5, 0xae},
    {0x05, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4b, 0x02, 0xce},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x4b, 0x02, 0xce},
    {0x0c, 0x4b, 0x42, 0xf5, 0xce},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x03, 0x6c},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x03, 0x6c},
    {0x07, 0x4e, 0x04, 0xf5, 0xbe},
    {0x03, 0x02, 0x43, 0x03, 0x6c},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x03, 0x6c},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x03, 0x6c},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x03, 0x6c},
    {0xdd, 0x44, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x47, 0xb5, 0x9e},
    {0x01, 0x0d, 0x47, 0xf5, 0x9e},
    {0x02, 0x16, 0x47, 0xb5, 0x9e},
    {0x06, 0x53, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x47, 0xf5, 0x9e},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0x44, 0xf5, 0xbe},
    {0x03, 0x1a, 0x47, 0xb5, 0x9e},
    {0x01, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x47, 0xb5, 0x9e},
    {0x06, 0x48, 0x07, 0xb5, 0x9e},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x5c, 0x02, 0xf5, 0xce},
    {0x03, 0x8b, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x07, 0xb5, 0x9e},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x79, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x45, 0xb5, 0xae},
    {0x01, 0x2b, 0x44, 0xf5, 0xbe},
    {0x02, 0x25, 0x45, 0xb5, 0xae},
    {0x06, 0x77, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x45, 0x04, 0xbe},
    {0x04, 0x2b, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x45, 0x04, 0xbe},
    {0x08, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x19, 0x47, 0xb5, 0x9e},
    {0x01, 0x11, 0x47, 0xf5, 0x9e},
    {0x02, 0x19, 0x47, 0xb5, 0x9e},
    {0x05, 0x77, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0x47, 0xf5, 0x9e},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x07, 0xf5, 0x9e},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x76, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0x47, 0xf5, 0x9e},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0x07, 0xb5, 0x9e},
    {0x03, 0x03, 0x42, 0x03, 0x6c},
    {0x04, 0x01, 0x47, 0xf5, 0x9e},
    {0x02, 0x03, 0x42, 0x03, 0x6c},
    {0x09, 0x46, 0x45, 0xb5, 0xae},
    {0x03, 0x12, 0x47, 0xb5, 0x9e},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0x47, 0xb5, 0x9e},
    {0x05, 0x4a, 0x07, 0xb5, 0x9e},
    {0x03, 0x05, 0x42, 0x03, 0x6c},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x03, 0x6c},
    {0x0b, 0x45, 0x44, 0xf5, 0xbe},
    {0x03, 0x15, 0x47, 0xb5, 0x9e},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x47, 0xb5, 0x9e},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0x07, 0xf5, 0x9e},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x43, 0x42, 0xce},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x03, 0x6c},
    {0x04, 0x81, 0x43, 0x42, 0xce},
    {0x02, 0x06, 0x42, 0x03, 0x6c},
    {0x4e, 0x03, 0x02, 0xb5, 0xce},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x45, 0xb5, 0xae},
    {0x03, 0x83, 0x43, 0x02, 0xce},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x43, 0x02, 0xce},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0x04, 0xbe},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0x04, 0xbe},
    {0x0c, 0x45, 0x44, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x03, 0x6c},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x03, 0x6c},
    {0x07, 0x47, 0x07, 0xf5, 0x9e},
    {0x03, 0x02, 0x42, 0x03, 0x6c},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x03, 0x6c},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x03, 0x6c},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xa0, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x44, 0xf5, 0xbe},
    {0x02, 0xa0, 0xf5, 0x00, 0x0e},
    {0x06, 0x6d, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x49, 0xb5, 0x6c},
    {0x04, 0x1d, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x49, 0xb5, 0x6c},
    {0x09, 0x62, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0xb5, 0x7b},
    {0x01, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x0b, 0x46, 0xb5, 0x7b},
    {0x05, 0x6d, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x49, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x05, 0x49, 0xb5, 0x6c},
    {0x0a, 0x5a, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x41, 0xb5, 0x8b},
    {0x01, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x0c, 0x41, 0xb5, 0x8b},
    {0x06, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x09, 0x46, 0xb5, 0x7b},
    {0x04, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x09, 0x46, 0xb5, 0x7b},
    {0x07, 0x57, 0x02, 0xf5, 0xce},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x49, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x06, 0x49, 0xb5, 0x6c},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x43, 0xb5, 0x9b},
    {0x01, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x14, 0x43, 0xb5, 0x9b},
    {0x06, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x82, 0x5a, 0xb5, 0xee},
    {0x04, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x82, 0x5a, 0xb5, 0xee},
    {0x08, 0x62, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0xb5, 0x9b},
    {0x01, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x18, 0x43, 0xb5, 0x9b},
    {0x05, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x0e, 0x41, 0xb5, 0x8b},
    {0x04, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x0e, 0x41, 0xb5, 0x8b},
    {0x4f, 0x08, 0xb5, 0x40, 0xee},
    {0x03, 0x1c, 0x43, 0xb5, 0x9b},
    {0x01, 0x9a, 0x48, 0xf5, 0xee},
    {0x02, 0x1c, 0x43, 0xb5, 0x9b},
    {0x06, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x49, 0xb5, 0x6c},
    {0x04, 0x9a, 0x48, 0xf5, 0xee},
    {0x02, 0x04, 0x49, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x49, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x49, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x49, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x49, 0xb5, 0x6c},
    {0x74, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x43, 0xb5, 0x9b},
    {0x01, 0x21, 0x44, 0xf5, 0xbe},
    {0x02, 0x17, 0x43, 0xb5, 0x9b},
    {0x06, 0x75, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x21, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x1b, 0x43, 0xb5, 0x9b},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x43, 0xb5, 0x9b},
    {0x05, 0x75, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x5a, 0xf5, 0x40, 0xee},
    {0x03, 0x28, 0x45, 0xb5, 0xae},
    {0x01, 0x31, 0x44, 0xf5, 0xbe},
    {0x02, 0x28, 0x45, 0xb5, 0xae},
    {0x06, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x10, 0x41, 0xb5, 0x8b},
    {0x04, 0x31, 0x44, 0xf5, 0xbe},
    {0x02, 0x10, 0x41, 0xb5, 0x8b},
    {0x07, 0x5b, 0x02, 0xf5, 0xce},
    {0x03, 0x8d, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x8d, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x70, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0xb5, 0x9b},
    {0x01, 0x3d, 0x44, 0xf5, 0xbe},
    {0x02, 0x13, 0x43, 0xb5, 0x9b},
    {0x06, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0xb5, 0x7b},
    {0x04, 0x3d, 0x44, 0xf5, 0xbe},
    {0x02, 0x08, 0x46, 0xb5, 0x7b},
    {0x08, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x38, 0x45, 0xb5, 0xae},
    {0x01, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x38, 0x45, 0xb5, 0xae},
    {0x05, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x5a, 0xb5, 0xee},
    {0x04, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x81, 0x5a, 0xb5, 0xee},
    {0x0c, 0x5a, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x46, 0xb5, 0x7b},
    {0x01, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x0a, 0x46, 0xb5, 0x7b},
    {0x06, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe1, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x45, 0xb5, 0xae},
    {0x01, 0x2f, 0x44, 0xf5, 0xbe},
    {0x02, 0x2e, 0x45, 0xb5, 0xae},
    {0x06, 0x63, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x08, 0x6e},
    {0x04, 0x2f, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x41, 0x08, 0x6e},
    {0x09, 0x72, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x08, 0x7e},
    {0x01, 0x03, 0x43, 0x48, 0x7e},
    {0x02, 0x0b, 0x43, 0x08, 0x7e},
    {0x05, 0x63, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x08, 0x6e},
    {0x04, 0x03, 0x43, 0x48, 0x7e},
    {0x02, 0x05, 0x41, 0x08, 0x6e},
    {0x0a, 0x49, 0x42, 0xf5, 0xce},
    {0x03, 0x36, 0x45, 0xb5, 0xae},
    {0x01, 0x3b, 0x44, 0xf5, 0xbe},
    {0x02, 0x36, 0x45, 0xb5, 0xae},
    {0x06, 0xc2, 0x08, 0xb5, 0xee},
    {0x03, 0x09, 0x43, 0x08, 0x7e},
    {0x04, 0x3b, 0x44, 0xf5, 0xbe},
    {0x02, 0x09, 0x43, 0x08, 0x7e},
    {0x07, 0x68, 0x03, 0xf5, 0xdf},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x48, 0x7e},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x08, 0xb5, 0xee},
    {0x03, 0x06, 0x41, 0x08, 0x6e},
    {0x04, 0x05, 0x43, 0x48, 0x7e},
    {0x02, 0x06, 0x41, 0x08, 0x6e},
    {0x6c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x45, 0xb5, 0xae},
    {0x01, 0x29, 0x44, 0xf5, 0xbe},
    {0x02, 0x24, 0x45, 0xb5, 0xae},
    {0x06, 0x73, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x49, 0x02, 0xce},
    {0x04, 0x29, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x49, 0x02, 0xce},
    {0x08, 0x72, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x45, 0xb5, 0xae},
    {0x01, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x34, 0x45, 0xb5, 0xae},
    {0x05, 0x73, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x41, 0xb5, 0x8b},
    {0x04, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x41, 0xb5, 0x8b},
    {0x64, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x45, 0xb5, 0xae},
    {0x01, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x45, 0xb5, 0xae},
    {0x06, 0x4f, 0x05, 0xb5, 0xae},
    {0x03, 0x04, 0x41, 0x08, 0x6e},
    {0x04, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x08, 0x6e},
    {0x07, 0x50, 0x04, 0xf5, 0xbe},
    {0x03, 0x02, 0x41, 0x08, 0x6e},
    {0x01, 0x06, 0x43, 0x48, 0x7e},
    {0x02, 0x02, 0x41, 0x08, 0x6e},
    {0x05, 0x4f, 0x05, 0xb5, 0xae},
    {0x03, 0x07, 0x41, 0x08, 0x6e},
    {0x04, 0x06, 0x43, 0x48, 0x7e},
    {0x02, 0x07, 0x41, 0x08, 0x6e},
    {0xc6, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x41, 0xb5, 0x8b},
    {0x01, 0x1f, 0x44, 0xf5, 0xbe},
    {0x02, 0x0d, 0x41, 0xb5, 0x8b},
    {0x06, 0x7f, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x1f, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x4e, 0x42, 0xb5, 0xce},
    {0x03, 0x99, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x99, 0xf5, 0x00, 0x0b},
    {0x05, 0x7f, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x49, 0x42, 0xf5, 0xce},
    {0x03, 0x2c, 0x45, 0xb5, 0xae},
    {0x01, 0x39, 0x44, 0xf5, 0xbe},
    {0x02, 0x2c, 0x45, 0xb5, 0xae},
    {0x06, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x11, 0x41, 0xb5, 0x8b},
    {0x04, 0x39, 0x44, 0xf5, 0xbe},
    {0x02, 0x11, 0x41, 0xb5, 0x8b},
    {0x07, 0xce, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x95, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x41, 0xb5, 0x8b},
    {0x01, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x01, 0x41, 0xb5, 0x8b},
    {0x06, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x08, 0x7e},
    {0x04, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x08, 0x7e},
    {0x08, 0x4e, 0x42, 0xb5, 0xce},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0x48, 0x7e},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x81, 0x49, 0x02, 0xce},
    {0x04, 0x04, 0x43, 0x48, 0x7e},
    {0x02, 0x81, 0x49, 0x02, 0xce},
    {0x0c, 0x49, 0x42, 0xf5, 0xce},
    {0x03, 0x0a, 0x43, 0x08, 0x7e},
    {0x01, 0x02, 0x43, 0x48, 0x7e},
    {0x02, 0x0a, 0x43, 0x08, 0x7e},
    {0x06, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0x48, 0x7e},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0x48, 0x7e},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0x48, 0x7e},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xf4, 0x48, 0xf5, 0x00, 0x0e},
    {0x03, 0x1e, 0x45, 0xb5, 0xae},
    {0x01, 0x16, 0x45, 0xf5, 0xae},
    {0x02, 0x1e, 0x45, 0xb5, 0xae},
    {0x06, 0x4d, 0x05, 0xb5, 0xae},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0x45, 0xf5, 0xae},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x7e, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0x05, 0xb5, 0xae},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x53, 0x02, 0xf5, 0xce},
    {0x03, 0x9a, 0x45, 0x02, 0xce},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x45, 0x02, 0xce},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x05, 0x02, 0xb5, 0xce},
    {0x03, 0x22, 0x45, 0xb5, 0xae},
    {0x01, 0x1a, 0x45, 0xf5, 0xae},
    {0x02, 0x22, 0x45, 0xb5, 0xae},
    {0x06, 0xd8, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xf5, 0x00, 0x07},
    {0x04, 0x1a, 0x45, 0xf5, 0xae},
    {0x02, 0x82, 0xf5, 0x00, 0x07},
    {0x08, 0x7e, 0xf5, 0x00, 0xee},
    {0x03, 0x32, 0x45, 0xb5, 0xae},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0x45, 0xb5, 0xae},
    {0x05, 0xd8, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x45, 0xb5, 0xae},
    {0x01, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x45, 0xb5, 0xae},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0x05, 0xf5, 0xae},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x7c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x30, 0x45, 0xb5, 0xae},
    {0x01, 0x25, 0x44, 0xf5, 0xbe},
    {0x02, 0x30, 0x45, 0xb5, 0xae},
    {0x06, 0x6b, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x05, 0x6c},
    {0x04, 0x25, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x05, 0x6c},
    {0x09, 0x44, 0x45, 0xb5, 0xae},
    {0x03, 0x3c, 0x45, 0xb5, 0xae},
    {0x01, 0x82, 0x45, 0x42, 0xce},
    {0x02, 0x3c, 0x45, 0xb5, 0xae},
    {0x05, 0x6b, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x05, 0x6c},
    {0x04, 0x82, 0x45, 0x42, 0xce},
    {0x02, 0x05, 0x43, 0x05, 0x6c},
    {0x0b, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x2a, 0x45, 0xb5, 0xae},
    {0x01, 0x19, 0x45, 0xf5, 0xae},
    {0x02, 0x2a, 0x45, 0xb5, 0xae},
    {0x06, 0x51, 0x05, 0xb5, 0xae},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0x45, 0xf5, 0xae},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x78, 0x03, 0xf5, 0xdf},
    {0x03, 0x91, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x91, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x05, 0xb5, 0xae},
    {0x03, 0x06, 0x43, 0x05, 0x6c},
    {0x04, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x05, 0x6c},
    {0x68, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x45, 0xb5, 0xae},
    {0x01, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x45, 0xb5, 0xae},
    {0x06, 0xd4, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0x45, 0xb5, 0xae},
    {0x03, 0x3a, 0x45, 0xb5, 0xae},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0x45, 0xb5, 0xae},
    {0x05, 0xd4, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xf5, 0x00, 0x07},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xf5, 0x00, 0x07},
    {0x0c, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x05, 0x6c},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x05, 0x6c},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x05, 0x6c},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x05, 0x6c},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x05, 0x6c},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x05, 0x6c},
    {0xe5, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x43, 0xb5, 0x9b},
    {0x01, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x16, 0x43, 0xb5, 0x9b},
    {0x06, 0x41, 0x05, 0xb5, 0xae},
    {0x03, 0x03, 0x44, 0x08, 0x6e},
    {0x04, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x08, 0x6e},
    {0x09, 0x42, 0x45, 0xb5, 0xae},
    {0x03, 0x0b, 0x42, 0x08, 0x7e},
    {0x01, 0x03, 0x42, 0x48, 0x7e},
    {0x02, 0x0b, 0x42, 0x08, 0x7e},
    {0x05, 0x41, 0x05, 0xb5, 0xae},
    {0x03, 0x05, 0x44, 0x08, 0x6e},
    {0x04, 0x03, 0x42, 0x48, 0x7e},
    {0x02, 0x05, 0x44, 0x08, 0x6e},
    {0x0a, 0x46, 0x44, 0xf5, 0xbe},
    {0x03, 0x1a, 0x43, 0xb5, 0x9b},
    {0x01, 0x12, 0x45, 0xf5, 0xae},
    {0x02, 0x1a, 0x43, 0xb5, 0x9b},
    {0x06, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x08, 0x7e},
    {0x04, 0x12, 0x45, 0xf5, 0xae},
    {0x02, 0x09, 0x42, 0x08, 0x7e},
    {0x07, 0x4a, 0x05, 0xf5, 0xae},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x48, 0x7e},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x08, 0x6e},
    {0x04, 0x05, 0x42, 0x48, 0x7e},
    {0x02, 0x06, 0x44, 0x08, 0x6e},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0x45, 0xb5, 0xae},
    {0x01, 0x15, 0x45, 0xf5, 0xae},
    {0x02, 0x26, 0x45, 0xb5, 0xae},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0x04, 0xbe},
    {0x04, 0x15, 0x45, 0xf5, 0xae},
    {0x02, 0x82, 0x46, 0x04, 0xbe},
    {0x08, 0x42, 0x45, 0xb5, 0xae},
    {0x03, 0x19, 0x43, 0xb5, 0x9b},
    {0x01, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x19, 0x43, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x08, 0xb5, 0xee},
    {0x03, 0x04, 0x44, 0x08, 0x6e},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x08, 0x6e},
    {0x07, 0x44, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x08, 0x6e},
    {0x01, 0x06, 0x42, 0x48, 0x7e},
    {0x02, 0x02, 0x44, 0x08, 0x6e},
    {0x05, 0xc1, 0x08, 0xb5, 0xee},
    {0x03, 0x07, 0x44, 0x08, 0x6e},
    {0x04, 0x06, 0x42, 0x48, 0x7e},
    {0x02, 0x07, 0x44, 0x08, 0x6e},
    {0xc1, 0x45, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x05, 0x6c},
    {0x04, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x05, 0x6c},
    {0x09, 0x47, 0x45, 0xb5, 0xae},
    {0x03, 0x12, 0x43, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0xb5, 0x9b},
    {0x05, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x05, 0x6c},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x05, 0x6c},
    {0x0b, 0x46, 0x44, 0xf5, 0xbe},
    {0x03, 0x15, 0x43, 0xb5, 0x9b},
    {0x01, 0x83, 0x48, 0xf5, 0xee},
    {0x02, 0x15, 0x43, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x48, 0xf5, 0xee},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0xf5, 0x9b},
    {0x03, 0x84, 0x48, 0xb5, 0xee},
    {0x01, 0x81, 0x45, 0x42, 0xce},
    {0x02, 0x84, 0x48, 0xb5, 0xee},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x05, 0x6c},
    {0x04, 0x81, 0x45, 0x42, 0xce},
    {0x02, 0x06, 0x42, 0x05, 0x6c},
    {0x4e, 0x05, 0x02, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x08, 0x7e},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x08, 0x7e},
    {0x08, 0x47, 0x45, 0xb5, 0xae},
    {0x03, 0x83, 0x45, 0x02, 0xce},
    {0x01, 0x04, 0x42, 0x48, 0x7e},
    {0x02, 0x83, 0x45, 0x02, 0xce},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0x04, 0xbe},
    {0x04, 0x04, 0x42, 0x48, 0x7e},
    {0x02, 0x81, 0x46, 0x04, 0xbe},
    {0x0c, 0x46, 0x44, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0x08, 0x7e},
    {0x01, 0x02, 0x42, 0x48, 0x7e},
    {0x02, 0x0a, 0x42, 0x08, 0x7e},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x05, 0x6c},
    {0x04, 0x02, 0x42, 0x48, 0x7e},
    {0x02, 0x04, 0x42, 0x05, 0x6c},
    {0x07, 0x47, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x05, 0x6c},
    {0x01, 0x07, 0x42, 0x48, 0x7e},
    {0x02, 0x02, 0x42, 0x05, 0x6c},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x05, 0x6c},
    {0x04, 0x07, 0x42, 0x48, 0x7e},
    {0x02, 0x07, 0x42, 0x05, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xb4, 0xf5, 0x00, 0x0b},
    {0x01, 0xa3, 0xf5, 0x40, 0x0f},
    {0x02, 0xb4, 0xf5, 0x00, 0x0b},
    {0x06, 0x5d, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x4b, 0xb5, 0x6d},
    {0x04, 0xa3, 0xf5, 0x40, 0x0f},
    {0x02, 0x03, 0x4b, 0xb5, 0x6d},
    {0x09, 0x70, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x48, 0xb5, 0x7d},
    {0x01, 0x03, 0x48, 0xf5, 0x7d},
    {0x02, 0x0b, 0x48, 0xb5, 0x7d},
    {0x05, 0x5d, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x4b, 0xb5, 0x6d},
    {0x04, 0x03, 0x48, 0xf5, 0x7d},
    {0x02, 0x05, 0x4b, 0xb5, 0x6d},
    {0x0a, 0x65, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x46, 0xb5, 0x8c},
    {0x01, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x0c, 0x46, 0xb5, 0x8c},
    {0x06, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x09, 0x48, 0xb5, 0x7d},
    {0x04, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x09, 0x48, 0xb5, 0x7d},
    {0x07, 0x6e, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x48, 0xf5, 0x7d},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x4b, 0xb5, 0x6d},
    {0x04, 0x05, 0x48, 0xf5, 0x7d},
    {0x02, 0x06, 0x4b, 0xb5, 0x6d},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x41, 0xb5, 0x9c},
    {0x01, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x14, 0x41, 0xb5, 0x9c},
    {0x06, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x82, 0x65, 0xb5, 0xff},
    {0x04, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x82, 0x65, 0xb5, 0xff},
    {0x08, 0x70, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x41, 0xb5, 0x9c},
    {0x01, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x18, 0x41, 0xb5, 0x9c},
    {0x05, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x0e, 0x46, 0xb5, 0x8c},
    {0x04, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x0e, 0x46, 0xb5, 0x8c},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x41, 0xb5, 0x9c},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x41, 0xb5, 0x9c},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x4b, 0xb5, 0x6d},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0x4b, 0xb5, 0x6d},
    {0x07, 0x43, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x4b, 0xb5, 0x6d},
    {0x01, 0x06, 0x48, 0xf5, 0x7d},
    {0x02, 0x02, 0x4b, 0xb5, 0x6d},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x4b, 0xb5, 0x6d},
    {0x04, 0x06, 0x48, 0xf5, 0x7d},
    {0x02, 0x07, 0x4b, 0xb5, 0x6d},
    {0x52, 0x04, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x41, 0xb5, 0x9c},
    {0x01, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x17, 0x41, 0xb5, 0x9c},
    {0x06, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x1b, 0x41, 0xb5, 0x9c},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x41, 0xb5, 0x9c},
    {0x05, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x65, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x43, 0xb5, 0xac},
    {0x01, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x27, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x10, 0x46, 0xb5, 0x8c},
    {0x04, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x46, 0xb5, 0x8c},
    {0x07, 0x4b, 0x03, 0xf5, 0xac},
    {0x03, 0x89, 0x44, 0xb5, 0xee},
    {0x01, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x89, 0x44, 0xb5, 0xee},
    {0x05, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0x04, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x41, 0xb5, 0x9c},
    {0x01, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x13, 0x41, 0xb5, 0x9c},
    {0x06, 0xda, 0x04, 0xb5, 0xee},
    {0x03, 0x08, 0x48, 0xb5, 0x7d},
    {0x04, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x08, 0x48, 0xb5, 0x7d},
    {0x08, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x37, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x48, 0xf5, 0x7d},
    {0x02, 0x37, 0x43, 0xb5, 0xac},
    {0x05, 0xda, 0x04, 0xb5, 0xee},
    {0x03, 0x81, 0x65, 0xb5, 0xff},
    {0x04, 0x04, 0x48, 0xf5, 0x7d},
    {0x02, 0x81, 0x65, 0xb5, 0xff},
    {0x0c, 0x65, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x48, 0xb5, 0x7d},
    {0x01, 0x02, 0x48, 0xf5, 0x7d},
    {0x02, 0x0a, 0x48, 0xb5, 0x7d},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x48, 0xf5, 0x7d},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x48, 0xf5, 0x7d},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x48, 0xf5, 0x7d},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xdf, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x43, 0xb5, 0xac},
    {0x01, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x2d, 0x43, 0xb5, 0xac},
    {0x06, 0x61, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x7c, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x61, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x35, 0x43, 0xb5, 0xac},
    {0x01, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x35, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x76, 0x03, 0xf5, 0xdf},
    {0x03, 0x87, 0x44, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0x44, 0xb5, 0xee},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x72, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x43, 0xb5, 0xac},
    {0x01, 0x28, 0x44, 0xf5, 0xbe},
    {0x02, 0x23, 0x43, 0xb5, 0xac},
    {0x06, 0x71, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0xc2, 0xb5, 0x0c},
    {0x04, 0x28, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0xc2, 0xb5, 0x0c},
    {0x08, 0x7c, 0xf5, 0x00, 0xee},
    {0x03, 0x33, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x33, 0x43, 0xb5, 0xac},
    {0x05, 0x71, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x46, 0xb5, 0x8c},
    {0x04, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x46, 0xb5, 0x8c},
    {0x62, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x43, 0xb5, 0xac},
    {0x01, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x43, 0xb5, 0xac},
    {0x06, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0xdb, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x46, 0xb5, 0x8c},
    {0x01, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x0d, 0x46, 0xb5, 0x8c},
    {0x06, 0x7d, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x98, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x98, 0xf5, 0x00, 0x0b},
    {0x05, 0x7d, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x2b, 0x43, 0xb5, 0xac},
    {0x01, 0x38, 0x44, 0xf5, 0xbe},
    {0x02, 0x2b, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x11, 0x46, 0xb5, 0x8c},
    {0x04, 0x38, 0x44, 0xf5, 0xbe},
    {0x02, 0x11, 0x46, 0xb5, 0x8c},
    {0x07, 0xc8, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x94, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x46, 0xb5, 0x8c},
    {0x01, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x01, 0x46, 0xb5, 0x8c},
    {0x06, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x81, 0xc2, 0xb5, 0x0c},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0xc2, 0xb5, 0x0c},
    {0x0c, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x43, 0xb5, 0xac},
    {0x01, 0x2e, 0x44, 0xf5, 0xbe},
    {0x02, 0x1d, 0x43, 0xb5, 0xac},
    {0x06, 0x6f, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x46, 0x04, 0x6e},
    {0x04, 0x2e, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x46, 0x04, 0x6e},
    {0x09, 0x6a, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x04, 0x7e},
    {0x01, 0x03, 0x41, 0x44, 0x7e},
    {0x02, 0x0b, 0x41, 0x04, 0x7e},
    {0x05, 0x6f, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x46, 0x04, 0x6e},
    {0x04, 0x03, 0x41, 0x44, 0x7e},
    {0x02, 0x05, 0x46, 0x04, 0x6e},
    {0x0a, 0x59, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x43, 0x04, 0x8e},
    {0x01, 0x0b, 0x43, 0x44, 0x8e},
    {0x02, 0x0c, 0x43, 0x04, 0x8e},
    {0x06, 0x43, 0x03, 0x04, 0x8e},
    {0x03, 0x09, 0x41, 0x04, 0x7e},
    {0x04, 0x0b, 0x43, 0x44, 0x8e},
    {0x02, 0x09, 0x41, 0x04, 0x7e},
    {0x07, 0x64, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0x51, 0xb5, 0xee},
    {0x01, 0x05, 0x41, 0x44, 0x7e},
    {0x02, 0x9a, 0x51, 0xb5, 0xee},
    {0x05, 0x43, 0x03, 0x04, 0x8e},
    {0x03, 0x06, 0x46, 0x04, 0x6e},
    {0x04, 0x05, 0x41, 0x44, 0x7e},
    {0x02, 0x06, 0x46, 0x04, 0x6e},
    {0x4d, 0x11, 0xb5, 0x00, 0xee},
    {0x03, 0x21, 0x43, 0xb5, 0xac},
    {0x01, 0x36, 0x44, 0xf5, 0xbe},
    {0x02, 0x21, 0x43, 0xb5, 0xac},
    {0x06, 0x7b, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x59, 0xb5, 0xee},
    {0x04, 0x36, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x59, 0xb5, 0xee},
    {0x08, 0x6a, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x44, 0x8e},
    {0x02, 0x31, 0x43, 0xb5, 0xac},
    {0x05, 0x7b, 0x02, 0xb5, 0xce},
    {0x03, 0x0e, 0x43, 0x04, 0x8e},
    {0x04, 0x09, 0x43, 0x44, 0x8e},
    {0x02, 0x0e, 0x43, 0x04, 0x8e},
    {0x5a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x43, 0xb5, 0xac},
    {0x01, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x04, 0x8e},
    {0x03, 0x04, 0x46, 0x04, 0x6e},
    {0x04, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0x04, 0x6e},
    {0x07, 0xc2, 0x04, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x04, 0x6e},
    {0x01, 0x06, 0x41, 0x44, 0x7e},
    {0x02, 0x02, 0x46, 0x04, 0x6e},
    {0x05, 0x45, 0x03, 0x04, 0x8e},
    {0x03, 0x07, 0x46, 0x04, 0x6e},
    {0x04, 0x06, 0x41, 0x44, 0x7e},
    {0x02, 0x07, 0x46, 0x04, 0x6e},
    {0xd7, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x2f, 0x43, 0xb5, 0xac},
    {0x01, 0x24, 0x44, 0xf5, 0xbe},
    {0x02, 0x2f, 0x43, 0xb5, 0xac},
    {0x06, 0x69, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x11, 0x6e},
    {0x04, 0x24, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x11, 0x6e},
    {0x09, 0x50, 0x42, 0xb5, 0xce},
    {0x03, 0x3b, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x51, 0xf5, 0xee},
    {0x02, 0x3b, 0x43, 0xb5, 0xac},
    {0x05, 0x69, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x11, 0x6e},
    {0x04, 0x82, 0x51, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x11, 0x6e},
    {0x0b, 0x59, 0xf5, 0x40, 0xee},
    {0x03, 0x29, 0x43, 0xb5, 0xac},
    {0x01, 0x34, 0x44, 0xf5, 0xbe},
    {0x02, 0x29, 0x43, 0xb5, 0xac},
    {0x06, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x04, 0x8e},
    {0x04, 0x34, 0x44, 0xf5, 0xbe},
    {0x02, 0x10, 0x43, 0x04, 0x8e},
    {0x07, 0x74, 0x03, 0xf5, 0xdf},
    {0x03, 0x90, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x90, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x11, 0x6e},
    {0x04, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x11, 0x6e},
    {0x60, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x43, 0xb5, 0xac},
    {0x01, 0x00, 0x44, 0xf5, 0xbe},
    {0x02, 0x1f, 0x43, 0xb5, 0xac},
    {0x06, 0xd0, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x04, 0x7e},
    {0x04, 0x00, 0x44, 0xf5, 0xbe},
    {0x02, 0x08, 0x41, 0x04, 0x7e},
    {0x08, 0x50, 0x42, 0xb5, 0xce},
    {0x03, 0x39, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x44, 0x7e},
    {0x02, 0x39, 0x43, 0xb5, 0xac},
    {0x05, 0xd0, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x59, 0xb5, 0xee},
    {0x04, 0x04, 0x41, 0x44, 0x7e},
    {0x02, 0x81, 0x59, 0xb5, 0xee},
    {0x0c, 0x59, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x41, 0x04, 0x7e},
    {0x01, 0x02, 0x41, 0x44, 0x7e},
    {0x02, 0x0a, 0x41, 0x04, 0x7e},
    {0x06, 0x46, 0x03, 0x04, 0x8e},
    {0x03, 0x04, 0x43, 0x11, 0x6e},
    {0x04, 0x02, 0x41, 0x44, 0x7e},
    {0x02, 0x04, 0x43, 0x11, 0x6e},
    {0x07, 0x4f, 0x04, 0xf5, 0xbe},
    {0x03, 0x02, 0x43, 0x11, 0x6e},
    {0x01, 0x07, 0x41, 0x44, 0x7e},
    {0x02, 0x02, 0x43, 0x11, 0x6e},
    {0x05, 0x46, 0x03, 0x04, 0x8e},
    {0x03, 0x07, 0x43, 0x11, 0x6e},
    {0x04, 0x07, 0x41, 0x44, 0x7e},
    {0x02, 0x07, 0x43, 0x11, 0x6e},
    {0xde, 0x44, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x41, 0xb5, 0x9c},
    {0x01, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x16, 0x41, 0xb5, 0x9c},
    {0x06, 0x5f, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xd1, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x5f, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x4f, 0x43, 0xf5, 0xdf},
    {0x03, 0x1a, 0x41, 0xb5, 0x9c},
    {0x01, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x41, 0xb5, 0x9c},
    {0x06, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x40, 0x03, 0xf5, 0xdf},
    {0x03, 0x8c, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8c, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x7d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x43, 0xb5, 0xac},
    {0x01, 0x2c, 0x44, 0xf5, 0xbe},
    {0x02, 0x25, 0x43, 0xb5, 0xac},
    {0x06, 0x79, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x4f, 0x03, 0xdf},
    {0x04, 0x2c, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x4f, 0x03, 0xdf},
    {0x08, 0xd1, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x41, 0xb5, 0x9c},
    {0x01, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x19, 0x41, 0xb5, 0x9c},
    {0x05, 0x79, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0x04, 0x8e},
    {0x04, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x04, 0x8e},
    {0x6a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x44, 0xb5, 0xee},
    {0x01, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x44, 0xb5, 0xee},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0xd1, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x43, 0x04, 0x8e},
    {0x01, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x04, 0x8e},
    {0x06, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x11, 0x6e},
    {0x04, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x11, 0x6e},
    {0x09, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x41, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x44, 0x8e},
    {0x02, 0x12, 0x41, 0xb5, 0x9c},
    {0x05, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x11, 0x6e},
    {0x04, 0x08, 0x43, 0x44, 0x8e},
    {0x02, 0x05, 0x42, 0x11, 0x6e},
    {0x0b, 0x4f, 0x43, 0xf5, 0xdf},
    {0x03, 0x15, 0x41, 0xb5, 0x9c},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x41, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x04, 0x8e},
    {0x03, 0x11, 0x43, 0x04, 0x8e},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0x04, 0x8e},
    {0x07, 0x42, 0x01, 0xf5, 0x9c},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x51, 0xf5, 0xee},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0x04, 0x8e},
    {0x03, 0x06, 0x42, 0x11, 0x6e},
    {0x04, 0x81, 0x51, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x11, 0x6e},
    {0x4e, 0x11, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x43, 0x04, 0x8e},
    {0x01, 0x0a, 0x43, 0x44, 0x8e},
    {0x02, 0x01, 0x43, 0x04, 0x8e},
    {0x06, 0x42, 0x03, 0x04, 0x8e},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0x44, 0x8e},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x51, 0xb5, 0xee},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x51, 0xb5, 0xee},
    {0x05, 0x42, 0x03, 0x04, 0x8e},
    {0x03, 0x81, 0x4f, 0x03, 0xdf},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x4f, 0x03, 0xdf},
    {0x0c, 0x4f, 0x43, 0xf5, 0xdf},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0x04, 0x8e},
    {0x03, 0x04, 0x42, 0x11, 0x6e},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x11, 0x6e},
    {0x07, 0x47, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x11, 0x6e},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x11, 0x6e},
    {0x05, 0x47, 0x03, 0x04, 0x8e},
    {0x03, 0x07, 0x42, 0x11, 0x6e},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x11, 0x6e},
    {0xf4, 0x44, 0xf5, 0x00, 0x0e},
    {0x03, 0x9e, 0xf5, 0x00, 0x0d},
    {0x01, 0x1e, 0x44, 0xf5, 0xbe},
    {0x02, 0x9e, 0xf5, 0x00, 0x0d},
    {0x06, 0x56, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x47, 0xb5, 0x6b},
    {0x04, 0x1e, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x47, 0xb5, 0x6b},
    {0x09, 0x60, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x45, 0xb5, 0x7b},
    {0x01, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x0b, 0x45, 0xb5, 0x7b},
    {0x05, 0x56, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x47, 0xb5, 0x6b},
    {0x04, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x05, 0x47, 0xb5, 0x6b},
    {0x0a, 0xc5, 0xf5, 0x40, 0x0f},
    {0x03, 0x0c, 0x44, 0xb5, 0x8b},
    {0x01, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x0c, 0x44, 0xb5, 0x8b},
    {0x06, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x09, 0x45, 0xb5, 0x7b},
    {0x04, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x09, 0x45, 0xb5, 0x7b},
    {0x07, 0x4d, 0x04, 0xf5, 0xbe},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x47, 0xb5, 0x6b},
    {0x04, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x06, 0x47, 0xb5, 0x6b},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x42, 0xb5, 0x9b},
    {0x01, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x14, 0x42, 0xb5, 0x9b},
    {0x06, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x82, 0xc5, 0xb5, 0x0f},
    {0x04, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x82, 0xc5, 0xb5, 0x0f},
    {0x08, 0x60, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x42, 0xb5, 0x9b},
    {0x01, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x18, 0x42, 0xb5, 0x9b},
    {0x05, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x0e, 0x44, 0xb5, 0x8b},
    {0x04, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x0e, 0x44, 0xb5, 0x8b},
    {0x4f, 0x81, 0xb5, 0x40, 0x0e},
    {0x03, 0x1c, 0x42, 0xb5, 0x9b},
    {0x01, 0x9a, 0xc1, 0xf5, 0x0e},
    {0x02, 0x1c, 0x42, 0xb5, 0x9b},
    {0x06, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x47, 0xb5, 0x6b},
    {0x04, 0x9a, 0xc1, 0xf5, 0x0e},
    {0x02, 0x04, 0x47, 0xb5, 0x6b},
    {0x07, 0x43, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x47, 0xb5, 0x6b},
    {0x01, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x47, 0xb5, 0x6b},
    {0x05, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x47, 0xb5, 0x6b},
    {0x04, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x47, 0xb5, 0x6b},
    {0xcd, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x17, 0x42, 0xb5, 0x9b},
    {0x01, 0x22, 0x44, 0xf5, 0xbe},
    {0x02, 0x17, 0x42, 0xb5, 0x9b},
    {0x06, 0x5a, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x22, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x48, 0x44, 0xb5, 0xbe},
    {0x03, 0x1b, 0x42, 0xb5, 0x9b},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x42, 0xb5, 0x9b},
    {0x05, 0x5a, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0xc5, 0xf5, 0x40, 0x0f},
    {0x03, 0x28, 0x43, 0xb5, 0xac},
    {0x01, 0x32, 0x44, 0xf5, 0xbe},
    {0x02, 0x28, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x10, 0x44, 0xb5, 0x8b},
    {0x04, 0x32, 0x44, 0xf5, 0xbe},
    {0x02, 0x10, 0x44, 0xb5, 0x8b},
    {0x07, 0xdb, 0xb5, 0x40, 0x0e},
    {0x03, 0x8e, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x8e, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x7e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0xb5, 0x9b},
    {0x01, 0x3e, 0x44, 0xf5, 0xbe},
    {0x02, 0x13, 0x42, 0xb5, 0x9b},
    {0x06, 0xcc, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x45, 0xb5, 0x7b},
    {0x04, 0x3e, 0x44, 0xf5, 0xbe},
    {0x02, 0x08, 0x45, 0xb5, 0x7b},
    {0x08, 0x48, 0x44, 0xb5, 0xbe},
    {0x03, 0x38, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x38, 0x43, 0xb5, 0xac},
    {0x05, 0xcc, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc5, 0xb5, 0x0f},
    {0x04, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x81, 0xc5, 0xb5, 0x0f},
    {0x0c, 0xc5, 0xf5, 0x40, 0x0f},
    {0x03, 0x0a, 0x45, 0xb5, 0x7b},
    {0x01, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x0a, 0x45, 0xb5, 0x7b},
    {0x06, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe3, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x43, 0xb5, 0xac},
    {0x01, 0x30, 0x44, 0xf5, 0xbe},
    {0x02, 0x2e, 0x43, 0xb5, 0xac},
    {0x06, 0x65, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x81, 0x6e},
    {0x04, 0x30, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x41, 0x81, 0x6e},
    {0x09, 0x7a, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x81, 0x7e},
    {0x01, 0x03, 0x43, 0xc1, 0x7e},
    {0x02, 0x0b, 0x43, 0x81, 0x7e},
    {0x05, 0x65, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x81, 0x6e},
    {0x04, 0x03, 0x43, 0xc1, 0x7e},
    {0x02, 0x05, 0x41, 0x81, 0x6e},
    {0x0a, 0x44, 0x44, 0xf5, 0xbe},
    {0x03, 0x36, 0x43, 0xb5, 0xac},
    {0x01, 0x3c, 0x44, 0xf5, 0xbe},
    {0x02, 0x36, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x81, 0xb5, 0x0e},
    {0x03, 0x09, 0x43, 0x81, 0x7e},
    {0x04, 0x3c, 0x44, 0xf5, 0xbe},
    {0x02, 0x09, 0x43, 0x81, 0x7e},
    {0x07, 0x6c, 0x03, 0xf5, 0xdf},
    {0x03, 0x88, 0x44, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0xc1, 0x7e},
    {0x02, 0x88, 0x44, 0xb5, 0xee},
    {0x05, 0xc2, 0x81, 0xb5, 0x0e},
    {0x03, 0x06, 0x41, 0x81, 0x6e},
    {0x04, 0x05, 0x43, 0xc1, 0x7e},
    {0x02, 0x06, 0x41, 0x81, 0x6e},
    {0x6e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x43, 0xb5, 0xac},
    {0x01, 0x2a, 0x44, 0xf5, 0xbe},
    {0x02, 0x24, 0x43, 0xb5, 0xac},
    {0x06, 0x59, 0x04, 0xb5, 0xbe},
    {0x03, 0x82, 0x44, 0x04, 0xbe},
    {0x04, 0x2a, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x44, 0x04, 0xbe},
    {0x08, 0x7a, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x34, 0x43, 0xb5, 0xac},
    {0x05, 0x59, 0x04, 0xb5, 0xbe},
    {0x03, 0x0f, 0x44, 0xb5, 0x8b},
    {0x04, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x44, 0xb5, 0x8b},
    {0x66, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x43, 0xb5, 0xac},
    {0x01, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x43, 0xb5, 0xac},
    {0x06, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x81, 0x6e},
    {0x04, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x81, 0x6e},
    {0x07, 0x51, 0x04, 0xf5, 0xbe},
    {0x03, 0x02, 0x41, 0x81, 0x6e},
    {0x01, 0x06, 0x43, 0xc1, 0x7e},
    {0x02, 0x02, 0x41, 0x81, 0x6e},
    {0x05, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x81, 0x6e},
    {0x04, 0x06, 0x43, 0xc1, 0x7e},
    {0x02, 0x07, 0x41, 0x81, 0x6e},
    {0xc9, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x44, 0xb5, 0x8b},
    {0x01, 0x20, 0x44, 0xf5, 0xbe},
    {0x02, 0x0d, 0x44, 0xb5, 0x8b},
    {0x06, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x20, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x9b, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x9b, 0xf5, 0x00, 0x0b},
    {0x05, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x44, 0x44, 0xf5, 0xbe},
    {0x03, 0x2c, 0x43, 0xb5, 0xac},
    {0x01, 0x3a, 0x44, 0xf5, 0xbe},
    {0x02, 0x2c, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x11, 0x44, 0xb5, 0x8b},
    {0x04, 0x3a, 0x44, 0xf5, 0xbe},
    {0x02, 0x11, 0x44, 0xb5, 0x8b},
    {0x07, 0xd6, 0xb5, 0x40, 0x0e},
    {0x03, 0x96, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x96, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x44, 0xb5, 0x8b},
    {0x01, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x01, 0x44, 0xb5, 0x8b},
    {0x06, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x81, 0x7e},
    {0x04, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x81, 0x7e},
    {0x08, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xc1, 0x7e},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x81, 0x44, 0x04, 0xbe},
    {0x04, 0x04, 0x43, 0xc1, 0x7e},
    {0x02, 0x81, 0x44, 0x04, 0xbe},
    {0x0c, 0x44, 0x44, 0xf5, 0xbe},
    {0x03, 0x0a, 0x43, 0x81, 0x7e},
    {0x01, 0x02, 0x43, 0xc1, 0x7e},
    {0x02, 0x0a, 0x43, 0x81, 0x7e},
    {0x06, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xc1, 0x7e},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xc1, 0x7e},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xc1, 0x7e},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0x81, 0xb5, 0x00, 0x0e},
    {0x03, 0x1e, 0x43, 0xb5, 0xac},
    {0x01, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x1e, 0x43, 0xb5, 0xac},
    {0x06, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x04, 0x6e},
    {0x04, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x04, 0x6e},
    {0x09, 0x4a, 0x44, 0xb5, 0xbe},
    {0x03, 0x0b, 0x44, 0x04, 0x7e},
    {0x01, 0x03, 0x44, 0x44, 0x7e},
    {0x02, 0x0b, 0x44, 0x04, 0x7e},
    {0x05, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x04, 0x6e},
    {0x04, 0x03, 0x44, 0x44, 0x7e},
    {0x02, 0x05, 0x45, 0x04, 0x6e},
    {0x0a, 0x42, 0x44, 0xf5, 0xbe},
    {0x03, 0x0c, 0x42, 0x04, 0x8e},
    {0x01, 0x0b, 0x42, 0x44, 0x8e},
    {0x02, 0x0c, 0x42, 0x04, 0x8e},
    {0x06, 0x43, 0x02, 0x04, 0x8e},
    {0x03, 0x09, 0x44, 0x04, 0x7e},
    {0x04, 0x0b, 0x42, 0x44, 0x8e},
    {0x02, 0x09, 0x44, 0x04, 0x7e},
    {0x07, 0x41, 0x04, 0xf5, 0xbe},
    {0x03, 0x9a, 0x46, 0x02, 0xce},
    {0x01, 0x05, 0x44, 0x44, 0x7e},
    {0x02, 0x9a, 0x46, 0x02, 0xce},
    {0x05, 0x43, 0x02, 0x04, 0x8e},
    {0x03, 0x06, 0x45, 0x04, 0x6e},
    {0x04, 0x05, 0x44, 0x44, 0x7e},
    {0x02, 0x06, 0x45, 0x04, 0x6e},
    {0x4d, 0x06, 0x02, 0xb5, 0xce},
    {0x03, 0x22, 0x43, 0xb5, 0xac},
    {0x01, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x22, 0x43, 0xb5, 0xac},
    {0x06, 0x52, 0x04, 0xb5, 0xbe},
    {0x03, 0x82, 0x42, 0x04, 0xbe},
    {0x04, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x04, 0xbe},
    {0x08, 0x4a, 0x44, 0xb5, 0xbe},
    {0x03, 0x32, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x44, 0x8e},
    {0x02, 0x32, 0x43, 0xb5, 0xac},
    {0x05, 0x52, 0x04, 0xb5, 0xbe},
    {0x03, 0x0e, 0x42, 0x04, 0x8e},
    {0x04, 0x09, 0x42, 0x44, 0x8e},
    {0x02, 0x0e, 0x42, 0x04, 0x8e},
    {0x53, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3e, 0x43, 0xb5, 0xac},
    {0x01, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x3e, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x04, 0x8e},
    {0x03, 0x04, 0x45, 0x04, 0x6e},
    {0x04, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x45, 0x04, 0x6e},
    {0x07, 0x48, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x04, 0x6e},
    {0x01, 0x06, 0x44, 0x44, 0x7e},
    {0x02, 0x02, 0x45, 0x04, 0x6e},
    {0x05, 0x45, 0x02, 0x04, 0x8e},
    {0x03, 0x07, 0x45, 0x04, 0x6e},
    {0x04, 0x06, 0x44, 0x44, 0x7e},
    {0x02, 0x07, 0x45, 0x04, 0x6e},
    {0x58, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x30, 0x43, 0xb5, 0xac},
    {0x01, 0x26, 0x44, 0xf5, 0xbe},
    {0x02, 0x30, 0x43, 0xb5, 0xac},
    {0x06, 0x55, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x43, 0x06, 0x6c},
    {0x04, 0x26, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x06, 0x6c},
    {0x09, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3c, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x46, 0x42, 0xce},
    {0x02, 0x3c, 0x43, 0xb5, 0xac},
    {0x05, 0x55, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x43, 0x06, 0x6c},
    {0x04, 0x82, 0x46, 0x42, 0xce},
    {0x02, 0x05, 0x43, 0x06, 0x6c},
    {0x0b, 0x42, 0x44, 0xf5, 0xbe},
    {0x03, 0x2a, 0x43, 0xb5, 0xac},
    {0x01, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x2a, 0x43, 0xb5, 0xac},
    {0x06, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x04, 0x8e},
    {0x04, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x04, 0x8e},
    {0x07, 0xc3, 0xb5, 0x40, 0x0b},
    {0x03, 0x92, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x92, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x06, 0x6c},
    {0x04, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x06, 0x6c},
    {0x56, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x20, 0x43, 0xb5, 0xac},
    {0x01, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x43, 0xb5, 0xac},
    {0x06, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x08, 0x44, 0x04, 0x7e},
    {0x04, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0x04, 0x7e},
    {0x08, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3a, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x44, 0x7e},
    {0x02, 0x3a, 0x43, 0xb5, 0xac},
    {0x05, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x81, 0x42, 0x04, 0xbe},
    {0x04, 0x04, 0x44, 0x44, 0x7e},
    {0x02, 0x81, 0x42, 0x04, 0xbe},
    {0x0c, 0x42, 0x44, 0xf5, 0xbe},
    {0x03, 0x0a, 0x44, 0x04, 0x7e},
    {0x01, 0x02, 0x44, 0x44, 0x7e},
    {0x02, 0x0a, 0x44, 0x04, 0x7e},
    {0x06, 0x46, 0x02, 0x04, 0x8e},
    {0x03, 0x04, 0x43, 0x06, 0x6c},
    {0x04, 0x02, 0x44, 0x44, 0x7e},
    {0x02, 0x04, 0x43, 0x06, 0x6c},
    {0x07, 0xc1, 0x04, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x06, 0x6c},
    {0x01, 0x07, 0x44, 0x44, 0x7e},
    {0x02, 0x02, 0x43, 0x06, 0x6c},
    {0x05, 0x46, 0x02, 0x04, 0x8e},
    {0x03, 0x07, 0x43, 0x06, 0x6c},
    {0x04, 0x07, 0x44, 0x44, 0x7e},
    {0x02, 0x07, 0x43, 0x06, 0x6c},
    {0xe7, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x42, 0xb5, 0x9b},
    {0x01, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x16, 0x42, 0xb5, 0x9b},
    {0x06, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x81, 0x6e},
    {0x04, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x81, 0x6e},
    {0x09, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x81, 0x7e},
    {0x01, 0x03, 0x42, 0xc1, 0x7e},
    {0x02, 0x0b, 0x42, 0x81, 0x7e},
    {0x05, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x81, 0x6e},
    {0x04, 0x03, 0x42, 0xc1, 0x7e},
    {0x02, 0x05, 0x44, 0x81, 0x6e},
    {0x0a, 0x47, 0x44, 0xf5, 0xbe},
    {0x03, 0x1a, 0x42, 0xb5, 0x9b},
    {0x01, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0xb5, 0x9b},
    {0x06, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x81, 0x7e},
    {0x04, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x81, 0x7e},
    {0x07, 0x4a, 0x03, 0xf5, 0xac},
    {0x03, 0x8a, 0x44, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0xc1, 0x7e},
    {0x02, 0x8a, 0x44, 0xb5, 0xee},
    {0x05, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x81, 0x6e},
    {0x04, 0x05, 0x42, 0xc1, 0x7e},
    {0x02, 0x06, 0x44, 0x81, 0x6e},
    {0x50, 0x04, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x43, 0xb5, 0xac},
    {0x01, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x26, 0x43, 0xb5, 0xac},
    {0x06, 0xc3, 0x04, 0xb5, 0xee},
    {0x03, 0x82, 0x47, 0x04, 0xbe},
    {0x04, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x04, 0xbe},
    {0x08, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0xb5, 0x9b},
    {0x01, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x19, 0x42, 0xb5, 0x9b},
    {0x05, 0xc3, 0x04, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x04, 0x8e},
    {0x04, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0x04, 0x8e},
    {0x40, 0x04, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x44, 0xb5, 0xee},
    {0x01, 0x84, 0x44, 0xf5, 0xee},
    {0x02, 0x86, 0x44, 0xb5, 0xee},
    {0x06, 0xc1, 0x81, 0xb5, 0x0e},
    {0x03, 0x04, 0x44, 0x81, 0x6e},
    {0x04, 0x84, 0x44, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x81, 0x6e},
    {0x07, 0x44, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x81, 0x6e},
    {0x01, 0x06, 0x42, 0xc1, 0x7e},
    {0x02, 0x02, 0x44, 0x81, 0x6e},
    {0x05, 0xc1, 0x81, 0xb5, 0x0e},
    {0x03, 0x07, 0x44, 0x81, 0x6e},
    {0x04, 0x06, 0x42, 0xc1, 0x7e},
    {0x02, 0x07, 0x44, 0x81, 0x6e},
    {0xc1, 0x43, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x04, 0x8e},
    {0x01, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0x04, 0x8e},
    {0x06, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x06, 0x6c},
    {0x04, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x06, 0x6c},
    {0x09, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0x44, 0x8e},
    {0x02, 0x12, 0x42, 0xb5, 0x9b},
    {0x05, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x06, 0x6c},
    {0x04, 0x08, 0x42, 0x44, 0x8e},
    {0x02, 0x05, 0x42, 0x06, 0x6c},
    {0x0b, 0x47, 0x44, 0xf5, 0xbe},
    {0x03, 0x15, 0x42, 0xb5, 0x9b},
    {0x01, 0x83, 0xc1, 0xf5, 0x0e},
    {0x02, 0x15, 0x42, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0x04, 0x8e},
    {0x03, 0x11, 0x42, 0x04, 0x8e},
    {0x04, 0x83, 0xc1, 0xf5, 0x0e},
    {0x02, 0x11, 0x42, 0x04, 0x8e},
    {0x07, 0x42, 0x02, 0xf5, 0x9b},
    {0x03, 0x84, 0xc1, 0xb5, 0x0e},
    {0x01, 0x81, 0x46, 0x42, 0xce},
    {0x02, 0x84, 0xc1, 0xb5, 0x0e},
    {0x05, 0x44, 0x02, 0x04, 0x8e},
    {0x03, 0x06, 0x42, 0x06, 0x6c},
    {0x04, 0x81, 0x46, 0x42, 0xce},
    {0x02, 0x06, 0x42, 0x06, 0x6c},
    {0x4e, 0x06, 0x02, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0x04, 0x8e},
    {0x01, 0x0a, 0x42, 0x44, 0x8e},
    {0x02, 0x01, 0x42, 0x04, 0x8e},
    {0x06, 0x42, 0x02, 0x04, 0x8e},
    {0x03, 0x08, 0x42, 0x81, 0x7e},
    {0x04, 0x0a, 0x42, 0x44, 0x8e},
    {0x02, 0x08, 0x42, 0x81, 0x7e},
    {0x08, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x46, 0x02, 0xce},
    {0x01, 0x04, 0x42, 0xc1, 0x7e},
    {0x02, 0x83, 0x46, 0x02, 0xce},
    {0x05, 0x42, 0x02, 0x04, 0x8e},
    {0x03, 0x81, 0x47, 0x04, 0xbe},
    {0x04, 0x04, 0x42, 0xc1, 0x7e},
    {0x02, 0x81, 0x47, 0x04, 0xbe},
    {0x0c, 0x47, 0x44, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0x81, 0x7e},
    {0x01, 0x02, 0x42, 0xc1, 0x7e},
    {0x02, 0x0a, 0x42, 0x81, 0x7e},
    {0x06, 0x47, 0x02, 0x04, 0x8e},
    {0x03, 0x04, 0x42, 0x06, 0x6c},
    {0x04, 0x02, 0x42, 0xc1, 0x7e},
    {0x02, 0x04, 0x42, 0x06, 0x6c},
    {0x07, 0x47, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x06, 0x6c},
    {0x01, 0x07, 0x42, 0xc1, 0x7e},
    {0x02, 0x02, 0x42, 0x06, 0x6c},
    {0x05, 0x47, 0x02, 0x04, 0x8e},
    {0x03, 0x07, 0x42, 0x06, 0x6c},
    {0x04, 0x07, 0x42, 0xc1, 0x7e},
    {0x02, 0x07, 0x42, 0x06, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xb4, 0xf5, 0x00, 0x0c},
    {0x01, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0xb4, 0xf5, 0x00, 0x0c},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0x4e, 0xb5, 0x6e},
    {0x04, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0x03, 0x4e, 0xb5, 0x6e},
    {0x09, 0x56, 0x43, 0xb5, 0xdf},
    {0x03, 0x0b, 0x4c, 0xb5, 0x7e},
    {0x01, 0x03, 0x4c, 0xf5, 0x7e},
    {0x02, 0x0b, 0x4c, 0xb5, 0x7e},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0x4e, 0xb5, 0x6e},
    {0x04, 0x03, 0x4c, 0xf5, 0x7e},
    {0x02, 0x05, 0x4e, 0xb5, 0x6e},
    {0x0a, 0x4d, 0x43, 0xf5, 0xdf},
    {0x03, 0x0c, 0x47, 0xb5, 0x8d},
    {0x01, 0x0b, 0x47, 0xf5, 0x8d},
    {0x02, 0x0c, 0x47, 0xb5, 0x8d},
    {0x06, 0x43, 0x07, 0xb5, 0x8d},
    {0x03, 0x09, 0x4c, 0xb5, 0x7e},
    {0x04, 0x0b, 0x47, 0xf5, 0x8d},
    {0x02, 0x09, 0x4c, 0xb5, 0x7e},
    {0x07, 0x5e, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0x41, 0xb5, 0xee},
    {0x01, 0x05, 0x4c, 0xf5, 0x7e},
    {0x02, 0x9a, 0x41, 0xb5, 0xee},
    {0x05, 0x43, 0x07, 0xb5, 0x8d},
    {0x03, 0x06, 0x4e, 0xb5, 0x6e},
    {0x04, 0x05, 0x4c, 0xf5, 0x7e},
    {0x02, 0x06, 0x4e, 0xb5, 0x6e},
    {0x4d, 0x01, 0xb5, 0x00, 0xee},
    {0x03, 0x14, 0x45, 0xb5, 0x9d},
    {0x01, 0x0c, 0x45, 0xf5, 0x9d},
    {0x02, 0x14, 0x45, 0xb5, 0x9d},
    {0x06, 0x4b, 0x05, 0xb5, 0x9d},
    {0x03, 0x82, 0x4d, 0x03, 0xdf},
    {0x04, 0x0c, 0x45, 0xf5, 0x9d},
    {0x02, 0x82, 0x4d, 0x03, 0xdf},
    {0x08, 0x56, 0x43, 0xb5, 0xdf},
    {0x03, 0x18, 0x45, 0xb5, 0x9d},
    {0x01, 0x09, 0x47, 0xf5, 0x8d},
    {0x02, 0x18, 0x45, 0xb5, 0x9d},
    {0x05, 0x4b, 0x05, 0xb5, 0x9d},
    {0x03, 0x0e, 0x47, 0xb5, 0x8d},
    {0x04, 0x09, 0x47, 0xf5, 0x8d},
    {0x02, 0x0e, 0x47, 0xb5, 0x8d},
    {0x4f, 0x0a, 0xb5, 0x40, 0xee},
    {0x03, 0x1c, 0x45, 0xb5, 0x9d},
    {0x01, 0x9a, 0x4a, 0xf5, 0xee},
    {0x02, 0x1c, 0x45, 0xb5, 0x9d},
    {0x06, 0x45, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0x4e, 0xb5, 0x6e},
    {0x04, 0x9a, 0x4a, 0xf5, 0xee},
    {0x02, 0x04, 0x4e, 0xb5, 0x6e},
    {0x07, 0x43, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x4e, 0xb5, 0x6e},
    {0x01, 0x06, 0x4c, 0xf5, 0x7e},
    {0x02, 0x02, 0x4e, 0xb5, 0x6e},
    {0x05, 0x45, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0x4e, 0xb5, 0x6e},
    {0x04, 0x06, 0x4c, 0xf5, 0x7e},
    {0x02, 0x07, 0x4e, 0xb5, 0x6e},
    {0x52, 0x02, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x45, 0xb5, 0x9d},
    {0x01, 0x14, 0x44, 0xf5, 0xad},
    {0x02, 0x17, 0x45, 0xb5, 0x9d},
    {0x06, 0x4c, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x43, 0x01, 0x6e},
    {0x04, 0x14, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x43, 0x01, 0x6e},
    {0x09, 0x43, 0x44, 0xb5, 0xad},
    {0x03, 0x1b, 0x45, 0xb5, 0x9d},
    {0x01, 0x82, 0x41, 0xf5, 0xee},
    {0x02, 0x1b, 0x45, 0xb5, 0x9d},
    {0x05, 0x4c, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x43, 0x01, 0x6e},
    {0x04, 0x82, 0x41, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x01, 0x6e},
    {0x0b, 0x4d, 0x43, 0xf5, 0xdf},
    {0x03, 0x27, 0x44, 0xb5, 0xad},
    {0x01, 0x18, 0x44, 0xf5, 0xad},
    {0x02, 0x27, 0x44, 0xb5, 0xad},
    {0x06, 0x49, 0x05, 0xb5, 0x9d},
    {0x03, 0x10, 0x47, 0xb5, 0x8d},
    {0x04, 0x18, 0x44, 0xf5, 0xad},
    {0x02, 0x10, 0x47, 0xb5, 0x8d},
    {0x07, 0x4b, 0x04, 0xf5, 0xad},
    {0x03, 0x89, 0x42, 0xb5, 0xee},
    {0x01, 0x0e, 0x45, 0xf5, 0x9d},
    {0x02, 0x89, 0x42, 0xb5, 0xee},
    {0x05, 0x49, 0x05, 0xb5, 0x9d},
    {0x03, 0x06, 0x43, 0x01, 0x6e},
    {0x04, 0x0e, 0x45, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x01, 0x6e},
    {0x51, 0x02, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x45, 0xb5, 0x9d},
    {0x01, 0x1c, 0x44, 0xf5, 0xad},
    {0x02, 0x13, 0x45, 0xb5, 0x9d},
    {0x06, 0xda, 0x02, 0xb5, 0xee},
    {0x03, 0x08, 0x4c, 0xb5, 0x7e},
    {0x04, 0x1c, 0x44, 0xf5, 0xad},
    {0x02, 0x08, 0x4c, 0xb5, 0x7e},
    {0x08, 0x43, 0x44, 0xb5, 0xad},
    {0x03, 0x37, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x4c, 0xf5, 0x7e},
    {0x02, 0x37, 0x44, 0xb5, 0xad},
    {0x05, 0xda, 0x02, 0xb5, 0xee},
    {0x03, 0x81, 0x4d, 0x03, 0xdf},
    {0x04, 0x04, 0x4c, 0xf5, 0x7e},
    {0x02, 0x81, 0x4d, 0x03, 0xdf},
    {0x0c, 0x4d, 0x43, 0xf5, 0xdf},
    {0x03, 0x0a, 0x4c, 0xb5, 0x7e},
    {0x01, 0x02, 0x4c, 0xf5, 0x7e},
    {0x02, 0x0a, 0x4c, 0xb5, 0x7e},
    {0x06, 0x46, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0x43, 0x01, 0x6e},
    {0x04, 0x02, 0x4c, 0xf5, 0x7e},
    {0x02, 0x04, 0x43, 0x01, 0x6e},
    {0x07, 0x45, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x43, 0x01, 0x6e},
    {0x01, 0x07, 0x4c, 0xf5, 0x7e},
    {0x02, 0x02, 0x43, 0x01, 0x6e},
    {0x05, 0x46, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0x43, 0x01, 0x6e},
    {0x04, 0x07, 0x4c, 0xf5, 0x7e},
    {0x02, 0x07, 0x43, 0x01, 0x6e},
    {0xdc, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x2d, 0x44, 0xb5, 0xad},
    {0x01, 0x17, 0x44, 0xf5, 0xad},
    {0x02, 0x2d, 0x44, 0xb5, 0xad},
    {0x06, 0x54, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x41, 0x0a, 0x6e},
    {0x04, 0x17, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x41, 0x0a, 0x6e},
    {0x09, 0x4b, 0x42, 0xb5, 0xbd},
    {0x03, 0x0b, 0x43, 0x0a, 0x7e},
    {0x01, 0x03, 0x43, 0x4a, 0x7e},
    {0x02, 0x0b, 0x43, 0x0a, 0x7e},
    {0x05, 0x54, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x41, 0x0a, 0x6e},
    {0x04, 0x03, 0x43, 0x4a, 0x7e},
    {0x02, 0x05, 0x41, 0x0a, 0x6e},
    {0x0a, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x35, 0x44, 0xb5, 0xad},
    {0x01, 0x1b, 0x44, 0xf5, 0xad},
    {0x02, 0x35, 0x44, 0xb5, 0xad},
    {0x06, 0xc2, 0x0a, 0xb5, 0xee},
    {0x03, 0x09, 0x43, 0x0a, 0x7e},
    {0x04, 0x1b, 0x44, 0xf5, 0xad},
    {0x02, 0x09, 0x43, 0x0a, 0x7e},
    {0x07, 0x4c, 0x02, 0xf5, 0xbd},
    {0x03, 0x87, 0x42, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x4a, 0x7e},
    {0x02, 0x87, 0x42, 0xb5, 0xee},
    {0x05, 0xc2, 0x0a, 0xb5, 0xee},
    {0x03, 0x06, 0x41, 0x0a, 0x6e},
    {0x04, 0x05, 0x43, 0x4a, 0x7e},
    {0x02, 0x06, 0x41, 0x0a, 0x6e},
    {0x57, 0x06, 0xf5, 0x40, 0xff},
    {0x03, 0x23, 0x44, 0xb5, 0xad},
    {0x01, 0x27, 0x42, 0xf5, 0xbd},
    {0x02, 0x23, 0x44, 0xb5, 0xad},
    {0x06, 0x58, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x43, 0x02, 0xbd},
    {0x04, 0x27, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x43, 0x02, 0xbd},
    {0x08, 0x4b, 0x42, 0xb5, 0xbd},
    {0x03, 0x33, 0x44, 0xb5, 0xad},
    {0x01, 0x10, 0x45, 0xf5, 0x9d},
    {0x02, 0x33, 0x44, 0xb5, 0xad},
    {0x05, 0x58, 0x02, 0xb5, 0xbd},
    {0x03, 0x0f, 0x47, 0xb5, 0x8d},
    {0x04, 0x10, 0x45, 0xf5, 0x9d},
    {0x02, 0x0f, 0x47, 0xb5, 0x8d},
    {0x54, 0x06, 0xf5, 0x40, 0xff},
    {0x03, 0x3f, 0x44, 0xb5, 0xad},
    {0x01, 0x89, 0x46, 0xf5, 0xff},
    {0x02, 0x3f, 0x44, 0xb5, 0xad},
    {0x06, 0x4e, 0x04, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x0a, 0x6e},
    {0x04, 0x89, 0x46, 0xf5, 0xff},
    {0x02, 0x04, 0x41, 0x0a, 0x6e},
    {0x07, 0x49, 0x04, 0xf5, 0xad},
    {0x03, 0x02, 0x41, 0x0a, 0x6e},
    {0x01, 0x06, 0x43, 0x4a, 0x7e},
    {0x02, 0x02, 0x41, 0x0a, 0x6e},
    {0x05, 0x4e, 0x04, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x0a, 0x6e},
    {0x04, 0x06, 0x43, 0x4a, 0x7e},
    {0x02, 0x07, 0x41, 0x0a, 0x6e},
    {0x59, 0x06, 0xf5, 0x40, 0xff},
    {0x03, 0x0d, 0x47, 0xb5, 0x8d},
    {0x01, 0x13, 0x44, 0xf5, 0xad},
    {0x02, 0x0d, 0x47, 0xb5, 0x8d},
    {0x06, 0x5c, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x42, 0x01, 0x6e},
    {0x04, 0x13, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x42, 0x01, 0x6e},
    {0x09, 0x45, 0x44, 0xb5, 0xad},
    {0x03, 0x97, 0x46, 0xb5, 0xff},
    {0x01, 0x08, 0x47, 0xf5, 0x8d},
    {0x02, 0x97, 0x46, 0xb5, 0xff},
    {0x05, 0x5c, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x42, 0x01, 0x6e},
    {0x04, 0x08, 0x47, 0xf5, 0x8d},
    {0x02, 0x05, 0x42, 0x01, 0x6e},
    {0x0b, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x2b, 0x44, 0xb5, 0xad},
    {0x01, 0x37, 0x42, 0xf5, 0xbd},
    {0x02, 0x2b, 0x44, 0xb5, 0xad},
    {0x06, 0x44, 0x07, 0xb5, 0x8d},
    {0x03, 0x11, 0x47, 0xb5, 0x8d},
    {0x04, 0x37, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x47, 0xb5, 0x8d},
    {0x07, 0xda, 0x06, 0xf5, 0xff},
    {0x03, 0x93, 0x46, 0xb5, 0xff},
    {0x01, 0x81, 0x41, 0xf5, 0xee},
    {0x02, 0x93, 0x46, 0xb5, 0xff},
    {0x05, 0x44, 0x07, 0xb5, 0x8d},
    {0x03, 0x06, 0x42, 0x01, 0x6e},
    {0x04, 0x81, 0x41, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x01, 0x6e},
    {0x4e, 0x01, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x47, 0xb5, 0x8d},
    {0x01, 0x0a, 0x47, 0xf5, 0x8d},
    {0x02, 0x01, 0x47, 0xb5, 0x8d},
    {0x06, 0x42, 0x07, 0xb5, 0x8d},
    {0x03, 0x08, 0x43, 0x0a, 0x7e},
    {0x04, 0x0a, 0x47, 0xf5, 0x8d},
    {0x02, 0x08, 0x43, 0x0a, 0x7e},
    {0x08, 0x45, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0x41, 0xb5, 0xee},
    {0x01, 0x04, 0x43, 0x4a, 0x7e},
    {0x02, 0x83, 0x41, 0xb5, 0xee},
    {0x05, 0x42, 0x07, 0xb5, 0x8d},
    {0x03, 0x81, 0x43, 0x02, 0xbd},
    {0x04, 0x04, 0x43, 0x4a, 0x7e},
    {0x02, 0x81, 0x43, 0x02, 0xbd},
    {0x0c, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x0a, 0x7e},
    {0x01, 0x02, 0x43, 0x4a, 0x7e},
    {0x02, 0x0a, 0x43, 0x0a, 0x7e},
    {0x06, 0x47, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0x42, 0x01, 0x6e},
    {0x04, 0x02, 0x43, 0x4a, 0x7e},
    {0x02, 0x04, 0x42, 0x01, 0x6e},
    {0x07, 0x46, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x01, 0x6e},
    {0x01, 0x07, 0x43, 0x4a, 0x7e},
    {0x02, 0x02, 0x42, 0x01, 0x6e},
    {0x05, 0x47, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0x42, 0x01, 0x6e},
    {0x04, 0x07, 0x43, 0x4a, 0x7e},
    {0x02, 0x07, 0x42, 0x01, 0x6e},
    {0xf4, 0x4a, 0xf5, 0x00, 0x0e},
    {0x03, 0x1d, 0x44, 0xb5, 0xad},
    {0x01, 0x2d, 0x42, 0xf5, 0xbd},
    {0x02, 0x1d, 0x44, 0xb5, 0xad},
    {0x06, 0x57, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x46, 0x02, 0x6e},
    {0x04, 0x2d, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0x02, 0x6e},
    {0x09, 0x5a, 0x43, 0xb5, 0xdf},
    {0x03, 0x0b, 0x41, 0x02, 0x7e},
    {0x01, 0x03, 0x41, 0x42, 0x7e},
    {0x02, 0x0b, 0x41, 0x02, 0x7e},
    {0x05, 0x57, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x46, 0x02, 0x6e},
    {0x04, 0x03, 0x41, 0x42, 0x7e},
    {0x02, 0x05, 0x46, 0x02, 0x6e},
    {0x0a, 0x52, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x43, 0x02, 0x8e},
    {0x01, 0x0b, 0x43, 0x42, 0x8e},
    {0x02, 0x0c, 0x43, 0x02, 0x8e},
    {0x06, 0x43, 0x03, 0x02, 0x8e},
    {0x03, 0x09, 0x41, 0x02, 0x7e},
    {0x04, 0x0b, 0x43, 0x42, 0x8e},
    {0x02, 0x09, 0x41, 0x02, 0x7e},
    {0x07, 0x62, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0x48, 0x03, 0xdf},
    {0x01, 0x05, 0x41, 0x42, 0x7e},
    {0x02, 0x9a, 0x48, 0x03, 0xdf},
    {0x05, 0x43, 0x03, 0x02, 0x8e},
    {0x03, 0x06, 0x46, 0x02, 0x6e},
    {0x04, 0x05, 0x41, 0x42, 0x7e},
    {0x02, 0x06, 0x46, 0x02, 0x6e},
    {0x4d, 0x08, 0x03, 0xb5, 0xdf},
    {0x03, 0x21, 0x44, 0xb5, 0xad},
    {0x01, 0x35, 0x42, 0xf5, 0xbd},
    {0x02, 0x21, 0x44, 0xb5, 0xad},
    {0x06, 0x5b, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x52, 0xb5, 0xee},
    {0x04, 0x35, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x52, 0xb5, 0xee},
    {0x08, 0x5a, 0x43, 0xb5, 0xdf},
    {0x03, 0x31, 0x44, 0xb5, 0xad},
    {0x01, 0x09, 0x43, 0x42, 0x8e},
    {0x02, 0x31, 0x44, 0xb5, 0xad},
    {0x05, 0x5b, 0x02, 0xb5, 0xbd},
    {0x03, 0x0e, 0x43, 0x02, 0x8e},
    {0x04, 0x09, 0x43, 0x42, 0x8e},
    {0x02, 0x0e, 0x43, 0x02, 0x8e},
    {0xc3, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x3d, 0x44, 0xb5, 0xad},
    {0x01, 0x87, 0x46, 0xf5, 0xff},
    {0x02, 0x3d, 0x44, 0xb5, 0xad},
    {0x06, 0x45, 0x03, 0x02, 0x8e},
    {0x03, 0x04, 0x46, 0x02, 0x6e},
    {0x04, 0x87, 0x46, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0x02, 0x6e},
    {0x07, 0xc2, 0x02, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x02, 0x6e},
    {0x01, 0x06, 0x41, 0x42, 0x7e},
    {0x02, 0x02, 0x46, 0x02, 0x6e},
    {0x05, 0x45, 0x03, 0x02, 0x8e},
    {0x03, 0x07, 0x46, 0x02, 0x6e},
    {0x04, 0x06, 0x41, 0x42, 0x7e},
    {0x02, 0x07, 0x46, 0x02, 0x6e},
    {0xd5, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x2f, 0x44, 0xb5, 0xad},
    {0x01, 0x23, 0x42, 0xf5, 0xbd},
    {0x02, 0x2f, 0x44, 0xb5, 0xad},
    {0x06, 0x68, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x08, 0x6d},
    {0x04, 0x23, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x08, 0x6d},
    {0x09, 0x49, 0x42, 0xb5, 0xbd},
    {0x03, 0x3b, 0x44, 0xb5, 0xad},
    {0x01, 0x82, 0x48, 0x43, 0xdf},
    {0x02, 0x3b, 0x44, 0xb5, 0xad},
    {0x05, 0x68, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x08, 0x6d},
    {0x04, 0x82, 0x48, 0x43, 0xdf},
    {0x02, 0x05, 0x43, 0x08, 0x6d},
    {0x0b, 0x52, 0xf5, 0x40, 0xee},
    {0x03, 0x29, 0x44, 0xb5, 0xad},
    {0x01, 0x33, 0x42, 0xf5, 0xbd},
    {0x02, 0x29, 0x44, 0xb5, 0xad},
    {0x06, 0x50, 0x04, 0xb5, 0xad},
    {0x03, 0x10, 0x43, 0x02, 0x8e},
    {0x04, 0x33, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0x02, 0x8e},
    {0x07, 0x72, 0x03, 0xf5, 0xdf},
    {0x03, 0x8f, 0x46, 0xb5, 0xff},
    {0x01, 0x0f, 0x45, 0xf5, 0x9d},
    {0x02, 0x8f, 0x46, 0xb5, 0xff},
    {0x05, 0x50, 0x04, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x08, 0x6d},
    {0x04, 0x0f, 0x45, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x08, 0x6d},
    {0x5f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x44, 0xb5, 0xad},
    {0x01, 0x3f, 0x42, 0xf5, 0xbd},
    {0x02, 0x1f, 0x44, 0xb5, 0xad},
    {0x06, 0xce, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x02, 0x7e},
    {0x04, 0x3f, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0x02, 0x7e},
    {0x08, 0x49, 0x42, 0xb5, 0xbd},
    {0x03, 0x39, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x41, 0x42, 0x7e},
    {0x02, 0x39, 0x44, 0xb5, 0xad},
    {0x05, 0xce, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x52, 0xb5, 0xee},
    {0x04, 0x04, 0x41, 0x42, 0x7e},
    {0x02, 0x81, 0x52, 0xb5, 0xee},
    {0x0c, 0x52, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x41, 0x02, 0x7e},
    {0x01, 0x02, 0x41, 0x42, 0x7e},
    {0x02, 0x0a, 0x41, 0x02, 0x7e},
    {0x06, 0x46, 0x03, 0x02, 0x8e},
    {0x03, 0x04, 0x43, 0x08, 0x6d},
    {0x04, 0x02, 0x41, 0x42, 0x7e},
    {0x02, 0x04, 0x43, 0x08, 0x6d},
    {0x07, 0x4e, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x08, 0x6d},
    {0x01, 0x07, 0x41, 0x42, 0x7e},
    {0x02, 0x02, 0x43, 0x08, 0x6d},
    {0x05, 0x46, 0x03, 0x02, 0x8e},
    {0x03, 0x07, 0x43, 0x08, 0x6d},
    {0x04, 0x07, 0x41, 0x42, 0x7e},
    {0x02, 0x07, 0x43, 0x08, 0x6d},
    {0xdd, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x45, 0xb5, 0x9d},
    {0x01, 0x0d, 0x45, 0xf5, 0x9d},
    {0x02, 0x16, 0x45, 0xb5, 0x9d},
    {0x06, 0x53, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x44, 0x0a, 0x6e},
    {0x04, 0x0d, 0x45, 0xf5, 0x9d},
    {0x02, 0x03, 0x44, 0x0a, 0x6e},
    {0x09, 0xca, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x42, 0x0a, 0x7e},
    {0x01, 0x03, 0x42, 0x4a, 0x7e},
    {0x02, 0x0b, 0x42, 0x0a, 0x7e},
    {0x05, 0x53, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x44, 0x0a, 0x6e},
    {0x04, 0x03, 0x42, 0x4a, 0x7e},
    {0x02, 0x05, 0x44, 0x0a, 0x6e},
    {0x0a, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x45, 0xb5, 0x9d},
    {0x01, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x45, 0xb5, 0x9d},
    {0x06, 0x48, 0x05, 0xb5, 0x9d},
    {0x03, 0x09, 0x42, 0x0a, 0x7e},
    {0x04, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x0a, 0x7e},
    {0x07, 0x7e, 0x03, 0xf5, 0xdf},
    {0x03, 0x8b, 0x46, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x4a, 0x7e},
    {0x02, 0x8b, 0x46, 0xb5, 0xff},
    {0x05, 0x48, 0x05, 0xb5, 0x9d},
    {0x03, 0x06, 0x44, 0x0a, 0x6e},
    {0x04, 0x05, 0x42, 0x4a, 0x7e},
    {0x02, 0x06, 0x44, 0x0a, 0x6e},
    {0x7a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x44, 0xb5, 0xad},
    {0x01, 0x2b, 0x42, 0xf5, 0xbd},
    {0x02, 0x25, 0x44, 0xb5, 0xad},
    {0x06, 0x78, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x45, 0x02, 0xbd},
    {0x04, 0x2b, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x45, 0x02, 0xbd},
    {0x08, 0xca, 0xf5, 0x00, 0x0e},
    {0x03, 0x19, 0x45, 0xb5, 0x9d},
    {0x01, 0x11, 0x45, 0xf5, 0x9d},
    {0x02, 0x19, 0x45, 0xb5, 0x9d},
    {0x05, 0x78, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0x02, 0x8e},
    {0x04, 0x11, 0x45, 0xf5, 0x9d},
    {0x02, 0x0f, 0x43, 0x02, 0x8e},
    {0x55, 0x06, 0xf5, 0x40, 0xff},
    {0x03, 0x85, 0x42, 0xb5, 0xee},
    {0x01, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x42, 0xb5, 0xee},
    {0x06, 0xc1, 0x0a, 0xb5, 0xee},
    {0x03, 0x04, 0x44, 0x0a, 0x6e},
    {0x04, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x0a, 0x6e},
    {0x07, 0x44, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x44, 0x0a, 0x6e},
    {0x01, 0x06, 0x42, 0x4a, 0x7e},
    {0x02, 0x02, 0x44, 0x0a, 0x6e},
    {0x05, 0xc1, 0x0a, 0xb5, 0xee},
    {0x03, 0x07, 0x44, 0x0a, 0x6e},
    {0x04, 0x06, 0x42, 0x4a, 0x7e},
    {0x02, 0x07, 0x44, 0x0a, 0x6e},
    {0xcf, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x43, 0x02, 0x8e},
    {0x01, 0x01, 0x45, 0xf5, 0x9d},
    {0x02, 0x0d, 0x43, 0x02, 0x8e},
    {0x06, 0x4a, 0x05, 0xb5, 0x9d},
    {0x03, 0x03, 0x42, 0x08, 0x6d},
    {0x04, 0x01, 0x45, 0xf5, 0x9d},
    {0x02, 0x03, 0x42, 0x08, 0x6d},
    {0x09, 0x46, 0x44, 0xb5, 0xad},
    {0x03, 0x12, 0x45, 0xb5, 0x9d},
    {0x01, 0x08, 0x43, 0x42, 0x8e},
    {0x02, 0x12, 0x45, 0xb5, 0x9d},
    {0x05, 0x4a, 0x05, 0xb5, 0x9d},
    {0x03, 0x05, 0x42, 0x08, 0x6d},
    {0x04, 0x08, 0x43, 0x42, 0x8e},
    {0x02, 0x05, 0x42, 0x08, 0x6d},
    {0x0b, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x45, 0xb5, 0x9d},
    {0x01, 0x83, 0x4a, 0xf5, 0xee},
    {0x02, 0x15, 0x45, 0xb5, 0x9d},
    {0x06, 0x44, 0x03, 0x02, 0x8e},
    {0x03, 0x11, 0x43, 0x02, 0x8e},
    {0x04, 0x83, 0x4a, 0xf5, 0xee},
    {0x02, 0x11, 0x43, 0x02, 0x8e},
    {0x07, 0x42, 0x05, 0xf5, 0x9d},
    {0x03, 0x84, 0x4a, 0xb5, 0xee},
    {0x01, 0x81, 0x48, 0x43, 0xdf},
    {0x02, 0x84, 0x4a, 0xb5, 0xee},
    {0x05, 0x44, 0x03, 0x02, 0x8e},
    {0x03, 0x06, 0x42, 0x08, 0x6d},
    {0x04, 0x81, 0x48, 0x43, 0xdf},
    {0x02, 0x06, 0x42, 0x08, 0x6d},
    {0x4e, 0x08, 0x03, 0xb5, 0xdf},
    {0x03, 0x01, 0x43, 0x02, 0x8e},
    {0x01, 0x0a, 0x43, 0x42, 0x8e},
    {0x02, 0x01, 0x43, 0x02, 0x8e},
    {0x06, 0x42, 0x03, 0x02, 0x8e},
    {0x03, 0x08, 0x42, 0x0a, 0x7e},
    {0x04, 0x0a, 0x43, 0x42, 0x8e},
    {0x02, 0x08, 0x42, 0x0a, 0x7e},
    {0x08, 0x46, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0x48, 0x03, 0xdf},
    {0x01, 0x04, 0x42, 0x4a, 0x7e},
    {0x02, 0x83, 0x48, 0x03, 0xdf},
    {0x05, 0x42, 0x03, 0x02, 0x8e},
    {0x03, 0x81, 0x45, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0x4a, 0x7e},
    {0x02, 0x81, 0x45, 0x02, 0xbd},
    {0x0c, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x0a, 0x7e},
    {0x01, 0x02, 0x42, 0x4a, 0x7e},
    {0x02, 0x0a, 0x42, 0x0a, 0x7e},
    {0x06, 0x47, 0x03, 0x02, 0x8e},
    {0x03, 0x04, 0x42, 0x08, 0x6d},
    {0x04, 0x02, 0x42, 0x4a, 0x7e},
    {0x02, 0x04, 0x42, 0x08, 0x6d},
    {0x07, 0x47, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x08, 0x6d},
    {0x01, 0x07, 0x42, 0x4a, 0x7e},
    {0x02, 0x02, 0x42, 0x08, 0x6d},
    {0x05, 0x47, 0x03, 0x02, 0x8e},
    {0x03, 0x07, 0x42, 0x08, 0x6d},
    {0x04, 0x07, 0x42, 0x4a, 0x7e},
    {0x02, 0x07, 0x42, 0x08, 0x6d},
    {0xf4, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0xa4, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x42, 0xf5, 0xbd},
    {0x02, 0xa4, 0xf5, 0x00, 0x0e},
    {0x06, 0x6e, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x48, 0xb5, 0x6c},
    {0x04, 0x1d, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x48, 0xb5, 0x6c},
    {0x09, 0x66, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0x06, 0x7f},
    {0x01, 0x03, 0x46, 0x46, 0x7f},
    {0x02, 0x0b, 0x46, 0x06, 0x7f},
    {0x05, 0x6e, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x48, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0x46, 0x7f},
    {0x02, 0x05, 0x48, 0xb5, 0x6c},
    {0x0a, 0x55, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x41, 0x06, 0x8f},
    {0x01, 0x0b, 0x41, 0x46, 0x8f},
    {0x02, 0x0c, 0x41, 0x06, 0x8f},
    {0x06, 0x43, 0x01, 0x06, 0x8f},
    {0x03, 0x09, 0x46, 0x06, 0x7f},
    {0x04, 0x0b, 0x41, 0x46, 0x8f},
    {0x02, 0x09, 0x46, 0x06, 0x7f},
    {0x07, 0x70, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0xc3, 0xb5, 0x0e},
    {0x01, 0x05, 0x46, 0x46, 0x7f},
    {0x02, 0x9a, 0xc3, 0xb5, 0x0e},
    {0x05, 0x43, 0x01, 0x06, 0x8f},
    {0x03, 0x06, 0x48, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0x46, 0x7f},
    {0x02, 0x06, 0x48, 0xb5, 0x6c},
    {0x4d, 0x83, 0xb5, 0x00, 0x0e},
    {0x03, 0x14, 0x43, 0x06, 0x9f},
    {0x01, 0x0c, 0x43, 0x46, 0x9f},
    {0x02, 0x14, 0x43, 0x06, 0x9f},
    {0x06, 0x4b, 0x03, 0x06, 0x9f},
    {0x03, 0x82, 0x55, 0xb5, 0xee},
    {0x04, 0x0c, 0x43, 0x46, 0x9f},
    {0x02, 0x82, 0x55, 0xb5, 0xee},
    {0x08, 0x66, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0x06, 0x9f},
    {0x01, 0x09, 0x41, 0x46, 0x8f},
    {0x02, 0x18, 0x43, 0x06, 0x9f},
    {0x05, 0x4b, 0x03, 0x06, 0x9f},
    {0x03, 0x0e, 0x41, 0x06, 0x8f},
    {0x04, 0x09, 0x41, 0x46, 0x8f},
    {0x02, 0x0e, 0x41, 0x06, 0x8f},
    {0x4f, 0x04, 0x03, 0xf5, 0xdf},
    {0x03, 0x1c, 0x43, 0x06, 0x9f},
    {0x01, 0x9a, 0x44, 0x43, 0xdf},
    {0x02, 0x1c, 0x43, 0x06, 0x9f},
    {0x06, 0x45, 0x01, 0x06, 0x8f},
    {0x03, 0x04, 0x48, 0xb5, 0x6c},
    {0x04, 0x9a, 0x44, 0x43, 0xdf},
    {0x02, 0x04, 0x48, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0x46, 0x9f},
    {0x03, 0x02, 0x48, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0x46, 0x7f},
    {0x02, 0x02, 0x48, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0x06, 0x8f},
    {0x03, 0x07, 0x48, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0x46, 0x7f},
    {0x02, 0x07, 0x48, 0xb5, 0x6c},
    {0xcb, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x17, 0x43, 0x06, 0x9f},
    {0x01, 0x21, 0x42, 0xf5, 0xbd},
    {0x02, 0x17, 0x43, 0x06, 0x9f},
    {0x06, 0x76, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x83, 0x6e},
    {0x04, 0x21, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x83, 0x6e},
    {0x09, 0xc2, 0x46, 0xb5, 0xff},
    {0x03, 0x1b, 0x43, 0x06, 0x9f},
    {0x01, 0x82, 0xc3, 0xf5, 0x0e},
    {0x02, 0x1b, 0x43, 0x06, 0x9f},
    {0x05, 0x76, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x83, 0x6e},
    {0x04, 0x82, 0xc3, 0xf5, 0x0e},
    {0x02, 0x05, 0x43, 0x83, 0x6e},
    {0x0b, 0x55, 0xf5, 0x40, 0xee},
    {0x03, 0x28, 0x44, 0xb5, 0xad},
    {0x01, 0x31, 0x42, 0xf5, 0xbd},
    {0x02, 0x28, 0x44, 0xb5, 0xad},
    {0x06, 0x49, 0x03, 0x06, 0x9f},
    {0x03, 0x10, 0x41, 0x06, 0x8f},
    {0x04, 0x31, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x41, 0x06, 0x8f},
    {0x07, 0x7c, 0x03, 0xf5, 0xdf},
    {0x03, 0x8d, 0x46, 0xb5, 0xff},
    {0x01, 0x0e, 0x43, 0x46, 0x9f},
    {0x02, 0x8d, 0x46, 0xb5, 0xff},
    {0x05, 0x49, 0x03, 0x06, 0x9f},
    {0x03, 0x06, 0x43, 0x83, 0x6e},
    {0x04, 0x0e, 0x43, 0x46, 0x9f},
    {0x02, 0x06, 0x43, 0x83, 0x6e},
    {0x71, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0x06, 0x9f},
    {0x01, 0x3d, 0x42, 0xf5, 0xbd},
    {0x02, 0x13, 0x43, 0x06, 0x9f},
    {0x06, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0x06, 0x7f},
    {0x04, 0x3d, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x46, 0x06, 0x7f},
    {0x08, 0xc2, 0x46, 0xb5, 0xff},
    {0x03, 0x38, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x46, 0x46, 0x7f},
    {0x02, 0x38, 0x44, 0xb5, 0xad},
    {0x05, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x55, 0xb5, 0xee},
    {0x04, 0x04, 0x46, 0x46, 0x7f},
    {0x02, 0x81, 0x55, 0xb5, 0xee},
    {0x0c, 0x55, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x46, 0x06, 0x7f},
    {0x01, 0x02, 0x46, 0x46, 0x7f},
    {0x02, 0x0a, 0x46, 0x06, 0x7f},
    {0x06, 0x46, 0x01, 0x06, 0x8f},
    {0x03, 0x04, 0x43, 0x83, 0x6e},
    {0x04, 0x02, 0x46, 0x46, 0x7f},
    {0x02, 0x04, 0x43, 0x83, 0x6e},
    {0x07, 0x45, 0x03, 0x46, 0x9f},
    {0x03, 0x02, 0x43, 0x83, 0x6e},
    {0x01, 0x07, 0x46, 0x46, 0x7f},
    {0x02, 0x02, 0x43, 0x83, 0x6e},
    {0x05, 0x46, 0x01, 0x06, 0x8f},
    {0x03, 0x07, 0x43, 0x83, 0x6e},
    {0x04, 0x07, 0x46, 0x46, 0x7f},
    {0x02, 0x07, 0x43, 0x83, 0x6e},
    {0xe2, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x44, 0xb5, 0xad},
    {0x01, 0x2f, 0x42, 0xf5, 0xbd},
    {0x02, 0x2e, 0x44, 0xb5, 0xad},
    {0x06, 0x64, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x04, 0x6d},
    {0x04, 0x2f, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x04, 0x6d},
    {0x09, 0x59, 0x43, 0xb5, 0xdf},
    {0x03, 0x0b, 0x43, 0x04, 0x7d},
    {0x01, 0x03, 0x43, 0x44, 0x7d},
    {0x02, 0x0b, 0x43, 0x04, 0x7d},
    {0x05, 0x64, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x04, 0x6d},
    {0x04, 0x03, 0x43, 0x44, 0x7d},
    {0x02, 0x05, 0x41, 0x04, 0x6d},
    {0x0a, 0x51, 0x43, 0xf5, 0xdf},
    {0x03, 0x36, 0x44, 0xb5, 0xad},
    {0x01, 0x3b, 0x42, 0xf5, 0xbd},
    {0x02, 0x36, 0x44, 0xb5, 0xad},
    {0x06, 0xc2, 0x04, 0x03, 0xdf},
    {0x03, 0x09, 0x43, 0x04, 0x7d},
    {0x04, 0x3b, 0x42, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x04, 0x7d},
    {0x07, 0x6a, 0x03, 0xf5, 0xdf},
    {0x03, 0x88, 0x42, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x44, 0x7d},
    {0x02, 0x88, 0x42, 0xb5, 0xee},
    {0x05, 0xc2, 0x04, 0x03, 0xdf},
    {0x03, 0x06, 0x41, 0x04, 0x6d},
    {0x04, 0x05, 0x43, 0x44, 0x7d},
    {0x02, 0x06, 0x41, 0x04, 0x6d},
    {0x6d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x44, 0xb5, 0xad},
    {0x01, 0x29, 0x42, 0xf5, 0xbd},
    {0x02, 0x24, 0x44, 0xb5, 0xad},
    {0x06, 0x74, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x51, 0x03, 0xdf},
    {0x04, 0x29, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x51, 0x03, 0xdf},
    {0x08, 0x59, 0x43, 0xb5, 0xdf},
    {0x03, 0x34, 0x44, 0xb5, 0xad},
    {0x01, 0x10, 0x43, 0x46, 0x9f},
    {0x02, 0x34, 0x44, 0xb5, 0xad},
    {0x05, 0x74, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x41, 0x06, 0x8f},
    {0x04, 0x10, 0x43, 0x46, 0x9f},
    {0x02, 0x0f, 0x41, 0x06, 0x8f},
    {0x65, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x44, 0xb5, 0xad},
    {0x01, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x44, 0xb5, 0xad},
    {0x06, 0x4f, 0x04, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x04, 0x6d},
    {0x04, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x04, 0x6d},
    {0x07, 0x50, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x04, 0x6d},
    {0x01, 0x06, 0x43, 0x44, 0x7d},
    {0x02, 0x02, 0x41, 0x04, 0x6d},
    {0x05, 0x4f, 0x04, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x04, 0x6d},
    {0x04, 0x06, 0x43, 0x44, 0x7d},
    {0x02, 0x07, 0x41, 0x04, 0x6d},
    {0xc7, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x41, 0x06, 0x8f},
    {0x01, 0x1f, 0x42, 0xf5, 0xbd},
    {0x02, 0x0d, 0x41, 0x06, 0x8f},
    {0x06, 0x40, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0x83, 0x6e},
    {0x04, 0x1f, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x83, 0x6e},
    {0x09, 0x4f, 0x42, 0xb5, 0xce},
    {0x03, 0x99, 0x46, 0xb5, 0xff},
    {0x01, 0x08, 0x41, 0x46, 0x8f},
    {0x02, 0x99, 0x46, 0xb5, 0xff},
    {0x05, 0x40, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0x83, 0x6e},
    {0x04, 0x08, 0x41, 0x46, 0x8f},
    {0x02, 0x05, 0x42, 0x83, 0x6e},
    {0x0b, 0x51, 0x43, 0xf5, 0xdf},
    {0x03, 0x2c, 0x44, 0xb5, 0xad},
    {0x01, 0x39, 0x42, 0xf5, 0xbd},
    {0x02, 0x2c, 0x44, 0xb5, 0xad},
    {0x06, 0x44, 0x01, 0x06, 0x8f},
    {0x03, 0x11, 0x41, 0x06, 0x8f},
    {0x04, 0x39, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x41, 0x06, 0x8f},
    {0x07, 0xd2, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0x46, 0xb5, 0xff},
    {0x01, 0x81, 0xc3, 0xf5, 0x0e},
    {0x02, 0x95, 0x46, 0xb5, 0xff},
    {0x05, 0x44, 0x01, 0x06, 0x8f},
    {0x03, 0x06, 0x42, 0x83, 0x6e},
    {0x04, 0x81, 0xc3, 0xf5, 0x0e},
    {0x02, 0x06, 0x42, 0x83, 0x6e},
    {0x4e, 0x83, 0xb5, 0x00, 0x0e},
    {0x03, 0x01, 0x41, 0x06, 0x8f},
    {0x01, 0x0a, 0x41, 0x46, 0x8f},
    {0x02, 0x01, 0x41, 0x06, 0x8f},
    {0x06, 0x42, 0x01, 0x06, 0x8f},
    {0x03, 0x08, 0x43, 0x04, 0x7d},
    {0x04, 0x0a, 0x41, 0x46, 0x8f},
    {0x02, 0x08, 0x43, 0x04, 0x7d},
    {0x08, 0x4f, 0x42, 0xb5, 0xce},
    {0x03, 0x83, 0xc3, 0xb5, 0x0e},
    {0x01, 0x04, 0x43, 0x44, 0x7d},
    {0x02, 0x83, 0xc3, 0xb5, 0x0e},
    {0x05, 0x42, 0x01, 0x06, 0x8f},
    {0x03, 0x81, 0x51, 0x03, 0xdf},
    {0x04, 0x04, 0x43, 0x44, 0x7d},
    {0x02, 0x81, 0x51, 0x03, 0xdf},
    {0x0c, 0x51, 0x43, 0xf5, 0xdf},
    {0x03, 0x0a, 0x43, 0x04, 0x7d},
    {0x01, 0x02, 0x43, 0x44, 0x7d},
    {0x02, 0x0a, 0x43, 0x04, 0x7d},
    {0x06, 0x47, 0x01, 0x06, 0x8f},
    {0x03, 0x04, 0x42, 0x83, 0x6e},
    {0x04, 0x02, 0x43, 0x44, 0x7d},
    {0x02, 0x04, 0x42, 0x83, 0x6e},
    {0x07, 0x46, 0x03, 0x46, 0x9f},
    {0x03, 0x02, 0x42, 0x83, 0x6e},
    {0x01, 0x07, 0x43, 0x44, 0x7d},
    {0x02, 0x02, 0x42, 0x83, 0x6e},
    {0x05, 0x47, 0x01, 0x06, 0x8f},
    {0x03, 0x07, 0x42, 0x83, 0x6e},
    {0x04, 0x07, 0x43, 0x44, 0x7d},
    {0x02, 0x07, 0x42, 0x83, 0x6e},
    {0xf4, 0x44, 0x03, 0xf5, 0xff},
    {0x03, 0x1e, 0x44, 0xb5, 0xad},
    {0x01, 0x16, 0x44, 0xf5, 0xad},
    {0x02, 0x1e, 0x44, 0xb5, 0xad},
    {0x06, 0x4d, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x45, 0x02, 0x6e},
    {0x04, 0x16, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x45, 0x02, 0x6e},
    {0x09, 0xc6, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x44, 0x02, 0x7e},
    {0x01, 0x03, 0x44, 0x42, 0x7e},
    {0x02, 0x0b, 0x44, 0x02, 0x7e},
    {0x05, 0x4d, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x45, 0x02, 0x6e},
    {0x04, 0x03, 0x44, 0x42, 0x7e},
    {0x02, 0x05, 0x45, 0x02, 0x6e},
    {0x0a, 0xc4, 0xf5, 0x40, 0x0e},
    {0x03, 0x0c, 0x42, 0x02, 0x8e},
    {0x01, 0x0b, 0x42, 0x42, 0x8e},
    {0x02, 0x0c, 0x42, 0x02, 0x8e},
    {0x06, 0x43, 0x02, 0x02, 0x8e},
    {0x03, 0x09, 0x44, 0x02, 0x7e},
    {0x04, 0x0b, 0x42, 0x42, 0x8e},
    {0x02, 0x09, 0x44, 0x02, 0x7e},
    {0x07, 0x60, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0xc1, 0xb5, 0x0d},
    {0x01, 0x05, 0x44, 0x42, 0x7e},
    {0x02, 0x9a, 0xc1, 0xb5, 0x0d},
    {0x05, 0x43, 0x02, 0x02, 0x8e},
    {0x03, 0x06, 0x45, 0x02, 0x6e},
    {0x04, 0x05, 0x44, 0x42, 0x7e},
    {0x02, 0x06, 0x45, 0x02, 0x6e},
    {0x4d, 0x81, 0xb5, 0x00, 0x0d},
    {0x03, 0x22, 0x44, 0xb5, 0xad},
    {0x01, 0x1a, 0x44, 0xf5, 0xad},
    {0x02, 0x22, 0x44, 0xb5, 0xad},
    {0x06, 0xdb, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xc4, 0xb5, 0x0e},
    {0x04, 0x1a, 0x44, 0xf5, 0xad},
    {0x02, 0x82, 0xc4, 0xb5, 0x0e},
    {0x08, 0xc6, 0xf5, 0x00, 0x0e},
    {0x03, 0x32, 0x44, 0xb5, 0xad},
    {0x01, 0x09, 0x42, 0x42, 0x8e},
    {0x02, 0x32, 0x44, 0xb5, 0xad},
    {0x05, 0xdb, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0x02, 0x8e},
    {0x04, 0x09, 0x42, 0x42, 0x8e},
    {0x02, 0x0e, 0x42, 0x02, 0x8e},
    {0x5d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x44, 0xb5, 0xad},
    {0x01, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x44, 0xb5, 0xad},
    {0x06, 0x45, 0x02, 0x02, 0x8e},
    {0x03, 0x04, 0x45, 0x02, 0x6e},
    {0x04, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0x02, 0x6e},
    {0x07, 0x48, 0x04, 0xf5, 0xad},
    {0x03, 0x02, 0x45, 0x02, 0x6e},
    {0x01, 0x06, 0x44, 0x42, 0x7e},
    {0x02, 0x02, 0x45, 0x02, 0x6e},
    {0x05, 0x45, 0x02, 0x02, 0x8e},
    {0x03, 0x07, 0x45, 0x02, 0x6e},
    {0x04, 0x06, 0x44, 0x42, 0x7e},
    {0x02, 0x07, 0x45, 0x02, 0x6e},
    {0xd9, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x30, 0x44, 0xb5, 0xad},
    {0x01, 0x25, 0x42, 0xf5, 0xbd},
    {0x02, 0x30, 0x44, 0xb5, 0xad},
    {0x06, 0x6c, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x81, 0x6d},
    {0x04, 0x25, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x81, 0x6d},
    {0x09, 0x44, 0x44, 0xb5, 0xad},
    {0x03, 0x3c, 0x44, 0xb5, 0xad},
    {0x01, 0x82, 0xc1, 0xf5, 0x0d},
    {0x02, 0x3c, 0x44, 0xb5, 0xad},
    {0x05, 0x6c, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x81, 0x6d},
    {0x04, 0x82, 0xc1, 0xf5, 0x0d},
    {0x02, 0x05, 0x43, 0x81, 0x6d},
    {0x0b, 0xc4, 0xf5, 0x40, 0x0e},
    {0x03, 0x2a, 0x44, 0xb5, 0xad},
    {0x01, 0x19, 0x44, 0xf5, 0xad},
    {0x02, 0x2a, 0x44, 0xb5, 0xad},
    {0x06, 0x51, 0x04, 0xb5, 0xad},
    {0x03, 0x10, 0x42, 0x02, 0x8e},
    {0x04, 0x19, 0x44, 0xf5, 0xad},
    {0x02, 0x10, 0x42, 0x02, 0x8e},
    {0x07, 0x7a, 0x03, 0xf5, 0xdf},
    {0x03, 0x91, 0x46, 0xb5, 0xff},
    {0x01, 0x0f, 0x43, 0x46, 0x9f},
    {0x02, 0x91, 0x46, 0xb5, 0xff},
    {0x05, 0x51, 0x04, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x81, 0x6d},
    {0x04, 0x0f, 0x43, 0x46, 0x9f},
    {0x02, 0x06, 0x43, 0x81, 0x6d},
    {0x69, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x44, 0xb5, 0xad},
    {0x01, 0x85, 0x46, 0xf5, 0xff},
    {0x02, 0x20, 0x44, 0xb5, 0xad},
    {0x06, 0xd6, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0x02, 0x7e},
    {0x04, 0x85, 0x46, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0x02, 0x7e},
    {0x08, 0x44, 0x44, 0xb5, 0xad},
    {0x03, 0x3a, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x44, 0x42, 0x7e},
    {0x02, 0x3a, 0x44, 0xb5, 0xad},
    {0x05, 0xd6, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc4, 0xb5, 0x0e},
    {0x04, 0x04, 0x44, 0x42, 0x7e},
    {0x02, 0x81, 0xc4, 0xb5, 0x0e},
    {0x0c, 0xc4, 0xf5, 0x40, 0x0e},
    {0x03, 0x0a, 0x44, 0x02, 0x7e},
    {0x01, 0x02, 0x44, 0x42, 0x7e},
    {0x02, 0x0a, 0x44, 0x02, 0x7e},
    {0x06, 0x46, 0x02, 0x02, 0x8e},
    {0x03, 0x04, 0x43, 0x81, 0x6d},
    {0x04, 0x02, 0x44, 0x42, 0x7e},
    {0x02, 0x04, 0x43, 0x81, 0x6d},
    {0x07, 0xc1, 0x02, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x81, 0x6d},
    {0x01, 0x07, 0x44, 0x42, 0x7e},
    {0x02, 0x02, 0x43, 0x81, 0x6d},
    {0x05, 0x46, 0x02, 0x02, 0x8e},
    {0x03, 0x07, 0x43, 0x81, 0x6d},
    {0x04, 0x07, 0x44, 0x42, 0x7e},
    {0x02, 0x07, 0x43, 0x81, 0x6d},
    {0xe6, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x43, 0x06, 0x9f},
    {0x01, 0x0d, 0x43, 0x46, 0x9f},
    {0x02, 0x16, 0x43, 0x06, 0x9f},
    {0x06, 0x41, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x44, 0x04, 0x6d},
    {0x04, 0x0d, 0x43, 0x46, 0x9f},
    {0x02, 0x03, 0x44, 0x04, 0x6d},
    {0x09, 0x42, 0x44, 0xb5, 0xad},
    {0x03, 0x0b, 0x42, 0x04, 0x7d},
    {0x01, 0x03, 0x42, 0x44, 0x7d},
    {0x02, 0x0b, 0x42, 0x04, 0x7d},
    {0x05, 0x41, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x44, 0x04, 0x6d},
    {0x04, 0x03, 0x42, 0x44, 0x7d},
    {0x02, 0x05, 0x44, 0x04, 0x6d},
    {0x0a, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x43, 0x06, 0x9f},
    {0x01, 0x12, 0x44, 0xf5, 0xad},
    {0x02, 0x1a, 0x43, 0x06, 0x9f},
    {0x06, 0x48, 0x03, 0x06, 0x9f},
    {0x03, 0x09, 0x42, 0x04, 0x7d},
    {0x04, 0x12, 0x44, 0xf5, 0xad},
    {0x02, 0x09, 0x42, 0x04, 0x7d},
    {0x07, 0x4a, 0x04, 0xf5, 0xad},
    {0x03, 0x8a, 0x42, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0x44, 0x7d},
    {0x02, 0x8a, 0x42, 0xb5, 0xee},
    {0x05, 0x48, 0x03, 0x06, 0x9f},
    {0x03, 0x06, 0x44, 0x04, 0x6d},
    {0x04, 0x05, 0x42, 0x44, 0x7d},
    {0x02, 0x06, 0x44, 0x04, 0x6d},
    {0x50, 0x02, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x44, 0xb5, 0xad},
    {0x01, 0x15, 0x44, 0xf5, 0xad},
    {0x02, 0x26, 0x44, 0xb5, 0xad},
    {0x06, 0xc3, 0x02, 0xb5, 0xee},
    {0x03, 0x82, 0x46, 0x02, 0xbd},
    {0x04, 0x15, 0x44, 0xf5, 0xad},
    {0x02, 0x82, 0x46, 0x02, 0xbd},
    {0x08, 0x42, 0x44, 0xb5, 0xad},
    {0x03, 0x19, 0x43, 0x06, 0x9f},
    {0x01, 0x11, 0x43, 0x46, 0x9f},
    {0x02, 0x19, 0x43, 0x06, 0x9f},
    {0x05, 0xc3, 0x02, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x02, 0x8e},
    {0x04, 0x11, 0x43, 0x46, 0x9f},
    {0x02, 0x0f, 0x42, 0x02, 0x8e},
    {0x40, 0x02, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x42, 0xb5, 0xee},
    {0x01, 0x84, 0x42, 0xf5, 0xee},
    {0x02, 0x86, 0x42, 0xb5, 0xee},
    {0x06, 0xc1, 0x04, 0x03, 0xdf},
    {0x03, 0x04, 0x44, 0x04, 0x6d},
    {0x04, 0x84, 0x42, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x04, 0x6d},
    {0x07, 0x44, 0x03, 0x46, 0x9f},
    {0x03, 0x02, 0x44, 0x04, 0x6d},
    {0x01, 0x06, 0x42, 0x44, 0x7d},
    {0x02, 0x02, 0x44, 0x04, 0x6d},
    {0x05, 0xc1, 0x04, 0x03, 0xdf},
    {0x03, 0x07, 0x44, 0x04, 0x6d},
    {0x04, 0x06, 0x42, 0x44, 0x7d},
    {0x02, 0x07, 0x44, 0x04, 0x6d},
    {0xc1, 0x44, 0xb5, 0x40, 0x0d},
    {0x03, 0x0d, 0x42, 0x02, 0x8e},
    {0x01, 0x01, 0x43, 0x46, 0x9f},
    {0x02, 0x0d, 0x42, 0x02, 0x8e},
    {0x06, 0x4a, 0x03, 0x06, 0x9f},
    {0x03, 0x03, 0x42, 0x81, 0x6d},
    {0x04, 0x01, 0x43, 0x46, 0x9f},
    {0x02, 0x03, 0x42, 0x81, 0x6d},
    {0x09, 0x47, 0x44, 0xb5, 0xad},
    {0x03, 0x12, 0x43, 0x06, 0x9f},
    {0x01, 0x08, 0x42, 0x42, 0x8e},
    {0x02, 0x12, 0x43, 0x06, 0x9f},
    {0x05, 0x4a, 0x03, 0x06, 0x9f},
    {0x03, 0x05, 0x42, 0x81, 0x6d},
    {0x04, 0x08, 0x42, 0x42, 0x8e},
    {0x02, 0x05, 0x42, 0x81, 0x6d},
    {0x0b, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x43, 0x06, 0x9f},
    {0x01, 0x83, 0x44, 0x43, 0xdf},
    {0x02, 0x15, 0x43, 0x06, 0x9f},
    {0x06, 0x44, 0x02, 0x02, 0x8e},
    {0x03, 0x11, 0x42, 0x02, 0x8e},
    {0x04, 0x83, 0x44, 0x43, 0xdf},
    {0x02, 0x11, 0x42, 0x02, 0x8e},
    {0x07, 0x42, 0x03, 0x46, 0x9f},
    {0x03, 0x84, 0x44, 0x03, 0xdf},
    {0x01, 0x81, 0xc1, 0xf5, 0x0d},
    {0x02, 0x84, 0x44, 0x03, 0xdf},
    {0x05, 0x44, 0x02, 0x02, 0x8e},
    {0x03, 0x06, 0x42, 0x81, 0x6d},
    {0x04, 0x81, 0xc1, 0xf5, 0x0d},
    {0x02, 0x06, 0x42, 0x81, 0x6d},
    {0x4e, 0x81, 0xb5, 0x00, 0x0d},
    {0x03, 0x01, 0x42, 0x02, 0x8e},
    {0x01, 0x0a, 0x42, 0x42, 0x8e},
    {0x02, 0x01, 0x42, 0x02, 0x8e},
    {0x06, 0x42, 0x02, 0x02, 0x8e},
    {0x03, 0x08, 0x42, 0x04, 0x7d},
    {0x04, 0x0a, 0x42, 0x42, 0x8e},
    {0x02, 0x08, 0x42, 0x04, 0x7d},
    {0x08, 0x47, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0xc1, 0xb5, 0x0d},
    {0x01, 0x04, 0x42, 0x44, 0x7d},
    {0x02, 0x83, 0xc1, 0xb5, 0x0d},
    {0x05, 0x42, 0x02, 0x02, 0x8e},
    {0x03, 0x81, 0x46, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0x44, 0x7d},
    {0x02, 0x81, 0x46, 0x02, 0xbd},
    {0x0c, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x04, 0x7d},
    {0x01, 0x02, 0x42, 0x44, 0x7d},
    {0x02, 0x0a, 0x42, 0x04, 0x7d},
    {0x06, 0x47, 0x02, 0x02, 0x8e},
    {0x03, 0x04, 0x42, 0x81, 0x6d},
    {0x04, 0x02, 0x42, 0x44, 0x7d},
    {0x02, 0x04, 0x42, 0x81, 0x6d},
    {0x07, 0x47, 0x03, 0x46, 0x9f},
    {0x03, 0x02, 0x42, 0x81, 0x6d},
    {0x01, 0x07, 0x42, 0x44, 0x7d},
    {0x02, 0x02, 0x42, 0x81, 0x6d},
    {0x05, 0x47, 0x02, 0x02, 0x8e},
    {0x03, 0x07, 0x42, 0x81, 0x6d},
    {0x04, 0x07, 0x42, 0x44, 0x7d},
    {0x02, 0x07, 0x42, 0x81, 0x6d},
    {0xf4, 0x46, 0xf5, 0x40, 0x0f},
    {0x03, 0xb4, 0x46, 0xb5, 0xff},
    {0x01, 0xa7, 0xf5, 0x40, 0x0f},
    {0x02, 0xb4, 0x46, 0xb5, 0xff},
    {0x06, 0x5e, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x4c, 0xb5, 0x6d},
    {0x04, 0xa7, 0xf5, 0x40, 0x0f},
    {0x02, 0x03, 0x4c, 0xb5, 0x6d},
    {0x09, 0x4d, 0x42, 0xb5, 0xce},
    {0x03, 0x0b, 0x47, 0xb5, 0x7c},
    {0x01, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x0b, 0x47, 0xb5, 0x7c},
    {0x05, 0x5e, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x4c, 0xb5, 0x6d},
    {0x04, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x05, 0x4c, 0xb5, 0x6d},
    {0x0a, 0x41, 0x43, 0xf5, 0xdf},
    {0x03, 0x0c, 0x45, 0xb5, 0x8c},
    {0x01, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x0c, 0x45, 0xb5, 0x8c},
    {0x06, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x09, 0x47, 0xb5, 0x7c},
    {0x04, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x09, 0x47, 0xb5, 0x7c},
    {0x07, 0x56, 0x02, 0xf5, 0xce},
    {0x03, 0x9a, 0x4a, 0x03, 0xdf},
    {0x01, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x9a, 0x4a, 0x03, 0xdf},
    {0x05, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x4c, 0xb5, 0x6d},
    {0x04, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x06, 0x4c, 0xb5, 0x6d},
    {0x4d, 0x0a, 0x03, 0xb5, 0xdf},
    {0x03, 0x14, 0x44, 0xb5, 0x9c},
    {0x01, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x14, 0x44, 0xb5, 0x9c},
    {0x06, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x82, 0x41, 0x03, 0xdf},
    {0x04, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x82, 0x41, 0x03, 0xdf},
    {0x08, 0x4d, 0x42, 0xb5, 0xce},
    {0x03, 0x18, 0x44, 0xb5, 0x9c},
    {0x01, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x18, 0x44, 0xb5, 0x9c},
    {0x05, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x0e, 0x45, 0xb5, 0x8c},
    {0x04, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x0e, 0x45, 0xb5, 0x8c},
    {0x4f, 0x02, 0x03, 0xf5, 0xdf},
    {0x03, 0x1c, 0x44, 0xb5, 0x9c},
    {0x01, 0x9a, 0x42, 0x43, 0xdf},
    {0x02, 0x1c, 0x44, 0xb5, 0x9c},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x4c, 0xb5, 0x6d},
    {0x04, 0x9a, 0x42, 0x43, 0xdf},
    {0x02, 0x04, 0x4c, 0xb5, 0x6d},
    {0x07, 0x43, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x4c, 0xb5, 0x6d},
    {0x01, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x4c, 0xb5, 0x6d},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x4c, 0xb5, 0x6d},
    {0x04, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x4c, 0xb5, 0x6d},
    {0x52, 0x07, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x44, 0xb5, 0x9c},
    {0x01, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x17, 0x44, 0xb5, 0x9c},
    {0x06, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0x0a, 0x6d},
    {0x04, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0x0a, 0x6d},
    {0x09, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x1b, 0x44, 0xb5, 0x9c},
    {0x01, 0x82, 0x4a, 0x43, 0xdf},
    {0x02, 0x1b, 0x44, 0xb5, 0x9c},
    {0x05, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0x0a, 0x6d},
    {0x04, 0x82, 0x4a, 0x43, 0xdf},
    {0x02, 0x05, 0x43, 0x0a, 0x6d},
    {0x0b, 0x41, 0x43, 0xf5, 0xdf},
    {0x03, 0x27, 0x42, 0xb5, 0xac},
    {0x01, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x27, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x10, 0x45, 0xb5, 0x8c},
    {0x04, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x45, 0xb5, 0x8c},
    {0x07, 0x4b, 0x02, 0xf5, 0xac},
    {0x03, 0x89, 0x47, 0xb5, 0xee},
    {0x01, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x89, 0x47, 0xb5, 0xee},
    {0x05, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0x0a, 0x6d},
    {0x04, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x0a, 0x6d},
    {0x51, 0x07, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x44, 0xb5, 0x9c},
    {0x01, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x13, 0x44, 0xb5, 0x9c},
    {0x06, 0xda, 0x07, 0xb5, 0xee},
    {0x03, 0x08, 0x47, 0xb5, 0x7c},
    {0x04, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x08, 0x47, 0xb5, 0x7c},
    {0x08, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x37, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x37, 0x42, 0xb5, 0xac},
    {0x05, 0xda, 0x07, 0xb5, 0xee},
    {0x03, 0x81, 0x41, 0x03, 0xdf},
    {0x04, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x81, 0x41, 0x03, 0xdf},
    {0x0c, 0x41, 0x43, 0xf5, 0xdf},
    {0x03, 0x0a, 0x47, 0xb5, 0x7c},
    {0x01, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x0a, 0x47, 0xb5, 0x7c},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0x0a, 0x6d},
    {0x04, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x04, 0x43, 0x0a, 0x6d},
    {0x07, 0x45, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0x0a, 0x6d},
    {0x01, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x43, 0x0a, 0x6d},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0x0a, 0x6d},
    {0x04, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x43, 0x0a, 0x6d},
    {0xe0, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x42, 0xb5, 0xac},
    {0x01, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x2d, 0x42, 0xb5, 0xac},
    {0x06, 0x62, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x02, 0x6d},
    {0x04, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0x02, 0x6d},
    {0x09, 0x52, 0x43, 0xb5, 0xdf},
    {0x03, 0x0b, 0x43, 0x02, 0x7d},
    {0x01, 0x03, 0x43, 0x42, 0x7d},
    {0x02, 0x0b, 0x43, 0x02, 0x7d},
    {0x05, 0x62, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x02, 0x6d},
    {0x04, 0x03, 0x43, 0x42, 0x7d},
    {0x02, 0x05, 0x41, 0x02, 0x6d},
    {0x0a, 0x48, 0x42, 0xf5, 0xce},
    {0x03, 0x35, 0x42, 0xb5, 0xac},
    {0x01, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x35, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x02, 0x03, 0xdf},
    {0x03, 0x09, 0x43, 0x02, 0x7d},
    {0x04, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0x02, 0x7d},
    {0x07, 0x5a, 0x02, 0xf5, 0xce},
    {0x03, 0x87, 0x47, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x42, 0x7d},
    {0x02, 0x87, 0x47, 0xb5, 0xee},
    {0x05, 0xc2, 0x02, 0x03, 0xdf},
    {0x03, 0x06, 0x41, 0x02, 0x6d},
    {0x04, 0x05, 0x43, 0x42, 0x7d},
    {0x02, 0x06, 0x41, 0x02, 0x6d},
    {0x73, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x42, 0xb5, 0xac},
    {0x01, 0x28, 0x42, 0xf5, 0xbd},
    {0x02, 0x23, 0x42, 0xb5, 0xac},
    {0x06, 0x72, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x48, 0x02, 0xce},
    {0x04, 0x28, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x48, 0x02, 0xce},
    {0x08, 0x52, 0x43, 0xb5, 0xdf},
    {0x03, 0x33, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x33, 0x42, 0xb5, 0xac},
    {0x05, 0x72, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x45, 0xb5, 0x8c},
    {0x04, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x45, 0xb5, 0x8c},
    {0x63, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x42, 0xb5, 0xac},
    {0x01, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x42, 0xb5, 0xac},
    {0x06, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x02, 0x6d},
    {0x04, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x02, 0x6d},
    {0x07, 0x49, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0x02, 0x6d},
    {0x01, 0x06, 0x43, 0x42, 0x7d},
    {0x02, 0x02, 0x41, 0x02, 0x6d},
    {0x05, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x02, 0x6d},
    {0x04, 0x06, 0x43, 0x42, 0x7d},
    {0x02, 0x07, 0x41, 0x02, 0x6d},
    {0xc5, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x45, 0xb5, 0x8c},
    {0x01, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x0d, 0x45, 0xb5, 0x8c},
    {0x06, 0x7e, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0x0a, 0x6d},
    {0x04, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0x0a, 0x6d},
    {0x09, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x98, 0x46, 0xb5, 0xff},
    {0x01, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x98, 0x46, 0xb5, 0xff},
    {0x05, 0x7e, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0x0a, 0x6d},
    {0x04, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0x0a, 0x6d},
    {0x0b, 0x48, 0x42, 0xf5, 0xce},
    {0x03, 0x2b, 0x42, 0xb5, 0xac},
    {0x01, 0x38, 0x42, 0xf5, 0xbd},
    {0x02, 0x2b, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x11, 0x45, 0xb5, 0x8c},
    {0x04, 0x38, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x45, 0xb5, 0x8c},
    {0x07, 0xca, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0x46, 0xb5, 0xff},
    {0x01, 0x81, 0x4a, 0x43, 0xdf},
    {0x02, 0x94, 0x46, 0xb5, 0xff},
    {0x05, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0x0a, 0x6d},
    {0x04, 0x81, 0x4a, 0x43, 0xdf},
    {0x02, 0x06, 0x42, 0x0a, 0x6d},
    {0x4e, 0x0a, 0x03, 0xb5, 0xdf},
    {0x03, 0x01, 0x45, 0xb5, 0x8c},
    {0x01, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x01, 0x45, 0xb5, 0x8c},
    {0x06, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0x02, 0x7d},
    {0x04, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0x02, 0x7d},
    {0x08, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x4a, 0x03, 0xdf},
    {0x01, 0x04, 0x43, 0x42, 0x7d},
    {0x02, 0x83, 0x4a, 0x03, 0xdf},
    {0x05, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x81, 0x48, 0x02, 0xce},
    {0x04, 0x04, 0x43, 0x42, 0x7d},
    {0x02, 0x81, 0x48, 0x02, 0xce},
    {0x0c, 0x48, 0x42, 0xf5, 0xce},
    {0x03, 0x0a, 0x43, 0x02, 0x7d},
    {0x01, 0x02, 0x43, 0x42, 0x7d},
    {0x02, 0x0a, 0x43, 0x02, 0x7d},
    {0x06, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0x0a, 0x6d},
    {0x04, 0x02, 0x43, 0x42, 0x7d},
    {0x02, 0x04, 0x42, 0x0a, 0x6d},
    {0x07, 0x46, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x0a, 0x6d},
    {0x01, 0x07, 0x43, 0x42, 0x7d},
    {0x02, 0x02, 0x42, 0x0a, 0x6d},
    {0x05, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0x0a, 0x6d},
    {0x04, 0x07, 0x43, 0x42, 0x7d},
    {0x02, 0x07, 0x42, 0x0a, 0x6d},
    {0xf4, 0x42, 0x03, 0xf5, 0xff},
    {0x03, 0x1d, 0x42, 0xb5, 0xac},
    {0x01, 0x2e, 0x42, 0xf5, 0xbd},
    {0x02, 0x1d, 0x42, 0xb5, 0xac},
    {0x06, 0x70, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x46, 0x07, 0x6e},
    {0x04, 0x2e, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0x07, 0x6e},
    {0x09, 0x55, 0x43, 0xb5, 0xdf},
    {0x03, 0x0b, 0x41, 0x07, 0x7e},
    {0x01, 0x03, 0x41, 0x47, 0x7e},
    {0x02, 0x0b, 0x41, 0x07, 0x7e},
    {0x05, 0x70, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x46, 0x07, 0x6e},
    {0x04, 0x03, 0x41, 0x47, 0x7e},
    {0x02, 0x05, 0x46, 0x07, 0x6e},
    {0x0a, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x0c, 0x43, 0x07, 0x8e},
    {0x01, 0x0b, 0x43, 0x47, 0x8e},
    {0x02, 0x0c, 0x43, 0x07, 0x8e},
    {0x06, 0x43, 0x03, 0x07, 0x8e},
    {0x03, 0x09, 0x41, 0x07, 0x7e},
    {0x04, 0x0b, 0x43, 0x47, 0x8e},
    {0x02, 0x09, 0x41, 0x07, 0x7e},
    {0x07, 0x66, 0x03, 0xf5, 0xdf},
    {0x03, 0x9a, 0x44, 0x02, 0xce},
    {0x01, 0x05, 0x41, 0x47, 0x7e},
    {0x02, 0x9a, 0x44, 0x02, 0xce},
    {0x05, 0x43, 0x03, 0x07, 0x8e},
    {0x03, 0x06, 0x46, 0x07, 0x6e},
    {0x04, 0x05, 0x41, 0x47, 0x7e},
    {0x02, 0x06, 0x46, 0x07, 0x6e},
    {0x4d, 0x04, 0x02, 0xb5, 0xce},
    {0x03, 0x21, 0x42, 0xb5, 0xac},
    {0x01, 0x36, 0x42, 0xf5, 0xbd},
    {0x02, 0x21, 0x42, 0xb5, 0xac},
    {0x06, 0x7c, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0xc3, 0xb5, 0x0d},
    {0x04, 0x36, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0xc3, 0xb5, 0x0d},
    {0x08, 0x55, 0x43, 0xb5, 0xdf},
    {0x03, 0x31, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x47, 0x8e},
    {0x02, 0x31, 0x42, 0xb5, 0xac},
    {0x05, 0x7c, 0x02, 0xb5, 0xce},
    {0x03, 0x0e, 0x43, 0x07, 0x8e},
    {0x04, 0x09, 0x43, 0x47, 0x8e},
    {0x02, 0x0e, 0x43, 0x07, 0x8e},
    {0x5b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x42, 0xb5, 0xac},
    {0x01, 0x88, 0x46, 0xf5, 0xff},
    {0x02, 0x3d, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x07, 0x8e},
    {0x03, 0x04, 0x46, 0x07, 0x6e},
    {0x04, 0x88, 0x46, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0x07, 0x6e},
    {0x07, 0xc2, 0x07, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x07, 0x6e},
    {0x01, 0x06, 0x41, 0x47, 0x7e},
    {0x02, 0x02, 0x46, 0x07, 0x6e},
    {0x05, 0x45, 0x03, 0x07, 0x8e},
    {0x03, 0x07, 0x46, 0x07, 0x6e},
    {0x04, 0x06, 0x41, 0x47, 0x7e},
    {0x02, 0x07, 0x46, 0x07, 0x6e},
    {0x7b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x42, 0xb5, 0xac},
    {0x01, 0x24, 0x42, 0xf5, 0xbd},
    {0x02, 0x2f, 0x42, 0xb5, 0xac},
    {0x06, 0x6a, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x04, 0x6c},
    {0x04, 0x24, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x04, 0x6c},
    {0x09, 0x51, 0x42, 0xb5, 0xce},
    {0x03, 0x3b, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x44, 0x42, 0xce},
    {0x02, 0x3b, 0x42, 0xb5, 0xac},
    {0x05, 0x6a, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x04, 0x6c},
    {0x04, 0x82, 0x44, 0x42, 0xce},
    {0x02, 0x05, 0x43, 0x04, 0x6c},
    {0x0b, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x29, 0x42, 0xb5, 0xac},
    {0x01, 0x34, 0x42, 0xf5, 0xbd},
    {0x02, 0x29, 0x42, 0xb5, 0xac},
    {0x06, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x07, 0x8e},
    {0x04, 0x34, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0x07, 0x8e},
    {0x07, 0x59, 0x02, 0xf5, 0xce},
    {0x03, 0x90, 0x46, 0xb5, 0xff},
    {0x01, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x90, 0x46, 0xb5, 0xff},
    {0x05, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x04, 0x6c},
    {0x04, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x04, 0x6c},
    {0x61, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x42, 0xb5, 0xac},
    {0x01, 0x00, 0x42, 0xf5, 0xbd},
    {0x02, 0x1f, 0x42, 0xb5, 0xac},
    {0x06, 0xd2, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x07, 0x7e},
    {0x04, 0x00, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0x07, 0x7e},
    {0x08, 0x51, 0x42, 0xb5, 0xce},
    {0x03, 0x39, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x47, 0x7e},
    {0x02, 0x39, 0x42, 0xb5, 0xac},
    {0x05, 0xd2, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc3, 0xb5, 0x0d},
    {0x04, 0x04, 0x41, 0x47, 0x7e},
    {0x02, 0x81, 0xc3, 0xb5, 0x0d},
    {0x0c, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x0a, 0x41, 0x07, 0x7e},
    {0x01, 0x02, 0x41, 0x47, 0x7e},
    {0x02, 0x0a, 0x41, 0x07, 0x7e},
    {0x06, 0x46, 0x03, 0x07, 0x8e},
    {0x03, 0x04, 0x43, 0x04, 0x6c},
    {0x04, 0x02, 0x41, 0x47, 0x7e},
    {0x02, 0x04, 0x43, 0x04, 0x6c},
    {0x07, 0x4f, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x04, 0x6c},
    {0x01, 0x07, 0x41, 0x47, 0x7e},
    {0x02, 0x02, 0x43, 0x04, 0x6c},
    {0x05, 0x46, 0x03, 0x07, 0x8e},
    {0x03, 0x07, 0x43, 0x04, 0x6c},
    {0x04, 0x07, 0x41, 0x47, 0x7e},
    {0x02, 0x07, 0x43, 0x04, 0x6c},
    {0xde, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x44, 0xb5, 0x9c},
    {0x01, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x16, 0x44, 0xb5, 0x9c},
    {0x06, 0x60, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x44, 0x02, 0x6d},
    {0x04, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0x02, 0x6d},
    {0x09, 0xc4, 0xf5, 0x00, 0x0d},
    {0x03, 0x0b, 0x42, 0x02, 0x7d},
    {0x01, 0x03, 0x42, 0x42, 0x7d},
    {0x02, 0x0b, 0x42, 0x02, 0x7d},
    {0x05, 0x60, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x44, 0x02, 0x6d},
    {0x04, 0x03, 0x42, 0x42, 0x7d},
    {0x02, 0x05, 0x44, 0x02, 0x6d},
    {0x0a, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x1a, 0x44, 0xb5, 0x9c},
    {0x01, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x44, 0xb5, 0x9c},
    {0x06, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0x02, 0x7d},
    {0x04, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x02, 0x7d},
    {0x07, 0xc6, 0xb5, 0x40, 0x0d},
    {0x03, 0x8c, 0x46, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x42, 0x7d},
    {0x02, 0x8c, 0x46, 0xb5, 0xff},
    {0x05, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0x02, 0x6d},
    {0x04, 0x05, 0x42, 0x42, 0x7d},
    {0x02, 0x06, 0x44, 0x02, 0x6d},
    {0xc4, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x25, 0x42, 0xb5, 0xac},
    {0x01, 0x2c, 0x42, 0xf5, 0xbd},
    {0x02, 0x25, 0x42, 0xb5, 0xac},
    {0x06, 0x7a, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0xc1, 0xb5, 0x0c},
    {0x04, 0x2c, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0xc1, 0xb5, 0x0c},
    {0x08, 0xc4, 0xf5, 0x00, 0x0d},
    {0x03, 0x19, 0x44, 0xb5, 0x9c},
    {0x01, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x19, 0x44, 0xb5, 0x9c},
    {0x05, 0x7a, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0x07, 0x8e},
    {0x04, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x07, 0x8e},
    {0x6b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x47, 0xb5, 0xee},
    {0x01, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x47, 0xb5, 0xee},
    {0x06, 0xc1, 0x02, 0x03, 0xdf},
    {0x03, 0x04, 0x44, 0x02, 0x6d},
    {0x04, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x02, 0x6d},
    {0x07, 0x44, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0x02, 0x6d},
    {0x01, 0x06, 0x42, 0x42, 0x7d},
    {0x02, 0x02, 0x44, 0x02, 0x6d},
    {0x05, 0xc1, 0x02, 0x03, 0xdf},
    {0x03, 0x07, 0x44, 0x02, 0x6d},
    {0x04, 0x06, 0x42, 0x42, 0x7d},
    {0x02, 0x07, 0x44, 0x02, 0x6d},
    {0xd3, 0x43, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x43, 0x07, 0x8e},
    {0x01, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x07, 0x8e},
    {0x06, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x04, 0x6c},
    {0x04, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x04, 0x6c},
    {0x09, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x44, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x47, 0x8e},
    {0x02, 0x12, 0x44, 0xb5, 0x9c},
    {0x05, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x04, 0x6c},
    {0x04, 0x08, 0x43, 0x47, 0x8e},
    {0x02, 0x05, 0x42, 0x04, 0x6c},
    {0x0b, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x15, 0x44, 0xb5, 0x9c},
    {0x01, 0x83, 0x42, 0x43, 0xdf},
    {0x02, 0x15, 0x44, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x07, 0x8e},
    {0x03, 0x11, 0x43, 0x07, 0x8e},
    {0x04, 0x83, 0x42, 0x43, 0xdf},
    {0x02, 0x11, 0x43, 0x07, 0x8e},
    {0x07, 0x42, 0x04, 0xf5, 0x9c},
    {0x03, 0x84, 0x42, 0x03, 0xdf},
    {0x01, 0x81, 0x44, 0x42, 0xce},
    {0x02, 0x84, 0x42, 0x03, 0xdf},
    {0x05, 0x44, 0x03, 0x07, 0x8e},
    {0x03, 0x06, 0x42, 0x04, 0x6c},
    {0x04, 0x81, 0x44, 0x42, 0xce},
    {0x02, 0x06, 0x42, 0x04, 0x6c},
    {0x4e, 0x04, 0x02, 0xb5, 0xce},
    {0x03, 0x01, 0x43, 0x07, 0x8e},
    {0x01, 0x0a, 0x43, 0x47, 0x8e},
    {0x02, 0x01, 0x43, 0x07, 0x8e},
    {0x06, 0x42, 0x03, 0x07, 0x8e},
    {0x03, 0x08, 0x42, 0x02, 0x7d},
    {0x04, 0x0a, 0x43, 0x47, 0x8e},
    {0x02, 0x08, 0x42, 0x02, 0x7d},
    {0x08, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x44, 0x02, 0xce},
    {0x01, 0x04, 0x42, 0x42, 0x7d},
    {0x02, 0x83, 0x44, 0x02, 0xce},
    {0x05, 0x42, 0x03, 0x07, 0x8e},
    {0x03, 0x81, 0xc1, 0xb5, 0x0c},
    {0x04, 0x04, 0x42, 0x42, 0x7d},
    {0x02, 0x81, 0xc1, 0xb5, 0x0c},
    {0x0c, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x42, 0x02, 0x7d},
    {0x01, 0x02, 0x42, 0x42, 0x7d},
    {0x02, 0x0a, 0x42, 0x02, 0x7d},
    {0x06, 0x47, 0x03, 0x07, 0x8e},
    {0x03, 0x04, 0x42, 0x04, 0x6c},
    {0x04, 0x02, 0x42, 0x42, 0x7d},
    {0x02, 0x04, 0x42, 0x04, 0x6c},
    {0x07, 0x47, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x04, 0x6c},
    {0x01, 0x07, 0x42, 0x42, 0x7d},
    {0x02, 0x02, 0x42, 0x04, 0x6c},
    {0x05, 0x47, 0x03, 0x07, 0x8e},
    {0x03, 0x07, 0x42, 0x04, 0x6c},
    {0x04, 0x07, 0x42, 0x42, 0x7d},
    {0x02, 0x07, 0x42, 0x04, 0x6c},
    {0xf4, 0x47, 0xf5, 0x00, 0x0e},
    {0x03, 0xa8, 0xf5, 0x00, 0x0e},
    {0x01, 0x1e, 0x42, 0xf5, 0xbd},
    {0x02, 0xa8, 0xf5, 0x00, 0x0e},
    {0x06, 0x56, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x47, 0x06, 0x6f},
    {0x04, 0x1e, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x47, 0x06, 0x6f},
    {0x09, 0x41, 0x42, 0xb5, 0xce},
    {0x03, 0x0b, 0x45, 0x06, 0x7f},
    {0x01, 0x03, 0x45, 0x46, 0x7f},
    {0x02, 0x0b, 0x45, 0x06, 0x7f},
    {0x05, 0x56, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x47, 0x06, 0x6f},
    {0x04, 0x03, 0x45, 0x46, 0x7f},
    {0x02, 0x05, 0x47, 0x06, 0x6f},
    {0x0a, 0x4a, 0x42, 0xf5, 0xce},
    {0x03, 0x0c, 0x44, 0x06, 0x8f},
    {0x01, 0x0b, 0x44, 0x46, 0x8f},
    {0x02, 0x0c, 0x44, 0x06, 0x8f},
    {0x06, 0x43, 0x04, 0x06, 0x8f},
    {0x03, 0x09, 0x45, 0x06, 0x7f},
    {0x04, 0x0b, 0x44, 0x46, 0x8f},
    {0x02, 0x09, 0x45, 0x06, 0x7f},
    {0x07, 0x4d, 0x02, 0xf5, 0xbd},
    {0x03, 0x9a, 0x42, 0x02, 0xce},
    {0x01, 0x05, 0x45, 0x46, 0x7f},
    {0x02, 0x9a, 0x42, 0x02, 0xce},
    {0x05, 0x43, 0x04, 0x06, 0x8f},
    {0x03, 0x06, 0x47, 0x06, 0x6f},
    {0x04, 0x05, 0x45, 0x46, 0x7f},
    {0x02, 0x06, 0x47, 0x06, 0x6f},
    {0x4d, 0x02, 0x02, 0xb5, 0xce},
    {0x03, 0x14, 0x42, 0x06, 0x9f},
    {0x01, 0x0c, 0x42, 0x46, 0x9f},
    {0x02, 0x14, 0x42, 0x06, 0x9f},
    {0x06, 0x4b, 0x02, 0x06, 0x9f},
    {0x03, 0x82, 0x4a, 0x02, 0xce},
    {0x04, 0x0c, 0x42, 0x46, 0x9f},
    {0x02, 0x82, 0x4a, 0x02, 0xce},
    {0x08, 0x41, 0x42, 0xb5, 0xce},
    {0x03, 0x18, 0x42, 0x06, 0x9f},
    {0x01, 0x09, 0x44, 0x46, 0x8f},
    {0x02, 0x18, 0x42, 0x06, 0x9f},
    {0x05, 0x4b, 0x02, 0x06, 0x9f},
    {0x03, 0x0e, 0x44, 0x06, 0x8f},
    {0x04, 0x09, 0x44, 0x46, 0x8f},
    {0x02, 0x0e, 0x44, 0x06, 0x8f},
    {0x4f, 0x07, 0x03, 0xf5, 0xdf},
    {0x03, 0x1c, 0x42, 0x06, 0x9f},
    {0x01, 0x9a, 0x47, 0x43, 0xdf},
    {0x02, 0x1c, 0x42, 0x06, 0x9f},
    {0x06, 0x45, 0x04, 0x06, 0x8f},
    {0x03, 0x04, 0x47, 0x06, 0x6f},
    {0x04, 0x9a, 0x47, 0x43, 0xdf},
    {0x02, 0x04, 0x47, 0x06, 0x6f},
    {0x07, 0x43, 0x02, 0x46, 0x9f},
    {0x03, 0x02, 0x47, 0x06, 0x6f},
    {0x01, 0x06, 0x45, 0x46, 0x7f},
    {0x02, 0x02, 0x47, 0x06, 0x6f},
    {0x05, 0x45, 0x04, 0x06, 0x8f},
    {0x03, 0x07, 0x47, 0x06, 0x6f},
    {0x04, 0x06, 0x45, 0x46, 0x7f},
    {0x02, 0x07, 0x47, 0x06, 0x6f},
    {0x77, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x42, 0x06, 0x9f},
    {0x01, 0x22, 0x42, 0xf5, 0xbd},
    {0x02, 0x17, 0x42, 0x06, 0x9f},
    {0x06, 0x5a, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x02, 0x6c},
    {0x04, 0x22, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x02, 0x6c},
    {0x09, 0x48, 0x42, 0xb5, 0xbd},
    {0x03, 0x1b, 0x42, 0x06, 0x9f},
    {0x01, 0x82, 0x42, 0x42, 0xce},
    {0x02, 0x1b, 0x42, 0x06, 0x9f},
    {0x05, 0x5a, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x02, 0x6c},
    {0x04, 0x82, 0x42, 0x42, 0xce},
    {0x02, 0x05, 0x43, 0x02, 0x6c},
    {0x0b, 0x4a, 0x42, 0xf5, 0xce},
    {0x03, 0x28, 0x42, 0xb5, 0xac},
    {0x01, 0x32, 0x42, 0xf5, 0xbd},
    {0x02, 0x28, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0x06, 0x9f},
    {0x03, 0x10, 0x44, 0x06, 0x8f},
    {0x04, 0x32, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x44, 0x06, 0x8f},
    {0x07, 0x52, 0x02, 0xf5, 0xce},
    {0x03, 0x8e, 0x46, 0xb5, 0xff},
    {0x01, 0x0e, 0x42, 0x46, 0x9f},
    {0x02, 0x8e, 0x46, 0xb5, 0xff},
    {0x05, 0x49, 0x02, 0x06, 0x9f},
    {0x03, 0x06, 0x43, 0x02, 0x6c},
    {0x04, 0x0e, 0x42, 0x46, 0x9f},
    {0x02, 0x06, 0x43, 0x02, 0x6c},
    {0x7f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0x06, 0x9f},
    {0x01, 0x3e, 0x42, 0xf5, 0xbd},
    {0x02, 0x13, 0x42, 0x06, 0x9f},
    {0x06, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x45, 0x06, 0x7f},
    {0x04, 0x3e, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x45, 0x06, 0x7f},
    {0x08, 0x48, 0x42, 0xb5, 0xbd},
    {0x03, 0x38, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0x46, 0x7f},
    {0x02, 0x38, 0x42, 0xb5, 0xac},
    {0x05, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4a, 0x02, 0xce},
    {0x04, 0x04, 0x45, 0x46, 0x7f},
    {0x02, 0x81, 0x4a, 0x02, 0xce},
    {0x0c, 0x4a, 0x42, 0xf5, 0xce},
    {0x03, 0x0a, 0x45, 0x06, 0x7f},
    {0x01, 0x02, 0x45, 0x46, 0x7f},
    {0x02, 0x0a, 0x45, 0x06, 0x7f},
    {0x06, 0x46, 0x04, 0x06, 0x8f},
    {0x03, 0x04, 0x43, 0x02, 0x6c},
    {0x04, 0x02, 0x45, 0x46, 0x7f},
    {0x02, 0x04, 0x43, 0x02, 0x6c},
    {0x07, 0x45, 0x02, 0x46, 0x9f},
    {0x03, 0x02, 0x43, 0x02, 0x6c},
    {0x01, 0x07, 0x45, 0x46, 0x7f},
    {0x02, 0x02, 0x43, 0x02, 0x6c},
    {0x05, 0x46, 0x04, 0x06, 0x8f},
    {0x03, 0x07, 0x43, 0x02, 0x6c},
    {0x04, 0x07, 0x45, 0x46, 0x7f},
    {0x02, 0x07, 0x43, 0x02, 0x6c},
    {0xe4, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x42, 0xb5, 0xac},
    {0x01, 0x30, 0x42, 0xf5, 0xbd},
    {0x02, 0x2e, 0x42, 0xb5, 0xac},
    {0x06, 0x66, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x07, 0x6d},
    {0x04, 0x30, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x07, 0x6d},
    {0x09, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x43, 0x07, 0x7d},
    {0x01, 0x03, 0x43, 0x47, 0x7d},
    {0x02, 0x0b, 0x43, 0x07, 0x7d},
    {0x05, 0x66, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x07, 0x6d},
    {0x04, 0x03, 0x43, 0x47, 0x7d},
    {0x02, 0x05, 0x41, 0x07, 0x6d},
    {0x0a, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x36, 0x42, 0xb5, 0xac},
    {0x01, 0x3c, 0x42, 0xf5, 0xbd},
    {0x02, 0x36, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x07, 0x03, 0xdf},
    {0x03, 0x09, 0x43, 0x07, 0x7d},
    {0x04, 0x3c, 0x42, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x07, 0x7d},
    {0x07, 0x55, 0x02, 0xf5, 0xce},
    {0x03, 0x88, 0x47, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x47, 0x7d},
    {0x02, 0x88, 0x47, 0xb5, 0xee},
    {0x05, 0xc2, 0x07, 0x03, 0xdf},
    {0x03, 0x06, 0x41, 0x07, 0x6d},
    {0x04, 0x05, 0x43, 0x47, 0x7d},
    {0x02, 0x06, 0x41, 0x07, 0x6d},
    {0x6f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x42, 0xb5, 0xac},
    {0x01, 0x2a, 0x42, 0xf5, 0xbd},
    {0x02, 0x24, 0x42, 0xb5, 0xac},
    {0x06, 0x59, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x44, 0x02, 0xbd},
    {0x04, 0x2a, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x44, 0x02, 0xbd},
    {0x08, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x34, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0x46, 0x9f},
    {0x02, 0x34, 0x42, 0xb5, 0xac},
    {0x05, 0x59, 0x02, 0xb5, 0xbd},
    {0x03, 0x0f, 0x44, 0x06, 0x8f},
    {0x04, 0x10, 0x42, 0x46, 0x9f},
    {0x02, 0x0f, 0x44, 0x06, 0x8f},
    {0x67, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x42, 0xb5, 0xac},
    {0x01, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x42, 0xb5, 0xac},
    {0x06, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x07, 0x6d},
    {0x04, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x07, 0x6d},
    {0x07, 0x51, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x07, 0x6d},
    {0x01, 0x06, 0x43, 0x47, 0x7d},
    {0x02, 0x02, 0x41, 0x07, 0x6d},
    {0x05, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x07, 0x6d},
    {0x04, 0x06, 0x43, 0x47, 0x7d},
    {0x02, 0x07, 0x41, 0x07, 0x6d},
    {0x75, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x44, 0x06, 0x8f},
    {0x01, 0x20, 0x42, 0xf5, 0xbd},
    {0x02, 0x0d, 0x44, 0x06, 0x8f},
    {0x06, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x02, 0x6c},
    {0x04, 0x20, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x02, 0x6c},
    {0x09, 0xc1, 0x46, 0xb5, 0xff},
    {0x03, 0x9b, 0x46, 0xb5, 0xff},
    {0x01, 0x08, 0x44, 0x46, 0x8f},
    {0x02, 0x9b, 0x46, 0xb5, 0xff},
    {0x05, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x02, 0x6c},
    {0x04, 0x08, 0x44, 0x46, 0x8f},
    {0x02, 0x05, 0x42, 0x02, 0x6c},
    {0x0b, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x2c, 0x42, 0xb5, 0xac},
    {0x01, 0x3a, 0x42, 0xf5, 0xbd},
    {0x02, 0x2c, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0x06, 0x8f},
    {0x03, 0x11, 0x44, 0x06, 0x8f},
    {0x04, 0x3a, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x44, 0x06, 0x8f},
    {0x07, 0xc4, 0xb5, 0x40, 0x0c},
    {0x03, 0x96, 0x46, 0xb5, 0xff},
    {0x01, 0x81, 0x42, 0x42, 0xce},
    {0x02, 0x96, 0x46, 0xb5, 0xff},
    {0x05, 0x44, 0x04, 0x06, 0x8f},
    {0x03, 0x06, 0x42, 0x02, 0x6c},
    {0x04, 0x81, 0x42, 0x42, 0xce},
    {0x02, 0x06, 0x42, 0x02, 0x6c},
    {0x4e, 0x02, 0x02, 0xb5, 0xce},
    {0x03, 0x01, 0x44, 0x06, 0x8f},
    {0x01, 0x0a, 0x44, 0x46, 0x8f},
    {0x02, 0x01, 0x44, 0x06, 0x8f},
    {0x06, 0x42, 0x04, 0x06, 0x8f},
    {0x03, 0x08, 0x43, 0x07, 0x7d},
    {0x04, 0x0a, 0x44, 0x46, 0x8f},
    {0x02, 0x08, 0x43, 0x07, 0x7d},
    {0x08, 0xc1, 0x46, 0xb5, 0xff},
    {0x03, 0x83, 0x42, 0x02, 0xce},
    {0x01, 0x04, 0x43, 0x47, 0x7d},
    {0x02, 0x83, 0x42, 0x02, 0xce},
    {0x05, 0x42, 0x04, 0x06, 0x8f},
    {0x03, 0x81, 0x44, 0x02, 0xbd},
    {0x04, 0x04, 0x43, 0x47, 0x7d},
    {0x02, 0x81, 0x44, 0x02, 0xbd},
    {0x0c, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x07, 0x7d},
    {0x01, 0x02, 0x43, 0x47, 0x7d},
    {0x02, 0x0a, 0x43, 0x07, 0x7d},
    {0x06, 0x47, 0x04, 0x06, 0x8f},
    {0x03, 0x04, 0x42, 0x02, 0x6c},
    {0x04, 0x02, 0x43, 0x47, 0x7d},
    {0x02, 0x04, 0x42, 0x02, 0x6c},
    {0x07, 0x46, 0x02, 0x46, 0x9f},
    {0x03, 0x02, 0x42, 0x02, 0x6c},
    {0x01, 0x07, 0x43, 0x47, 0x7d},
    {0x02, 0x02, 0x42, 0x02, 0x6c},
    {0x05, 0x47, 0x04, 0x06, 0x8f},
    {0x03, 0x07, 0x42, 0x02, 0x6c},
    {0x04, 0x07, 0x43, 0x47, 0x7d},
    {0x02, 0x07, 0x42, 0x02, 0x6c},
    {0xf4, 0x47, 0x03, 0xf5, 0xff},
    {0x03, 0x1e, 0x42, 0xb5, 0xac},
    {0x01, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x1e, 0x42, 0xb5, 0xac},
    {0x06, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x07, 0x6e},
    {0x04, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x07, 0x6e},
    {0x09, 0x4a, 0x42, 0xb5, 0xbd},
    {0x03, 0x0b, 0x44, 0x07, 0x7e},
    {0x01, 0x03, 0x44, 0x47, 0x7e},
    {0x02, 0x0b, 0x44, 0x07, 0x7e},
    {0x05, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x07, 0x6e},
    {0x04, 0x03, 0x44, 0x47, 0x7e},
    {0x02, 0x05, 0x45, 0x07, 0x6e},
    {0x0a, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x0c, 0x42, 0x07, 0x8e},
    {0x01, 0x0b, 0x42, 0x47, 0x8e},
    {0x02, 0x0c, 0x42, 0x07, 0x8e},
    {0x06, 0x43, 0x02, 0x07, 0x8e},
    {0x03, 0x09, 0x44, 0x07, 0x7e},
    {0x04, 0x0b, 0x42, 0x47, 0x8e},
    {0x02, 0x09, 0x44, 0x07, 0x7e},
    {0x07, 0x41, 0x02, 0xf5, 0xbd},
    {0x03, 0x9a, 0x47, 0x02, 0xce},
    {0x01, 0x05, 0x44, 0x47, 0x7e},
    {0x02, 0x9a, 0x47, 0x02, 0xce},
    {0x05, 0x43, 0x02, 0x07, 0x8e},
    {0x03, 0x06, 0x45, 0x07, 0x6e},
    {0x04, 0x05, 0x44, 0x47, 0x7e},
    {0x02, 0x06, 0x45, 0x07, 0x6e},
    {0x4d, 0x07, 0x02, 0xb5, 0xce},
    {0x03, 0x22, 0x42, 0xb5, 0xac},
    {0x01, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x22, 0x42, 0xb5, 0xac},
    {0x06, 0x52, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x42, 0x02, 0xbd},
    {0x04, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x02, 0xbd},
    {0x08, 0x4a, 0x42, 0xb5, 0xbd},
    {0x03, 0x32, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x47, 0x8e},
    {0x02, 0x32, 0x42, 0xb5, 0xac},
    {0x05, 0x52, 0x02, 0xb5, 0xbd},
    {0x03, 0x0e, 0x42, 0x07, 0x8e},
    {0x04, 0x09, 0x42, 0x47, 0x8e},
    {0x02, 0x0e, 0x42, 0x07, 0x8e},
    {0x53, 0x06, 0xf5, 0x40, 0xff},
    {0x03, 0x3e, 0x42, 0xb5, 0xac},
    {0x01, 0x8a, 0x46, 0xf5, 0xff},
    {0x02, 0x3e, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x07, 0x8e},
    {0x03, 0x04, 0x45, 0x07, 0x6e},
    {0x04, 0x8a, 0x46, 0xf5, 0xff},
    {0x02, 0x04, 0x45, 0x07, 0x6e},
    {0x07, 0x48, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x07, 0x6e},
    {0x01, 0x06, 0x44, 0x47, 0x7e},
    {0x02, 0x02, 0x45, 0x07, 0x6e},
    {0x05, 0x45, 0x02, 0x07, 0x8e},
    {0x03, 0x07, 0x45, 0x07, 0x6e},
    {0x04, 0x06, 0x44, 0x47, 0x7e},
    {0x02, 0x07, 0x45, 0x07, 0x6e},
    {0x58, 0x06, 0xf5, 0x40, 0xff},
    {0x03, 0x30, 0x42, 0xb5, 0xac},
    {0x01, 0x26, 0x42, 0xf5, 0xbd},
    {0x02, 0x30, 0x42, 0xb5, 0xac},
    {0x06, 0x55, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x07, 0x6c},
    {0x04, 0x26, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x07, 0x6c},
    {0x09, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3c, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x47, 0x42, 0xce},
    {0x02, 0x3c, 0x42, 0xb5, 0xac},
    {0x05, 0x55, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x07, 0x6c},
    {0x04, 0x82, 0x47, 0x42, 0xce},
    {0x02, 0x05, 0x43, 0x07, 0x6c},
    {0x0b, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x2a, 0x42, 0xb5, 0xac},
    {0x01, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x2a, 0x42, 0xb5, 0xac},
    {0x06, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x07, 0x8e},
    {0x04, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x07, 0x8e},
    {0x07, 0xc3, 0x06, 0xf5, 0xff},
    {0x03, 0x92, 0x46, 0xb5, 0xff},
    {0x01, 0x0f, 0x42, 0x46, 0x9f},
    {0x02, 0x92, 0x46, 0xb5, 0xff},
    {0x05, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x07, 0x6c},
    {0x04, 0x0f, 0x42, 0x46, 0x9f},
    {0x02, 0x06, 0x43, 0x07, 0x6c},
    {0x56, 0x06, 0xf5, 0x40, 0xff},
    {0x03, 0x20, 0x42, 0xb5, 0xac},
    {0x01, 0x86, 0x46, 0xf5, 0xff},
    {0x02, 0x20, 0x42, 0xb5, 0xac},
    {0x06, 0xc4, 0x06, 0xb5, 0xff},
    {0x03, 0x08, 0x44, 0x07, 0x7e},
    {0x04, 0x86, 0x46, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0x07, 0x7e},
    {0x08, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3a, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x47, 0x7e},
    {0x02, 0x3a, 0x42, 0xb5, 0xac},
    {0x05, 0xc4, 0x06, 0xb5, 0xff},
    {0x03, 0x81, 0x42, 0x02, 0xbd},
    {0x04, 0x04, 0x44, 0x47, 0x7e},
    {0x02, 0x81, 0x42, 0x02, 0xbd},
    {0x0c, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x44, 0x07, 0x7e},
    {0x01, 0x02, 0x44, 0x47, 0x7e},
    {0x02, 0x0a, 0x44, 0x07, 0x7e},
    {0x06, 0x46, 0x02, 0x07, 0x8e},
    {0x03, 0x04, 0x43, 0x07, 0x6c},
    {0x04, 0x02, 0x44, 0x47, 0x7e},
    {0x02, 0x04, 0x43, 0x07, 0x6c},
    {0x07, 0xc1, 0x07, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x07, 0x6c},
    {0x01, 0x07, 0x44, 0x47, 0x7e},
    {0x02, 0x02, 0x43, 0x07, 0x6c},
    {0x05, 0x46, 0x02, 0x07, 0x8e},
    {0x03, 0x07, 0x43, 0x07, 0x6c},
    {0x04, 0x07, 0x44, 0x47, 0x7e},
    {0x02, 0x07, 0x43, 0x07, 0x6c},
    {0xe8, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x42, 0x06, 0x9f},
    {0x01, 0x0d, 0x42, 0x46, 0x9f},
    {0x02, 0x16, 0x42, 0x06, 0x9f},
    {0x06, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x07, 0x6d},
    {0x04, 0x0d, 0x42, 0x46, 0x9f},
    {0x02, 0x03, 0x44, 0x07, 0x6d},
    {0x09, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x07, 0x7d},
    {0x01, 0x03, 0x42, 0x47, 0x7d},
    {0x02, 0x0b, 0x42, 0x07, 0x7d},
    {0x05, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x07, 0x6d},
    {0x04, 0x03, 0x42, 0x47, 0x7d},
    {0x02, 0x05, 0x44, 0x07, 0x6d},
    {0x0a, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x42, 0x06, 0x9f},
    {0x01, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0x06, 0x9f},
    {0x06, 0x48, 0x02, 0x06, 0x9f},
    {0x03, 0x09, 0x42, 0x07, 0x7d},
    {0x04, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x07, 0x7d},
    {0x07, 0x4a, 0x02, 0xf5, 0xac},
    {0x03, 0x8a, 0x47, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0x47, 0x7d},
    {0x02, 0x8a, 0x47, 0xb5, 0xee},
    {0x05, 0x48, 0x02, 0x06, 0x9f},
    {0x03, 0x06, 0x44, 0x07, 0x6d},
    {0x04, 0x05, 0x42, 0x47, 0x7d},
    {0x02, 0x06, 0x44, 0x07, 0x6d},
    {0x50, 0x07, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x42, 0xb5, 0xac},
    {0x01, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x26, 0x42, 0xb5, 0xac},
    {0x06, 0xc3, 0x07, 0xb5, 0xee},
    {0x03, 0x82, 0x47, 0x02, 0xbd},
    {0x04, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x02, 0xbd},
    {0x08, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0x06, 0x9f},
    {0x01, 0x11, 0x42, 0x46, 0x9f},
    {0x02, 0x19, 0x42, 0x06, 0x9f},
    {0x05, 0xc3, 0x07, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x07, 0x8e},
    {0x04, 0x11, 0x42, 0x46, 0x9f},
    {0x02, 0x0f, 0x42, 0x07, 0x8e},
    {0x40, 0x07, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x47, 0xb5, 0xee},
    {0x01, 0x84, 0x47, 0xf5, 0xee},
    {0x02, 0x86, 0x47, 0xb5, 0xee},
    {0x06, 0xc1, 0x07, 0x03, 0xdf},
    {0x03, 0x04, 0x44, 0x07, 0x6d},
    {0x04, 0x84, 0x47, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x07, 0x6d},
    {0x07, 0x44, 0x02, 0x46, 0x9f},
    {0x03, 0x02, 0x44, 0x07, 0x6d},
    {0x01, 0x06, 0x42, 0x47, 0x7d},
    {0x02, 0x02, 0x44, 0x07, 0x6d},
    {0x05, 0xc1, 0x07, 0x03, 0xdf},
    {0x03, 0x07, 0x44, 0x07, 0x6d},
    {0x04, 0x06, 0x42, 0x47, 0x7d},
    {0x02, 0x07, 0x44, 0x07, 0x6d},
    {0xc1, 0x42, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x07, 0x8e},
    {0x01, 0x01, 0x42, 0x46, 0x9f},
    {0x02, 0x0d, 0x42, 0x07, 0x8e},
    {0x06, 0x4a, 0x02, 0x06, 0x9f},
    {0x03, 0x03, 0x42, 0x07, 0x6c},
    {0x04, 0x01, 0x42, 0x46, 0x9f},
    {0x02, 0x03, 0x42, 0x07, 0x6c},
    {0x09, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0x06, 0x9f},
    {0x01, 0x08, 0x42, 0x47, 0x8e},
    {0x02, 0x12, 0x42, 0x06, 0x9f},
    {0x05, 0x4a, 0x02, 0x06, 0x9f},
    {0x03, 0x05, 0x42, 0x07, 0x6c},
    {0x04, 0x08, 0x42, 0x47, 0x8e},
    {0x02, 0x05, 0x42, 0x07, 0x6c},
    {0x0b, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x42, 0x06, 0x9f},
    {0x01, 0x83, 0x47, 0x43, 0xdf},
    {0x02, 0x15, 0x42, 0x06, 0x9f},
    {0x06, 0x44, 0x02, 0x07, 0x8e},
    {0x03, 0x11, 0x42, 0x07, 0x8e},
    {0x04, 0x83, 0x47, 0x43, 0xdf},
    {0x02, 0x11, 0x42, 0x07, 0x8e},
    {0x07, 0x42, 0x02, 0x46, 0x9f},
    {0x03, 0x84, 0x47, 0x03, 0xdf},
    {0x01, 0x81, 0x47, 0x42, 0xce},
    {0x02, 0x84, 0x47, 0x03, 0xdf},
    {0x05, 0x44, 0x02, 0x07, 0x8e},
    {0x03, 0x06, 0x42, 0x07, 0x6c},
    {0x04, 0x81, 0x47, 0x42, 0xce},
    {0x02, 0x06, 0x42, 0x07, 0x6c},
    {0x4e, 0x07, 0x02, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0x07, 0x8e},
    {0x01, 0x0a, 0x42, 0x47, 0x8e},
    {0x02, 0x01, 0x42, 0x07, 0x8e},
    {0x06, 0x42, 0x02, 0x07, 0x8e},
    {0x03, 0x08, 0x42, 0x07, 0x7d},
    {0x04, 0x0a, 0x42, 0x47, 0x8e},
    {0x02, 0x08, 0x42, 0x07, 0x7d},
    {0x08, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x47, 0x02, 0xce},
    {0x01, 0x04, 0x42, 0x47, 0x7d},
    {0x02, 0x83, 0x47, 0x02, 0xce},
    {0x05, 0x42, 0x02, 0x07, 0x8e},
    {0x03, 0x81, 0x47, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0x47, 0x7d},
    {0x02, 0x81, 0x47, 0x02, 0xbd},
    {0x0c, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x07, 0x7d},
    {0x01, 0x02, 0x42, 0x47, 0x7d},
    {0x02, 0x0a, 0x42, 0x07, 0x7d},
    {0x06, 0x47, 0x02, 0x07, 0x8e},
    {0x03, 0x04, 0x42, 0x07, 0x6c},
    {0x04, 0x02, 0x42, 0x47, 0x7d},
    {0x02, 0x04, 0x42, 0x07, 0x6c},
    {0x07, 0x47, 0x02, 0x46, 0x9f},
    {0x03, 0x02, 0x42, 0x07, 0x6c},
    {0x01, 0x07, 0x42, 0x47, 0x7d},
    {0x02, 0x02, 0x42, 0x07, 0x6c},
    {0x05, 0x47, 0x02, 0x07, 0x8e},
    {0x03, 0x07, 0x42, 0x07, 0x6c},
    {0x04, 0x07, 0x42, 0x47, 0x7d},
    {0x02, 0x07, 0x42, 0x07, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0f},
    {0x03, 0xb4, 0xf5, 0x00, 0x0f},
    {0x01, 0xb4, 0xf5, 0x40, 0x0f},
    {0x02, 0xb4, 0xf5, 0x00, 0x0f},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0xf2, 0x00, 0x66},
    {0x04, 0xb4, 0xf5, 0x40, 0x0f},
    {0x02, 0x03, 0xf2, 0x00, 0x66},
    {0x09, 0xf2, 0x40, 0x00, 0x06},
    {0x03, 0x0b, 0xf5, 0x00, 0x77},
    {0x01, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x0b, 0xf5, 0x00, 0x77},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0xf2, 0x00, 0x66},
    {0x04, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x05, 0xf2, 0x00, 0x66},
    {0x0a, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0c, 0xf5, 0x00, 0x88},
    {0x01, 0x0b, 0xf5, 0x40, 0x88},
    {0x02, 0x0c, 0xf5, 0x00, 0x88},
    {0x06, 0x43, 0xb5, 0x00, 0x88},
    {0x03, 0x09, 0xf5, 0x00, 0x77},
    {0x04, 0x0b, 0xf5, 0x40, 0x88},
    {0x02, 0x09, 0xf5, 0x00, 0x77},
    {0x07, 0xf2, 0x00, 0x40, 0x05},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0xb5, 0x00, 0x88},
    {0x03, 0x06, 0xf2, 0x00, 0x66},
    {0x04, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x06, 0xf2, 0x00, 0x66},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0xf5, 0x00, 0x99},
    {0x01, 0x0c, 0xf5, 0x40, 0x99},
    {0x02, 0x14, 0xf5, 0x00, 0x99},
    {0x06, 0x4b, 0xb5, 0x00, 0x99},
    {0x03, 0x82, 0xf5, 0x00, 0x07},
    {0x04, 0x0c, 0xf5, 0x40, 0x99},
    {0x02, 0x82, 0xf5, 0x00, 0x07},
    {0x08, 0xf2, 0x40, 0x00, 0x06},
    {0x03, 0x18, 0xf5, 0x00, 0x99},
    {0x01, 0x09, 0xf5, 0x40, 0x88},
    {0x02, 0x18, 0xf5, 0x00, 0x99},
    {0x05, 0x4b, 0xb5, 0x00, 0x99},
    {0x03, 0x0e, 0xf5, 0x00, 0x88},
    {0x04, 0x09, 0xf5, 0x40, 0x88},
    {0x02, 0x0e, 0xf5, 0x00, 0x88},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0xf5, 0x00, 0x99},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0xf5, 0x00, 0x99},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0xf2, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf2, 0x00, 0x66},
    {0x07, 0x43, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0xf2, 0x00, 0x66},
    {0x01, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0xf2, 0x00, 0x66},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0xf2, 0x00, 0x66},
    {0x04, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0xf2, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0xf5, 0x00, 0x99},
    {0x01, 0x14, 0xf5, 0x40, 0xaa},
    {0x02, 0x17, 0xf5, 0x00, 0x99},
    {0x06, 0x4c, 0xb5, 0x00, 0xaa},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0xf5, 0x00, 0xaa},
    {0x03, 0x1b, 0xf5, 0x00, 0x99},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0xf5, 0x00, 0x99},
    {0x05, 0x4c, 0xb5, 0x00, 0xaa},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x27, 0xf5, 0x00, 0xaa},
    {0x01, 0x18, 0xf5, 0x40, 0xaa},
    {0x02, 0x27, 0xf5, 0x00, 0xaa},
    {0x06, 0x49, 0xb5, 0x00, 0x99},
    {0x03, 0x10, 0xf5, 0x00, 0x88},
    {0x04, 0x18, 0xf5, 0x40, 0xaa},
    {0x02, 0x10, 0xf5, 0x00, 0x88},
    {0x07, 0x4b, 0xb5, 0x40, 0xaa},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0xf5, 0x40, 0x99},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0xb5, 0x00, 0x99},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0xf5, 0x40, 0x99},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0xf5, 0x00, 0x99},
    {0x01, 0x1c, 0xf5, 0x40, 0xaa},
    {0x02, 0x13, 0xf5, 0x00, 0x99},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0xf5, 0x00, 0x77},
    {0x04, 0x1c, 0xf5, 0x40, 0xaa},
    {0x02, 0x08, 0xf5, 0x00, 0x77},
    {0x08, 0x43, 0xf5, 0x00, 0xaa},
    {0x03, 0x37, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x37, 0xf5, 0x00, 0xaa},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0xf5, 0x00, 0x07},
    {0x04, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x81, 0xf5, 0x00, 0x07},
    {0x0c, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0a, 0xf5, 0x00, 0x77},
    {0x01, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x0a, 0xf5, 0x00, 0x77},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0x9c, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x2d, 0xf5, 0x00, 0xaa},
    {0x01, 0x17, 0xf5, 0x40, 0xaa},
    {0x02, 0x2d, 0xf5, 0x00, 0xaa},
    {0x06, 0x54, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0xf5, 0x00, 0xbb},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0xf5, 0x40, 0xbb},
    {0x03, 0x35, 0xf5, 0x00, 0xaa},
    {0x01, 0x1b, 0xf5, 0x40, 0xaa},
    {0x02, 0x35, 0xf5, 0x00, 0xaa},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0xf5, 0x40, 0xaa},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0xb5, 0x40, 0xbb},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x23, 0xf5, 0x00, 0xaa},
    {0x01, 0x27, 0xf5, 0x40, 0xbb},
    {0x02, 0x23, 0xf5, 0x00, 0xaa},
    {0x06, 0x58, 0xb5, 0x00, 0xbb},
    {0x03, 0x82, 0x43, 0xb5, 0xbb},
    {0x04, 0x27, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x43, 0xb5, 0xbb},
    {0x08, 0x4b, 0xf5, 0x00, 0xbb},
    {0x03, 0x33, 0xf5, 0x00, 0xaa},
    {0x01, 0x10, 0xf5, 0x40, 0x99},
    {0x02, 0x33, 0xf5, 0x00, 0xaa},
    {0x05, 0x58, 0xb5, 0x00, 0xbb},
    {0x03, 0x0f, 0xf5, 0x00, 0x88},
    {0x04, 0x10, 0xf5, 0x40, 0x99},
    {0x02, 0x0f, 0xf5, 0x00, 0x88},
    {0x54, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3f, 0xf5, 0x00, 0xaa},
    {0x01, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x3f, 0xf5, 0x00, 0xaa},
    {0x06, 0x4e, 0xb5, 0x00, 0xaa},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0xb5, 0x40, 0xaa},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0xb5, 0x00, 0xaa},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x0d, 0xf5, 0x00, 0x88},
    {0x01, 0x13, 0xf5, 0x40, 0xaa},
    {0x02, 0x0d, 0xf5, 0x00, 0x88},
    {0x06, 0x5c, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x97, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0xf5, 0x40, 0x88},
    {0x02, 0x97, 0xf5, 0x00, 0x0b},
    {0x05, 0x5c, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0xf5, 0x40, 0x88},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x43, 0xf5, 0x40, 0xbb},
    {0x03, 0x2b, 0xf5, 0x00, 0xaa},
    {0x01, 0x37, 0xf5, 0x40, 0xbb},
    {0x02, 0x2b, 0xf5, 0x00, 0xaa},
    {0x06, 0x44, 0xb5, 0x00, 0x88},
    {0x03, 0x11, 0xf5, 0x00, 0x88},
    {0x04, 0x37, 0xf5, 0x40, 0xbb},
    {0x02, 0x11, 0xf5, 0x00, 0x88},
    {0x07, 0xda, 0xb5, 0x40, 0x0b},
    {0x03, 0x93, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x93, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0xb5, 0x00, 0x88},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0xf5, 0x00, 0x88},
    {0x01, 0x0a, 0xf5, 0x40, 0x88},
    {0x02, 0x01, 0xf5, 0x00, 0x88},
    {0x06, 0x42, 0xb5, 0x00, 0x88},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0xf5, 0x40, 0x88},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0xf5, 0x00, 0xaa},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0xb5, 0x00, 0x88},
    {0x03, 0x81, 0x43, 0xb5, 0xbb},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0xb5, 0xbb},
    {0x0c, 0x43, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0xf5, 0x00, 0xaa},
    {0x01, 0x2d, 0xf5, 0x40, 0xbb},
    {0x02, 0x1d, 0xf5, 0x00, 0xaa},
    {0x06, 0x57, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x4c, 0xf5, 0x00, 0xcc},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x4b, 0xf5, 0x40, 0xcc},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x54, 0xb5, 0x40, 0xcc},
    {0x03, 0x9a, 0x43, 0xb5, 0xcc},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x43, 0xb5, 0xcc},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x03, 0xb5, 0x00, 0xcc},
    {0x03, 0x21, 0xf5, 0x00, 0xaa},
    {0x01, 0x35, 0xf5, 0x40, 0xbb},
    {0x02, 0x21, 0xf5, 0x00, 0xaa},
    {0x06, 0x5b, 0xb5, 0x00, 0xbb},
    {0x03, 0x82, 0x4b, 0xb5, 0xcc},
    {0x04, 0x35, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x4b, 0xb5, 0xcc},
    {0x08, 0x4c, 0xf5, 0x00, 0xcc},
    {0x03, 0x31, 0xf5, 0x00, 0xaa},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0xf5, 0x00, 0xaa},
    {0x05, 0x5b, 0xb5, 0x00, 0xbb},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0x82, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0xf5, 0x00, 0xaa},
    {0x01, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0xf5, 0x00, 0xaa},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x78, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0xf5, 0x00, 0xaa},
    {0x01, 0x23, 0xf5, 0x40, 0xbb},
    {0x02, 0x2f, 0xf5, 0x00, 0xaa},
    {0x06, 0x67, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x03, 0x6c},
    {0x04, 0x23, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x03, 0x6c},
    {0x09, 0x49, 0xf5, 0x00, 0xbb},
    {0x03, 0x3b, 0xf5, 0x00, 0xaa},
    {0x01, 0x82, 0x43, 0xf5, 0xcc},
    {0x02, 0x3b, 0xf5, 0x00, 0xaa},
    {0x05, 0x67, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x03, 0x6c},
    {0x04, 0x82, 0x43, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x03, 0x6c},
    {0x0b, 0x4b, 0xf5, 0x40, 0xcc},
    {0x03, 0x29, 0xf5, 0x00, 0xaa},
    {0x01, 0x33, 0xf5, 0x40, 0xbb},
    {0x02, 0x29, 0xf5, 0x00, 0xaa},
    {0x06, 0x50, 0xb5, 0x00, 0xaa},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0xf5, 0x40, 0xbb},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x58, 0xb5, 0x40, 0xcc},
    {0x03, 0x8f, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0xf5, 0x40, 0x99},
    {0x02, 0x8f, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0xb5, 0x00, 0xaa},
    {0x03, 0x06, 0x43, 0x03, 0x6c},
    {0x04, 0x0f, 0xf5, 0x40, 0x99},
    {0x02, 0x06, 0x43, 0x03, 0x6c},
    {0x5e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0xf5, 0x00, 0xaa},
    {0x01, 0x3f, 0xf5, 0x40, 0xbb},
    {0x02, 0x1f, 0xf5, 0x00, 0xaa},
    {0x06, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0xf5, 0x40, 0xbb},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0xf5, 0x00, 0xbb},
    {0x03, 0x39, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0xf5, 0x00, 0xaa},
    {0x05, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4b, 0xb5, 0xcc},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x4b, 0xb5, 0xcc},
    {0x0c, 0x4b, 0xf5, 0x40, 0xcc},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x03, 0x6c},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x03, 0x6c},
    {0x07, 0x4e, 0xb5, 0x40, 0xbb},
    {0x03, 0x02, 0x43, 0x03, 0x6c},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x03, 0x6c},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x03, 0x6c},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x03, 0x6c},
    {0x9d, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x16, 0xf5, 0x00, 0x99},
    {0x01, 0x0d, 0xf5, 0x40, 0x99},
    {0x02, 0x16, 0xf5, 0x00, 0x99},
    {0x06, 0x53, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0xf5, 0x40, 0x99},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x1a, 0xf5, 0x00, 0x99},
    {0x01, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0xf5, 0x00, 0x99},
    {0x06, 0x48, 0xb5, 0x00, 0x99},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x5c, 0xb5, 0x40, 0xcc},
    {0x03, 0x8b, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0xb5, 0x00, 0x99},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x79, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0xf5, 0x00, 0xaa},
    {0x01, 0x2b, 0xf5, 0x40, 0xbb},
    {0x02, 0x25, 0xf5, 0x00, 0xaa},
    {0x06, 0x77, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x45, 0xb5, 0xbb},
    {0x04, 0x2b, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x45, 0xb5, 0xbb},
    {0x08, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x19, 0xf5, 0x00, 0x99},
    {0x01, 0x11, 0xf5, 0x40, 0x99},
    {0x02, 0x19, 0xf5, 0x00, 0x99},
    {0x05, 0x77, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0xf5, 0x40, 0x99},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x76, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0xf5, 0x40, 0x99},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0xb5, 0x00, 0x99},
    {0x03, 0x03, 0x42, 0x03, 0x6c},
    {0x04, 0x01, 0xf5, 0x40, 0x99},
    {0x02, 0x03, 0x42, 0x03, 0x6c},
    {0x09, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x12, 0xf5, 0x00, 0x99},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0xf5, 0x00, 0x99},
    {0x05, 0x4a, 0xb5, 0x00, 0x99},
    {0x03, 0x05, 0x42, 0x03, 0x6c},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x03, 0x6c},
    {0x0b, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x15, 0xf5, 0x00, 0x99},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0xf5, 0x00, 0x99},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0xb5, 0x40, 0x99},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x43, 0xf5, 0xcc},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x03, 0x6c},
    {0x04, 0x81, 0x43, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x03, 0x6c},
    {0x4e, 0x03, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0xf5, 0x00, 0xaa},
    {0x03, 0x83, 0x43, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x43, 0xb5, 0xcc},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0xb5, 0xbb},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0xb5, 0xbb},
    {0x0c, 0x45, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x03, 0x6c},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x03, 0x6c},
    {0x07, 0x47, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x42, 0x03, 0x6c},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x03, 0x6c},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x03, 0x6c},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x9c, 0xf5, 0x00, 0x0d},
    {0x01, 0x1d, 0xf5, 0x40, 0xbb},
    {0x02, 0x9c, 0xf5, 0x00, 0x0d},
    {0x06, 0x6d, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x49, 0xb5, 0x6c},
    {0x04, 0x1d, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x49, 0xb5, 0x6c},
    {0x09, 0x54, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x46, 0xb5, 0x7b},
    {0x01, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x0b, 0x46, 0xb5, 0x7b},
    {0x05, 0x6d, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x49, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x05, 0x49, 0xb5, 0x6c},
    {0x0a, 0x4c, 0xf5, 0x40, 0xdd},
    {0x03, 0x0c, 0x41, 0xb5, 0x8b},
    {0x01, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x0c, 0x41, 0xb5, 0x8b},
    {0x06, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x09, 0x46, 0xb5, 0x7b},
    {0x04, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x09, 0x46, 0xb5, 0x7b},
    {0x07, 0x57, 0xb5, 0x40, 0xcc},
    {0x03, 0x9a, 0x4b, 0xb5, 0xdd},
    {0x01, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x9a, 0x4b, 0xb5, 0xdd},
    {0x05, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x49, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x06, 0x49, 0xb5, 0x6c},
    {0x4d, 0x0b, 0xb5, 0x00, 0xdd},
    {0x03, 0x14, 0x43, 0xb5, 0x9b},
    {0x01, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x14, 0x43, 0xb5, 0x9b},
    {0x06, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x82, 0x4c, 0xb5, 0xdd},
    {0x04, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x82, 0x4c, 0xb5, 0xdd},
    {0x08, 0x54, 0xf5, 0x00, 0xdd},
    {0x03, 0x18, 0x43, 0xb5, 0x9b},
    {0x01, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x18, 0x43, 0xb5, 0x9b},
    {0x05, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x0e, 0x41, 0xb5, 0x8b},
    {0x04, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x0e, 0x41, 0xb5, 0x8b},
    {0x4f, 0x03, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x43, 0xb5, 0x9b},
    {0x01, 0x9a, 0x43, 0xf5, 0xdd},
    {0x02, 0x1c, 0x43, 0xb5, 0x9b},
    {0x06, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x49, 0xb5, 0x6c},
    {0x04, 0x9a, 0x43, 0xf5, 0xdd},
    {0x02, 0x04, 0x49, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x49, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x49, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x49, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x49, 0xb5, 0x6c},
    {0x74, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x43, 0xb5, 0x9b},
    {0x01, 0x21, 0xf5, 0x40, 0xbb},
    {0x02, 0x17, 0x43, 0xb5, 0x9b},
    {0x06, 0x75, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x0b, 0x6d},
    {0x04, 0x21, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x0b, 0x6d},
    {0x09, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x1b, 0x43, 0xb5, 0x9b},
    {0x01, 0x82, 0x4b, 0xf5, 0xdd},
    {0x02, 0x1b, 0x43, 0xb5, 0x9b},
    {0x05, 0x75, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x0b, 0x6d},
    {0x04, 0x82, 0x4b, 0xf5, 0xdd},
    {0x02, 0x05, 0x43, 0x0b, 0x6d},
    {0x0b, 0x4c, 0xf5, 0x40, 0xdd},
    {0x03, 0x28, 0xf5, 0x00, 0xaa},
    {0x01, 0x31, 0xf5, 0x40, 0xbb},
    {0x02, 0x28, 0xf5, 0x00, 0xaa},
    {0x06, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x10, 0x41, 0xb5, 0x8b},
    {0x04, 0x31, 0xf5, 0x40, 0xbb},
    {0x02, 0x10, 0x41, 0xb5, 0x8b},
    {0x07, 0x5b, 0xb5, 0x40, 0xcc},
    {0x03, 0x8d, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x8d, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0x0b, 0x6d},
    {0x04, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x0b, 0x6d},
    {0x70, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0xb5, 0x9b},
    {0x01, 0x3d, 0xf5, 0x40, 0xbb},
    {0x02, 0x13, 0x43, 0xb5, 0x9b},
    {0x06, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0xb5, 0x7b},
    {0x04, 0x3d, 0xf5, 0x40, 0xbb},
    {0x02, 0x08, 0x46, 0xb5, 0x7b},
    {0x08, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x38, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x38, 0xf5, 0x00, 0xaa},
    {0x05, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4c, 0xb5, 0xdd},
    {0x04, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x81, 0x4c, 0xb5, 0xdd},
    {0x0c, 0x4c, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x46, 0xb5, 0x7b},
    {0x01, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x0a, 0x46, 0xb5, 0x7b},
    {0x06, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0x0b, 0x6d},
    {0x04, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0x0b, 0x6d},
    {0x07, 0x45, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0x0b, 0x6d},
    {0x01, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0x0b, 0x6d},
    {0x05, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0x0b, 0x6d},
    {0x04, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0x0b, 0x6d},
    {0xa1, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2e, 0xf5, 0x00, 0xaa},
    {0x01, 0x2f, 0xf5, 0x40, 0xbb},
    {0x02, 0x2e, 0xf5, 0x00, 0xaa},
    {0x06, 0x63, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x03, 0x6d},
    {0x04, 0x2f, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x41, 0x03, 0x6d},
    {0x09, 0x58, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x43, 0x03, 0x7d},
    {0x01, 0x03, 0x43, 0x43, 0x7d},
    {0x02, 0x0b, 0x43, 0x03, 0x7d},
    {0x05, 0x63, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x03, 0x6d},
    {0x04, 0x03, 0x43, 0x43, 0x7d},
    {0x02, 0x05, 0x41, 0x03, 0x6d},
    {0x0a, 0x49, 0xf5, 0x40, 0xcc},
    {0x03, 0x36, 0xf5, 0x00, 0xaa},
    {0x01, 0x3b, 0xf5, 0x40, 0xbb},
    {0x02, 0x36, 0xf5, 0x00, 0xaa},
    {0x06, 0xc2, 0x03, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x03, 0x7d},
    {0x04, 0x3b, 0xf5, 0x40, 0xbb},
    {0x02, 0x09, 0x43, 0x03, 0x7d},
    {0x07, 0x67, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x43, 0x7d},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x03, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x03, 0x6d},
    {0x04, 0x05, 0x43, 0x43, 0x7d},
    {0x02, 0x06, 0x41, 0x03, 0x6d},
    {0x6c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0xf5, 0x00, 0xaa},
    {0x01, 0x29, 0xf5, 0x40, 0xbb},
    {0x02, 0x24, 0xf5, 0x00, 0xaa},
    {0x06, 0x73, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x49, 0xb5, 0xcc},
    {0x04, 0x29, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x49, 0xb5, 0xcc},
    {0x08, 0x58, 0xf5, 0x00, 0xdd},
    {0x03, 0x34, 0xf5, 0x00, 0xaa},
    {0x01, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x34, 0xf5, 0x00, 0xaa},
    {0x05, 0x73, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x41, 0xb5, 0x8b},
    {0x04, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x41, 0xb5, 0x8b},
    {0x64, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0xf5, 0x00, 0xaa},
    {0x01, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0xf5, 0x00, 0xaa},
    {0x06, 0x4f, 0xb5, 0x00, 0xaa},
    {0x03, 0x04, 0x41, 0x03, 0x6d},
    {0x04, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x03, 0x6d},
    {0x07, 0x50, 0xb5, 0x40, 0xbb},
    {0x03, 0x02, 0x41, 0x03, 0x6d},
    {0x01, 0x06, 0x43, 0x43, 0x7d},
    {0x02, 0x02, 0x41, 0x03, 0x6d},
    {0x05, 0x4f, 0xb5, 0x00, 0xaa},
    {0x03, 0x07, 0x41, 0x03, 0x6d},
    {0x04, 0x06, 0x43, 0x43, 0x7d},
    {0x02, 0x07, 0x41, 0x03, 0x6d},
    {0x86, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x41, 0xb5, 0x8b},
    {0x01, 0x1f, 0xf5, 0x40, 0xbb},
    {0x02, 0x0d, 0x41, 0xb5, 0x8b},
    {0x06, 0x7f, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x42, 0x0b, 0x6d},
    {0x04, 0x1f, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x42, 0x0b, 0x6d},
    {0x09, 0x4e, 0xf5, 0x00, 0xcc},
    {0x03, 0x99, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x99, 0xf5, 0x00, 0x0b},
    {0x05, 0x7f, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x42, 0x0b, 0x6d},
    {0x04, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0x0b, 0x6d},
    {0x0b, 0x49, 0xf5, 0x40, 0xcc},
    {0x03, 0x2c, 0xf5, 0x00, 0xaa},
    {0x01, 0x39, 0xf5, 0x40, 0xbb},
    {0x02, 0x2c, 0xf5, 0x00, 0xaa},
    {0x06, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x11, 0x41, 0xb5, 0x8b},
    {0x04, 0x39, 0xf5, 0x40, 0xbb},
    {0x02, 0x11, 0x41, 0xb5, 0x8b},
    {0x07, 0xc9, 0xb5, 0x40, 0x0d},
    {0x03, 0x95, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x4b, 0xf5, 0xdd},
    {0x02, 0x95, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0x0b, 0x6d},
    {0x04, 0x81, 0x4b, 0xf5, 0xdd},
    {0x02, 0x06, 0x42, 0x0b, 0x6d},
    {0x4e, 0x0b, 0xb5, 0x00, 0xdd},
    {0x03, 0x01, 0x41, 0xb5, 0x8b},
    {0x01, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x01, 0x41, 0xb5, 0x8b},
    {0x06, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x03, 0x7d},
    {0x04, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x03, 0x7d},
    {0x08, 0x4e, 0xf5, 0x00, 0xcc},
    {0x03, 0x83, 0x4b, 0xb5, 0xdd},
    {0x01, 0x04, 0x43, 0x43, 0x7d},
    {0x02, 0x83, 0x4b, 0xb5, 0xdd},
    {0x05, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x81, 0x49, 0xb5, 0xcc},
    {0x04, 0x04, 0x43, 0x43, 0x7d},
    {0x02, 0x81, 0x49, 0xb5, 0xcc},
    {0x0c, 0x49, 0xf5, 0x40, 0xcc},
    {0x03, 0x0a, 0x43, 0x03, 0x7d},
    {0x01, 0x02, 0x43, 0x43, 0x7d},
    {0x02, 0x0a, 0x43, 0x03, 0x7d},
    {0x06, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0x0b, 0x6d},
    {0x04, 0x02, 0x43, 0x43, 0x7d},
    {0x02, 0x04, 0x42, 0x0b, 0x6d},
    {0x07, 0x46, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x0b, 0x6d},
    {0x01, 0x07, 0x43, 0x43, 0x7d},
    {0x02, 0x02, 0x42, 0x0b, 0x6d},
    {0x05, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0x0b, 0x6d},
    {0x04, 0x07, 0x43, 0x43, 0x7d},
    {0x02, 0x07, 0x42, 0x0b, 0x6d},
    {0xf4, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0xf5, 0x00, 0xaa},
    {0x01, 0x16, 0xf5, 0x40, 0xaa},
    {0x02, 0x1e, 0xf5, 0x00, 0xaa},
    {0x06, 0x4d, 0xb5, 0x00, 0xaa},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0xf5, 0x40, 0xaa},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x5c, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0xb5, 0x00, 0xaa},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x53, 0xb5, 0x40, 0xcc},
    {0x03, 0x9a, 0x45, 0xb5, 0xcc},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x45, 0xb5, 0xcc},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x22, 0xf5, 0x00, 0xaa},
    {0x01, 0x1a, 0xf5, 0x40, 0xaa},
    {0x02, 0x22, 0xf5, 0x00, 0xaa},
    {0x06, 0xd7, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xda, 0xb5, 0x0d},
    {0x04, 0x1a, 0xf5, 0x40, 0xaa},
    {0x02, 0x82, 0xda, 0xb5, 0x0d},
    {0x08, 0x5c, 0xf5, 0x00, 0xdd},
    {0x03, 0x32, 0xf5, 0x00, 0xaa},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0xf5, 0x00, 0xaa},
    {0x05, 0xd7, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0xf5, 0x00, 0xaa},
    {0x01, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0xf5, 0x00, 0xaa},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0xb5, 0x40, 0xaa},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x7c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x30, 0xf5, 0x00, 0xaa},
    {0x01, 0x25, 0xf5, 0x40, 0xbb},
    {0x02, 0x30, 0xf5, 0x00, 0xaa},
    {0x06, 0x6b, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x05, 0x6c},
    {0x04, 0x25, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x05, 0x6c},
    {0x09, 0x44, 0xf5, 0x00, 0xaa},
    {0x03, 0x3c, 0xf5, 0x00, 0xaa},
    {0x01, 0x82, 0x45, 0xf5, 0xcc},
    {0x02, 0x3c, 0xf5, 0x00, 0xaa},
    {0x05, 0x6b, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x05, 0x6c},
    {0x04, 0x82, 0x45, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x05, 0x6c},
    {0x0b, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x2a, 0xf5, 0x00, 0xaa},
    {0x01, 0x19, 0xf5, 0x40, 0xaa},
    {0x02, 0x2a, 0xf5, 0x00, 0xaa},
    {0x06, 0x51, 0xb5, 0x00, 0xaa},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0xf5, 0x40, 0xaa},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x77, 0xb5, 0x40, 0xdd},
    {0x03, 0x91, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x91, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0xb5, 0x00, 0xaa},
    {0x03, 0x06, 0x43, 0x05, 0x6c},
    {0x04, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x05, 0x6c},
    {0x68, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0xf5, 0x00, 0xaa},
    {0x01, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0xf5, 0x00, 0xaa},
    {0x06, 0xd3, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0xf5, 0x00, 0xaa},
    {0x03, 0x3a, 0xf5, 0x00, 0xaa},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0xf5, 0x00, 0xaa},
    {0x05, 0xd3, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xda, 0xb5, 0x0d},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xda, 0xb5, 0x0d},
    {0x0c, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x05, 0x6c},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x05, 0x6c},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x05, 0x6c},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x05, 0x6c},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x05, 0x6c},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x05, 0x6c},
    {0xa5, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x16, 0x43, 0xb5, 0x9b},
    {0x01, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x16, 0x43, 0xb5, 0x9b},
    {0x06, 0x41, 0xb5, 0x00, 0xaa},
    {0x03, 0x03, 0x44, 0x03, 0x6d},
    {0x04, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x03, 0x6d},
    {0x09, 0x42, 0xf5, 0x00, 0xaa},
    {0x03, 0x0b, 0x42, 0x03, 0x7d},
    {0x01, 0x03, 0x42, 0x43, 0x7d},
    {0x02, 0x0b, 0x42, 0x03, 0x7d},
    {0x05, 0x41, 0xb5, 0x00, 0xaa},
    {0x03, 0x05, 0x44, 0x03, 0x6d},
    {0x04, 0x03, 0x42, 0x43, 0x7d},
    {0x02, 0x05, 0x44, 0x03, 0x6d},
    {0x0a, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x1a, 0x43, 0xb5, 0x9b},
    {0x01, 0x12, 0xf5, 0x40, 0xaa},
    {0x02, 0x1a, 0x43, 0xb5, 0x9b},
    {0x06, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x03, 0x7d},
    {0x04, 0x12, 0xf5, 0x40, 0xaa},
    {0x02, 0x09, 0x42, 0x03, 0x7d},
    {0x07, 0x4a, 0xb5, 0x40, 0xaa},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x43, 0x7d},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x03, 0x6d},
    {0x04, 0x05, 0x42, 0x43, 0x7d},
    {0x02, 0x06, 0x44, 0x03, 0x6d},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0xf5, 0x00, 0xaa},
    {0x01, 0x15, 0xf5, 0x40, 0xaa},
    {0x02, 0x26, 0xf5, 0x00, 0xaa},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0xb5, 0xbb},
    {0x04, 0x15, 0xf5, 0x40, 0xaa},
    {0x02, 0x82, 0x46, 0xb5, 0xbb},
    {0x08, 0x42, 0xf5, 0x00, 0xaa},
    {0x03, 0x19, 0x43, 0xb5, 0x9b},
    {0x01, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x19, 0x43, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x03, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x03, 0x6d},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x03, 0x6d},
    {0x07, 0x44, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x03, 0x6d},
    {0x01, 0x06, 0x42, 0x43, 0x7d},
    {0x02, 0x02, 0x44, 0x03, 0x6d},
    {0x05, 0xc1, 0x03, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x03, 0x6d},
    {0x04, 0x06, 0x42, 0x43, 0x7d},
    {0x02, 0x07, 0x44, 0x03, 0x6d},
    {0x81, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x05, 0x6c},
    {0x04, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x05, 0x6c},
    {0x09, 0x47, 0xf5, 0x00, 0xaa},
    {0x03, 0x12, 0x43, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0xb5, 0x9b},
    {0x05, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x05, 0x6c},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x05, 0x6c},
    {0x0b, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x15, 0x43, 0xb5, 0x9b},
    {0x01, 0x83, 0x43, 0xf5, 0xdd},
    {0x02, 0x15, 0x43, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x43, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0xf5, 0x9b},
    {0x03, 0x84, 0x43, 0xb5, 0xdd},
    {0x01, 0x81, 0x45, 0xf5, 0xcc},
    {0x02, 0x84, 0x43, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x05, 0x6c},
    {0x04, 0x81, 0x45, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x05, 0x6c},
    {0x4e, 0x05, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x03, 0x7d},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x03, 0x7d},
    {0x08, 0x47, 0xf5, 0x00, 0xaa},
    {0x03, 0x83, 0x45, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0x43, 0x7d},
    {0x02, 0x83, 0x45, 0xb5, 0xcc},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0xb5, 0xbb},
    {0x04, 0x04, 0x42, 0x43, 0x7d},
    {0x02, 0x81, 0x46, 0xb5, 0xbb},
    {0x0c, 0x46, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x42, 0x03, 0x7d},
    {0x01, 0x02, 0x42, 0x43, 0x7d},
    {0x02, 0x0a, 0x42, 0x03, 0x7d},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x05, 0x6c},
    {0x04, 0x02, 0x42, 0x43, 0x7d},
    {0x02, 0x04, 0x42, 0x05, 0x6c},
    {0x07, 0x47, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x05, 0x6c},
    {0x01, 0x07, 0x42, 0x43, 0x7d},
    {0x02, 0x02, 0x42, 0x05, 0x6c},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x05, 0x6c},
    {0x04, 0x07, 0x42, 0x43, 0x7d},
    {0x02, 0x07, 0x42, 0x05, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xb4, 0xf5, 0x00, 0x0b},
    {0x01, 0x9c, 0xf5, 0x40, 0x0e},
    {0x02, 0xb4, 0xf5, 0x00, 0x0b},
    {0x06, 0x5d, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x4a, 0xb5, 0x6d},
    {0x04, 0x9c, 0xf5, 0x40, 0x0e},
    {0x02, 0x03, 0x4a, 0xb5, 0x6d},
    {0x09, 0x57, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x49, 0xb5, 0x7d},
    {0x01, 0x03, 0x49, 0xf5, 0x7d},
    {0x02, 0x0b, 0x49, 0xb5, 0x7d},
    {0x05, 0x5d, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x4a, 0xb5, 0x6d},
    {0x04, 0x03, 0x49, 0xf5, 0x7d},
    {0x02, 0x05, 0x4a, 0xb5, 0x6d},
    {0x0a, 0x54, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x46, 0xb5, 0x8c},
    {0x01, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x0c, 0x46, 0xb5, 0x8c},
    {0x06, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x09, 0x49, 0xb5, 0x7d},
    {0x04, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x09, 0x49, 0xb5, 0x7d},
    {0x07, 0x6d, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x4c, 0xb5, 0xee},
    {0x01, 0x05, 0x49, 0xf5, 0x7d},
    {0x02, 0x9a, 0x4c, 0xb5, 0xee},
    {0x05, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x4a, 0xb5, 0x6d},
    {0x04, 0x05, 0x49, 0xf5, 0x7d},
    {0x02, 0x06, 0x4a, 0xb5, 0x6d},
    {0x4d, 0x0c, 0xb5, 0x00, 0xee},
    {0x03, 0x14, 0x41, 0xb5, 0x9c},
    {0x01, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x14, 0x41, 0xb5, 0x9c},
    {0x06, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x82, 0x54, 0xb5, 0xee},
    {0x04, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x82, 0x54, 0xb5, 0xee},
    {0x08, 0x57, 0xf5, 0x00, 0xdd},
    {0x03, 0x18, 0x41, 0xb5, 0x9c},
    {0x01, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x18, 0x41, 0xb5, 0x9c},
    {0x05, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x0e, 0x46, 0xb5, 0x8c},
    {0x04, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x0e, 0x46, 0xb5, 0x8c},
    {0x4f, 0x0b, 0xb5, 0x40, 0xee},
    {0x03, 0x1c, 0x41, 0xb5, 0x9c},
    {0x01, 0x9a, 0x4b, 0xf5, 0xee},
    {0x02, 0x1c, 0x41, 0xb5, 0x9c},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x4a, 0xb5, 0x6d},
    {0x04, 0x9a, 0x4b, 0xf5, 0xee},
    {0x02, 0x04, 0x4a, 0xb5, 0x6d},
    {0x07, 0x43, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x4a, 0xb5, 0x6d},
    {0x01, 0x06, 0x49, 0xf5, 0x7d},
    {0x02, 0x02, 0x4a, 0xb5, 0x6d},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x4a, 0xb5, 0x6d},
    {0x04, 0x06, 0x49, 0xf5, 0x7d},
    {0x02, 0x07, 0x4a, 0xb5, 0x6d},
    {0x52, 0x03, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x41, 0xb5, 0x9c},
    {0x01, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x17, 0x41, 0xb5, 0x9c},
    {0x06, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0x0c, 0x6e},
    {0x04, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0x0c, 0x6e},
    {0x09, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x1b, 0x41, 0xb5, 0x9c},
    {0x01, 0x82, 0x4c, 0xf5, 0xee},
    {0x02, 0x1b, 0x41, 0xb5, 0x9c},
    {0x05, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0x0c, 0x6e},
    {0x04, 0x82, 0x4c, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x0c, 0x6e},
    {0x0b, 0x54, 0xf5, 0x40, 0xee},
    {0x03, 0x27, 0x43, 0xb5, 0xac},
    {0x01, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x27, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x10, 0x46, 0xb5, 0x8c},
    {0x04, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x46, 0xb5, 0x8c},
    {0x07, 0x4b, 0x03, 0xf5, 0xac},
    {0x03, 0x89, 0x43, 0xb5, 0xee},
    {0x01, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x89, 0x43, 0xb5, 0xee},
    {0x05, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0x0c, 0x6e},
    {0x04, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x0c, 0x6e},
    {0x51, 0x03, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x41, 0xb5, 0x9c},
    {0x01, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x13, 0x41, 0xb5, 0x9c},
    {0x06, 0xda, 0x03, 0xb5, 0xee},
    {0x03, 0x08, 0x49, 0xb5, 0x7d},
    {0x04, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x08, 0x49, 0xb5, 0x7d},
    {0x08, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x37, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x49, 0xf5, 0x7d},
    {0x02, 0x37, 0x43, 0xb5, 0xac},
    {0x05, 0xda, 0x03, 0xb5, 0xee},
    {0x03, 0x81, 0x54, 0xb5, 0xee},
    {0x04, 0x04, 0x49, 0xf5, 0x7d},
    {0x02, 0x81, 0x54, 0xb5, 0xee},
    {0x0c, 0x54, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x49, 0xb5, 0x7d},
    {0x01, 0x02, 0x49, 0xf5, 0x7d},
    {0x02, 0x0a, 0x49, 0xb5, 0x7d},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0x0c, 0x6e},
    {0x04, 0x02, 0x49, 0xf5, 0x7d},
    {0x02, 0x04, 0x43, 0x0c, 0x6e},
    {0x07, 0x45, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0x0c, 0x6e},
    {0x01, 0x07, 0x49, 0xf5, 0x7d},
    {0x02, 0x02, 0x43, 0x0c, 0x6e},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0x0c, 0x6e},
    {0x04, 0x07, 0x49, 0xf5, 0x7d},
    {0x02, 0x07, 0x43, 0x0c, 0x6e},
    {0x9f, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2d, 0x43, 0xb5, 0xac},
    {0x01, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x2d, 0x43, 0xb5, 0xac},
    {0x06, 0x61, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x0b, 0x6e},
    {0x04, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0x0b, 0x6e},
    {0x09, 0x5b, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x43, 0x0b, 0x7e},
    {0x01, 0x03, 0x43, 0x4b, 0x7e},
    {0x02, 0x0b, 0x43, 0x0b, 0x7e},
    {0x05, 0x61, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x0b, 0x6e},
    {0x04, 0x03, 0x43, 0x4b, 0x7e},
    {0x02, 0x05, 0x41, 0x0b, 0x6e},
    {0x0a, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x35, 0x43, 0xb5, 0xac},
    {0x01, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x35, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x0b, 0xb5, 0xee},
    {0x03, 0x09, 0x43, 0x0b, 0x7e},
    {0x04, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0x0b, 0x7e},
    {0x07, 0x75, 0xb5, 0x40, 0xdd},
    {0x03, 0x87, 0x43, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x4b, 0x7e},
    {0x02, 0x87, 0x43, 0xb5, 0xee},
    {0x05, 0xc2, 0x0b, 0xb5, 0xee},
    {0x03, 0x06, 0x41, 0x0b, 0x6e},
    {0x04, 0x05, 0x43, 0x4b, 0x7e},
    {0x02, 0x06, 0x41, 0x0b, 0x6e},
    {0x72, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x43, 0xb5, 0xac},
    {0x01, 0x28, 0xf5, 0x40, 0xbb},
    {0x02, 0x23, 0x43, 0xb5, 0xac},
    {0x06, 0x71, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0xc2, 0xb5, 0x0c},
    {0x04, 0x28, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0xc2, 0xb5, 0x0c},
    {0x08, 0x5b, 0xf5, 0x00, 0xdd},
    {0x03, 0x33, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x33, 0x43, 0xb5, 0xac},
    {0x05, 0x71, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x46, 0xb5, 0x8c},
    {0x04, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x46, 0xb5, 0x8c},
    {0x62, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x43, 0xb5, 0xac},
    {0x01, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x43, 0xb5, 0xac},
    {0x06, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x0b, 0x6e},
    {0x04, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x0b, 0x6e},
    {0x07, 0x49, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0x0b, 0x6e},
    {0x01, 0x06, 0x43, 0x4b, 0x7e},
    {0x02, 0x02, 0x41, 0x0b, 0x6e},
    {0x05, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x0b, 0x6e},
    {0x04, 0x06, 0x43, 0x4b, 0x7e},
    {0x02, 0x07, 0x41, 0x0b, 0x6e},
    {0x9a, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x46, 0xb5, 0x8c},
    {0x01, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x0d, 0x46, 0xb5, 0x8c},
    {0x06, 0x7d, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x42, 0x0c, 0x6e},
    {0x04, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0x0c, 0x6e},
    {0x09, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x98, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x98, 0xf5, 0x00, 0x0b},
    {0x05, 0x7d, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x42, 0x0c, 0x6e},
    {0x04, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0x0c, 0x6e},
    {0x0b, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x2b, 0x43, 0xb5, 0xac},
    {0x01, 0x38, 0xf5, 0x40, 0xbb},
    {0x02, 0x2b, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x11, 0x46, 0xb5, 0x8c},
    {0x04, 0x38, 0xf5, 0x40, 0xbb},
    {0x02, 0x11, 0x46, 0xb5, 0x8c},
    {0x07, 0xc7, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x4c, 0xf5, 0xee},
    {0x02, 0x94, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0x0c, 0x6e},
    {0x04, 0x81, 0x4c, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x0c, 0x6e},
    {0x4e, 0x0c, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x46, 0xb5, 0x8c},
    {0x01, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x01, 0x46, 0xb5, 0x8c},
    {0x06, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0x0b, 0x7e},
    {0x04, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0x0b, 0x7e},
    {0x08, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x4c, 0xb5, 0xee},
    {0x01, 0x04, 0x43, 0x4b, 0x7e},
    {0x02, 0x83, 0x4c, 0xb5, 0xee},
    {0x05, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x81, 0xc2, 0xb5, 0x0c},
    {0x04, 0x04, 0x43, 0x4b, 0x7e},
    {0x02, 0x81, 0xc2, 0xb5, 0x0c},
    {0x0c, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x43, 0x0b, 0x7e},
    {0x01, 0x02, 0x43, 0x4b, 0x7e},
    {0x02, 0x0a, 0x43, 0x0b, 0x7e},
    {0x06, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0x0c, 0x6e},
    {0x04, 0x02, 0x43, 0x4b, 0x7e},
    {0x02, 0x04, 0x42, 0x0c, 0x6e},
    {0x07, 0x46, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x0c, 0x6e},
    {0x01, 0x07, 0x43, 0x4b, 0x7e},
    {0x02, 0x02, 0x42, 0x0c, 0x6e},
    {0x05, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0x0c, 0x6e},
    {0x04, 0x07, 0x43, 0x4b, 0x7e},
    {0x02, 0x07, 0x42, 0x0c, 0x6e},
    {0xf4, 0x4b, 0xf5, 0x00, 0x0e},
    {0x03, 0x1d, 0x43, 0xb5, 0xac},
    {0x01, 0x2e, 0xf5, 0x40, 0xbb},
    {0x02, 0x1d, 0x43, 0xb5, 0xac},
    {0x06, 0x6f, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x46, 0x03, 0x6e},
    {0x04, 0x2e, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x46, 0x03, 0x6e},
    {0x09, 0x67, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x03, 0x7e},
    {0x01, 0x03, 0x41, 0x43, 0x7e},
    {0x02, 0x0b, 0x41, 0x03, 0x7e},
    {0x05, 0x6f, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x46, 0x03, 0x6e},
    {0x04, 0x03, 0x41, 0x43, 0x7e},
    {0x02, 0x05, 0x46, 0x03, 0x6e},
    {0x0a, 0x58, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x43, 0x03, 0x8e},
    {0x01, 0x0b, 0x43, 0x43, 0x8e},
    {0x02, 0x0c, 0x43, 0x03, 0x8e},
    {0x06, 0x43, 0x03, 0x03, 0x8e},
    {0x03, 0x09, 0x41, 0x03, 0x7e},
    {0x04, 0x0b, 0x43, 0x43, 0x8e},
    {0x02, 0x09, 0x41, 0x03, 0x7e},
    {0x07, 0x63, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x49, 0xb5, 0xdd},
    {0x01, 0x05, 0x41, 0x43, 0x7e},
    {0x02, 0x9a, 0x49, 0xb5, 0xdd},
    {0x05, 0x43, 0x03, 0x03, 0x8e},
    {0x03, 0x06, 0x46, 0x03, 0x6e},
    {0x04, 0x05, 0x41, 0x43, 0x7e},
    {0x02, 0x06, 0x46, 0x03, 0x6e},
    {0x4d, 0x09, 0xb5, 0x00, 0xdd},
    {0x03, 0x21, 0x43, 0xb5, 0xac},
    {0x01, 0x36, 0xf5, 0x40, 0xbb},
    {0x02, 0x21, 0x43, 0xb5, 0xac},
    {0x06, 0x7b, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x58, 0xb5, 0xee},
    {0x04, 0x36, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x58, 0xb5, 0xee},
    {0x08, 0x67, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x43, 0x8e},
    {0x02, 0x31, 0x43, 0xb5, 0xac},
    {0x05, 0x7b, 0xb5, 0x00, 0xcc},
    {0x03, 0x0e, 0x43, 0x03, 0x8e},
    {0x04, 0x09, 0x43, 0x43, 0x8e},
    {0x02, 0x0e, 0x43, 0x03, 0x8e},
    {0x5a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x43, 0xb5, 0xac},
    {0x01, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x03, 0x8e},
    {0x03, 0x04, 0x46, 0x03, 0x6e},
    {0x04, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0x03, 0x6e},
    {0x07, 0xc2, 0x03, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x03, 0x6e},
    {0x01, 0x06, 0x41, 0x43, 0x7e},
    {0x02, 0x02, 0x46, 0x03, 0x6e},
    {0x05, 0x45, 0x03, 0x03, 0x8e},
    {0x03, 0x07, 0x46, 0x03, 0x6e},
    {0x04, 0x06, 0x41, 0x43, 0x7e},
    {0x02, 0x07, 0x46, 0x03, 0x6e},
    {0x96, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x2f, 0x43, 0xb5, 0xac},
    {0x01, 0x24, 0xf5, 0x40, 0xbb},
    {0x02, 0x2f, 0x43, 0xb5, 0xac},
    {0x06, 0x69, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x09, 0x6d},
    {0x04, 0x24, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x09, 0x6d},
    {0x09, 0x50, 0xf5, 0x00, 0xcc},
    {0x03, 0x3b, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x49, 0xf5, 0xdd},
    {0x02, 0x3b, 0x43, 0xb5, 0xac},
    {0x05, 0x69, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x09, 0x6d},
    {0x04, 0x82, 0x49, 0xf5, 0xdd},
    {0x02, 0x05, 0x43, 0x09, 0x6d},
    {0x0b, 0x58, 0xf5, 0x40, 0xee},
    {0x03, 0x29, 0x43, 0xb5, 0xac},
    {0x01, 0x34, 0xf5, 0x40, 0xbb},
    {0x02, 0x29, 0x43, 0xb5, 0xac},
    {0x06, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x03, 0x8e},
    {0x04, 0x34, 0xf5, 0x40, 0xbb},
    {0x02, 0x10, 0x43, 0x03, 0x8e},
    {0x07, 0x73, 0xb5, 0x40, 0xdd},
    {0x03, 0x90, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x90, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x09, 0x6d},
    {0x04, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x09, 0x6d},
    {0x60, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x43, 0xb5, 0xac},
    {0x01, 0x00, 0xf5, 0x40, 0xbb},
    {0x02, 0x1f, 0x43, 0xb5, 0xac},
    {0x06, 0xcf, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x03, 0x7e},
    {0x04, 0x00, 0xf5, 0x40, 0xbb},
    {0x02, 0x08, 0x41, 0x03, 0x7e},
    {0x08, 0x50, 0xf5, 0x00, 0xcc},
    {0x03, 0x39, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x43, 0x7e},
    {0x02, 0x39, 0x43, 0xb5, 0xac},
    {0x05, 0xcf, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x58, 0xb5, 0xee},
    {0x04, 0x04, 0x41, 0x43, 0x7e},
    {0x02, 0x81, 0x58, 0xb5, 0xee},
    {0x0c, 0x58, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x41, 0x03, 0x7e},
    {0x01, 0x02, 0x41, 0x43, 0x7e},
    {0x02, 0x0a, 0x41, 0x03, 0x7e},
    {0x06, 0x46, 0x03, 0x03, 0x8e},
    {0x03, 0x04, 0x43, 0x09, 0x6d},
    {0x04, 0x02, 0x41, 0x43, 0x7e},
    {0x02, 0x04, 0x43, 0x09, 0x6d},
    {0x07, 0x4f, 0xb5, 0x40, 0xbb},
    {0x03, 0x02, 0x43, 0x09, 0x6d},
    {0x01, 0x07, 0x41, 0x43, 0x7e},
    {0x02, 0x02, 0x43, 0x09, 0x6d},
    {0x05, 0x46, 0x03, 0x03, 0x8e},
    {0x03, 0x07, 0x43, 0x09, 0x6d},
    {0x04, 0x07, 0x41, 0x43, 0x7e},
    {0x02, 0x07, 0x43, 0x09, 0x6d},
    {0x9e, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0x16, 0x41, 0xb5, 0x9c},
    {0x01, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x16, 0x41, 0xb5, 0x9c},
    {0x06, 0x5f, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x44, 0x0b, 0x6e},
    {0x04, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0x0b, 0x6e},
    {0x09, 0xc9, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x42, 0x0b, 0x7e},
    {0x01, 0x03, 0x42, 0x4b, 0x7e},
    {0x02, 0x0b, 0x42, 0x0b, 0x7e},
    {0x05, 0x5f, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x44, 0x0b, 0x6e},
    {0x04, 0x03, 0x42, 0x4b, 0x7e},
    {0x02, 0x05, 0x44, 0x0b, 0x6e},
    {0x0a, 0x4e, 0xf5, 0x40, 0xdd},
    {0x03, 0x1a, 0x41, 0xb5, 0x9c},
    {0x01, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x41, 0xb5, 0x9c},
    {0x06, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0x0b, 0x7e},
    {0x04, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x0b, 0x7e},
    {0x07, 0x7f, 0xb5, 0x40, 0xdd},
    {0x03, 0x8c, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0x4b, 0x7e},
    {0x02, 0x8c, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0x0b, 0x6e},
    {0x04, 0x05, 0x42, 0x4b, 0x7e},
    {0x02, 0x06, 0x44, 0x0b, 0x6e},
    {0x7d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x43, 0xb5, 0xac},
    {0x01, 0x2c, 0xf5, 0x40, 0xbb},
    {0x02, 0x25, 0x43, 0xb5, 0xac},
    {0x06, 0x79, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x4e, 0xb5, 0xdd},
    {0x04, 0x2c, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x4e, 0xb5, 0xdd},
    {0x08, 0xc9, 0xf5, 0x00, 0x0e},
    {0x03, 0x19, 0x41, 0xb5, 0x9c},
    {0x01, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x19, 0x41, 0xb5, 0x9c},
    {0x05, 0x79, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x43, 0x03, 0x8e},
    {0x04, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x03, 0x8e},
    {0x6a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x43, 0xb5, 0xee},
    {0x01, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x43, 0xb5, 0xee},
    {0x06, 0xc1, 0x0b, 0xb5, 0xee},
    {0x03, 0x04, 0x44, 0x0b, 0x6e},
    {0x04, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x0b, 0x6e},
    {0x07, 0x44, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0x0b, 0x6e},
    {0x01, 0x06, 0x42, 0x4b, 0x7e},
    {0x02, 0x02, 0x44, 0x0b, 0x6e},
    {0x05, 0xc1, 0x0b, 0xb5, 0xee},
    {0x03, 0x07, 0x44, 0x0b, 0x6e},
    {0x04, 0x06, 0x42, 0x4b, 0x7e},
    {0x02, 0x07, 0x44, 0x0b, 0x6e},
    {0x90, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0x03, 0x8e},
    {0x01, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x03, 0x8e},
    {0x06, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x09, 0x6d},
    {0x04, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x09, 0x6d},
    {0x09, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x41, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x43, 0x8e},
    {0x02, 0x12, 0x41, 0xb5, 0x9c},
    {0x05, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x09, 0x6d},
    {0x04, 0x08, 0x43, 0x43, 0x8e},
    {0x02, 0x05, 0x42, 0x09, 0x6d},
    {0x0b, 0x4e, 0xf5, 0x40, 0xdd},
    {0x03, 0x15, 0x41, 0xb5, 0x9c},
    {0x01, 0x83, 0x4b, 0xf5, 0xee},
    {0x02, 0x15, 0x41, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x03, 0x8e},
    {0x03, 0x11, 0x43, 0x03, 0x8e},
    {0x04, 0x83, 0x4b, 0xf5, 0xee},
    {0x02, 0x11, 0x43, 0x03, 0x8e},
    {0x07, 0x42, 0x01, 0xf5, 0x9c},
    {0x03, 0x84, 0x4b, 0xb5, 0xee},
    {0x01, 0x81, 0x49, 0xf5, 0xdd},
    {0x02, 0x84, 0x4b, 0xb5, 0xee},
    {0x05, 0x44, 0x03, 0x03, 0x8e},
    {0x03, 0x06, 0x42, 0x09, 0x6d},
    {0x04, 0x81, 0x49, 0xf5, 0xdd},
    {0x02, 0x06, 0x42, 0x09, 0x6d},
    {0x4e, 0x09, 0xb5, 0x00, 0xdd},
    {0x03, 0x01, 0x43, 0x03, 0x8e},
    {0x01, 0x0a, 0x43, 0x43, 0x8e},
    {0x02, 0x01, 0x43, 0x03, 0x8e},
    {0x06, 0x42, 0x03, 0x03, 0x8e},
    {0x03, 0x08, 0x42, 0x0b, 0x7e},
    {0x04, 0x0a, 0x43, 0x43, 0x8e},
    {0x02, 0x08, 0x42, 0x0b, 0x7e},
    {0x08, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x49, 0xb5, 0xdd},
    {0x01, 0x04, 0x42, 0x4b, 0x7e},
    {0x02, 0x83, 0x49, 0xb5, 0xdd},
    {0x05, 0x42, 0x03, 0x03, 0x8e},
    {0x03, 0x81, 0x4e, 0xb5, 0xdd},
    {0x04, 0x04, 0x42, 0x4b, 0x7e},
    {0x02, 0x81, 0x4e, 0xb5, 0xdd},
    {0x0c, 0x4e, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x42, 0x0b, 0x7e},
    {0x01, 0x02, 0x42, 0x4b, 0x7e},
    {0x02, 0x0a, 0x42, 0x0b, 0x7e},
    {0x06, 0x47, 0x03, 0x03, 0x8e},
    {0x03, 0x04, 0x42, 0x09, 0x6d},
    {0x04, 0x02, 0x42, 0x4b, 0x7e},
    {0x02, 0x04, 0x42, 0x09, 0x6d},
    {0x07, 0x47, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x09, 0x6d},
    {0x01, 0x07, 0x42, 0x4b, 0x7e},
    {0x02, 0x02, 0x42, 0x09, 0x6d},
    {0x05, 0x47, 0x03, 0x03, 0x8e},
    {0x03, 0x07, 0x42, 0x09, 0x6d},
    {0x04, 0x07, 0x42, 0x4b, 0x7e},
    {0x02, 0x07, 0x42, 0x09, 0x6d},
    {0xf4, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x9d, 0xf5, 0x00, 0x0d},
    {0x01, 0x1e, 0xf5, 0x40, 0xbb},
    {0x02, 0x9d, 0xf5, 0x00, 0x0d},
    {0x06, 0x56, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x47, 0xb5, 0x6b},
    {0x04, 0x1e, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x47, 0xb5, 0x6b},
    {0x09, 0x53, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x45, 0xb5, 0x7b},
    {0x01, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x0b, 0x45, 0xb5, 0x7b},
    {0x05, 0x56, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x47, 0xb5, 0x6b},
    {0x04, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x05, 0x47, 0xb5, 0x6b},
    {0x0a, 0x5c, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x44, 0xb5, 0x8b},
    {0x01, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x0c, 0x44, 0xb5, 0x8b},
    {0x06, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x09, 0x45, 0xb5, 0x7b},
    {0x04, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x09, 0x45, 0xb5, 0x7b},
    {0x07, 0x4d, 0xb5, 0x40, 0xbb},
    {0x03, 0x9a, 0xda, 0xb5, 0x0e},
    {0x01, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x9a, 0xda, 0xb5, 0x0e},
    {0x05, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x47, 0xb5, 0x6b},
    {0x04, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x06, 0x47, 0xb5, 0x6b},
    {0x4d, 0x9a, 0xb5, 0x00, 0x0e},
    {0x03, 0x14, 0x42, 0xb5, 0x9b},
    {0x01, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x14, 0x42, 0xb5, 0x9b},
    {0x06, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x82, 0x5c, 0xb5, 0xee},
    {0x04, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x82, 0x5c, 0xb5, 0xee},
    {0x08, 0x53, 0xf5, 0x00, 0xdd},
    {0x03, 0x18, 0x42, 0xb5, 0x9b},
    {0x01, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x18, 0x42, 0xb5, 0x9b},
    {0x05, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x0e, 0x44, 0xb5, 0x8b},
    {0x04, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x0e, 0x44, 0xb5, 0x8b},
    {0x4f, 0x05, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x42, 0xb5, 0x9b},
    {0x01, 0x9a, 0x45, 0xf5, 0xdd},
    {0x02, 0x1c, 0x42, 0xb5, 0x9b},
    {0x06, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x47, 0xb5, 0x6b},
    {0x04, 0x9a, 0x45, 0xf5, 0xdd},
    {0x02, 0x04, 0x47, 0xb5, 0x6b},
    {0x07, 0x43, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x47, 0xb5, 0x6b},
    {0x01, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x47, 0xb5, 0x6b},
    {0x05, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x47, 0xb5, 0x6b},
    {0x04, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x47, 0xb5, 0x6b},
    {0x8c, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x17, 0x42, 0xb5, 0x9b},
    {0x01, 0x22, 0xf5, 0x40, 0xbb},
    {0x02, 0x17, 0x42, 0xb5, 0x9b},
    {0x06, 0x5a, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x43, 0x9a, 0x6e},
    {0x04, 0x22, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x9a, 0x6e},
    {0x09, 0x48, 0xf5, 0x00, 0xbb},
    {0x03, 0x1b, 0x42, 0xb5, 0x9b},
    {0x01, 0x82, 0xda, 0xf5, 0x0e},
    {0x02, 0x1b, 0x42, 0xb5, 0x9b},
    {0x05, 0x5a, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x43, 0x9a, 0x6e},
    {0x04, 0x82, 0xda, 0xf5, 0x0e},
    {0x02, 0x05, 0x43, 0x9a, 0x6e},
    {0x0b, 0x5c, 0xf5, 0x40, 0xee},
    {0x03, 0x28, 0x43, 0xb5, 0xac},
    {0x01, 0x32, 0xf5, 0x40, 0xbb},
    {0x02, 0x28, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x10, 0x44, 0xb5, 0x8b},
    {0x04, 0x32, 0xf5, 0x40, 0xbb},
    {0x02, 0x10, 0x44, 0xb5, 0x8b},
    {0x07, 0xd7, 0xb5, 0x40, 0x0e},
    {0x03, 0x8e, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x8e, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0x9a, 0x6e},
    {0x04, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x9a, 0x6e},
    {0x7e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0xb5, 0x9b},
    {0x01, 0x3e, 0xf5, 0x40, 0xbb},
    {0x02, 0x13, 0x42, 0xb5, 0x9b},
    {0x06, 0xcb, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x45, 0xb5, 0x7b},
    {0x04, 0x3e, 0xf5, 0x40, 0xbb},
    {0x02, 0x08, 0x45, 0xb5, 0x7b},
    {0x08, 0x48, 0xf5, 0x00, 0xbb},
    {0x03, 0x38, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x38, 0x43, 0xb5, 0xac},
    {0x05, 0xcb, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x5c, 0xb5, 0xee},
    {0x04, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x81, 0x5c, 0xb5, 0xee},
    {0x0c, 0x5c, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x45, 0xb5, 0x7b},
    {0x01, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x0a, 0x45, 0xb5, 0x7b},
    {0x06, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0x9a, 0x6e},
    {0x04, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0x9a, 0x6e},
    {0x07, 0x45, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0x9a, 0x6e},
    {0x01, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0x9a, 0x6e},
    {0x05, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0x9a, 0x6e},
    {0x04, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0x9a, 0x6e},
    {0xa3, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2e, 0x43, 0xb5, 0xac},
    {0x01, 0x30, 0xf5, 0x40, 0xbb},
    {0x02, 0x2e, 0x43, 0xb5, 0xac},
    {0x06, 0x65, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x05, 0x6d},
    {0x04, 0x30, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x41, 0x05, 0x6d},
    {0x09, 0x77, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x05, 0x7d},
    {0x01, 0x03, 0x43, 0x45, 0x7d},
    {0x02, 0x0b, 0x43, 0x05, 0x7d},
    {0x05, 0x65, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x05, 0x6d},
    {0x04, 0x03, 0x43, 0x45, 0x7d},
    {0x02, 0x05, 0x41, 0x05, 0x6d},
    {0x0a, 0x44, 0xf5, 0x40, 0xbb},
    {0x03, 0x36, 0x43, 0xb5, 0xac},
    {0x01, 0x3c, 0xf5, 0x40, 0xbb},
    {0x02, 0x36, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x05, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x05, 0x7d},
    {0x04, 0x3c, 0xf5, 0x40, 0xbb},
    {0x02, 0x09, 0x43, 0x05, 0x7d},
    {0x07, 0x6b, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0x43, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x45, 0x7d},
    {0x02, 0x88, 0x43, 0xb5, 0xee},
    {0x05, 0xc2, 0x05, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x05, 0x6d},
    {0x04, 0x05, 0x43, 0x45, 0x7d},
    {0x02, 0x06, 0x41, 0x05, 0x6d},
    {0x6e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x43, 0xb5, 0xac},
    {0x01, 0x2a, 0xf5, 0x40, 0xbb},
    {0x02, 0x24, 0x43, 0xb5, 0xac},
    {0x06, 0x59, 0xb5, 0x00, 0xbb},
    {0x03, 0x82, 0x44, 0xb5, 0xbb},
    {0x04, 0x2a, 0xf5, 0x40, 0xbb},
    {0x02, 0x82, 0x44, 0xb5, 0xbb},
    {0x08, 0x77, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x34, 0x43, 0xb5, 0xac},
    {0x05, 0x59, 0xb5, 0x00, 0xbb},
    {0x03, 0x0f, 0x44, 0xb5, 0x8b},
    {0x04, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x44, 0xb5, 0x8b},
    {0x66, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x43, 0xb5, 0xac},
    {0x01, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x43, 0xb5, 0xac},
    {0x06, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x05, 0x6d},
    {0x04, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x05, 0x6d},
    {0x07, 0x51, 0xb5, 0x40, 0xbb},
    {0x03, 0x02, 0x41, 0x05, 0x6d},
    {0x01, 0x06, 0x43, 0x45, 0x7d},
    {0x02, 0x02, 0x41, 0x05, 0x6d},
    {0x05, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x05, 0x6d},
    {0x04, 0x06, 0x43, 0x45, 0x7d},
    {0x02, 0x07, 0x41, 0x05, 0x6d},
    {0x88, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x44, 0xb5, 0x8b},
    {0x01, 0x20, 0xf5, 0x40, 0xbb},
    {0x02, 0x0d, 0x44, 0xb5, 0x8b},
    {0x06, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x9a, 0x6e},
    {0x04, 0x20, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x42, 0x9a, 0x6e},
    {0x09, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x9b, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x9b, 0xf5, 0x00, 0x0b},
    {0x05, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x9a, 0x6e},
    {0x04, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0x9a, 0x6e},
    {0x0b, 0x44, 0xf5, 0x40, 0xbb},
    {0x03, 0x2c, 0x43, 0xb5, 0xac},
    {0x01, 0x3a, 0xf5, 0x40, 0xbb},
    {0x02, 0x2c, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x11, 0x44, 0xb5, 0x8b},
    {0x04, 0x3a, 0xf5, 0x40, 0xbb},
    {0x02, 0x11, 0x44, 0xb5, 0x8b},
    {0x07, 0xd3, 0xb5, 0x40, 0x0e},
    {0x03, 0x96, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xda, 0xf5, 0x0e},
    {0x02, 0x96, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0x9a, 0x6e},
    {0x04, 0x81, 0xda, 0xf5, 0x0e},
    {0x02, 0x06, 0x42, 0x9a, 0x6e},
    {0x4e, 0x9a, 0xb5, 0x00, 0x0e},
    {0x03, 0x01, 0x44, 0xb5, 0x8b},
    {0x01, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x01, 0x44, 0xb5, 0x8b},
    {0x06, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x05, 0x7d},
    {0x04, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x05, 0x7d},
    {0x08, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x83, 0xda, 0xb5, 0x0e},
    {0x01, 0x04, 0x43, 0x45, 0x7d},
    {0x02, 0x83, 0xda, 0xb5, 0x0e},
    {0x05, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x81, 0x44, 0xb5, 0xbb},
    {0x04, 0x04, 0x43, 0x45, 0x7d},
    {0x02, 0x81, 0x44, 0xb5, 0xbb},
    {0x0c, 0x44, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x43, 0x05, 0x7d},
    {0x01, 0x02, 0x43, 0x45, 0x7d},
    {0x02, 0x0a, 0x43, 0x05, 0x7d},
    {0x06, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0x9a, 0x6e},
    {0x04, 0x02, 0x43, 0x45, 0x7d},
    {0x02, 0x04, 0x42, 0x9a, 0x6e},
    {0x07, 0x46, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x9a, 0x6e},
    {0x01, 0x07, 0x43, 0x45, 0x7d},
    {0x02, 0x02, 0x42, 0x9a, 0x6e},
    {0x05, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0x9a, 0x6e},
    {0x04, 0x07, 0x43, 0x45, 0x7d},
    {0x02, 0x07, 0x42, 0x9a, 0x6e},
    {0xf4, 0x45, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0x43, 0xb5, 0xac},
    {0x01, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x1e, 0x43, 0xb5, 0xac},
    {0x06, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x03, 0x6e},
    {0x04, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x03, 0x6e},
    {0x09, 0x4a, 0xf5, 0x00, 0xbb},
    {0x03, 0x0b, 0x44, 0x03, 0x7e},
    {0x01, 0x03, 0x44, 0x43, 0x7e},
    {0x02, 0x0b, 0x44, 0x03, 0x7e},
    {0x05, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x03, 0x6e},
    {0x04, 0x03, 0x44, 0x43, 0x7e},
    {0x02, 0x05, 0x45, 0x03, 0x6e},
    {0x0a, 0x42, 0xf5, 0x40, 0xbb},
    {0x03, 0x0c, 0x42, 0x03, 0x8e},
    {0x01, 0x0b, 0x42, 0x43, 0x8e},
    {0x02, 0x0c, 0x42, 0x03, 0x8e},
    {0x06, 0x43, 0x02, 0x03, 0x8e},
    {0x03, 0x09, 0x44, 0x03, 0x7e},
    {0x04, 0x0b, 0x42, 0x43, 0x8e},
    {0x02, 0x09, 0x44, 0x03, 0x7e},
    {0x07, 0x41, 0xb5, 0x40, 0xbb},
    {0x03, 0x9a, 0x46, 0xb5, 0xcc},
    {0x01, 0x05, 0x44, 0x43, 0x7e},
    {0x02, 0x9a, 0x46, 0xb5, 0xcc},
    {0x05, 0x43, 0x02, 0x03, 0x8e},
    {0x03, 0x06, 0x45, 0x03, 0x6e},
    {0x04, 0x05, 0x44, 0x43, 0x7e},
    {0x02, 0x06, 0x45, 0x03, 0x6e},
    {0x4d, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x22, 0x43, 0xb5, 0xac},
    {0x01, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x22, 0x43, 0xb5, 0xac},
    {0x06, 0x52, 0xb5, 0x00, 0xbb},
    {0x03, 0x82, 0x42, 0xb5, 0xbb},
    {0x04, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0xb5, 0xbb},
    {0x08, 0x4a, 0xf5, 0x00, 0xbb},
    {0x03, 0x32, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x43, 0x8e},
    {0x02, 0x32, 0x43, 0xb5, 0xac},
    {0x05, 0x52, 0xb5, 0x00, 0xbb},
    {0x03, 0x0e, 0x42, 0x03, 0x8e},
    {0x04, 0x09, 0x42, 0x43, 0x8e},
    {0x02, 0x0e, 0x42, 0x03, 0x8e},
    {0x53, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3e, 0x43, 0xb5, 0xac},
    {0x01, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x3e, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x03, 0x8e},
    {0x03, 0x04, 0x45, 0x03, 0x6e},
    {0x04, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x45, 0x03, 0x6e},
    {0x07, 0x48, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x03, 0x6e},
    {0x01, 0x06, 0x44, 0x43, 0x7e},
    {0x02, 0x02, 0x45, 0x03, 0x6e},
    {0x05, 0x45, 0x02, 0x03, 0x8e},
    {0x03, 0x07, 0x45, 0x03, 0x6e},
    {0x04, 0x06, 0x44, 0x43, 0x7e},
    {0x02, 0x07, 0x45, 0x03, 0x6e},
    {0x58, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x30, 0x43, 0xb5, 0xac},
    {0x01, 0x26, 0xf5, 0x40, 0xbb},
    {0x02, 0x30, 0x43, 0xb5, 0xac},
    {0x06, 0x55, 0xb5, 0x00, 0xbb},
    {0x03, 0x03, 0x43, 0x06, 0x6c},
    {0x04, 0x26, 0xf5, 0x40, 0xbb},
    {0x02, 0x03, 0x43, 0x06, 0x6c},
    {0x09, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3c, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x46, 0xf5, 0xcc},
    {0x02, 0x3c, 0x43, 0xb5, 0xac},
    {0x05, 0x55, 0xb5, 0x00, 0xbb},
    {0x03, 0x05, 0x43, 0x06, 0x6c},
    {0x04, 0x82, 0x46, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x06, 0x6c},
    {0x0b, 0x42, 0xf5, 0x40, 0xbb},
    {0x03, 0x2a, 0x43, 0xb5, 0xac},
    {0x01, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x2a, 0x43, 0xb5, 0xac},
    {0x06, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x03, 0x8e},
    {0x04, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x03, 0x8e},
    {0x07, 0xc3, 0xb5, 0x40, 0x0b},
    {0x03, 0x92, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x92, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x06, 0x6c},
    {0x04, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x06, 0x6c},
    {0x56, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x20, 0x43, 0xb5, 0xac},
    {0x01, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x43, 0xb5, 0xac},
    {0x06, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x08, 0x44, 0x03, 0x7e},
    {0x04, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0x03, 0x7e},
    {0x08, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3a, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x43, 0x7e},
    {0x02, 0x3a, 0x43, 0xb5, 0xac},
    {0x05, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x81, 0x42, 0xb5, 0xbb},
    {0x04, 0x04, 0x44, 0x43, 0x7e},
    {0x02, 0x81, 0x42, 0xb5, 0xbb},
    {0x0c, 0x42, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x44, 0x03, 0x7e},
    {0x01, 0x02, 0x44, 0x43, 0x7e},
    {0x02, 0x0a, 0x44, 0x03, 0x7e},
    {0x06, 0x46, 0x02, 0x03, 0x8e},
    {0x03, 0x04, 0x43, 0x06, 0x6c},
    {0x04, 0x02, 0x44, 0x43, 0x7e},
    {0x02, 0x04, 0x43, 0x06, 0x6c},
    {0x07, 0xc1, 0x03, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x06, 0x6c},
    {0x01, 0x07, 0x44, 0x43, 0x7e},
    {0x02, 0x02, 0x43, 0x06, 0x6c},
    {0x05, 0x46, 0x02, 0x03, 0x8e},
    {0x03, 0x07, 0x43, 0x06, 0x6c},
    {0x04, 0x07, 0x44, 0x43, 0x7e},
    {0x02, 0x07, 0x43, 0x06, 0x6c},
    {0xa7, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x16, 0x42, 0xb5, 0x9b},
    {0x01, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x16, 0x42, 0xb5, 0x9b},
    {0x06, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x05, 0x6d},
    {0x04, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x05, 0x6d},
    {0x09, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x05, 0x7d},
    {0x01, 0x03, 0x42, 0x45, 0x7d},
    {0x02, 0x0b, 0x42, 0x05, 0x7d},
    {0x05, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x05, 0x6d},
    {0x04, 0x03, 0x42, 0x45, 0x7d},
    {0x02, 0x05, 0x44, 0x05, 0x6d},
    {0x0a, 0x47, 0xf5, 0x40, 0xbb},
    {0x03, 0x1a, 0x42, 0xb5, 0x9b},
    {0x01, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0xb5, 0x9b},
    {0x06, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x05, 0x7d},
    {0x04, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x05, 0x7d},
    {0x07, 0x4a, 0x03, 0xf5, 0xac},
    {0x03, 0x8a, 0x43, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0x45, 0x7d},
    {0x02, 0x8a, 0x43, 0xb5, 0xee},
    {0x05, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x05, 0x6d},
    {0x04, 0x05, 0x42, 0x45, 0x7d},
    {0x02, 0x06, 0x44, 0x05, 0x6d},
    {0x50, 0x03, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x43, 0xb5, 0xac},
    {0x01, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x26, 0x43, 0xb5, 0xac},
    {0x06, 0xc3, 0x03, 0xb5, 0xee},
    {0x03, 0x82, 0x47, 0xb5, 0xbb},
    {0x04, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0xb5, 0xbb},
    {0x08, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0xb5, 0x9b},
    {0x01, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x19, 0x42, 0xb5, 0x9b},
    {0x05, 0xc3, 0x03, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x03, 0x8e},
    {0x04, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0x03, 0x8e},
    {0x40, 0x03, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x43, 0xb5, 0xee},
    {0x01, 0x84, 0x43, 0xf5, 0xee},
    {0x02, 0x86, 0x43, 0xb5, 0xee},
    {0x06, 0xc1, 0x05, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x05, 0x6d},
    {0x04, 0x84, 0x43, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x05, 0x6d},
    {0x07, 0x44, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x05, 0x6d},
    {0x01, 0x06, 0x42, 0x45, 0x7d},
    {0x02, 0x02, 0x44, 0x05, 0x6d},
    {0x05, 0xc1, 0x05, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x05, 0x6d},
    {0x04, 0x06, 0x42, 0x45, 0x7d},
    {0x02, 0x07, 0x44, 0x05, 0x6d},
    {0xc1, 0x43, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x03, 0x8e},
    {0x01, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0x03, 0x8e},
    {0x06, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x06, 0x6c},
    {0x04, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x06, 0x6c},
    {0x09, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0x43, 0x8e},
    {0x02, 0x12, 0x42, 0xb5, 0x9b},
    {0x05, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x06, 0x6c},
    {0x04, 0x08, 0x42, 0x43, 0x8e},
    {0x02, 0x05, 0x42, 0x06, 0x6c},
    {0x0b, 0x47, 0xf5, 0x40, 0xbb},
    {0x03, 0x15, 0x42, 0xb5, 0x9b},
    {0x01, 0x83, 0x45, 0xf5, 0xdd},
    {0x02, 0x15, 0x42, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0x03, 0x8e},
    {0x03, 0x11, 0x42, 0x03, 0x8e},
    {0x04, 0x83, 0x45, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0x03, 0x8e},
    {0x07, 0x42, 0x02, 0xf5, 0x9b},
    {0x03, 0x84, 0x45, 0xb5, 0xdd},
    {0x01, 0x81, 0x46, 0xf5, 0xcc},
    {0x02, 0x84, 0x45, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0x03, 0x8e},
    {0x03, 0x06, 0x42, 0x06, 0x6c},
    {0x04, 0x81, 0x46, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x06, 0x6c},
    {0x4e, 0x06, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x42, 0x03, 0x8e},
    {0x01, 0x0a, 0x42, 0x43, 0x8e},
    {0x02, 0x01, 0x42, 0x03, 0x8e},
    {0x06, 0x42, 0x02, 0x03, 0x8e},
    {0x03, 0x08, 0x42, 0x05, 0x7d},
    {0x04, 0x0a, 0x42, 0x43, 0x8e},
    {0x02, 0x08, 0x42, 0x05, 0x7d},
    {0x08, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x46, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0x45, 0x7d},
    {0x02, 0x83, 0x46, 0xb5, 0xcc},
    {0x05, 0x42, 0x02, 0x03, 0x8e},
    {0x03, 0x81, 0x47, 0xb5, 0xbb},
    {0x04, 0x04, 0x42, 0x45, 0x7d},
    {0x02, 0x81, 0x47, 0xb5, 0xbb},
    {0x0c, 0x47, 0xf5, 0x40, 0xbb},
    {0x03, 0x0a, 0x42, 0x05, 0x7d},
    {0x01, 0x02, 0x42, 0x45, 0x7d},
    {0x02, 0x0a, 0x42, 0x05, 0x7d},
    {0x06, 0x47, 0x02, 0x03, 0x8e},
    {0x03, 0x04, 0x42, 0x06, 0x6c},
    {0x04, 0x02, 0x42, 0x45, 0x7d},
    {0x02, 0x04, 0x42, 0x06, 0x6c},
    {0x07, 0x47, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x06, 0x6c},
    {0x01, 0x07, 0x42, 0x45, 0x7d},
    {0x02, 0x02, 0x42, 0x06, 0x6c},
    {0x05, 0x47, 0x02, 0x03, 0x8e},
    {0x03, 0x07, 0x42, 0x06, 0x6c},
    {0x04, 0x07, 0x42, 0x45, 0x7d},
    {0x02, 0x07, 0x42, 0x06, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xb4, 0xf5, 0x00, 0x0c},
    {0x01, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0xb4, 0xf5, 0x00, 0x0c},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0x4d, 0xb5, 0x6e},
    {0x04, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0x03, 0x4d, 0xb5, 0x6e},
    {0x09, 0x6d, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x4a, 0xb5, 0x7e},
    {0x01, 0x03, 0x4a, 0xf5, 0x7e},
    {0x02, 0x0b, 0x4a, 0xb5, 0x7e},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0x4d, 0xb5, 0x6e},
    {0x04, 0x03, 0x4a, 0xf5, 0x7e},
    {0x02, 0x05, 0x4d, 0xb5, 0x6e},
    {0x0a, 0x57, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x49, 0xb5, 0x8e},
    {0x01, 0x0b, 0x49, 0xf5, 0x8e},
    {0x02, 0x0c, 0x49, 0xb5, 0x8e},
    {0x06, 0x43, 0x09, 0xb5, 0x8e},
    {0x03, 0x09, 0x4a, 0xb5, 0x7e},
    {0x04, 0x0b, 0x49, 0xf5, 0x8e},
    {0x02, 0x09, 0x4a, 0xb5, 0x7e},
    {0x07, 0x5d, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x4a, 0xf5, 0x7e},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x09, 0xb5, 0x8e},
    {0x03, 0x06, 0x4d, 0xb5, 0x6e},
    {0x04, 0x05, 0x4a, 0xf5, 0x7e},
    {0x02, 0x06, 0x4d, 0xb5, 0x6e},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x46, 0xb5, 0x9d},
    {0x01, 0x0c, 0x46, 0xf5, 0x9d},
    {0x02, 0x14, 0x46, 0xb5, 0x9d},
    {0x06, 0x4b, 0x06, 0xb5, 0x9d},
    {0x03, 0x82, 0x57, 0xb5, 0xee},
    {0x04, 0x0c, 0x46, 0xf5, 0x9d},
    {0x02, 0x82, 0x57, 0xb5, 0xee},
    {0x08, 0x6d, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x46, 0xb5, 0x9d},
    {0x01, 0x09, 0x49, 0xf5, 0x8e},
    {0x02, 0x18, 0x46, 0xb5, 0x9d},
    {0x05, 0x4b, 0x06, 0xb5, 0x9d},
    {0x03, 0x0e, 0x49, 0xb5, 0x8e},
    {0x04, 0x09, 0x49, 0xf5, 0x8e},
    {0x02, 0x0e, 0x49, 0xb5, 0x8e},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x46, 0xb5, 0x9d},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x46, 0xb5, 0x9d},
    {0x06, 0x45, 0x09, 0xb5, 0x8e},
    {0x03, 0x04, 0x4d, 0xb5, 0x6e},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0x4d, 0xb5, 0x6e},
    {0x07, 0x43, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x4d, 0xb5, 0x6e},
    {0x01, 0x06, 0x4a, 0xf5, 0x7e},
    {0x02, 0x02, 0x4d, 0xb5, 0x6e},
    {0x05, 0x45, 0x09, 0xb5, 0x8e},
    {0x03, 0x07, 0x4d, 0xb5, 0x6e},
    {0x04, 0x06, 0x4a, 0xf5, 0x7e},
    {0x02, 0x07, 0x4d, 0xb5, 0x6e},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0x46, 0xb5, 0x9d},
    {0x01, 0x14, 0x41, 0xf5, 0xad},
    {0x02, 0x17, 0x46, 0xb5, 0x9d},
    {0x06, 0x4c, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0x41, 0xb5, 0xad},
    {0x03, 0x1b, 0x46, 0xb5, 0x9d},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x46, 0xb5, 0x9d},
    {0x05, 0x4c, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x57, 0xf5, 0x40, 0xee},
    {0x03, 0x27, 0x41, 0xb5, 0xad},
    {0x01, 0x18, 0x41, 0xf5, 0xad},
    {0x02, 0x27, 0x41, 0xb5, 0xad},
    {0x06, 0x49, 0x06, 0xb5, 0x9d},
    {0x03, 0x10, 0x49, 0xb5, 0x8e},
    {0x04, 0x18, 0x41, 0xf5, 0xad},
    {0x02, 0x10, 0x49, 0xb5, 0x8e},
    {0x07, 0x4b, 0x01, 0xf5, 0xad},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0x46, 0xf5, 0x9d},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0x06, 0xb5, 0x9d},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x46, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0x46, 0xb5, 0x9d},
    {0x01, 0x1c, 0x41, 0xf5, 0xad},
    {0x02, 0x13, 0x46, 0xb5, 0x9d},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0x4a, 0xb5, 0x7e},
    {0x04, 0x1c, 0x41, 0xf5, 0xad},
    {0x02, 0x08, 0x4a, 0xb5, 0x7e},
    {0x08, 0x43, 0x41, 0xb5, 0xad},
    {0x03, 0x37, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x4a, 0xf5, 0x7e},
    {0x02, 0x37, 0x41, 0xb5, 0xad},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x57, 0xb5, 0xee},
    {0x04, 0x04, 0x4a, 0xf5, 0x7e},
    {0x02, 0x81, 0x57, 0xb5, 0xee},
    {0x0c, 0x57, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x4a, 0xb5, 0x7e},
    {0x01, 0x02, 0x4a, 0xf5, 0x7e},
    {0x02, 0x0a, 0x4a, 0xb5, 0x7e},
    {0x06, 0x46, 0x09, 0xb5, 0x8e},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x4a, 0xf5, 0x7e},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x4a, 0xf5, 0x7e},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x09, 0xb5, 0x8e},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x4a, 0xf5, 0x7e},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xdc, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x2d, 0x41, 0xb5, 0xad},
    {0x01, 0x17, 0x41, 0xf5, 0xad},
    {0x02, 0x2d, 0x41, 0xb5, 0xad},
    {0x06, 0x54, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0x43, 0xb5, 0xbd},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x35, 0x41, 0xb5, 0xad},
    {0x01, 0x1b, 0x41, 0xf5, 0xad},
    {0x02, 0x35, 0x41, 0xb5, 0xad},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x41, 0xf5, 0xad},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0x03, 0xf5, 0xbd},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x23, 0x41, 0xb5, 0xad},
    {0x01, 0x27, 0x43, 0xf5, 0xbd},
    {0x02, 0x23, 0x41, 0xb5, 0xad},
    {0x06, 0x58, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x43, 0x03, 0xbd},
    {0x04, 0x27, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x43, 0x03, 0xbd},
    {0x08, 0x4b, 0x43, 0xb5, 0xbd},
    {0x03, 0x33, 0x41, 0xb5, 0xad},
    {0x01, 0x10, 0x46, 0xf5, 0x9d},
    {0x02, 0x33, 0x41, 0xb5, 0xad},
    {0x05, 0x58, 0x03, 0xb5, 0xbd},
    {0x03, 0x0f, 0x49, 0xb5, 0x8e},
    {0x04, 0x10, 0x46, 0xf5, 0x9d},
    {0x02, 0x0f, 0x49, 0xb5, 0x8e},
    {0x54, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3f, 0x41, 0xb5, 0xad},
    {0x01, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x3f, 0x41, 0xb5, 0xad},
    {0x06, 0x4e, 0x01, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x01, 0xf5, 0xad},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x01, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x0d, 0x49, 0xb5, 0x8e},
    {0x01, 0x13, 0x41, 0xf5, 0xad},
    {0x02, 0x0d, 0x49, 0xb5, 0x8e},
    {0x06, 0x5c, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0x41, 0xb5, 0xad},
    {0x03, 0x97, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x49, 0xf5, 0x8e},
    {0x02, 0x97, 0xf5, 0x00, 0x0b},
    {0x05, 0x5c, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x49, 0xf5, 0x8e},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x2b, 0x41, 0xb5, 0xad},
    {0x01, 0x37, 0x43, 0xf5, 0xbd},
    {0x02, 0x2b, 0x41, 0xb5, 0xad},
    {0x06, 0x44, 0x09, 0xb5, 0x8e},
    {0x03, 0x11, 0x49, 0xb5, 0x8e},
    {0x04, 0x37, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x49, 0xb5, 0x8e},
    {0x07, 0xda, 0xb5, 0x40, 0x0b},
    {0x03, 0x93, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x93, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x09, 0xb5, 0x8e},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x49, 0xb5, 0x8e},
    {0x01, 0x0a, 0x49, 0xf5, 0x8e},
    {0x02, 0x01, 0x49, 0xb5, 0x8e},
    {0x06, 0x42, 0x09, 0xb5, 0x8e},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x49, 0xf5, 0x8e},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x09, 0xb5, 0x8e},
    {0x03, 0x81, 0x43, 0x03, 0xbd},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0x03, 0xbd},
    {0x0c, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x09, 0xb5, 0x8e},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x09, 0xb5, 0x8e},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x41, 0xb5, 0xad},
    {0x01, 0x2d, 0x43, 0xf5, 0xbd},
    {0x02, 0x1d, 0x41, 0xb5, 0xad},
    {0x06, 0x57, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x75, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x5b, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x61, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xc2, 0xb5, 0x0d},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0xc2, 0xb5, 0x0d},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x82, 0xb5, 0x00, 0x0d},
    {0x03, 0x21, 0x41, 0xb5, 0xad},
    {0x01, 0x35, 0x43, 0xf5, 0xbd},
    {0x02, 0x21, 0x41, 0xb5, 0xad},
    {0x06, 0x5b, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x5b, 0xb5, 0xee},
    {0x04, 0x35, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x5b, 0xb5, 0xee},
    {0x08, 0x75, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x41, 0xb5, 0xad},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0x41, 0xb5, 0xad},
    {0x05, 0x5b, 0x03, 0xb5, 0xbd},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0x83, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x41, 0xb5, 0xad},
    {0x01, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x41, 0xb5, 0xad},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x94, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x2f, 0x41, 0xb5, 0xad},
    {0x01, 0x23, 0x43, 0xf5, 0xbd},
    {0x02, 0x2f, 0x41, 0xb5, 0xad},
    {0x06, 0x68, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x82, 0x6d},
    {0x04, 0x23, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x82, 0x6d},
    {0x09, 0x49, 0x43, 0xb5, 0xbd},
    {0x03, 0x3b, 0x41, 0xb5, 0xad},
    {0x01, 0x82, 0xc2, 0xf5, 0x0d},
    {0x02, 0x3b, 0x41, 0xb5, 0xad},
    {0x05, 0x68, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x82, 0x6d},
    {0x04, 0x82, 0xc2, 0xf5, 0x0d},
    {0x02, 0x05, 0x43, 0x82, 0x6d},
    {0x0b, 0x5b, 0xf5, 0x40, 0xee},
    {0x03, 0x29, 0x41, 0xb5, 0xad},
    {0x01, 0x33, 0x43, 0xf5, 0xbd},
    {0x02, 0x29, 0x41, 0xb5, 0xad},
    {0x06, 0x50, 0x01, 0xb5, 0xad},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x71, 0xb5, 0x40, 0xdd},
    {0x03, 0x8f, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x46, 0xf5, 0x9d},
    {0x02, 0x8f, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x01, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x82, 0x6d},
    {0x04, 0x0f, 0x46, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x82, 0x6d},
    {0x5f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x41, 0xb5, 0xad},
    {0x01, 0x3f, 0x43, 0xf5, 0xbd},
    {0x02, 0x1f, 0x41, 0xb5, 0xad},
    {0x06, 0xcd, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0x43, 0xb5, 0xbd},
    {0x03, 0x39, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0x41, 0xb5, 0xad},
    {0x05, 0xcd, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x5b, 0xb5, 0xee},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x5b, 0xb5, 0xee},
    {0x0c, 0x5b, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x82, 0x6d},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x82, 0x6d},
    {0x07, 0x4e, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x82, 0x6d},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x82, 0x6d},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x82, 0x6d},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x82, 0x6d},
    {0xdd, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x46, 0xb5, 0x9d},
    {0x01, 0x0d, 0x46, 0xf5, 0x9d},
    {0x02, 0x16, 0x46, 0xb5, 0x9d},
    {0x06, 0x53, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x46, 0xf5, 0x9d},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xc7, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x46, 0xb5, 0x9d},
    {0x01, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x46, 0xb5, 0x9d},
    {0x06, 0x48, 0x06, 0xb5, 0x9d},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x7d, 0xb5, 0x40, 0xdd},
    {0x03, 0x8b, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x06, 0xb5, 0x9d},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x7a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x41, 0xb5, 0xad},
    {0x01, 0x2b, 0x43, 0xf5, 0xbd},
    {0x02, 0x25, 0x41, 0xb5, 0xad},
    {0x06, 0x78, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x45, 0x03, 0xbd},
    {0x04, 0x2b, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x45, 0x03, 0xbd},
    {0x08, 0xc7, 0xf5, 0x00, 0x0e},
    {0x03, 0x19, 0x46, 0xb5, 0x9d},
    {0x01, 0x11, 0x46, 0xf5, 0x9d},
    {0x02, 0x19, 0x46, 0xb5, 0x9d},
    {0x05, 0x78, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0x46, 0xf5, 0x9d},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x8e, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0x46, 0xf5, 0x9d},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0x06, 0xb5, 0x9d},
    {0x03, 0x03, 0x42, 0x82, 0x6d},
    {0x04, 0x01, 0x46, 0xf5, 0x9d},
    {0x02, 0x03, 0x42, 0x82, 0x6d},
    {0x09, 0x46, 0x41, 0xb5, 0xad},
    {0x03, 0x12, 0x46, 0xb5, 0x9d},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0x46, 0xb5, 0x9d},
    {0x05, 0x4a, 0x06, 0xb5, 0x9d},
    {0x03, 0x05, 0x42, 0x82, 0x6d},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x82, 0x6d},
    {0x0b, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x46, 0xb5, 0x9d},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x46, 0xb5, 0x9d},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0x06, 0xf5, 0x9d},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0xc2, 0xf5, 0x0d},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x82, 0x6d},
    {0x04, 0x81, 0xc2, 0xf5, 0x0d},
    {0x02, 0x06, 0x42, 0x82, 0x6d},
    {0x4e, 0x82, 0xb5, 0x00, 0x0d},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0xc2, 0xb5, 0x0d},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0xc2, 0xb5, 0x0d},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0x03, 0xbd},
    {0x0c, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x82, 0x6d},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x82, 0x6d},
    {0x07, 0x47, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x82, 0x6d},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x82, 0x6d},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x82, 0x6d},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x82, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xa1, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x43, 0xf5, 0xbd},
    {0x02, 0xa1, 0xf5, 0x00, 0x0e},
    {0x06, 0x6e, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x48, 0xb5, 0x6c},
    {0x04, 0x1d, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x48, 0xb5, 0x6c},
    {0x09, 0x63, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0xb5, 0x7b},
    {0x01, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x0b, 0x46, 0xb5, 0x7b},
    {0x05, 0x6e, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x48, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x05, 0x48, 0xb5, 0x6c},
    {0x0a, 0x68, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x41, 0xb5, 0x8b},
    {0x01, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x0c, 0x41, 0xb5, 0x8b},
    {0x06, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x09, 0x46, 0xb5, 0x7b},
    {0x04, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x09, 0x46, 0xb5, 0x7b},
    {0x07, 0x6f, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x48, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x06, 0x48, 0xb5, 0x6c},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x43, 0xb5, 0x9b},
    {0x01, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x14, 0x43, 0xb5, 0x9b},
    {0x06, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x82, 0x68, 0xb5, 0xff},
    {0x04, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x82, 0x68, 0xb5, 0xff},
    {0x08, 0x63, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0xb5, 0x9b},
    {0x01, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x18, 0x43, 0xb5, 0x9b},
    {0x05, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x0e, 0x41, 0xb5, 0x8b},
    {0x04, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x0e, 0x41, 0xb5, 0x8b},
    {0x4f, 0x09, 0xb5, 0x40, 0xee},
    {0x03, 0x1c, 0x43, 0xb5, 0x9b},
    {0x01, 0x9a, 0x49, 0xf5, 0xee},
    {0x02, 0x1c, 0x43, 0xb5, 0x9b},
    {0x06, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x48, 0xb5, 0x6c},
    {0x04, 0x9a, 0x49, 0xf5, 0xee},
    {0x02, 0x04, 0x48, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x48, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x48, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x48, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x48, 0xb5, 0x6c},
    {0x8a, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x17, 0x43, 0xb5, 0x9b},
    {0x01, 0x21, 0x43, 0xf5, 0xbd},
    {0x02, 0x17, 0x43, 0xb5, 0x9b},
    {0x06, 0x76, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x21, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x1b, 0x43, 0xb5, 0x9b},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x43, 0xb5, 0x9b},
    {0x05, 0x76, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x68, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x41, 0xb5, 0xad},
    {0x01, 0x31, 0x43, 0xf5, 0xbd},
    {0x02, 0x28, 0x41, 0xb5, 0xad},
    {0x06, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x10, 0x41, 0xb5, 0x8b},
    {0x04, 0x31, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x41, 0xb5, 0x8b},
    {0x07, 0x7b, 0xb5, 0x40, 0xdd},
    {0x03, 0x8d, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x8d, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x71, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0xb5, 0x9b},
    {0x01, 0x3d, 0x43, 0xf5, 0xbd},
    {0x02, 0x13, 0x43, 0xb5, 0x9b},
    {0x06, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0xb5, 0x7b},
    {0x04, 0x3d, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x46, 0xb5, 0x7b},
    {0x08, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x38, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x38, 0x41, 0xb5, 0xad},
    {0x05, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x68, 0xb5, 0xff},
    {0x04, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x81, 0x68, 0xb5, 0xff},
    {0x0c, 0x68, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x46, 0xb5, 0x7b},
    {0x01, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x0a, 0x46, 0xb5, 0x7b},
    {0x06, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xa2, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2e, 0x41, 0xb5, 0xad},
    {0x01, 0x2f, 0x43, 0xf5, 0xbd},
    {0x02, 0x2e, 0x41, 0xb5, 0xad},
    {0x06, 0x64, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x09, 0x6e},
    {0x04, 0x2f, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x09, 0x6e},
    {0x09, 0x73, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x09, 0x7e},
    {0x01, 0x03, 0x43, 0x49, 0x7e},
    {0x02, 0x0b, 0x43, 0x09, 0x7e},
    {0x05, 0x64, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x09, 0x6e},
    {0x04, 0x03, 0x43, 0x49, 0x7e},
    {0x02, 0x05, 0x41, 0x09, 0x6e},
    {0x0a, 0x50, 0xf5, 0x40, 0xdd},
    {0x03, 0x36, 0x41, 0xb5, 0xad},
    {0x01, 0x3b, 0x43, 0xf5, 0xbd},
    {0x02, 0x36, 0x41, 0xb5, 0xad},
    {0x06, 0xc2, 0x09, 0xb5, 0xee},
    {0x03, 0x09, 0x43, 0x09, 0x7e},
    {0x04, 0x3b, 0x43, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x09, 0x7e},
    {0x07, 0x69, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x49, 0x7e},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x09, 0xb5, 0xee},
    {0x03, 0x06, 0x41, 0x09, 0x6e},
    {0x04, 0x05, 0x43, 0x49, 0x7e},
    {0x02, 0x06, 0x41, 0x09, 0x6e},
    {0x6d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x41, 0xb5, 0xad},
    {0x01, 0x29, 0x43, 0xf5, 0xbd},
    {0x02, 0x24, 0x41, 0xb5, 0xad},
    {0x06, 0x74, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x50, 0xb5, 0xdd},
    {0x04, 0x29, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x50, 0xb5, 0xdd},
    {0x08, 0x73, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x41, 0xb5, 0xad},
    {0x01, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x34, 0x41, 0xb5, 0xad},
    {0x05, 0x74, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x41, 0xb5, 0x8b},
    {0x04, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x41, 0xb5, 0x8b},
    {0x65, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x41, 0xb5, 0xad},
    {0x01, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x41, 0xb5, 0xad},
    {0x06, 0x4f, 0x01, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x09, 0x6e},
    {0x04, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x09, 0x6e},
    {0x07, 0x50, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x09, 0x6e},
    {0x01, 0x06, 0x43, 0x49, 0x7e},
    {0x02, 0x02, 0x41, 0x09, 0x6e},
    {0x05, 0x4f, 0x01, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x09, 0x6e},
    {0x04, 0x06, 0x43, 0x49, 0x7e},
    {0x02, 0x07, 0x41, 0x09, 0x6e},
    {0x87, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x41, 0xb5, 0x8b},
    {0x01, 0x1f, 0x43, 0xf5, 0xbd},
    {0x02, 0x0d, 0x41, 0xb5, 0x8b},
    {0x06, 0x40, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x1f, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x4f, 0xf5, 0x00, 0xcc},
    {0x03, 0x99, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x99, 0xf5, 0x00, 0x0b},
    {0x05, 0x40, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x50, 0xf5, 0x40, 0xdd},
    {0x03, 0x2c, 0x41, 0xb5, 0xad},
    {0x01, 0x39, 0x43, 0xf5, 0xbd},
    {0x02, 0x2c, 0x41, 0xb5, 0xad},
    {0x06, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x11, 0x41, 0xb5, 0x8b},
    {0x04, 0x39, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x41, 0xb5, 0x8b},
    {0x07, 0xcf, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x95, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x41, 0xb5, 0x8b},
    {0x01, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x01, 0x41, 0xb5, 0x8b},
    {0x06, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x09, 0x7e},
    {0x04, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x09, 0x7e},
    {0x08, 0x4f, 0xf5, 0x00, 0xcc},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0x49, 0x7e},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x81, 0x50, 0xb5, 0xdd},
    {0x04, 0x04, 0x43, 0x49, 0x7e},
    {0x02, 0x81, 0x50, 0xb5, 0xdd},
    {0x0c, 0x50, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x43, 0x09, 0x7e},
    {0x01, 0x02, 0x43, 0x49, 0x7e},
    {0x02, 0x0a, 0x43, 0x09, 0x7e},
    {0x06, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0x49, 0x7e},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0x49, 0x7e},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0x49, 0x7e},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xf4, 0x49, 0xf5, 0x00, 0x0e},
    {0x03, 0x1e, 0x41, 0xb5, 0xad},
    {0x01, 0x16, 0x41, 0xf5, 0xad},
    {0x02, 0x1e, 0x41, 0xb5, 0xad},
    {0x06, 0x4d, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x7f, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x5f, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x4e, 0xb5, 0xee},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x4e, 0xb5, 0xee},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x0e, 0xb5, 0x00, 0xee},
    {0x03, 0x22, 0x41, 0xb5, 0xad},
    {0x01, 0x1a, 0x41, 0xf5, 0xad},
    {0x02, 0x22, 0x41, 0xb5, 0xad},
    {0x06, 0xd9, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xf5, 0x00, 0x07},
    {0x04, 0x1a, 0x41, 0xf5, 0xad},
    {0x02, 0x82, 0xf5, 0x00, 0x07},
    {0x08, 0x7f, 0xf5, 0x00, 0xee},
    {0x03, 0x32, 0x41, 0xb5, 0xad},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0x41, 0xb5, 0xad},
    {0x05, 0xd9, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x41, 0xb5, 0xad},
    {0x01, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x41, 0xb5, 0xad},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0x01, 0xf5, 0xad},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x98, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x30, 0x41, 0xb5, 0xad},
    {0x01, 0x25, 0x43, 0xf5, 0xbd},
    {0x02, 0x30, 0x41, 0xb5, 0xad},
    {0x06, 0x6c, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x0e, 0x6e},
    {0x04, 0x25, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x0e, 0x6e},
    {0x09, 0x44, 0x41, 0xb5, 0xad},
    {0x03, 0x3c, 0x41, 0xb5, 0xad},
    {0x01, 0x82, 0x4e, 0xf5, 0xee},
    {0x02, 0x3c, 0x41, 0xb5, 0xad},
    {0x05, 0x6c, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x0e, 0x6e},
    {0x04, 0x82, 0x4e, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x0e, 0x6e},
    {0x0b, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x2a, 0x41, 0xb5, 0xad},
    {0x01, 0x19, 0x41, 0xf5, 0xad},
    {0x02, 0x2a, 0x41, 0xb5, 0xad},
    {0x06, 0x51, 0x01, 0xb5, 0xad},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0x41, 0xf5, 0xad},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x79, 0xb5, 0x40, 0xdd},
    {0x03, 0x91, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x91, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x01, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x0e, 0x6e},
    {0x04, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x0e, 0x6e},
    {0x69, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x41, 0xb5, 0xad},
    {0x01, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x41, 0xb5, 0xad},
    {0x06, 0xd5, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0x41, 0xb5, 0xad},
    {0x03, 0x3a, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0x41, 0xb5, 0xad},
    {0x05, 0xd5, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xf5, 0x00, 0x07},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xf5, 0x00, 0x07},
    {0x0c, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x0e, 0x6e},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x0e, 0x6e},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x0e, 0x6e},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x0e, 0x6e},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x0e, 0x6e},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x0e, 0x6e},
    {0xa6, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x16, 0x43, 0xb5, 0x9b},
    {0x01, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x16, 0x43, 0xb5, 0x9b},
    {0x06, 0x41, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x44, 0x09, 0x6e},
    {0x04, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x09, 0x6e},
    {0x09, 0x42, 0x41, 0xb5, 0xad},
    {0x03, 0x0b, 0x42, 0x09, 0x7e},
    {0x01, 0x03, 0x42, 0x49, 0x7e},
    {0x02, 0x0b, 0x42, 0x09, 0x7e},
    {0x05, 0x41, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x44, 0x09, 0x6e},
    {0x04, 0x03, 0x42, 0x49, 0x7e},
    {0x02, 0x05, 0x44, 0x09, 0x6e},
    {0x0a, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x43, 0xb5, 0x9b},
    {0x01, 0x12, 0x41, 0xf5, 0xad},
    {0x02, 0x1a, 0x43, 0xb5, 0x9b},
    {0x06, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x09, 0x7e},
    {0x04, 0x12, 0x41, 0xf5, 0xad},
    {0x02, 0x09, 0x42, 0x09, 0x7e},
    {0x07, 0x4a, 0x01, 0xf5, 0xad},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x49, 0x7e},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x09, 0x6e},
    {0x04, 0x05, 0x42, 0x49, 0x7e},
    {0x02, 0x06, 0x44, 0x09, 0x6e},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0x41, 0xb5, 0xad},
    {0x01, 0x15, 0x41, 0xf5, 0xad},
    {0x02, 0x26, 0x41, 0xb5, 0xad},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0x03, 0xbd},
    {0x04, 0x15, 0x41, 0xf5, 0xad},
    {0x02, 0x82, 0x46, 0x03, 0xbd},
    {0x08, 0x42, 0x41, 0xb5, 0xad},
    {0x03, 0x19, 0x43, 0xb5, 0x9b},
    {0x01, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x19, 0x43, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x09, 0xb5, 0xee},
    {0x03, 0x04, 0x44, 0x09, 0x6e},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x09, 0x6e},
    {0x07, 0x44, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x09, 0x6e},
    {0x01, 0x06, 0x42, 0x49, 0x7e},
    {0x02, 0x02, 0x44, 0x09, 0x6e},
    {0x05, 0xc1, 0x09, 0xb5, 0xee},
    {0x03, 0x07, 0x44, 0x09, 0x6e},
    {0x04, 0x06, 0x42, 0x49, 0x7e},
    {0x02, 0x07, 0x44, 0x09, 0x6e},
    {0xc1, 0x41, 0xb5, 0x40, 0x0d},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x0e, 0x6e},
    {0x04, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x0e, 0x6e},
    {0x09, 0x47, 0x41, 0xb5, 0xad},
    {0x03, 0x12, 0x43, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0xb5, 0x9b},
    {0x05, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x0e, 0x6e},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x0e, 0x6e},
    {0x0b, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x43, 0xb5, 0x9b},
    {0x01, 0x83, 0x49, 0xf5, 0xee},
    {0x02, 0x15, 0x43, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x49, 0xf5, 0xee},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0xf5, 0x9b},
    {0x03, 0x84, 0x49, 0xb5, 0xee},
    {0x01, 0x81, 0x4e, 0xf5, 0xee},
    {0x02, 0x84, 0x49, 0xb5, 0xee},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x0e, 0x6e},
    {0x04, 0x81, 0x4e, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x0e, 0x6e},
    {0x4e, 0x0e, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x09, 0x7e},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x09, 0x7e},
    {0x08, 0x47, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0x4e, 0xb5, 0xee},
    {0x01, 0x04, 0x42, 0x49, 0x7e},
    {0x02, 0x83, 0x4e, 0xb5, 0xee},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0x49, 0x7e},
    {0x02, 0x81, 0x46, 0x03, 0xbd},
    {0x0c, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x09, 0x7e},
    {0x01, 0x02, 0x42, 0x49, 0x7e},
    {0x02, 0x0a, 0x42, 0x09, 0x7e},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x0e, 0x6e},
    {0x04, 0x02, 0x42, 0x49, 0x7e},
    {0x02, 0x04, 0x42, 0x0e, 0x6e},
    {0x07, 0x47, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x0e, 0x6e},
    {0x01, 0x07, 0x42, 0x49, 0x7e},
    {0x02, 0x02, 0x42, 0x0e, 0x6e},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x0e, 0x6e},
    {0x04, 0x07, 0x42, 0x49, 0x7e},
    {0x02, 0x07, 0x42, 0x0e, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xb4, 0xf5, 0x00, 0x0b},
    {0x01, 0x9d, 0xf5, 0x40, 0x0e},
    {0x02, 0xb4, 0xf5, 0x00, 0x0b},
    {0x06, 0x5e, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0x9d, 0xf5, 0x40, 0x0e},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0x4d, 0xf5, 0x00, 0xcc},
    {0x03, 0x0b, 0x47, 0xb5, 0x7c},
    {0x01, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x0b, 0x47, 0xb5, 0x7c},
    {0x05, 0x5e, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x53, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x45, 0xb5, 0x8c},
    {0x01, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x0c, 0x45, 0xb5, 0x8c},
    {0x06, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x09, 0x47, 0xb5, 0x7c},
    {0x04, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x09, 0x47, 0xb5, 0x7c},
    {0x07, 0x56, 0xb5, 0x40, 0xcc},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x44, 0xb5, 0x9c},
    {0x01, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x14, 0x44, 0xb5, 0x9c},
    {0x06, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x82, 0x53, 0xb5, 0xee},
    {0x04, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x82, 0x53, 0xb5, 0xee},
    {0x08, 0x4d, 0xf5, 0x00, 0xcc},
    {0x03, 0x18, 0x44, 0xb5, 0x9c},
    {0x01, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x18, 0x44, 0xb5, 0x9c},
    {0x05, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x0e, 0x45, 0xb5, 0x8c},
    {0x04, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x0e, 0x45, 0xb5, 0x8c},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x44, 0xb5, 0x9c},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x44, 0xb5, 0x9c},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0x05, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x44, 0xb5, 0x9c},
    {0x01, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x17, 0x44, 0xb5, 0x9c},
    {0x06, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x1b, 0x44, 0xb5, 0x9c},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x44, 0xb5, 0x9c},
    {0x05, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x53, 0xf5, 0x40, 0xee},
    {0x03, 0x27, 0x42, 0xb5, 0xac},
    {0x01, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x27, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x10, 0x45, 0xb5, 0x8c},
    {0x04, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x45, 0xb5, 0x8c},
    {0x07, 0x4b, 0x02, 0xf5, 0xac},
    {0x03, 0x89, 0x45, 0xb5, 0xee},
    {0x01, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x89, 0x45, 0xb5, 0xee},
    {0x05, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0x05, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x44, 0xb5, 0x9c},
    {0x01, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x13, 0x44, 0xb5, 0x9c},
    {0x06, 0xda, 0x05, 0xb5, 0xee},
    {0x03, 0x08, 0x47, 0xb5, 0x7c},
    {0x04, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x08, 0x47, 0xb5, 0x7c},
    {0x08, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x37, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x37, 0x42, 0xb5, 0xac},
    {0x05, 0xda, 0x05, 0xb5, 0xee},
    {0x03, 0x81, 0x53, 0xb5, 0xee},
    {0x04, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x81, 0x53, 0xb5, 0xee},
    {0x0c, 0x53, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x47, 0xb5, 0x7c},
    {0x01, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x0a, 0x47, 0xb5, 0x7c},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xa0, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2d, 0x42, 0xb5, 0xac},
    {0x01, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x2d, 0x42, 0xb5, 0xac},
    {0x06, 0x62, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0xd8, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x62, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x48, 0xf5, 0x40, 0xcc},
    {0x03, 0x35, 0x42, 0xb5, 0xac},
    {0x01, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x35, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x5a, 0xb5, 0x40, 0xcc},
    {0x03, 0x87, 0x45, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0x45, 0xb5, 0xee},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x73, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x42, 0xb5, 0xac},
    {0x01, 0x28, 0x43, 0xf5, 0xbd},
    {0x02, 0x23, 0x42, 0xb5, 0xac},
    {0x06, 0x72, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x48, 0xb5, 0xcc},
    {0x04, 0x28, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x48, 0xb5, 0xcc},
    {0x08, 0xd8, 0xf5, 0x00, 0x0f},
    {0x03, 0x33, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x33, 0x42, 0xb5, 0xac},
    {0x05, 0x72, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x45, 0xb5, 0x8c},
    {0x04, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x45, 0xb5, 0x8c},
    {0x63, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x42, 0xb5, 0xac},
    {0x01, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x42, 0xb5, 0xac},
    {0x06, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x85, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x45, 0xb5, 0x8c},
    {0x01, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x0d, 0x45, 0xb5, 0x8c},
    {0x06, 0x7e, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x98, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x98, 0xf5, 0x00, 0x0b},
    {0x05, 0x7e, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x48, 0xf5, 0x40, 0xcc},
    {0x03, 0x2b, 0x42, 0xb5, 0xac},
    {0x01, 0x38, 0x43, 0xf5, 0xbd},
    {0x02, 0x2b, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x11, 0x45, 0xb5, 0x8c},
    {0x04, 0x38, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x45, 0xb5, 0x8c},
    {0x07, 0xcb, 0xb5, 0x40, 0x0e},
    {0x03, 0x94, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x94, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x45, 0xb5, 0x8c},
    {0x01, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x01, 0x45, 0xb5, 0x8c},
    {0x06, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x81, 0x48, 0xb5, 0xcc},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x48, 0xb5, 0xcc},
    {0x0c, 0x48, 0xf5, 0x40, 0xcc},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x42, 0xb5, 0xac},
    {0x01, 0x2e, 0x43, 0xf5, 0xbd},
    {0x02, 0x1d, 0x42, 0xb5, 0xac},
    {0x06, 0x70, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x46, 0x05, 0x6e},
    {0x04, 0x2e, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0x05, 0x6e},
    {0x09, 0x6b, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x05, 0x7e},
    {0x01, 0x03, 0x41, 0x45, 0x7e},
    {0x02, 0x0b, 0x41, 0x05, 0x7e},
    {0x05, 0x70, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x46, 0x05, 0x6e},
    {0x04, 0x03, 0x41, 0x45, 0x7e},
    {0x02, 0x05, 0x46, 0x05, 0x6e},
    {0x0a, 0x78, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x43, 0x05, 0x8e},
    {0x01, 0x0b, 0x43, 0x45, 0x8e},
    {0x02, 0x0c, 0x43, 0x05, 0x8e},
    {0x06, 0x43, 0x03, 0x05, 0x8e},
    {0x03, 0x09, 0x41, 0x05, 0x7e},
    {0x04, 0x0b, 0x43, 0x45, 0x8e},
    {0x02, 0x09, 0x41, 0x05, 0x7e},
    {0x07, 0x65, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x44, 0xb5, 0xcc},
    {0x01, 0x05, 0x41, 0x45, 0x7e},
    {0x02, 0x9a, 0x44, 0xb5, 0xcc},
    {0x05, 0x43, 0x03, 0x05, 0x8e},
    {0x03, 0x06, 0x46, 0x05, 0x6e},
    {0x04, 0x05, 0x41, 0x45, 0x7e},
    {0x02, 0x06, 0x46, 0x05, 0x6e},
    {0x4d, 0x04, 0xb5, 0x00, 0xcc},
    {0x03, 0x21, 0x42, 0xb5, 0xac},
    {0x01, 0x36, 0x43, 0xf5, 0xbd},
    {0x02, 0x21, 0x42, 0xb5, 0xac},
    {0x06, 0x7c, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0x78, 0xb5, 0xff},
    {0x04, 0x36, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x78, 0xb5, 0xff},
    {0x08, 0x6b, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x45, 0x8e},
    {0x02, 0x31, 0x42, 0xb5, 0xac},
    {0x05, 0x7c, 0xb5, 0x00, 0xcc},
    {0x03, 0x0e, 0x43, 0x05, 0x8e},
    {0x04, 0x09, 0x43, 0x45, 0x8e},
    {0x02, 0x0e, 0x43, 0x05, 0x8e},
    {0x5b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x42, 0xb5, 0xac},
    {0x01, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x05, 0x8e},
    {0x03, 0x04, 0x46, 0x05, 0x6e},
    {0x04, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0x05, 0x6e},
    {0x07, 0xc2, 0x05, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x05, 0x6e},
    {0x01, 0x06, 0x41, 0x45, 0x7e},
    {0x02, 0x02, 0x46, 0x05, 0x6e},
    {0x05, 0x45, 0x03, 0x05, 0x8e},
    {0x03, 0x07, 0x46, 0x05, 0x6e},
    {0x04, 0x06, 0x41, 0x45, 0x7e},
    {0x02, 0x07, 0x46, 0x05, 0x6e},
    {0x7b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x42, 0xb5, 0xac},
    {0x01, 0x24, 0x43, 0xf5, 0xbd},
    {0x02, 0x2f, 0x42, 0xb5, 0xac},
    {0x06, 0x6a, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x43, 0x04, 0x6c},
    {0x04, 0x24, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x04, 0x6c},
    {0x09, 0x51, 0xf5, 0x00, 0xcc},
    {0x03, 0x3b, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x44, 0xf5, 0xcc},
    {0x02, 0x3b, 0x42, 0xb5, 0xac},
    {0x05, 0x6a, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x43, 0x04, 0x6c},
    {0x04, 0x82, 0x44, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x04, 0x6c},
    {0x0b, 0x78, 0xf5, 0x40, 0xff},
    {0x03, 0x29, 0x42, 0xb5, 0xac},
    {0x01, 0x34, 0x43, 0xf5, 0xbd},
    {0x02, 0x29, 0x42, 0xb5, 0xac},
    {0x06, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x05, 0x8e},
    {0x04, 0x34, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0x05, 0x8e},
    {0x07, 0x59, 0xb5, 0x40, 0xcc},
    {0x03, 0x90, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x90, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x04, 0x6c},
    {0x04, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x04, 0x6c},
    {0x61, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x42, 0xb5, 0xac},
    {0x01, 0x00, 0x43, 0xf5, 0xbd},
    {0x02, 0x1f, 0x42, 0xb5, 0xac},
    {0x06, 0xd1, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x05, 0x7e},
    {0x04, 0x00, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0x05, 0x7e},
    {0x08, 0x51, 0xf5, 0x00, 0xcc},
    {0x03, 0x39, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x45, 0x7e},
    {0x02, 0x39, 0x42, 0xb5, 0xac},
    {0x05, 0xd1, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x78, 0xb5, 0xff},
    {0x04, 0x04, 0x41, 0x45, 0x7e},
    {0x02, 0x81, 0x78, 0xb5, 0xff},
    {0x0c, 0x78, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x41, 0x05, 0x7e},
    {0x01, 0x02, 0x41, 0x45, 0x7e},
    {0x02, 0x0a, 0x41, 0x05, 0x7e},
    {0x06, 0x46, 0x03, 0x05, 0x8e},
    {0x03, 0x04, 0x43, 0x04, 0x6c},
    {0x04, 0x02, 0x41, 0x45, 0x7e},
    {0x02, 0x04, 0x43, 0x04, 0x6c},
    {0x07, 0x4f, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x04, 0x6c},
    {0x01, 0x07, 0x41, 0x45, 0x7e},
    {0x02, 0x02, 0x43, 0x04, 0x6c},
    {0x05, 0x46, 0x03, 0x05, 0x8e},
    {0x03, 0x07, 0x43, 0x04, 0x6c},
    {0x04, 0x07, 0x41, 0x45, 0x7e},
    {0x02, 0x07, 0x43, 0x04, 0x6c},
    {0xde, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x44, 0xb5, 0x9c},
    {0x01, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x16, 0x44, 0xb5, 0x9c},
    {0x06, 0x60, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xd4, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x60, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x1a, 0x44, 0xb5, 0x9c},
    {0x01, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x44, 0xb5, 0x9c},
    {0x06, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0xc5, 0xb5, 0x40, 0x0d},
    {0x03, 0x8c, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8c, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x84, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x42, 0xb5, 0xac},
    {0x01, 0x2c, 0x43, 0xf5, 0xbd},
    {0x02, 0x25, 0x42, 0xb5, 0xac},
    {0x06, 0x7a, 0xb5, 0x00, 0xcc},
    {0x03, 0x82, 0xc1, 0xb5, 0x0c},
    {0x04, 0x2c, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0xc1, 0xb5, 0x0c},
    {0x08, 0xd4, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x44, 0xb5, 0x9c},
    {0x01, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x19, 0x44, 0xb5, 0x9c},
    {0x05, 0x7a, 0xb5, 0x00, 0xcc},
    {0x03, 0x0f, 0x43, 0x05, 0x8e},
    {0x04, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x05, 0x8e},
    {0x6b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x45, 0xb5, 0xee},
    {0x01, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x45, 0xb5, 0xee},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x92, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0x05, 0x8e},
    {0x01, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x05, 0x8e},
    {0x06, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x04, 0x6c},
    {0x04, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x04, 0x6c},
    {0x09, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x44, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x45, 0x8e},
    {0x02, 0x12, 0x44, 0xb5, 0x9c},
    {0x05, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x04, 0x6c},
    {0x04, 0x08, 0x43, 0x45, 0x8e},
    {0x02, 0x05, 0x42, 0x04, 0x6c},
    {0x0b, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x15, 0x44, 0xb5, 0x9c},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x44, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x05, 0x8e},
    {0x03, 0x11, 0x43, 0x05, 0x8e},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0x05, 0x8e},
    {0x07, 0x42, 0x04, 0xf5, 0x9c},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x44, 0xf5, 0xcc},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0x05, 0x8e},
    {0x03, 0x06, 0x42, 0x04, 0x6c},
    {0x04, 0x81, 0x44, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x04, 0x6c},
    {0x4e, 0x04, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x43, 0x05, 0x8e},
    {0x01, 0x0a, 0x43, 0x45, 0x8e},
    {0x02, 0x01, 0x43, 0x05, 0x8e},
    {0x06, 0x42, 0x03, 0x05, 0x8e},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0x45, 0x8e},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x44, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x44, 0xb5, 0xcc},
    {0x05, 0x42, 0x03, 0x05, 0x8e},
    {0x03, 0x81, 0xc1, 0xb5, 0x0c},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0xc1, 0xb5, 0x0c},
    {0x0c, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0x05, 0x8e},
    {0x03, 0x04, 0x42, 0x04, 0x6c},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x04, 0x6c},
    {0x07, 0x47, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x04, 0x6c},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x04, 0x6c},
    {0x05, 0x47, 0x03, 0x05, 0x8e},
    {0x03, 0x07, 0x42, 0x04, 0x6c},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x04, 0x6c},
    {0xf4, 0x45, 0xf5, 0x00, 0x0e},
    {0x03, 0xa5, 0xf5, 0x00, 0x0e},
    {0x01, 0x1e, 0x43, 0xf5, 0xbd},
    {0x02, 0xa5, 0xf5, 0x00, 0x0e},
    {0x06, 0x56, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x47, 0xb5, 0x6b},
    {0x04, 0x1e, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x47, 0xb5, 0x6b},
    {0x09, 0x41, 0xf5, 0x00, 0xcc},
    {0x03, 0x0b, 0x45, 0xb5, 0x7b},
    {0x01, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x0b, 0x45, 0xb5, 0x7b},
    {0x05, 0x56, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x47, 0xb5, 0x6b},
    {0x04, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x05, 0x47, 0xb5, 0x6b},
    {0x0a, 0x4a, 0xf5, 0x40, 0xcc},
    {0x03, 0x0c, 0x44, 0xb5, 0x8b},
    {0x01, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x0c, 0x44, 0xb5, 0x8b},
    {0x06, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x09, 0x45, 0xb5, 0x7b},
    {0x04, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x09, 0x45, 0xb5, 0x7b},
    {0x07, 0x4d, 0x03, 0xf5, 0xbd},
    {0x03, 0x9a, 0x42, 0xb5, 0xcc},
    {0x01, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x9a, 0x42, 0xb5, 0xcc},
    {0x05, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x47, 0xb5, 0x6b},
    {0x04, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x06, 0x47, 0xb5, 0x6b},
    {0x4d, 0x02, 0xb5, 0x00, 0xcc},
    {0x03, 0x14, 0x42, 0xb5, 0x9b},
    {0x01, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x14, 0x42, 0xb5, 0x9b},
    {0x06, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x82, 0x4a, 0xb5, 0xcc},
    {0x04, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x82, 0x4a, 0xb5, 0xcc},
    {0x08, 0x41, 0xf5, 0x00, 0xcc},
    {0x03, 0x18, 0x42, 0xb5, 0x9b},
    {0x01, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x18, 0x42, 0xb5, 0x9b},
    {0x05, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x0e, 0x44, 0xb5, 0x8b},
    {0x04, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x0e, 0x44, 0xb5, 0x8b},
    {0x4f, 0x06, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x42, 0xb5, 0x9b},
    {0x01, 0x9a, 0x46, 0xf5, 0xdd},
    {0x02, 0x1c, 0x42, 0xb5, 0x9b},
    {0x06, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x47, 0xb5, 0x6b},
    {0x04, 0x9a, 0x46, 0xf5, 0xdd},
    {0x02, 0x04, 0x47, 0xb5, 0x6b},
    {0x07, 0x43, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x47, 0xb5, 0x6b},
    {0x01, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x47, 0xb5, 0x6b},
    {0x05, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x47, 0xb5, 0x6b},
    {0x04, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x47, 0xb5, 0x6b},
    {0x77, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x42, 0xb5, 0x9b},
    {0x01, 0x22, 0x43, 0xf5, 0xbd},
    {0x02, 0x17, 0x42, 0xb5, 0x9b},
    {0x06, 0x5a, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x02, 0x6c},
    {0x04, 0x22, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x02, 0x6c},
    {0x09, 0x48, 0x43, 0xb5, 0xbd},
    {0x03, 0x1b, 0x42, 0xb5, 0x9b},
    {0x01, 0x82, 0x42, 0xf5, 0xcc},
    {0x02, 0x1b, 0x42, 0xb5, 0x9b},
    {0x05, 0x5a, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x02, 0x6c},
    {0x04, 0x82, 0x42, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x02, 0x6c},
    {0x0b, 0x4a, 0xf5, 0x40, 0xcc},
    {0x03, 0x28, 0x42, 0xb5, 0xac},
    {0x01, 0x32, 0x43, 0xf5, 0xbd},
    {0x02, 0x28, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x10, 0x44, 0xb5, 0x8b},
    {0x04, 0x32, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x44, 0xb5, 0x8b},
    {0x07, 0x52, 0xb5, 0x40, 0xcc},
    {0x03, 0x8e, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x8e, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0x02, 0x6c},
    {0x04, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x02, 0x6c},
    {0x7f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0xb5, 0x9b},
    {0x01, 0x3e, 0x43, 0xf5, 0xbd},
    {0x02, 0x13, 0x42, 0xb5, 0x9b},
    {0x06, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x45, 0xb5, 0x7b},
    {0x04, 0x3e, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x45, 0xb5, 0x7b},
    {0x08, 0x48, 0x43, 0xb5, 0xbd},
    {0x03, 0x38, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x38, 0x42, 0xb5, 0xac},
    {0x05, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4a, 0xb5, 0xcc},
    {0x04, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x81, 0x4a, 0xb5, 0xcc},
    {0x0c, 0x4a, 0xf5, 0x40, 0xcc},
    {0x03, 0x0a, 0x45, 0xb5, 0x7b},
    {0x01, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x0a, 0x45, 0xb5, 0x7b},
    {0x06, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0x02, 0x6c},
    {0x04, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0x02, 0x6c},
    {0x07, 0x45, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0x02, 0x6c},
    {0x01, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0x02, 0x6c},
    {0x05, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0x02, 0x6c},
    {0x04, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0x02, 0x6c},
    {0xa4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x2e, 0x42, 0xb5, 0xac},
    {0x01, 0x30, 0x43, 0xf5, 0xbd},
    {0x02, 0x2e, 0x42, 0xb5, 0xac},
    {0x06, 0x66, 0xb5, 0x00, 0xcc},
    {0x03, 0x03, 0x41, 0x06, 0x6d},
    {0x04, 0x30, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x06, 0x6d},
    {0x09, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x43, 0x06, 0x7d},
    {0x01, 0x03, 0x43, 0x46, 0x7d},
    {0x02, 0x0b, 0x43, 0x06, 0x7d},
    {0x05, 0x66, 0xb5, 0x00, 0xcc},
    {0x03, 0x05, 0x41, 0x06, 0x6d},
    {0x04, 0x03, 0x43, 0x46, 0x7d},
    {0x02, 0x05, 0x41, 0x06, 0x6d},
    {0x0a, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x36, 0x42, 0xb5, 0xac},
    {0x01, 0x3c, 0x43, 0xf5, 0xbd},
    {0x02, 0x36, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x06, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x06, 0x7d},
    {0x04, 0x3c, 0x43, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x06, 0x7d},
    {0x07, 0x55, 0xb5, 0x40, 0xcc},
    {0x03, 0x88, 0x45, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x46, 0x7d},
    {0x02, 0x88, 0x45, 0xb5, 0xee},
    {0x05, 0xc2, 0x06, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x06, 0x6d},
    {0x04, 0x05, 0x43, 0x46, 0x7d},
    {0x02, 0x06, 0x41, 0x06, 0x6d},
    {0x6f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x42, 0xb5, 0xac},
    {0x01, 0x2a, 0x43, 0xf5, 0xbd},
    {0x02, 0x24, 0x42, 0xb5, 0xac},
    {0x06, 0x59, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x44, 0x03, 0xbd},
    {0x04, 0x2a, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x44, 0x03, 0xbd},
    {0x08, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x34, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x34, 0x42, 0xb5, 0xac},
    {0x05, 0x59, 0x03, 0xb5, 0xbd},
    {0x03, 0x0f, 0x44, 0xb5, 0x8b},
    {0x04, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x44, 0xb5, 0x8b},
    {0x67, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x42, 0xb5, 0xac},
    {0x01, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x42, 0xb5, 0xac},
    {0x06, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x06, 0x6d},
    {0x04, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x06, 0x6d},
    {0x07, 0x51, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x06, 0x6d},
    {0x01, 0x06, 0x43, 0x46, 0x7d},
    {0x02, 0x02, 0x41, 0x06, 0x6d},
    {0x05, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x06, 0x6d},
    {0x04, 0x06, 0x43, 0x46, 0x7d},
    {0x02, 0x07, 0x41, 0x06, 0x6d},
    {0x75, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x44, 0xb5, 0x8b},
    {0x01, 0x20, 0x43, 0xf5, 0xbd},
    {0x02, 0x0d, 0x44, 0xb5, 0x8b},
    {0x06, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x02, 0x6c},
    {0x04, 0x20, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x02, 0x6c},
    {0x09, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x9b, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x9b, 0xf5, 0x00, 0x0b},
    {0x05, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x02, 0x6c},
    {0x04, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0x02, 0x6c},
    {0x0b, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x2c, 0x42, 0xb5, 0xac},
    {0x01, 0x3a, 0x43, 0xf5, 0xbd},
    {0x02, 0x2c, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x11, 0x44, 0xb5, 0x8b},
    {0x04, 0x3a, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x44, 0xb5, 0x8b},
    {0x07, 0xc4, 0xb5, 0x40, 0x0c},
    {0x03, 0x96, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x42, 0xf5, 0xcc},
    {0x02, 0x96, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0x02, 0x6c},
    {0x04, 0x81, 0x42, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x02, 0x6c},
    {0x4e, 0x02, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x44, 0xb5, 0x8b},
    {0x01, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x01, 0x44, 0xb5, 0x8b},
    {0x06, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x06, 0x7d},
    {0x04, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x06, 0x7d},
    {0x08, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x83, 0x42, 0xb5, 0xcc},
    {0x01, 0x04, 0x43, 0x46, 0x7d},
    {0x02, 0x83, 0x42, 0xb5, 0xcc},
    {0x05, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x81, 0x44, 0x03, 0xbd},
    {0x04, 0x04, 0x43, 0x46, 0x7d},
    {0x02, 0x81, 0x44, 0x03, 0xbd},
    {0x0c, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x06, 0x7d},
    {0x01, 0x02, 0x43, 0x46, 0x7d},
    {0x02, 0x0a, 0x43, 0x06, 0x7d},
    {0x06, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0x02, 0x6c},
    {0x04, 0x02, 0x43, 0x46, 0x7d},
    {0x02, 0x04, 0x42, 0x02, 0x6c},
    {0x07, 0x46, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x02, 0x6c},
    {0x01, 0x07, 0x43, 0x46, 0x7d},
    {0x02, 0x02, 0x42, 0x02, 0x6c},
    {0x05, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0x02, 0x6c},
    {0x04, 0x07, 0x43, 0x46, 0x7d},
    {0x02, 0x07, 0x42, 0x02, 0x6c},
    {0xf4, 0x46, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0x42, 0xb5, 0xac},
    {0x01, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x1e, 0x42, 0xb5, 0xac},
    {0x06, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x05, 0x6e},
    {0x04, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x05, 0x6e},
    {0x09, 0x4a, 0x43, 0xb5, 0xbd},
    {0x03, 0x0b, 0x44, 0x05, 0x7e},
    {0x01, 0x03, 0x44, 0x45, 0x7e},
    {0x02, 0x0b, 0x44, 0x05, 0x7e},
    {0x05, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x05, 0x6e},
    {0x04, 0x03, 0x44, 0x45, 0x7e},
    {0x02, 0x05, 0x45, 0x05, 0x6e},
    {0x0a, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x0c, 0x42, 0x05, 0x8e},
    {0x01, 0x0b, 0x42, 0x45, 0x8e},
    {0x02, 0x0c, 0x42, 0x05, 0x8e},
    {0x06, 0x43, 0x02, 0x05, 0x8e},
    {0x03, 0x09, 0x44, 0x05, 0x7e},
    {0x04, 0x0b, 0x42, 0x45, 0x8e},
    {0x02, 0x09, 0x44, 0x05, 0x7e},
    {0x07, 0x41, 0x03, 0xf5, 0xbd},
    {0x03, 0x9a, 0x47, 0xb5, 0xcc},
    {0x01, 0x05, 0x44, 0x45, 0x7e},
    {0x02, 0x9a, 0x47, 0xb5, 0xcc},
    {0x05, 0x43, 0x02, 0x05, 0x8e},
    {0x03, 0x06, 0x45, 0x05, 0x6e},
    {0x04, 0x05, 0x44, 0x45, 0x7e},
    {0x02, 0x06, 0x45, 0x05, 0x6e},
    {0x4d, 0x07, 0xb5, 0x00, 0xcc},
    {0x03, 0x22, 0x42, 0xb5, 0xac},
    {0x01, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x22, 0x42, 0xb5, 0xac},
    {0x06, 0x52, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x42, 0x03, 0xbd},
    {0x04, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x03, 0xbd},
    {0x08, 0x4a, 0x43, 0xb5, 0xbd},
    {0x03, 0x32, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x45, 0x8e},
    {0x02, 0x32, 0x42, 0xb5, 0xac},
    {0x05, 0x52, 0x03, 0xb5, 0xbd},
    {0x03, 0x0e, 0x42, 0x05, 0x8e},
    {0x04, 0x09, 0x42, 0x45, 0x8e},
    {0x02, 0x0e, 0x42, 0x05, 0x8e},
    {0x53, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3e, 0x42, 0xb5, 0xac},
    {0x01, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x3e, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x05, 0x8e},
    {0x03, 0x04, 0x45, 0x05, 0x6e},
    {0x04, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x45, 0x05, 0x6e},
    {0x07, 0x48, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x05, 0x6e},
    {0x01, 0x06, 0x44, 0x45, 0x7e},
    {0x02, 0x02, 0x45, 0x05, 0x6e},
    {0x05, 0x45, 0x02, 0x05, 0x8e},
    {0x03, 0x07, 0x45, 0x05, 0x6e},
    {0x04, 0x06, 0x44, 0x45, 0x7e},
    {0x02, 0x07, 0x45, 0x05, 0x6e},
    {0x58, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x30, 0x42, 0xb5, 0xac},
    {0x01, 0x26, 0x43, 0xf5, 0xbd},
    {0x02, 0x30, 0x42, 0xb5, 0xac},
    {0x06, 0x55, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x07, 0x6c},
    {0x04, 0x26, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x07, 0x6c},
    {0x09, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3c, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x47, 0xf5, 0xcc},
    {0x02, 0x3c, 0x42, 0xb5, 0xac},
    {0x05, 0x55, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x07, 0x6c},
    {0x04, 0x82, 0x47, 0xf5, 0xcc},
    {0x02, 0x05, 0x43, 0x07, 0x6c},
    {0x0b, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x2a, 0x42, 0xb5, 0xac},
    {0x01, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x2a, 0x42, 0xb5, 0xac},
    {0x06, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x05, 0x8e},
    {0x04, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x05, 0x8e},
    {0x07, 0xc3, 0xb5, 0x40, 0x0b},
    {0x03, 0x92, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x92, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x07, 0x6c},
    {0x04, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x07, 0x6c},
    {0x56, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x20, 0x42, 0xb5, 0xac},
    {0x01, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x42, 0xb5, 0xac},
    {0x06, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x08, 0x44, 0x05, 0x7e},
    {0x04, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0x05, 0x7e},
    {0x08, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3a, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x45, 0x7e},
    {0x02, 0x3a, 0x42, 0xb5, 0xac},
    {0x05, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x81, 0x42, 0x03, 0xbd},
    {0x04, 0x04, 0x44, 0x45, 0x7e},
    {0x02, 0x81, 0x42, 0x03, 0xbd},
    {0x0c, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x44, 0x05, 0x7e},
    {0x01, 0x02, 0x44, 0x45, 0x7e},
    {0x02, 0x0a, 0x44, 0x05, 0x7e},
    {0x06, 0x46, 0x02, 0x05, 0x8e},
    {0x03, 0x04, 0x43, 0x07, 0x6c},
    {0x04, 0x02, 0x44, 0x45, 0x7e},
    {0x02, 0x04, 0x43, 0x07, 0x6c},
    {0x07, 0xc1, 0x05, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x07, 0x6c},
    {0x01, 0x07, 0x44, 0x45, 0x7e},
    {0x02, 0x02, 0x43, 0x07, 0x6c},
    {0x05, 0x46, 0x02, 0x05, 0x8e},
    {0x03, 0x07, 0x43, 0x07, 0x6c},
    {0x04, 0x07, 0x44, 0x45, 0x7e},
    {0x02, 0x07, 0x43, 0x07, 0x6c},
    {0xa8, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0x16, 0x42, 0xb5, 0x9b},
    {0x01, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x16, 0x42, 0xb5, 0x9b},
    {0x06, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x06, 0x6d},
    {0x04, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x06, 0x6d},
    {0x09, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x06, 0x7d},
    {0x01, 0x03, 0x42, 0x46, 0x7d},
    {0x02, 0x0b, 0x42, 0x06, 0x7d},
    {0x05, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x06, 0x6d},
    {0x04, 0x03, 0x42, 0x46, 0x7d},
    {0x02, 0x05, 0x44, 0x06, 0x6d},
    {0x0a, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x42, 0xb5, 0x9b},
    {0x01, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0xb5, 0x9b},
    {0x06, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x06, 0x7d},
    {0x04, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x06, 0x7d},
    {0x07, 0x4a, 0x02, 0xf5, 0xac},
    {0x03, 0x8a, 0x45, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0x46, 0x7d},
    {0x02, 0x8a, 0x45, 0xb5, 0xee},
    {0x05, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x06, 0x6d},
    {0x04, 0x05, 0x42, 0x46, 0x7d},
    {0x02, 0x06, 0x44, 0x06, 0x6d},
    {0x50, 0x05, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x42, 0xb5, 0xac},
    {0x01, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x26, 0x42, 0xb5, 0xac},
    {0x06, 0xc3, 0x05, 0xb5, 0xee},
    {0x03, 0x82, 0x47, 0x03, 0xbd},
    {0x04, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x03, 0xbd},
    {0x08, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0xb5, 0x9b},
    {0x01, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x19, 0x42, 0xb5, 0x9b},
    {0x05, 0xc3, 0x05, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x05, 0x8e},
    {0x04, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0x05, 0x8e},
    {0x40, 0x05, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x45, 0xb5, 0xee},
    {0x01, 0x84, 0x45, 0xf5, 0xee},
    {0x02, 0x86, 0x45, 0xb5, 0xee},
    {0x06, 0xc1, 0x06, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x06, 0x6d},
    {0x04, 0x84, 0x45, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x06, 0x6d},
    {0x07, 0x44, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x06, 0x6d},
    {0x01, 0x06, 0x42, 0x46, 0x7d},
    {0x02, 0x02, 0x44, 0x06, 0x6d},
    {0x05, 0xc1, 0x06, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x06, 0x6d},
    {0x04, 0x06, 0x42, 0x46, 0x7d},
    {0x02, 0x07, 0x44, 0x06, 0x6d},
    {0xc1, 0x42, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x05, 0x8e},
    {0x01, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0x05, 0x8e},
    {0x06, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x07, 0x6c},
    {0x04, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x07, 0x6c},
    {0x09, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0x45, 0x8e},
    {0x02, 0x12, 0x42, 0xb5, 0x9b},
    {0x05, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x07, 0x6c},
    {0x04, 0x08, 0x42, 0x45, 0x8e},
    {0x02, 0x05, 0x42, 0x07, 0x6c},
    {0x0b, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x42, 0xb5, 0x9b},
    {0x01, 0x83, 0x46, 0xf5, 0xdd},
    {0x02, 0x15, 0x42, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0x05, 0x8e},
    {0x03, 0x11, 0x42, 0x05, 0x8e},
    {0x04, 0x83, 0x46, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0x05, 0x8e},
    {0x07, 0x42, 0x02, 0xf5, 0x9b},
    {0x03, 0x84, 0x46, 0xb5, 0xdd},
    {0x01, 0x81, 0x47, 0xf5, 0xcc},
    {0x02, 0x84, 0x46, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0x05, 0x8e},
    {0x03, 0x06, 0x42, 0x07, 0x6c},
    {0x04, 0x81, 0x47, 0xf5, 0xcc},
    {0x02, 0x06, 0x42, 0x07, 0x6c},
    {0x4e, 0x07, 0xb5, 0x00, 0xcc},
    {0x03, 0x01, 0x42, 0x05, 0x8e},
    {0x01, 0x0a, 0x42, 0x45, 0x8e},
    {0x02, 0x01, 0x42, 0x05, 0x8e},
    {0x06, 0x42, 0x02, 0x05, 0x8e},
    {0x03, 0x08, 0x42, 0x06, 0x7d},
    {0x04, 0x0a, 0x42, 0x45, 0x8e},
    {0x02, 0x08, 0x42, 0x06, 0x7d},
    {0x08, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x47, 0xb5, 0xcc},
    {0x01, 0x04, 0x42, 0x46, 0x7d},
    {0x02, 0x83, 0x47, 0xb5, 0xcc},
    {0x05, 0x42, 0x02, 0x05, 0x8e},
    {0x03, 0x81, 0x47, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0x46, 0x7d},
    {0x02, 0x81, 0x47, 0x03, 0xbd},
    {0x0c, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x06, 0x7d},
    {0x01, 0x02, 0x42, 0x46, 0x7d},
    {0x02, 0x0a, 0x42, 0x06, 0x7d},
    {0x06, 0x47, 0x02, 0x05, 0x8e},
    {0x03, 0x04, 0x42, 0x07, 0x6c},
    {0x04, 0x02, 0x42, 0x46, 0x7d},
    {0x02, 0x04, 0x42, 0x07, 0x6c},
    {0x07, 0x47, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x07, 0x6c},
    {0x01, 0x07, 0x42, 0x46, 0x7d},
    {0x02, 0x02, 0x42, 0x07, 0x6c},
    {0x05, 0x47, 0x02, 0x05, 0x8e},
    {0x03, 0x07, 0x42, 0x07, 0x6c},
    {0x04, 0x07, 0x42, 0x46, 0x7d},
    {0x02, 0x07, 0x42, 0x07, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0xb4, 0xf5, 0x00, 0x0d},
    {0x01, 0xb4, 0xf5, 0x40, 0x0d},
    {0x02, 0xb4, 0xf5, 0x00, 0x0d},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0xb4, 0xf5, 0x40, 0x0d},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0x5d, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0xf5, 0x00, 0x77},
    {0x01, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x0b, 0xf5, 0x00, 0x77},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x6e, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x4b, 0xb5, 0x8f},
    {0x01, 0x0b, 0x4b, 0xf5, 0x8f},
    {0x02, 0x0c, 0x4b, 0xb5, 0x8f},
    {0x06, 0x43, 0x0b, 0xb5, 0x8f},
    {0x03, 0x09, 0xf5, 0x00, 0x77},
    {0x04, 0x0b, 0x4b, 0xf5, 0x8f},
    {0x02, 0x09, 0xf5, 0x00, 0x77},
    {0x07, 0xf5, 0x00, 0x40, 0x05},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x0b, 0xb5, 0x8f},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x48, 0xb5, 0x9f},
    {0x01, 0x0c, 0x48, 0xf5, 0x9f},
    {0x02, 0x14, 0x48, 0xb5, 0x9f},
    {0x06, 0x4b, 0x08, 0xb5, 0x9f},
    {0x03, 0x82, 0x6e, 0xb5, 0xff},
    {0x04, 0x0c, 0x48, 0xf5, 0x9f},
    {0x02, 0x82, 0x6e, 0xb5, 0xff},
    {0x08, 0x5d, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x48, 0xb5, 0x9f},
    {0x01, 0x09, 0x4b, 0xf5, 0x8f},
    {0x02, 0x18, 0x48, 0xb5, 0x9f},
    {0x05, 0x4b, 0x08, 0xb5, 0x9f},
    {0x03, 0x0e, 0x4b, 0xb5, 0x8f},
    {0x04, 0x09, 0x4b, 0xf5, 0x8f},
    {0x02, 0x0e, 0x4b, 0xb5, 0x8f},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x48, 0xb5, 0x9f},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x48, 0xb5, 0x9f},
    {0x06, 0x45, 0x0b, 0xb5, 0x8f},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0x08, 0xf5, 0x9f},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0x0b, 0xb5, 0x8f},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0x48, 0xb5, 0x9f},
    {0x01, 0x14, 0x46, 0xf5, 0xae},
    {0x02, 0x17, 0x48, 0xb5, 0x9f},
    {0x06, 0x4c, 0x06, 0xb5, 0xae},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0x46, 0xf5, 0xae},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0x46, 0xb5, 0xae},
    {0x03, 0x1b, 0x48, 0xb5, 0x9f},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x48, 0xb5, 0x9f},
    {0x05, 0x4c, 0x06, 0xb5, 0xae},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x6e, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x46, 0xb5, 0xae},
    {0x01, 0x18, 0x46, 0xf5, 0xae},
    {0x02, 0x27, 0x46, 0xb5, 0xae},
    {0x06, 0x49, 0x08, 0xb5, 0x9f},
    {0x03, 0x10, 0x4b, 0xb5, 0x8f},
    {0x04, 0x18, 0x46, 0xf5, 0xae},
    {0x02, 0x10, 0x4b, 0xb5, 0x8f},
    {0x07, 0x4b, 0x06, 0xf5, 0xae},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0x48, 0xf5, 0x9f},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0x08, 0xb5, 0x9f},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x48, 0xf5, 0x9f},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0x48, 0xb5, 0x9f},
    {0x01, 0x1c, 0x46, 0xf5, 0xae},
    {0x02, 0x13, 0x48, 0xb5, 0x9f},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0xf5, 0x00, 0x77},
    {0x04, 0x1c, 0x46, 0xf5, 0xae},
    {0x02, 0x08, 0xf5, 0x00, 0x77},
    {0x08, 0x43, 0x46, 0xb5, 0xae},
    {0x03, 0x37, 0x46, 0xb5, 0xae},
    {0x01, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x37, 0x46, 0xb5, 0xae},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x6e, 0xb5, 0xff},
    {0x04, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x81, 0x6e, 0xb5, 0xff},
    {0x0c, 0x6e, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0xf5, 0x00, 0x77},
    {0x01, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x0a, 0xf5, 0x00, 0x77},
    {0x06, 0x46, 0x0b, 0xb5, 0x8f},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x08, 0xf5, 0x9f},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x0b, 0xb5, 0x8f},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xdc, 0x41, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x46, 0xb5, 0xae},
    {0x01, 0x17, 0x46, 0xf5, 0xae},
    {0x02, 0x2d, 0x46, 0xb5, 0xae},
    {0x06, 0x54, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x46, 0xf5, 0xae},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0x41, 0xb5, 0xbe},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0x41, 0xf5, 0xbe},
    {0x03, 0x35, 0x46, 0xb5, 0xae},
    {0x01, 0x1b, 0x46, 0xf5, 0xae},
    {0x02, 0x35, 0x46, 0xb5, 0xae},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x46, 0xf5, 0xae},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0x01, 0xf5, 0xbe},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x23, 0x46, 0xb5, 0xae},
    {0x01, 0x27, 0x41, 0xf5, 0xbe},
    {0x02, 0x23, 0x46, 0xb5, 0xae},
    {0x06, 0x58, 0x01, 0xb5, 0xbe},
    {0x03, 0x82, 0x43, 0x01, 0xbe},
    {0x04, 0x27, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x43, 0x01, 0xbe},
    {0x08, 0x4b, 0x41, 0xb5, 0xbe},
    {0x03, 0x33, 0x46, 0xb5, 0xae},
    {0x01, 0x10, 0x48, 0xf5, 0x9f},
    {0x02, 0x33, 0x46, 0xb5, 0xae},
    {0x05, 0x58, 0x01, 0xb5, 0xbe},
    {0x03, 0x0f, 0x4b, 0xb5, 0x8f},
    {0x04, 0x10, 0x48, 0xf5, 0x9f},
    {0x02, 0x0f, 0x4b, 0xb5, 0x8f},
    {0x54, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3f, 0x46, 0xb5, 0xae},
    {0x01, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x3f, 0x46, 0xb5, 0xae},
    {0x06, 0x4e, 0x06, 0xb5, 0xae},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x06, 0xf5, 0xae},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x06, 0xb5, 0xae},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x0d, 0x4b, 0xb5, 0x8f},
    {0x01, 0x13, 0x46, 0xf5, 0xae},
    {0x02, 0x0d, 0x4b, 0xb5, 0x8f},
    {0x06, 0x5c, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0x46, 0xf5, 0xae},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0x46, 0xb5, 0xae},
    {0x03, 0x97, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x4b, 0xf5, 0x8f},
    {0x02, 0x97, 0xf5, 0x00, 0x0b},
    {0x05, 0x5c, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x4b, 0xf5, 0x8f},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x43, 0x41, 0xf5, 0xbe},
    {0x03, 0x2b, 0x46, 0xb5, 0xae},
    {0x01, 0x37, 0x41, 0xf5, 0xbe},
    {0x02, 0x2b, 0x46, 0xb5, 0xae},
    {0x06, 0x44, 0x0b, 0xb5, 0x8f},
    {0x03, 0x11, 0x4b, 0xb5, 0x8f},
    {0x04, 0x37, 0x41, 0xf5, 0xbe},
    {0x02, 0x11, 0x4b, 0xb5, 0x8f},
    {0x07, 0xda, 0xb5, 0x40, 0x0b},
    {0x03, 0x93, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x93, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x0b, 0xb5, 0x8f},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x4b, 0xb5, 0x8f},
    {0x01, 0x0a, 0x4b, 0xf5, 0x8f},
    {0x02, 0x01, 0x4b, 0xb5, 0x8f},
    {0x06, 0x42, 0x0b, 0xb5, 0x8f},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x4b, 0xf5, 0x8f},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x46, 0xb5, 0xae},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x0b, 0xb5, 0x8f},
    {0x03, 0x81, 0x43, 0x01, 0xbe},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0x01, 0xbe},
    {0x0c, 0x43, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x0b, 0xb5, 0x8f},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x08, 0xf5, 0x9f},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x0b, 0xb5, 0x8f},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x46, 0xb5, 0xae},
    {0x01, 0x2d, 0x41, 0xf5, 0xbe},
    {0x02, 0x1d, 0x46, 0xb5, 0xae},
    {0x06, 0x57, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x4c, 0x43, 0xb5, 0xce},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x4b, 0x43, 0xf5, 0xce},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x54, 0x03, 0xf5, 0xce},
    {0x03, 0x9a, 0x43, 0x03, 0xce},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x43, 0x03, 0xce},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x03, 0x03, 0xb5, 0xce},
    {0x03, 0x21, 0x46, 0xb5, 0xae},
    {0x01, 0x35, 0x41, 0xf5, 0xbe},
    {0x02, 0x21, 0x46, 0xb5, 0xae},
    {0x06, 0x5b, 0x01, 0xb5, 0xbe},
    {0x03, 0x82, 0x4b, 0x03, 0xce},
    {0x04, 0x35, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x4b, 0x03, 0xce},
    {0x08, 0x4c, 0x43, 0xb5, 0xce},
    {0x03, 0x31, 0x46, 0xb5, 0xae},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0x46, 0xb5, 0xae},
    {0x05, 0x5b, 0x01, 0xb5, 0xbe},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0xc2, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x3d, 0x46, 0xb5, 0xae},
    {0x01, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x46, 0xb5, 0xae},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x78, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x46, 0xb5, 0xae},
    {0x01, 0x23, 0x41, 0xf5, 0xbe},
    {0x02, 0x2f, 0x46, 0xb5, 0xae},
    {0x06, 0x67, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x03, 0x6c},
    {0x04, 0x23, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x03, 0x6c},
    {0x09, 0x49, 0x41, 0xb5, 0xbe},
    {0x03, 0x3b, 0x46, 0xb5, 0xae},
    {0x01, 0x82, 0x43, 0x43, 0xce},
    {0x02, 0x3b, 0x46, 0xb5, 0xae},
    {0x05, 0x67, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x03, 0x6c},
    {0x04, 0x82, 0x43, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x03, 0x6c},
    {0x0b, 0x4b, 0x43, 0xf5, 0xce},
    {0x03, 0x29, 0x46, 0xb5, 0xae},
    {0x01, 0x33, 0x41, 0xf5, 0xbe},
    {0x02, 0x29, 0x46, 0xb5, 0xae},
    {0x06, 0x50, 0x06, 0xb5, 0xae},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0x41, 0xf5, 0xbe},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x58, 0x03, 0xf5, 0xce},
    {0x03, 0x8f, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x48, 0xf5, 0x9f},
    {0x02, 0x8f, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x06, 0xb5, 0xae},
    {0x03, 0x06, 0x43, 0x03, 0x6c},
    {0x04, 0x0f, 0x48, 0xf5, 0x9f},
    {0x02, 0x06, 0x43, 0x03, 0x6c},
    {0x5e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x46, 0xb5, 0xae},
    {0x01, 0x3f, 0x41, 0xf5, 0xbe},
    {0x02, 0x1f, 0x46, 0xb5, 0xae},
    {0x06, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0x41, 0xf5, 0xbe},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0x41, 0xb5, 0xbe},
    {0x03, 0x39, 0x46, 0xb5, 0xae},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0x46, 0xb5, 0xae},
    {0x05, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4b, 0x03, 0xce},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x4b, 0x03, 0xce},
    {0x0c, 0x4b, 0x43, 0xf5, 0xce},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x03, 0x6c},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x03, 0x6c},
    {0x07, 0x4e, 0x01, 0xf5, 0xbe},
    {0x03, 0x02, 0x43, 0x03, 0x6c},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x03, 0x6c},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x03, 0x6c},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x03, 0x6c},
    {0xdd, 0x41, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x48, 0xb5, 0x9f},
    {0x01, 0x0d, 0x48, 0xf5, 0x9f},
    {0x02, 0x16, 0x48, 0xb5, 0x9f},
    {0x06, 0x53, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x48, 0xf5, 0x9f},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0x41, 0xf5, 0xbe},
    {0x03, 0x1a, 0x48, 0xb5, 0x9f},
    {0x01, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x48, 0xb5, 0x9f},
    {0x06, 0x48, 0x08, 0xb5, 0x9f},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x5c, 0x03, 0xf5, 0xce},
    {0x03, 0x8b, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x08, 0xb5, 0x9f},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x79, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x46, 0xb5, 0xae},
    {0x01, 0x2b, 0x41, 0xf5, 0xbe},
    {0x02, 0x25, 0x46, 0xb5, 0xae},
    {0x06, 0x77, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x45, 0x01, 0xbe},
    {0x04, 0x2b, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x45, 0x01, 0xbe},
    {0x08, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x19, 0x48, 0xb5, 0x9f},
    {0x01, 0x11, 0x48, 0xf5, 0x9f},
    {0x02, 0x19, 0x48, 0xb5, 0x9f},
    {0x05, 0x77, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0x48, 0xf5, 0x9f},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x08, 0xf5, 0x9f},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x76, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0x48, 0xf5, 0x9f},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0x08, 0xb5, 0x9f},
    {0x03, 0x03, 0x42, 0x03, 0x6c},
    {0x04, 0x01, 0x48, 0xf5, 0x9f},
    {0x02, 0x03, 0x42, 0x03, 0x6c},
    {0x09, 0x46, 0x46, 0xb5, 0xae},
    {0x03, 0x12, 0x48, 0xb5, 0x9f},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0x48, 0xb5, 0x9f},
    {0x05, 0x4a, 0x08, 0xb5, 0x9f},
    {0x03, 0x05, 0x42, 0x03, 0x6c},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x03, 0x6c},
    {0x0b, 0x45, 0x41, 0xf5, 0xbe},
    {0x03, 0x15, 0x48, 0xb5, 0x9f},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x48, 0xb5, 0x9f},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0x08, 0xf5, 0x9f},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x43, 0x43, 0xce},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x03, 0x6c},
    {0x04, 0x81, 0x43, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x03, 0x6c},
    {0x4e, 0x03, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x46, 0xb5, 0xae},
    {0x03, 0x83, 0x43, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x43, 0x03, 0xce},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0x01, 0xbe},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0x01, 0xbe},
    {0x0c, 0x45, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x03, 0x6c},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x03, 0x6c},
    {0x07, 0x47, 0x08, 0xf5, 0x9f},
    {0x03, 0x02, 0x42, 0x03, 0x6c},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x03, 0x6c},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x03, 0x6c},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x9f, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x41, 0xf5, 0xbe},
    {0x02, 0x9f, 0xf5, 0x00, 0x0e},
    {0x06, 0x6d, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x49, 0xb5, 0x6c},
    {0x04, 0x1d, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x49, 0xb5, 0x6c},
    {0x09, 0x61, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0xb5, 0x7b},
    {0x01, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x0b, 0x46, 0xb5, 0x7b},
    {0x05, 0x6d, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x49, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x05, 0x49, 0xb5, 0x6c},
    {0x0a, 0x76, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x41, 0xb5, 0x8b},
    {0x01, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x0c, 0x41, 0xb5, 0x8b},
    {0x06, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x09, 0x46, 0xb5, 0x7b},
    {0x04, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x09, 0x46, 0xb5, 0x7b},
    {0x07, 0x57, 0x03, 0xf5, 0xce},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x49, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x06, 0x49, 0xb5, 0x6c},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x43, 0xb5, 0x9b},
    {0x01, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x14, 0x43, 0xb5, 0x9b},
    {0x06, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x82, 0x76, 0xb5, 0xff},
    {0x04, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x82, 0x76, 0xb5, 0xff},
    {0x08, 0x61, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0xb5, 0x9b},
    {0x01, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x18, 0x43, 0xb5, 0x9b},
    {0x05, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x0e, 0x41, 0xb5, 0x8b},
    {0x04, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x0e, 0x41, 0xb5, 0x8b},
    {0x4f, 0x82, 0xb5, 0x40, 0x0e},
    {0x03, 0x1c, 0x43, 0xb5, 0x9b},
    {0x01, 0x9a, 0xc2, 0xf5, 0x0e},
    {0x02, 0x1c, 0x43, 0xb5, 0x9b},
    {0x06, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x49, 0xb5, 0x6c},
    {0x04, 0x9a, 0xc2, 0xf5, 0x0e},
    {0x02, 0x04, 0x49, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x49, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x49, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x49, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x49, 0xb5, 0x6c},
    {0x74, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x43, 0xb5, 0x9b},
    {0x01, 0x21, 0x41, 0xf5, 0xbe},
    {0x02, 0x17, 0x43, 0xb5, 0x9b},
    {0x06, 0x75, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x21, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x1b, 0x43, 0xb5, 0x9b},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x43, 0xb5, 0x9b},
    {0x05, 0x75, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x76, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x46, 0xb5, 0xae},
    {0x01, 0x31, 0x41, 0xf5, 0xbe},
    {0x02, 0x28, 0x46, 0xb5, 0xae},
    {0x06, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x10, 0x41, 0xb5, 0x8b},
    {0x04, 0x31, 0x41, 0xf5, 0xbe},
    {0x02, 0x10, 0x41, 0xb5, 0x8b},
    {0x07, 0x5b, 0x03, 0xf5, 0xce},
    {0x03, 0x8d, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x8d, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x70, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0xb5, 0x9b},
    {0x01, 0x3d, 0x41, 0xf5, 0xbe},
    {0x02, 0x13, 0x43, 0xb5, 0x9b},
    {0x06, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0xb5, 0x7b},
    {0x04, 0x3d, 0x41, 0xf5, 0xbe},
    {0x02, 0x08, 0x46, 0xb5, 0x7b},
    {0x08, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x38, 0x46, 0xb5, 0xae},
    {0x01, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x38, 0x46, 0xb5, 0xae},
    {0x05, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x76, 0xb5, 0xff},
    {0x04, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x81, 0x76, 0xb5, 0xff},
    {0x0c, 0x76, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x46, 0xb5, 0x7b},
    {0x01, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x0a, 0x46, 0xb5, 0x7b},
    {0x06, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe1, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x46, 0xb5, 0xae},
    {0x01, 0x2f, 0x41, 0xf5, 0xbe},
    {0x02, 0x2e, 0x46, 0xb5, 0xae},
    {0x06, 0x63, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x82, 0x6e},
    {0x04, 0x2f, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x41, 0x82, 0x6e},
    {0x09, 0x71, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x82, 0x7e},
    {0x01, 0x03, 0x43, 0xc2, 0x7e},
    {0x02, 0x0b, 0x43, 0x82, 0x7e},
    {0x05, 0x63, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x82, 0x6e},
    {0x04, 0x03, 0x43, 0xc2, 0x7e},
    {0x02, 0x05, 0x41, 0x82, 0x6e},
    {0x0a, 0x49, 0x43, 0xf5, 0xce},
    {0x03, 0x36, 0x46, 0xb5, 0xae},
    {0x01, 0x3b, 0x41, 0xf5, 0xbe},
    {0x02, 0x36, 0x46, 0xb5, 0xae},
    {0x06, 0xc2, 0x82, 0xb5, 0x0e},
    {0x03, 0x09, 0x43, 0x82, 0x7e},
    {0x04, 0x3b, 0x41, 0xf5, 0xbe},
    {0x02, 0x09, 0x43, 0x82, 0x7e},
    {0x07, 0x68, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xc2, 0x7e},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x82, 0xb5, 0x0e},
    {0x03, 0x06, 0x41, 0x82, 0x6e},
    {0x04, 0x05, 0x43, 0xc2, 0x7e},
    {0x02, 0x06, 0x41, 0x82, 0x6e},
    {0x6c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x46, 0xb5, 0xae},
    {0x01, 0x29, 0x41, 0xf5, 0xbe},
    {0x02, 0x24, 0x46, 0xb5, 0xae},
    {0x06, 0x73, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x49, 0x03, 0xce},
    {0x04, 0x29, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x49, 0x03, 0xce},
    {0x08, 0x71, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x46, 0xb5, 0xae},
    {0x01, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x34, 0x46, 0xb5, 0xae},
    {0x05, 0x73, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x41, 0xb5, 0x8b},
    {0x04, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x41, 0xb5, 0x8b},
    {0x64, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x46, 0xb5, 0xae},
    {0x01, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x46, 0xb5, 0xae},
    {0x06, 0x4f, 0x06, 0xb5, 0xae},
    {0x03, 0x04, 0x41, 0x82, 0x6e},
    {0x04, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x82, 0x6e},
    {0x07, 0x50, 0x01, 0xf5, 0xbe},
    {0x03, 0x02, 0x41, 0x82, 0x6e},
    {0x01, 0x06, 0x43, 0xc2, 0x7e},
    {0x02, 0x02, 0x41, 0x82, 0x6e},
    {0x05, 0x4f, 0x06, 0xb5, 0xae},
    {0x03, 0x07, 0x41, 0x82, 0x6e},
    {0x04, 0x06, 0x43, 0xc2, 0x7e},
    {0x02, 0x07, 0x41, 0x82, 0x6e},
    {0xc6, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x41, 0xb5, 0x8b},
    {0x01, 0x1f, 0x41, 0xf5, 0xbe},
    {0x02, 0x0d, 0x41, 0xb5, 0x8b},
    {0x06, 0x7f, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x1f, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x4e, 0x43, 0xb5, 0xce},
    {0x03, 0x99, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x99, 0xf5, 0x00, 0x0b},
    {0x05, 0x7f, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x49, 0x43, 0xf5, 0xce},
    {0x03, 0x2c, 0x46, 0xb5, 0xae},
    {0x01, 0x39, 0x41, 0xf5, 0xbe},
    {0x02, 0x2c, 0x46, 0xb5, 0xae},
    {0x06, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x11, 0x41, 0xb5, 0x8b},
    {0x04, 0x39, 0x41, 0xf5, 0xbe},
    {0x02, 0x11, 0x41, 0xb5, 0x8b},
    {0x07, 0xcd, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x95, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x41, 0xb5, 0x8b},
    {0x01, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x01, 0x41, 0xb5, 0x8b},
    {0x06, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x82, 0x7e},
    {0x04, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x82, 0x7e},
    {0x08, 0x4e, 0x43, 0xb5, 0xce},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xc2, 0x7e},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x81, 0x49, 0x03, 0xce},
    {0x04, 0x04, 0x43, 0xc2, 0x7e},
    {0x02, 0x81, 0x49, 0x03, 0xce},
    {0x0c, 0x49, 0x43, 0xf5, 0xce},
    {0x03, 0x0a, 0x43, 0x82, 0x7e},
    {0x01, 0x02, 0x43, 0xc2, 0x7e},
    {0x02, 0x0a, 0x43, 0x82, 0x7e},
    {0x06, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xc2, 0x7e},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xc2, 0x7e},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xc2, 0x7e},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0x82, 0xb5, 0x00, 0x0e},
    {0x03, 0x1e, 0x46, 0xb5, 0xae},
    {0x01, 0x16, 0x46, 0xf5, 0xae},
    {0x02, 0x1e, 0x46, 0xb5, 0xae},
    {0x06, 0x4d, 0x06, 0xb5, 0xae},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0x46, 0xf5, 0xae},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x7d, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0x06, 0xb5, 0xae},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xc8, 0xf5, 0x40, 0x0f},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x53, 0x03, 0xf5, 0xce},
    {0x03, 0x9a, 0x45, 0x03, 0xce},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x45, 0x03, 0xce},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x05, 0x03, 0xb5, 0xce},
    {0x03, 0x22, 0x46, 0xb5, 0xae},
    {0x01, 0x1a, 0x46, 0xf5, 0xae},
    {0x02, 0x22, 0x46, 0xb5, 0xae},
    {0x06, 0xd8, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xc8, 0xb5, 0x0f},
    {0x04, 0x1a, 0x46, 0xf5, 0xae},
    {0x02, 0x82, 0xc8, 0xb5, 0x0f},
    {0x08, 0x7d, 0xf5, 0x00, 0xee},
    {0x03, 0x32, 0x46, 0xb5, 0xae},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0x46, 0xb5, 0xae},
    {0x05, 0xd8, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x46, 0xb5, 0xae},
    {0x01, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x46, 0xb5, 0xae},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0x06, 0xf5, 0xae},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x7c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x30, 0x46, 0xb5, 0xae},
    {0x01, 0x25, 0x41, 0xf5, 0xbe},
    {0x02, 0x30, 0x46, 0xb5, 0xae},
    {0x06, 0x6b, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x05, 0x6c},
    {0x04, 0x25, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x05, 0x6c},
    {0x09, 0x44, 0x46, 0xb5, 0xae},
    {0x03, 0x3c, 0x46, 0xb5, 0xae},
    {0x01, 0x82, 0x45, 0x43, 0xce},
    {0x02, 0x3c, 0x46, 0xb5, 0xae},
    {0x05, 0x6b, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x05, 0x6c},
    {0x04, 0x82, 0x45, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x05, 0x6c},
    {0x0b, 0xc8, 0xf5, 0x40, 0x0f},
    {0x03, 0x2a, 0x46, 0xb5, 0xae},
    {0x01, 0x19, 0x46, 0xf5, 0xae},
    {0x02, 0x2a, 0x46, 0xb5, 0xae},
    {0x06, 0x51, 0x06, 0xb5, 0xae},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0x46, 0xf5, 0xae},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x78, 0xb5, 0x40, 0xdd},
    {0x03, 0x91, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x91, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x06, 0xb5, 0xae},
    {0x03, 0x06, 0x43, 0x05, 0x6c},
    {0x04, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x05, 0x6c},
    {0x68, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x46, 0xb5, 0xae},
    {0x01, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x46, 0xb5, 0xae},
    {0x06, 0xd4, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0x46, 0xb5, 0xae},
    {0x03, 0x3a, 0x46, 0xb5, 0xae},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0x46, 0xb5, 0xae},
    {0x05, 0xd4, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc8, 0xb5, 0x0f},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xc8, 0xb5, 0x0f},
    {0x0c, 0xc8, 0xf5, 0x40, 0x0f},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x05, 0x6c},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x05, 0x6c},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x05, 0x6c},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x05, 0x6c},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x05, 0x6c},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x05, 0x6c},
    {0xe5, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x43, 0xb5, 0x9b},
    {0x01, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x16, 0x43, 0xb5, 0x9b},
    {0x06, 0x41, 0x06, 0xb5, 0xae},
    {0x03, 0x03, 0x44, 0x82, 0x6e},
    {0x04, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x82, 0x6e},
    {0x09, 0x42, 0x46, 0xb5, 0xae},
    {0x03, 0x0b, 0x42, 0x82, 0x7e},
    {0x01, 0x03, 0x42, 0xc2, 0x7e},
    {0x02, 0x0b, 0x42, 0x82, 0x7e},
    {0x05, 0x41, 0x06, 0xb5, 0xae},
    {0x03, 0x05, 0x44, 0x82, 0x6e},
    {0x04, 0x03, 0x42, 0xc2, 0x7e},
    {0x02, 0x05, 0x44, 0x82, 0x6e},
    {0x0a, 0x46, 0x41, 0xf5, 0xbe},
    {0x03, 0x1a, 0x43, 0xb5, 0x9b},
    {0x01, 0x12, 0x46, 0xf5, 0xae},
    {0x02, 0x1a, 0x43, 0xb5, 0x9b},
    {0x06, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x82, 0x7e},
    {0x04, 0x12, 0x46, 0xf5, 0xae},
    {0x02, 0x09, 0x42, 0x82, 0x7e},
    {0x07, 0x4a, 0x06, 0xf5, 0xae},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0xc2, 0x7e},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x82, 0x6e},
    {0x04, 0x05, 0x42, 0xc2, 0x7e},
    {0x02, 0x06, 0x44, 0x82, 0x6e},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0x46, 0xb5, 0xae},
    {0x01, 0x15, 0x46, 0xf5, 0xae},
    {0x02, 0x26, 0x46, 0xb5, 0xae},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0x01, 0xbe},
    {0x04, 0x15, 0x46, 0xf5, 0xae},
    {0x02, 0x82, 0x46, 0x01, 0xbe},
    {0x08, 0x42, 0x46, 0xb5, 0xae},
    {0x03, 0x19, 0x43, 0xb5, 0x9b},
    {0x01, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x19, 0x43, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x82, 0xb5, 0x0e},
    {0x03, 0x04, 0x44, 0x82, 0x6e},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x82, 0x6e},
    {0x07, 0x44, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x82, 0x6e},
    {0x01, 0x06, 0x42, 0xc2, 0x7e},
    {0x02, 0x02, 0x44, 0x82, 0x6e},
    {0x05, 0xc1, 0x82, 0xb5, 0x0e},
    {0x03, 0x07, 0x44, 0x82, 0x6e},
    {0x04, 0x06, 0x42, 0xc2, 0x7e},
    {0x02, 0x07, 0x44, 0x82, 0x6e},
    {0xc1, 0x46, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x05, 0x6c},
    {0x04, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x05, 0x6c},
    {0x09, 0x47, 0x46, 0xb5, 0xae},
    {0x03, 0x12, 0x43, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0xb5, 0x9b},
    {0x05, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x05, 0x6c},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x05, 0x6c},
    {0x0b, 0x46, 0x41, 0xf5, 0xbe},
    {0x03, 0x15, 0x43, 0xb5, 0x9b},
    {0x01, 0x83, 0xc2, 0xf5, 0x0e},
    {0x02, 0x15, 0x43, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0xc2, 0xf5, 0x0e},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0xf5, 0x9b},
    {0x03, 0x84, 0xc2, 0xb5, 0x0e},
    {0x01, 0x81, 0x45, 0x43, 0xce},
    {0x02, 0x84, 0xc2, 0xb5, 0x0e},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x05, 0x6c},
    {0x04, 0x81, 0x45, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x05, 0x6c},
    {0x4e, 0x05, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x82, 0x7e},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x82, 0x7e},
    {0x08, 0x47, 0x46, 0xb5, 0xae},
    {0x03, 0x83, 0x45, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0xc2, 0x7e},
    {0x02, 0x83, 0x45, 0x03, 0xce},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0x01, 0xbe},
    {0x04, 0x04, 0x42, 0xc2, 0x7e},
    {0x02, 0x81, 0x46, 0x01, 0xbe},
    {0x0c, 0x46, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0x82, 0x7e},
    {0x01, 0x02, 0x42, 0xc2, 0x7e},
    {0x02, 0x0a, 0x42, 0x82, 0x7e},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x05, 0x6c},
    {0x04, 0x02, 0x42, 0xc2, 0x7e},
    {0x02, 0x04, 0x42, 0x05, 0x6c},
    {0x07, 0x47, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x05, 0x6c},
    {0x01, 0x07, 0x42, 0xc2, 0x7e},
    {0x02, 0x02, 0x42, 0x05, 0x6c},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x05, 0x6c},
    {0x04, 0x07, 0x42, 0xc2, 0x7e},
    {0x02, 0x07, 0x42, 0x05, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xb4, 0xf5, 0x00, 0x0b},
    {0x01, 0xa2, 0xf5, 0x40, 0x0f},
    {0x02, 0xb4, 0xf5, 0x00, 0x0b},
    {0x06, 0x5d, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x4b, 0xb5, 0x6d},
    {0x04, 0xa2, 0xf5, 0x40, 0x0f},
    {0x02, 0x03, 0x4b, 0xb5, 0x6d},
    {0x09, 0x6f, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x48, 0xb5, 0x7d},
    {0x01, 0x03, 0x48, 0xf5, 0x7d},
    {0x02, 0x0b, 0x48, 0xb5, 0x7d},
    {0x05, 0x5d, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x4b, 0xb5, 0x6d},
    {0x04, 0x03, 0x48, 0xf5, 0x7d},
    {0x02, 0x05, 0x4b, 0xb5, 0x6d},
    {0x0a, 0x64, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x46, 0xb5, 0x8c},
    {0x01, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x0c, 0x46, 0xb5, 0x8c},
    {0x06, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x09, 0x48, 0xb5, 0x7d},
    {0x04, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x09, 0x48, 0xb5, 0x7d},
    {0x07, 0x6e, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x48, 0xf5, 0x7d},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x4b, 0xb5, 0x6d},
    {0x04, 0x05, 0x48, 0xf5, 0x7d},
    {0x02, 0x06, 0x4b, 0xb5, 0x6d},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x41, 0xb5, 0x9c},
    {0x01, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x14, 0x41, 0xb5, 0x9c},
    {0x06, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x82, 0x64, 0xb5, 0xff},
    {0x04, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x82, 0x64, 0xb5, 0xff},
    {0x08, 0x6f, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x41, 0xb5, 0x9c},
    {0x01, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x18, 0x41, 0xb5, 0x9c},
    {0x05, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x0e, 0x46, 0xb5, 0x8c},
    {0x04, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x0e, 0x46, 0xb5, 0x8c},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x41, 0xb5, 0x9c},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x41, 0xb5, 0x9c},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x4b, 0xb5, 0x6d},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0x4b, 0xb5, 0x6d},
    {0x07, 0x43, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x4b, 0xb5, 0x6d},
    {0x01, 0x06, 0x48, 0xf5, 0x7d},
    {0x02, 0x02, 0x4b, 0xb5, 0x6d},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x4b, 0xb5, 0x6d},
    {0x04, 0x06, 0x48, 0xf5, 0x7d},
    {0x02, 0x07, 0x4b, 0xb5, 0x6d},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0x41, 0xb5, 0x9c},
    {0x01, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x17, 0x41, 0xb5, 0x9c},
    {0x06, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x1b, 0x41, 0xb5, 0x9c},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x41, 0xb5, 0x9c},
    {0x05, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x64, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x43, 0xb5, 0xac},
    {0x01, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x27, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x10, 0x46, 0xb5, 0x8c},
    {0x04, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x46, 0xb5, 0x8c},
    {0x07, 0x4b, 0x03, 0xf5, 0xac},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0x41, 0xb5, 0x9c},
    {0x01, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x13, 0x41, 0xb5, 0x9c},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0x48, 0xb5, 0x7d},
    {0x04, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x08, 0x48, 0xb5, 0x7d},
    {0x08, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x37, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x48, 0xf5, 0x7d},
    {0x02, 0x37, 0x43, 0xb5, 0xac},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x64, 0xb5, 0xff},
    {0x04, 0x04, 0x48, 0xf5, 0x7d},
    {0x02, 0x81, 0x64, 0xb5, 0xff},
    {0x0c, 0x64, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x48, 0xb5, 0x7d},
    {0x01, 0x02, 0x48, 0xf5, 0x7d},
    {0x02, 0x0a, 0x48, 0xb5, 0x7d},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x48, 0xf5, 0x7d},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x48, 0xf5, 0x7d},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x48, 0xf5, 0x7d},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xdf, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x43, 0xb5, 0xac},
    {0x01, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x2d, 0x43, 0xb5, 0xac},
    {0x06, 0x61, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x7b, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x61, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x35, 0x43, 0xb5, 0xac},
    {0x01, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x35, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x76, 0xb5, 0x40, 0xdd},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x72, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x43, 0xb5, 0xac},
    {0x01, 0x28, 0x41, 0xf5, 0xbe},
    {0x02, 0x23, 0x43, 0xb5, 0xac},
    {0x06, 0x71, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0xc2, 0xb5, 0x0c},
    {0x04, 0x28, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0xc2, 0xb5, 0x0c},
    {0x08, 0x7b, 0xf5, 0x00, 0xee},
    {0x03, 0x33, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x33, 0x43, 0xb5, 0xac},
    {0x05, 0x71, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x46, 0xb5, 0x8c},
    {0x04, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x46, 0xb5, 0x8c},
    {0x62, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x43, 0xb5, 0xac},
    {0x01, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x43, 0xb5, 0xac},
    {0x06, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x9b, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x46, 0xb5, 0x8c},
    {0x01, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x0d, 0x46, 0xb5, 0x8c},
    {0x06, 0x7d, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x98, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x98, 0xf5, 0x00, 0x0b},
    {0x05, 0x7d, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x2b, 0x43, 0xb5, 0xac},
    {0x01, 0x38, 0x41, 0xf5, 0xbe},
    {0x02, 0x2b, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x11, 0x46, 0xb5, 0x8c},
    {0x04, 0x38, 0x41, 0xf5, 0xbe},
    {0x02, 0x11, 0x46, 0xb5, 0x8c},
    {0x07, 0xc8, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x94, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x46, 0xb5, 0x8c},
    {0x01, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x01, 0x46, 0xb5, 0x8c},
    {0x06, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x81, 0xc2, 0xb5, 0x0c},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0xc2, 0xb5, 0x0c},
    {0x0c, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x43, 0xb5, 0xac},
    {0x01, 0x2e, 0x41, 0xf5, 0xbe},
    {0x02, 0x1d, 0x43, 0xb5, 0xac},
    {0x06, 0x6f, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2e, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x69, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x6f, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x74, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x64, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x50, 0xb5, 0xee},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x50, 0xb5, 0xee},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x10, 0xb5, 0x00, 0xee},
    {0x03, 0x21, 0x43, 0xb5, 0xac},
    {0x01, 0x36, 0x41, 0xf5, 0xbe},
    {0x02, 0x21, 0x43, 0xb5, 0xac},
    {0x06, 0x7b, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x74, 0xb5, 0xff},
    {0x04, 0x36, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x74, 0xb5, 0xff},
    {0x08, 0x69, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0x43, 0xb5, 0xac},
    {0x05, 0x7b, 0x03, 0xb5, 0xce},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0x5a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x43, 0xb5, 0xac},
    {0x01, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x97, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x2f, 0x43, 0xb5, 0xac},
    {0x01, 0x24, 0x41, 0xf5, 0xbe},
    {0x02, 0x2f, 0x43, 0xb5, 0xac},
    {0x06, 0x69, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x10, 0x6e},
    {0x04, 0x24, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x10, 0x6e},
    {0x09, 0x50, 0x43, 0xb5, 0xce},
    {0x03, 0x3b, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x50, 0xf5, 0xee},
    {0x02, 0x3b, 0x43, 0xb5, 0xac},
    {0x05, 0x69, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x10, 0x6e},
    {0x04, 0x82, 0x50, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x10, 0x6e},
    {0x0b, 0x74, 0xf5, 0x40, 0xff},
    {0x03, 0x29, 0x43, 0xb5, 0xac},
    {0x01, 0x34, 0x41, 0xf5, 0xbe},
    {0x02, 0x29, 0x43, 0xb5, 0xac},
    {0x06, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x34, 0x41, 0xf5, 0xbe},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x74, 0xb5, 0x40, 0xdd},
    {0x03, 0x90, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x90, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x10, 0x6e},
    {0x04, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x10, 0x6e},
    {0x60, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x43, 0xb5, 0xac},
    {0x01, 0x00, 0x41, 0xf5, 0xbe},
    {0x02, 0x1f, 0x43, 0xb5, 0xac},
    {0x06, 0xd0, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x00, 0x41, 0xf5, 0xbe},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x50, 0x43, 0xb5, 0xce},
    {0x03, 0x39, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0x43, 0xb5, 0xac},
    {0x05, 0xd0, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x74, 0xb5, 0xff},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x74, 0xb5, 0xff},
    {0x0c, 0x74, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x10, 0x6e},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x10, 0x6e},
    {0x07, 0x4f, 0x01, 0xf5, 0xbe},
    {0x03, 0x02, 0x43, 0x10, 0x6e},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x10, 0x6e},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x10, 0x6e},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x10, 0x6e},
    {0xde, 0x41, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x41, 0xb5, 0x9c},
    {0x01, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x16, 0x41, 0xb5, 0x9c},
    {0x06, 0x5f, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xd0, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x5f, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x4f, 0xf5, 0x40, 0xdd},
    {0x03, 0x1a, 0x41, 0xb5, 0x9c},
    {0x01, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x41, 0xb5, 0x9c},
    {0x06, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x40, 0xb5, 0x40, 0xdd},
    {0x03, 0x8c, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8c, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x7d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x43, 0xb5, 0xac},
    {0x01, 0x2c, 0x41, 0xf5, 0xbe},
    {0x02, 0x25, 0x43, 0xb5, 0xac},
    {0x06, 0x79, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x4f, 0xb5, 0xdd},
    {0x04, 0x2c, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x4f, 0xb5, 0xdd},
    {0x08, 0xd0, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x41, 0xb5, 0x9c},
    {0x01, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x19, 0x41, 0xb5, 0x9c},
    {0x05, 0x79, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x6a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x91, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x10, 0x6e},
    {0x04, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x10, 0x6e},
    {0x09, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x41, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0x41, 0xb5, 0x9c},
    {0x05, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x10, 0x6e},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x10, 0x6e},
    {0x0b, 0x4f, 0xf5, 0x40, 0xdd},
    {0x03, 0x15, 0x41, 0xb5, 0x9c},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x41, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0x01, 0xf5, 0x9c},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x50, 0xf5, 0xee},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x10, 0x6e},
    {0x04, 0x81, 0x50, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x10, 0x6e},
    {0x4e, 0x10, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x50, 0xb5, 0xee},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x50, 0xb5, 0xee},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x4f, 0xb5, 0xdd},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x4f, 0xb5, 0xdd},
    {0x0c, 0x4f, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x10, 0x6e},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x10, 0x6e},
    {0x07, 0x47, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x10, 0x6e},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x10, 0x6e},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x10, 0x6e},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x10, 0x6e},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x9e, 0xf5, 0x00, 0x0d},
    {0x01, 0x1e, 0x41, 0xf5, 0xbe},
    {0x02, 0x9e, 0xf5, 0x00, 0x0d},
    {0x06, 0x56, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x47, 0xb5, 0x6b},
    {0x04, 0x1e, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x47, 0xb5, 0x6b},
    {0x09, 0x5f, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x45, 0xb5, 0x7b},
    {0x01, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x0b, 0x45, 0xb5, 0x7b},
    {0x05, 0x56, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x47, 0xb5, 0x6b},
    {0x04, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x05, 0x47, 0xb5, 0x6b},
    {0x0a, 0x40, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x44, 0xb5, 0x8b},
    {0x01, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x0c, 0x44, 0xb5, 0x8b},
    {0x06, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x09, 0x45, 0xb5, 0x7b},
    {0x04, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x09, 0x45, 0xb5, 0x7b},
    {0x07, 0x4d, 0x01, 0xf5, 0xbe},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x47, 0xb5, 0x6b},
    {0x04, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x06, 0x47, 0xb5, 0x6b},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x42, 0xb5, 0x9b},
    {0x01, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x14, 0x42, 0xb5, 0x9b},
    {0x06, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x82, 0x40, 0xb5, 0xff},
    {0x04, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x82, 0x40, 0xb5, 0xff},
    {0x08, 0x5f, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x42, 0xb5, 0x9b},
    {0x01, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x18, 0x42, 0xb5, 0x9b},
    {0x05, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x0e, 0x44, 0xb5, 0x8b},
    {0x04, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x0e, 0x44, 0xb5, 0x8b},
    {0x4f, 0x0f, 0xb5, 0x40, 0xff},
    {0x03, 0x1c, 0x42, 0xb5, 0x9b},
    {0x01, 0x9a, 0x4f, 0xf5, 0xff},
    {0x02, 0x1c, 0x42, 0xb5, 0x9b},
    {0x06, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x47, 0xb5, 0x6b},
    {0x04, 0x9a, 0x4f, 0xf5, 0xff},
    {0x02, 0x04, 0x47, 0xb5, 0x6b},
    {0x07, 0x43, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x47, 0xb5, 0x6b},
    {0x01, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x47, 0xb5, 0x6b},
    {0x05, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x47, 0xb5, 0x6b},
    {0x04, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x47, 0xb5, 0x6b},
    {0x8d, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x17, 0x42, 0xb5, 0x9b},
    {0x01, 0x22, 0x41, 0xf5, 0xbe},
    {0x02, 0x17, 0x42, 0xb5, 0x9b},
    {0x06, 0x5a, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x22, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x48, 0x41, 0xb5, 0xbe},
    {0x03, 0x1b, 0x42, 0xb5, 0x9b},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x42, 0xb5, 0x9b},
    {0x05, 0x5a, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x40, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x43, 0xb5, 0xac},
    {0x01, 0x32, 0x41, 0xf5, 0xbe},
    {0x02, 0x28, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x10, 0x44, 0xb5, 0x8b},
    {0x04, 0x32, 0x41, 0xf5, 0xbe},
    {0x02, 0x10, 0x44, 0xb5, 0x8b},
    {0x07, 0xd9, 0xb5, 0x40, 0x0e},
    {0x03, 0x8e, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x8e, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x7e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0xb5, 0x9b},
    {0x01, 0x3e, 0x41, 0xf5, 0xbe},
    {0x02, 0x13, 0x42, 0xb5, 0x9b},
    {0x06, 0xcc, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x45, 0xb5, 0x7b},
    {0x04, 0x3e, 0x41, 0xf5, 0xbe},
    {0x02, 0x08, 0x45, 0xb5, 0x7b},
    {0x08, 0x48, 0x41, 0xb5, 0xbe},
    {0x03, 0x38, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x38, 0x43, 0xb5, 0xac},
    {0x05, 0xcc, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x40, 0xb5, 0xff},
    {0x04, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x81, 0x40, 0xb5, 0xff},
    {0x0c, 0x40, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x45, 0xb5, 0x7b},
    {0x01, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x0a, 0x45, 0xb5, 0x7b},
    {0x06, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe3, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x43, 0xb5, 0xac},
    {0x01, 0x30, 0x41, 0xf5, 0xbe},
    {0x02, 0x2e, 0x43, 0xb5, 0xac},
    {0x06, 0x65, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x0f, 0x6f},
    {0x04, 0x30, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x41, 0x0f, 0x6f},
    {0x09, 0x79, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x0f, 0x7f},
    {0x01, 0x03, 0x43, 0x4f, 0x7f},
    {0x02, 0x0b, 0x43, 0x0f, 0x7f},
    {0x05, 0x65, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x0f, 0x6f},
    {0x04, 0x03, 0x43, 0x4f, 0x7f},
    {0x02, 0x05, 0x41, 0x0f, 0x6f},
    {0x0a, 0x44, 0x41, 0xf5, 0xbe},
    {0x03, 0x36, 0x43, 0xb5, 0xac},
    {0x01, 0x3c, 0x41, 0xf5, 0xbe},
    {0x02, 0x36, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x0f, 0xb5, 0xff},
    {0x03, 0x09, 0x43, 0x0f, 0x7f},
    {0x04, 0x3c, 0x41, 0xf5, 0xbe},
    {0x02, 0x09, 0x43, 0x0f, 0x7f},
    {0x07, 0x6c, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x4f, 0x7f},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x0f, 0xb5, 0xff},
    {0x03, 0x06, 0x41, 0x0f, 0x6f},
    {0x04, 0x05, 0x43, 0x4f, 0x7f},
    {0x02, 0x06, 0x41, 0x0f, 0x6f},
    {0x6e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x43, 0xb5, 0xac},
    {0x01, 0x2a, 0x41, 0xf5, 0xbe},
    {0x02, 0x24, 0x43, 0xb5, 0xac},
    {0x06, 0x59, 0x01, 0xb5, 0xbe},
    {0x03, 0x82, 0x44, 0x01, 0xbe},
    {0x04, 0x2a, 0x41, 0xf5, 0xbe},
    {0x02, 0x82, 0x44, 0x01, 0xbe},
    {0x08, 0x79, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x34, 0x43, 0xb5, 0xac},
    {0x05, 0x59, 0x01, 0xb5, 0xbe},
    {0x03, 0x0f, 0x44, 0xb5, 0x8b},
    {0x04, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x44, 0xb5, 0x8b},
    {0x66, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x43, 0xb5, 0xac},
    {0x01, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x43, 0xb5, 0xac},
    {0x06, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x0f, 0x6f},
    {0x04, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x0f, 0x6f},
    {0x07, 0x51, 0x01, 0xf5, 0xbe},
    {0x03, 0x02, 0x41, 0x0f, 0x6f},
    {0x01, 0x06, 0x43, 0x4f, 0x7f},
    {0x02, 0x02, 0x41, 0x0f, 0x6f},
    {0x05, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x0f, 0x6f},
    {0x04, 0x06, 0x43, 0x4f, 0x7f},
    {0x02, 0x07, 0x41, 0x0f, 0x6f},
    {0x89, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x44, 0xb5, 0x8b},
    {0x01, 0x20, 0x41, 0xf5, 0xbe},
    {0x02, 0x0d, 0x44, 0xb5, 0x8b},
    {0x06, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x20, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x9b, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x9b, 0xf5, 0x00, 0x0b},
    {0x05, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x44, 0x41, 0xf5, 0xbe},
    {0x03, 0x2c, 0x43, 0xb5, 0xac},
    {0x01, 0x3a, 0x41, 0xf5, 0xbe},
    {0x02, 0x2c, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x11, 0x44, 0xb5, 0x8b},
    {0x04, 0x3a, 0x41, 0xf5, 0xbe},
    {0x02, 0x11, 0x44, 0xb5, 0x8b},
    {0x07, 0xd5, 0xb5, 0x40, 0x0e},
    {0x03, 0x96, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x96, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x44, 0xb5, 0x8b},
    {0x01, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x01, 0x44, 0xb5, 0x8b},
    {0x06, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x0f, 0x7f},
    {0x04, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x0f, 0x7f},
    {0x08, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0x4f, 0x7f},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x81, 0x44, 0x01, 0xbe},
    {0x04, 0x04, 0x43, 0x4f, 0x7f},
    {0x02, 0x81, 0x44, 0x01, 0xbe},
    {0x0c, 0x44, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x43, 0x0f, 0x7f},
    {0x01, 0x02, 0x43, 0x4f, 0x7f},
    {0x02, 0x0a, 0x43, 0x0f, 0x7f},
    {0x06, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0x4f, 0x7f},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0x4f, 0x7f},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0x4f, 0x7f},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xf4, 0x4f, 0xf5, 0x40, 0x0f},
    {0x03, 0x1e, 0x43, 0xb5, 0xac},
    {0x01, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x1e, 0x43, 0xb5, 0xac},
    {0x06, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x4a, 0x41, 0xb5, 0xbe},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0x42, 0x41, 0xf5, 0xbe},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x41, 0x01, 0xf5, 0xbe},
    {0x03, 0x9a, 0x46, 0x03, 0xce},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x46, 0x03, 0xce},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x06, 0x03, 0xb5, 0xce},
    {0x03, 0x22, 0x43, 0xb5, 0xac},
    {0x01, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x22, 0x43, 0xb5, 0xac},
    {0x06, 0x52, 0x01, 0xb5, 0xbe},
    {0x03, 0x82, 0x42, 0x01, 0xbe},
    {0x04, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x01, 0xbe},
    {0x08, 0x4a, 0x41, 0xb5, 0xbe},
    {0x03, 0x32, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0x43, 0xb5, 0xac},
    {0x05, 0x52, 0x01, 0xb5, 0xbe},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x53, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3e, 0x43, 0xb5, 0xac},
    {0x01, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x3e, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x58, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x30, 0x43, 0xb5, 0xac},
    {0x01, 0x26, 0x41, 0xf5, 0xbe},
    {0x02, 0x30, 0x43, 0xb5, 0xac},
    {0x06, 0x55, 0x01, 0xb5, 0xbe},
    {0x03, 0x03, 0x43, 0x06, 0x6c},
    {0x04, 0x26, 0x41, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x06, 0x6c},
    {0x09, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3c, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x46, 0x43, 0xce},
    {0x02, 0x3c, 0x43, 0xb5, 0xac},
    {0x05, 0x55, 0x01, 0xb5, 0xbe},
    {0x03, 0x05, 0x43, 0x06, 0x6c},
    {0x04, 0x82, 0x46, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x06, 0x6c},
    {0x0b, 0x42, 0x41, 0xf5, 0xbe},
    {0x03, 0x2a, 0x43, 0xb5, 0xac},
    {0x01, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x2a, 0x43, 0xb5, 0xac},
    {0x06, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0xc3, 0xb5, 0x40, 0x0b},
    {0x03, 0x92, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x92, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x06, 0x6c},
    {0x04, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x06, 0x6c},
    {0x56, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x20, 0x43, 0xb5, 0xac},
    {0x01, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x43, 0xb5, 0xac},
    {0x06, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3a, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0x43, 0xb5, 0xac},
    {0x05, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x81, 0x42, 0x01, 0xbe},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0x42, 0x01, 0xbe},
    {0x0c, 0x42, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x06, 0x6c},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x06, 0x6c},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x06, 0x6c},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x06, 0x6c},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x06, 0x6c},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x06, 0x6c},
    {0xe7, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x42, 0xb5, 0x9b},
    {0x01, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x16, 0x42, 0xb5, 0x9b},
    {0x06, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x0f, 0x6f},
    {0x04, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x0f, 0x6f},
    {0x09, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x0f, 0x7f},
    {0x01, 0x03, 0x42, 0x4f, 0x7f},
    {0x02, 0x0b, 0x42, 0x0f, 0x7f},
    {0x05, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x0f, 0x6f},
    {0x04, 0x03, 0x42, 0x4f, 0x7f},
    {0x02, 0x05, 0x44, 0x0f, 0x6f},
    {0x0a, 0x47, 0x41, 0xf5, 0xbe},
    {0x03, 0x1a, 0x42, 0xb5, 0x9b},
    {0x01, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0xb5, 0x9b},
    {0x06, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x0f, 0x7f},
    {0x04, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x0f, 0x7f},
    {0x07, 0x4a, 0x03, 0xf5, 0xac},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x4f, 0x7f},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x0f, 0x6f},
    {0x04, 0x05, 0x42, 0x4f, 0x7f},
    {0x02, 0x06, 0x44, 0x0f, 0x6f},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0x43, 0xb5, 0xac},
    {0x01, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x26, 0x43, 0xb5, 0xac},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x47, 0x01, 0xbe},
    {0x04, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x01, 0xbe},
    {0x08, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0xb5, 0x9b},
    {0x01, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x19, 0x42, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x0f, 0xb5, 0xff},
    {0x03, 0x04, 0x44, 0x0f, 0x6f},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x0f, 0x6f},
    {0x07, 0x44, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x0f, 0x6f},
    {0x01, 0x06, 0x42, 0x4f, 0x7f},
    {0x02, 0x02, 0x44, 0x0f, 0x6f},
    {0x05, 0xc1, 0x0f, 0xb5, 0xff},
    {0x03, 0x07, 0x44, 0x0f, 0x6f},
    {0x04, 0x06, 0x42, 0x4f, 0x7f},
    {0x02, 0x07, 0x44, 0x0f, 0x6f},
    {0xc1, 0x43, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x06, 0x6c},
    {0x04, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x06, 0x6c},
    {0x09, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x42, 0xb5, 0x9b},
    {0x05, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x06, 0x6c},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x06, 0x6c},
    {0x0b, 0x47, 0x41, 0xf5, 0xbe},
    {0x03, 0x15, 0x42, 0xb5, 0x9b},
    {0x01, 0x83, 0x4f, 0xf5, 0xff},
    {0x02, 0x15, 0x42, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x4f, 0xf5, 0xff},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x02, 0xf5, 0x9b},
    {0x03, 0x84, 0x4f, 0xb5, 0xff},
    {0x01, 0x81, 0x46, 0x43, 0xce},
    {0x02, 0x84, 0x4f, 0xb5, 0xff},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x06, 0x6c},
    {0x04, 0x81, 0x46, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x06, 0x6c},
    {0x4e, 0x06, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x0f, 0x7f},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x0f, 0x7f},
    {0x08, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x46, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0x4f, 0x7f},
    {0x02, 0x83, 0x46, 0x03, 0xce},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x47, 0x01, 0xbe},
    {0x04, 0x04, 0x42, 0x4f, 0x7f},
    {0x02, 0x81, 0x47, 0x01, 0xbe},
    {0x0c, 0x47, 0x41, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0x0f, 0x7f},
    {0x01, 0x02, 0x42, 0x4f, 0x7f},
    {0x02, 0x0a, 0x42, 0x0f, 0x7f},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x06, 0x6c},
    {0x04, 0x02, 0x42, 0x4f, 0x7f},
    {0x02, 0x04, 0x42, 0x06, 0x6c},
    {0x07, 0x47, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x06, 0x6c},
    {0x01, 0x07, 0x42, 0x4f, 0x7f},
    {0x02, 0x02, 0x42, 0x06, 0x6c},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x06, 0x6c},
    {0x04, 0x07, 0x42, 0x4f, 0x7f},
    {0x02, 0x07, 0x42, 0x06, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xb4, 0xf5, 0x00, 0x0c},
    {0x01, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0xb4, 0xf5, 0x00, 0x0c},
    {0x06, 0xde, 0xb5, 0x00, 0x0f},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0x56, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0xf5, 0x00, 0x77},
    {0x01, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x0b, 0xf5, 0x00, 0x77},
    {0x05, 0xde, 0xb5, 0x00, 0x0f},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x4d, 0xf5, 0x40, 0xdd},
    {0x03, 0x0c, 0x47, 0xb5, 0x8d},
    {0x01, 0x0b, 0x47, 0xf5, 0x8d},
    {0x02, 0x0c, 0x47, 0xb5, 0x8d},
    {0x06, 0x43, 0x07, 0xb5, 0x8d},
    {0x03, 0x09, 0xf5, 0x00, 0x77},
    {0x04, 0x0b, 0x47, 0xf5, 0x8d},
    {0x02, 0x09, 0xf5, 0x00, 0x77},
    {0x07, 0x5e, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x07, 0xb5, 0x8d},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x45, 0xb5, 0x9d},
    {0x01, 0x0c, 0x45, 0xf5, 0x9d},
    {0x02, 0x14, 0x45, 0xb5, 0x9d},
    {0x06, 0x4b, 0x05, 0xb5, 0x9d},
    {0x03, 0x82, 0x4d, 0xb5, 0xdd},
    {0x04, 0x0c, 0x45, 0xf5, 0x9d},
    {0x02, 0x82, 0x4d, 0xb5, 0xdd},
    {0x08, 0x56, 0xf5, 0x00, 0xdd},
    {0x03, 0x18, 0x45, 0xb5, 0x9d},
    {0x01, 0x09, 0x47, 0xf5, 0x8d},
    {0x02, 0x18, 0x45, 0xb5, 0x9d},
    {0x05, 0x4b, 0x05, 0xb5, 0x9d},
    {0x03, 0x0e, 0x47, 0xb5, 0x8d},
    {0x04, 0x09, 0x47, 0xf5, 0x8d},
    {0x02, 0x0e, 0x47, 0xb5, 0x8d},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x45, 0xb5, 0x9d},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x45, 0xb5, 0x9d},
    {0x06, 0x45, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0x45, 0xb5, 0x9d},
    {0x01, 0x14, 0x44, 0xf5, 0xad},
    {0x02, 0x17, 0x45, 0xb5, 0x9d},
    {0x06, 0x4c, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0x44, 0xb5, 0xad},
    {0x03, 0x1b, 0x45, 0xb5, 0x9d},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x45, 0xb5, 0x9d},
    {0x05, 0x4c, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x4d, 0xf5, 0x40, 0xdd},
    {0x03, 0x27, 0x44, 0xb5, 0xad},
    {0x01, 0x18, 0x44, 0xf5, 0xad},
    {0x02, 0x27, 0x44, 0xb5, 0xad},
    {0x06, 0x49, 0x05, 0xb5, 0x9d},
    {0x03, 0x10, 0x47, 0xb5, 0x8d},
    {0x04, 0x18, 0x44, 0xf5, 0xad},
    {0x02, 0x10, 0x47, 0xb5, 0x8d},
    {0x07, 0x4b, 0x04, 0xf5, 0xad},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0x45, 0xf5, 0x9d},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0x05, 0xb5, 0x9d},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x45, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0x45, 0xb5, 0x9d},
    {0x01, 0x1c, 0x44, 0xf5, 0xad},
    {0x02, 0x13, 0x45, 0xb5, 0x9d},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0xf5, 0x00, 0x77},
    {0x04, 0x1c, 0x44, 0xf5, 0xad},
    {0x02, 0x08, 0xf5, 0x00, 0x77},
    {0x08, 0x43, 0x44, 0xb5, 0xad},
    {0x03, 0x37, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x37, 0x44, 0xb5, 0xad},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x4d, 0xb5, 0xdd},
    {0x04, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x81, 0x4d, 0xb5, 0xdd},
    {0x0c, 0x4d, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0xf5, 0x00, 0x77},
    {0x01, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x0a, 0xf5, 0x00, 0x77},
    {0x06, 0x46, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xdc, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x2d, 0x44, 0xb5, 0xad},
    {0x01, 0x17, 0x44, 0xf5, 0xad},
    {0x02, 0x2d, 0x44, 0xb5, 0xad},
    {0x06, 0x54, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0x42, 0xb5, 0xbd},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x35, 0x44, 0xb5, 0xad},
    {0x01, 0x1b, 0x44, 0xf5, 0xad},
    {0x02, 0x35, 0x44, 0xb5, 0xad},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x44, 0xf5, 0xad},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0x02, 0xf5, 0xbd},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x23, 0x44, 0xb5, 0xad},
    {0x01, 0x27, 0x42, 0xf5, 0xbd},
    {0x02, 0x23, 0x44, 0xb5, 0xad},
    {0x06, 0x58, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x43, 0x02, 0xbd},
    {0x04, 0x27, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x43, 0x02, 0xbd},
    {0x08, 0x4b, 0x42, 0xb5, 0xbd},
    {0x03, 0x33, 0x44, 0xb5, 0xad},
    {0x01, 0x10, 0x45, 0xf5, 0x9d},
    {0x02, 0x33, 0x44, 0xb5, 0xad},
    {0x05, 0x58, 0x02, 0xb5, 0xbd},
    {0x03, 0x0f, 0x47, 0xb5, 0x8d},
    {0x04, 0x10, 0x45, 0xf5, 0x9d},
    {0x02, 0x0f, 0x47, 0xb5, 0x8d},
    {0x54, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3f, 0x44, 0xb5, 0xad},
    {0x01, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x3f, 0x44, 0xb5, 0xad},
    {0x06, 0x4e, 0x04, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x04, 0xf5, 0xad},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x04, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x0d, 0x47, 0xb5, 0x8d},
    {0x01, 0x13, 0x44, 0xf5, 0xad},
    {0x02, 0x0d, 0x47, 0xb5, 0x8d},
    {0x06, 0x5c, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0x44, 0xb5, 0xad},
    {0x03, 0x97, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x47, 0xf5, 0x8d},
    {0x02, 0x97, 0xf5, 0x00, 0x0b},
    {0x05, 0x5c, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x47, 0xf5, 0x8d},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x2b, 0x44, 0xb5, 0xad},
    {0x01, 0x37, 0x42, 0xf5, 0xbd},
    {0x02, 0x2b, 0x44, 0xb5, 0xad},
    {0x06, 0x44, 0x07, 0xb5, 0x8d},
    {0x03, 0x11, 0x47, 0xb5, 0x8d},
    {0x04, 0x37, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x47, 0xb5, 0x8d},
    {0x07, 0xda, 0xb5, 0x40, 0x0b},
    {0x03, 0x93, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x93, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x07, 0xb5, 0x8d},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x47, 0xb5, 0x8d},
    {0x01, 0x0a, 0x47, 0xf5, 0x8d},
    {0x02, 0x01, 0x47, 0xb5, 0x8d},
    {0x06, 0x42, 0x07, 0xb5, 0x8d},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x47, 0xf5, 0x8d},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x07, 0xb5, 0x8d},
    {0x03, 0x81, 0x43, 0x02, 0xbd},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0x02, 0xbd},
    {0x0c, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x44, 0xb5, 0xad},
    {0x01, 0x2d, 0x42, 0xf5, 0xbd},
    {0x02, 0x1d, 0x44, 0xb5, 0xad},
    {0x06, 0x57, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x5a, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x62, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x48, 0xb5, 0xdd},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x48, 0xb5, 0xdd},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x08, 0xb5, 0x00, 0xdd},
    {0x03, 0x21, 0x44, 0xb5, 0xad},
    {0x01, 0x35, 0x42, 0xf5, 0xbd},
    {0x02, 0x21, 0x44, 0xb5, 0xad},
    {0x06, 0x5b, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0xf5, 0x00, 0x07},
    {0x04, 0x35, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0xf5, 0x00, 0x07},
    {0x08, 0x5a, 0xf5, 0x00, 0xdd},
    {0x03, 0x31, 0x44, 0xb5, 0xad},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0x44, 0xb5, 0xad},
    {0x05, 0x5b, 0x02, 0xb5, 0xbd},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0xc3, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x3d, 0x44, 0xb5, 0xad},
    {0x01, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x44, 0xb5, 0xad},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x95, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x2f, 0x44, 0xb5, 0xad},
    {0x01, 0x23, 0x42, 0xf5, 0xbd},
    {0x02, 0x2f, 0x44, 0xb5, 0xad},
    {0x06, 0x68, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x08, 0x6d},
    {0x04, 0x23, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x08, 0x6d},
    {0x09, 0x49, 0x42, 0xb5, 0xbd},
    {0x03, 0x3b, 0x44, 0xb5, 0xad},
    {0x01, 0x82, 0x48, 0xf5, 0xdd},
    {0x02, 0x3b, 0x44, 0xb5, 0xad},
    {0x05, 0x68, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x08, 0x6d},
    {0x04, 0x82, 0x48, 0xf5, 0xdd},
    {0x02, 0x05, 0x43, 0x08, 0x6d},
    {0x0b, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x29, 0x44, 0xb5, 0xad},
    {0x01, 0x33, 0x42, 0xf5, 0xbd},
    {0x02, 0x29, 0x44, 0xb5, 0xad},
    {0x06, 0x50, 0x04, 0xb5, 0xad},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x72, 0xb5, 0x40, 0xdd},
    {0x03, 0x8f, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x45, 0xf5, 0x9d},
    {0x02, 0x8f, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x04, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x08, 0x6d},
    {0x04, 0x0f, 0x45, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x08, 0x6d},
    {0x5f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x44, 0xb5, 0xad},
    {0x01, 0x3f, 0x42, 0xf5, 0xbd},
    {0x02, 0x1f, 0x44, 0xb5, 0xad},
    {0x06, 0xce, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0x42, 0xb5, 0xbd},
    {0x03, 0x39, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0x44, 0xb5, 0xad},
    {0x05, 0xce, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xf5, 0x00, 0x07},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0xf5, 0x00, 0x07},
    {0x0c, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x08, 0x6d},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x08, 0x6d},
    {0x07, 0x4e, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x08, 0x6d},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x08, 0x6d},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x08, 0x6d},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x08, 0x6d},
    {0xdd, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x45, 0xb5, 0x9d},
    {0x01, 0x0d, 0x45, 0xf5, 0x9d},
    {0x02, 0x16, 0x45, 0xb5, 0x9d},
    {0x06, 0x53, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x45, 0xf5, 0x9d},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xcc, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x45, 0xb5, 0x9d},
    {0x01, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x45, 0xb5, 0x9d},
    {0x06, 0x48, 0x05, 0xb5, 0x9d},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x7e, 0xb5, 0x40, 0xdd},
    {0x03, 0x8b, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x05, 0xb5, 0x9d},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x7a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x44, 0xb5, 0xad},
    {0x01, 0x2b, 0x42, 0xf5, 0xbd},
    {0x02, 0x25, 0x44, 0xb5, 0xad},
    {0x06, 0x78, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x45, 0x02, 0xbd},
    {0x04, 0x2b, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x45, 0x02, 0xbd},
    {0x08, 0xcc, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x45, 0xb5, 0x9d},
    {0x01, 0x11, 0x45, 0xf5, 0x9d},
    {0x02, 0x19, 0x45, 0xb5, 0x9d},
    {0x05, 0x78, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0x45, 0xf5, 0x9d},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0x8f, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0x45, 0xf5, 0x9d},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0x05, 0xb5, 0x9d},
    {0x03, 0x03, 0x42, 0x08, 0x6d},
    {0x04, 0x01, 0x45, 0xf5, 0x9d},
    {0x02, 0x03, 0x42, 0x08, 0x6d},
    {0x09, 0x46, 0x44, 0xb5, 0xad},
    {0x03, 0x12, 0x45, 0xb5, 0x9d},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0x45, 0xb5, 0x9d},
    {0x05, 0x4a, 0x05, 0xb5, 0x9d},
    {0x03, 0x05, 0x42, 0x08, 0x6d},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x08, 0x6d},
    {0x0b, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x45, 0xb5, 0x9d},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x45, 0xb5, 0x9d},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0x05, 0xf5, 0x9d},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x48, 0xf5, 0xdd},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x08, 0x6d},
    {0x04, 0x81, 0x48, 0xf5, 0xdd},
    {0x02, 0x06, 0x42, 0x08, 0x6d},
    {0x4e, 0x08, 0xb5, 0x00, 0xdd},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0x48, 0xb5, 0xdd},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x48, 0xb5, 0xdd},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0x02, 0xbd},
    {0x0c, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x08, 0x6d},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x08, 0x6d},
    {0x07, 0x47, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x08, 0x6d},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x08, 0x6d},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x08, 0x6d},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x08, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xa3, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x42, 0xf5, 0xbd},
    {0x02, 0xa3, 0xf5, 0x00, 0x0e},
    {0x06, 0x6e, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x48, 0xb5, 0x6c},
    {0x04, 0x1d, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x48, 0xb5, 0x6c},
    {0x09, 0x65, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0xb5, 0x7b},
    {0x01, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x0b, 0x46, 0xb5, 0x7b},
    {0x05, 0x6e, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x48, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x05, 0x48, 0xb5, 0x6c},
    {0x0a, 0x6c, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x41, 0xb5, 0x8b},
    {0x01, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x0c, 0x41, 0xb5, 0x8b},
    {0x06, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x09, 0x46, 0xb5, 0x7b},
    {0x04, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x09, 0x46, 0xb5, 0x7b},
    {0x07, 0x70, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x48, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x06, 0x48, 0xb5, 0x6c},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x43, 0xb5, 0x9b},
    {0x01, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x14, 0x43, 0xb5, 0x9b},
    {0x06, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x82, 0x6c, 0xb5, 0xff},
    {0x04, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x82, 0x6c, 0xb5, 0xff},
    {0x08, 0x65, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0xb5, 0x9b},
    {0x01, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x18, 0x43, 0xb5, 0x9b},
    {0x05, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x0e, 0x41, 0xb5, 0x8b},
    {0x04, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x0e, 0x41, 0xb5, 0x8b},
    {0x4f, 0x04, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x43, 0xb5, 0x9b},
    {0x01, 0x9a, 0x44, 0xf5, 0xdd},
    {0x02, 0x1c, 0x43, 0xb5, 0x9b},
    {0x06, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x48, 0xb5, 0x6c},
    {0x04, 0x9a, 0x44, 0xf5, 0xdd},
    {0x02, 0x04, 0x48, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x48, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x48, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x48, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x48, 0xb5, 0x6c},
    {0x8b, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x17, 0x43, 0xb5, 0x9b},
    {0x01, 0x21, 0x42, 0xf5, 0xbd},
    {0x02, 0x17, 0x43, 0xb5, 0x9b},
    {0x06, 0x76, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x21, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x1b, 0x43, 0xb5, 0x9b},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x43, 0xb5, 0x9b},
    {0x05, 0x76, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x6c, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x44, 0xb5, 0xad},
    {0x01, 0x31, 0x42, 0xf5, 0xbd},
    {0x02, 0x28, 0x44, 0xb5, 0xad},
    {0x06, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x10, 0x41, 0xb5, 0x8b},
    {0x04, 0x31, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x41, 0xb5, 0x8b},
    {0x07, 0x7c, 0xb5, 0x40, 0xdd},
    {0x03, 0x8d, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x8d, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x71, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0xb5, 0x9b},
    {0x01, 0x3d, 0x42, 0xf5, 0xbd},
    {0x02, 0x13, 0x43, 0xb5, 0x9b},
    {0x06, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0xb5, 0x7b},
    {0x04, 0x3d, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x46, 0xb5, 0x7b},
    {0x08, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x38, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x38, 0x44, 0xb5, 0xad},
    {0x05, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x6c, 0xb5, 0xff},
    {0x04, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x81, 0x6c, 0xb5, 0xff},
    {0x0c, 0x6c, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x46, 0xb5, 0x7b},
    {0x01, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x0a, 0x46, 0xb5, 0x7b},
    {0x06, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe2, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x44, 0xb5, 0xad},
    {0x01, 0x2f, 0x42, 0xf5, 0xbd},
    {0x02, 0x2e, 0x44, 0xb5, 0xad},
    {0x06, 0x64, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x04, 0x6d},
    {0x04, 0x2f, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x04, 0x6d},
    {0x09, 0x59, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x43, 0x04, 0x7d},
    {0x01, 0x03, 0x43, 0x44, 0x7d},
    {0x02, 0x0b, 0x43, 0x04, 0x7d},
    {0x05, 0x64, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x04, 0x6d},
    {0x04, 0x03, 0x43, 0x44, 0x7d},
    {0x02, 0x05, 0x41, 0x04, 0x6d},
    {0x0a, 0x51, 0xf5, 0x40, 0xdd},
    {0x03, 0x36, 0x44, 0xb5, 0xad},
    {0x01, 0x3b, 0x42, 0xf5, 0xbd},
    {0x02, 0x36, 0x44, 0xb5, 0xad},
    {0x06, 0xc2, 0x04, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x04, 0x7d},
    {0x04, 0x3b, 0x42, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x04, 0x7d},
    {0x07, 0x6a, 0xb5, 0x40, 0xdd},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x44, 0x7d},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x04, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x04, 0x6d},
    {0x04, 0x05, 0x43, 0x44, 0x7d},
    {0x02, 0x06, 0x41, 0x04, 0x6d},
    {0x6d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x44, 0xb5, 0xad},
    {0x01, 0x29, 0x42, 0xf5, 0xbd},
    {0x02, 0x24, 0x44, 0xb5, 0xad},
    {0x06, 0x74, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x51, 0xb5, 0xdd},
    {0x04, 0x29, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x51, 0xb5, 0xdd},
    {0x08, 0x59, 0xf5, 0x00, 0xdd},
    {0x03, 0x34, 0x44, 0xb5, 0xad},
    {0x01, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x34, 0x44, 0xb5, 0xad},
    {0x05, 0x74, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x41, 0xb5, 0x8b},
    {0x04, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x41, 0xb5, 0x8b},
    {0x65, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x44, 0xb5, 0xad},
    {0x01, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x44, 0xb5, 0xad},
    {0x06, 0x4f, 0x04, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x04, 0x6d},
    {0x04, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x04, 0x6d},
    {0x07, 0x50, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x04, 0x6d},
    {0x01, 0x06, 0x43, 0x44, 0x7d},
    {0x02, 0x02, 0x41, 0x04, 0x6d},
    {0x05, 0x4f, 0x04, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x04, 0x6d},
    {0x04, 0x06, 0x43, 0x44, 0x7d},
    {0x02, 0x07, 0x41, 0x04, 0x6d},
    {0xc7, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x41, 0xb5, 0x8b},
    {0x01, 0x1f, 0x42, 0xf5, 0xbd},
    {0x02, 0x0d, 0x41, 0xb5, 0x8b},
    {0x06, 0x40, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x1f, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x4f, 0x43, 0xb5, 0xce},
    {0x03, 0x99, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x99, 0xf5, 0x00, 0x0b},
    {0x05, 0x40, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x51, 0xf5, 0x40, 0xdd},
    {0x03, 0x2c, 0x44, 0xb5, 0xad},
    {0x01, 0x39, 0x42, 0xf5, 0xbd},
    {0x02, 0x2c, 0x44, 0xb5, 0xad},
    {0x06, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x11, 0x41, 0xb5, 0x8b},
    {0x04, 0x39, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x41, 0xb5, 0x8b},
    {0x07, 0xd1, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x95, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x41, 0xb5, 0x8b},
    {0x01, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x01, 0x41, 0xb5, 0x8b},
    {0x06, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x04, 0x7d},
    {0x04, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x04, 0x7d},
    {0x08, 0x4f, 0x43, 0xb5, 0xce},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0x44, 0x7d},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x81, 0x51, 0xb5, 0xdd},
    {0x04, 0x04, 0x43, 0x44, 0x7d},
    {0x02, 0x81, 0x51, 0xb5, 0xdd},
    {0x0c, 0x51, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x43, 0x04, 0x7d},
    {0x01, 0x02, 0x43, 0x44, 0x7d},
    {0x02, 0x0a, 0x43, 0x04, 0x7d},
    {0x06, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0x44, 0x7d},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0x44, 0x7d},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0x44, 0x7d},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xf4, 0x44, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0x44, 0xb5, 0xad},
    {0x01, 0x16, 0x44, 0xf5, 0xad},
    {0x02, 0x1e, 0x44, 0xb5, 0xad},
    {0x06, 0x4d, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0xc5, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x60, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0xc1, 0xb5, 0x0d},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0xc1, 0xb5, 0x0d},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x81, 0xb5, 0x00, 0x0d},
    {0x03, 0x22, 0x44, 0xb5, 0xad},
    {0x01, 0x1a, 0x44, 0xf5, 0xad},
    {0x02, 0x22, 0x44, 0xb5, 0xad},
    {0x06, 0xdb, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xf5, 0x00, 0x07},
    {0x04, 0x1a, 0x44, 0xf5, 0xad},
    {0x02, 0x82, 0xf5, 0x00, 0x07},
    {0x08, 0xc5, 0xf5, 0x00, 0x0e},
    {0x03, 0x32, 0x44, 0xb5, 0xad},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0x44, 0xb5, 0xad},
    {0x05, 0xdb, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x44, 0xb5, 0xad},
    {0x01, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x44, 0xb5, 0xad},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0x04, 0xf5, 0xad},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x99, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x30, 0x44, 0xb5, 0xad},
    {0x01, 0x25, 0x42, 0xf5, 0xbd},
    {0x02, 0x30, 0x44, 0xb5, 0xad},
    {0x06, 0x6c, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x81, 0x6d},
    {0x04, 0x25, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x81, 0x6d},
    {0x09, 0x44, 0x44, 0xb5, 0xad},
    {0x03, 0x3c, 0x44, 0xb5, 0xad},
    {0x01, 0x82, 0xc1, 0xf5, 0x0d},
    {0x02, 0x3c, 0x44, 0xb5, 0xad},
    {0x05, 0x6c, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x81, 0x6d},
    {0x04, 0x82, 0xc1, 0xf5, 0x0d},
    {0x02, 0x05, 0x43, 0x81, 0x6d},
    {0x0b, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x2a, 0x44, 0xb5, 0xad},
    {0x01, 0x19, 0x44, 0xf5, 0xad},
    {0x02, 0x2a, 0x44, 0xb5, 0xad},
    {0x06, 0x51, 0x04, 0xb5, 0xad},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0x44, 0xf5, 0xad},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x7a, 0xb5, 0x40, 0xdd},
    {0x03, 0x91, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x91, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x04, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x81, 0x6d},
    {0x04, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x81, 0x6d},
    {0x69, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x44, 0xb5, 0xad},
    {0x01, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x44, 0xb5, 0xad},
    {0x06, 0xd6, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0x44, 0xb5, 0xad},
    {0x03, 0x3a, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0x44, 0xb5, 0xad},
    {0x05, 0xd6, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xf5, 0x00, 0x07},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xf5, 0x00, 0x07},
    {0x0c, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x81, 0x6d},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x81, 0x6d},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x81, 0x6d},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x81, 0x6d},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x81, 0x6d},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x81, 0x6d},
    {0xe6, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x43, 0xb5, 0x9b},
    {0x01, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x16, 0x43, 0xb5, 0x9b},
    {0x06, 0x41, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x44, 0x04, 0x6d},
    {0x04, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x04, 0x6d},
    {0x09, 0x42, 0x44, 0xb5, 0xad},
    {0x03, 0x0b, 0x42, 0x04, 0x7d},
    {0x01, 0x03, 0x42, 0x44, 0x7d},
    {0x02, 0x0b, 0x42, 0x04, 0x7d},
    {0x05, 0x41, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x44, 0x04, 0x6d},
    {0x04, 0x03, 0x42, 0x44, 0x7d},
    {0x02, 0x05, 0x44, 0x04, 0x6d},
    {0x0a, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x43, 0xb5, 0x9b},
    {0x01, 0x12, 0x44, 0xf5, 0xad},
    {0x02, 0x1a, 0x43, 0xb5, 0x9b},
    {0x06, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x04, 0x7d},
    {0x04, 0x12, 0x44, 0xf5, 0xad},
    {0x02, 0x09, 0x42, 0x04, 0x7d},
    {0x07, 0x4a, 0x04, 0xf5, 0xad},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x44, 0x7d},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x04, 0x6d},
    {0x04, 0x05, 0x42, 0x44, 0x7d},
    {0x02, 0x06, 0x44, 0x04, 0x6d},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0x44, 0xb5, 0xad},
    {0x01, 0x15, 0x44, 0xf5, 0xad},
    {0x02, 0x26, 0x44, 0xb5, 0xad},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0x02, 0xbd},
    {0x04, 0x15, 0x44, 0xf5, 0xad},
    {0x02, 0x82, 0x46, 0x02, 0xbd},
    {0x08, 0x42, 0x44, 0xb5, 0xad},
    {0x03, 0x19, 0x43, 0xb5, 0x9b},
    {0x01, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x19, 0x43, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x04, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x04, 0x6d},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x04, 0x6d},
    {0x07, 0x44, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x04, 0x6d},
    {0x01, 0x06, 0x42, 0x44, 0x7d},
    {0x02, 0x02, 0x44, 0x04, 0x6d},
    {0x05, 0xc1, 0x04, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x04, 0x6d},
    {0x04, 0x06, 0x42, 0x44, 0x7d},
    {0x02, 0x07, 0x44, 0x04, 0x6d},
    {0xc1, 0x44, 0xb5, 0x40, 0x0d},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x81, 0x6d},
    {0x04, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x81, 0x6d},
    {0x09, 0x47, 0x44, 0xb5, 0xad},
    {0x03, 0x12, 0x43, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0xb5, 0x9b},
    {0x05, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x81, 0x6d},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x81, 0x6d},
    {0x0b, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x43, 0xb5, 0x9b},
    {0x01, 0x83, 0x44, 0xf5, 0xdd},
    {0x02, 0x15, 0x43, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x44, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0xf5, 0x9b},
    {0x03, 0x84, 0x44, 0xb5, 0xdd},
    {0x01, 0x81, 0xc1, 0xf5, 0x0d},
    {0x02, 0x84, 0x44, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x81, 0x6d},
    {0x04, 0x81, 0xc1, 0xf5, 0x0d},
    {0x02, 0x06, 0x42, 0x81, 0x6d},
    {0x4e, 0x81, 0xb5, 0x00, 0x0d},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x04, 0x7d},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x04, 0x7d},
    {0x08, 0x47, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0xc1, 0xb5, 0x0d},
    {0x01, 0x04, 0x42, 0x44, 0x7d},
    {0x02, 0x83, 0xc1, 0xb5, 0x0d},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0x44, 0x7d},
    {0x02, 0x81, 0x46, 0x02, 0xbd},
    {0x0c, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x04, 0x7d},
    {0x01, 0x02, 0x42, 0x44, 0x7d},
    {0x02, 0x0a, 0x42, 0x04, 0x7d},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x81, 0x6d},
    {0x04, 0x02, 0x42, 0x44, 0x7d},
    {0x02, 0x04, 0x42, 0x81, 0x6d},
    {0x07, 0x47, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x81, 0x6d},
    {0x01, 0x07, 0x42, 0x44, 0x7d},
    {0x02, 0x02, 0x42, 0x81, 0x6d},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x81, 0x6d},
    {0x04, 0x07, 0x42, 0x44, 0x7d},
    {0x02, 0x07, 0x42, 0x81, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xb4, 0xf5, 0x00, 0x0b},
    {0x01, 0xa6, 0xf5, 0x40, 0x0f},
    {0x02, 0xb4, 0xf5, 0x00, 0x0b},
    {0x06, 0x5e, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x4c, 0xb5, 0x6d},
    {0x04, 0xa6, 0xf5, 0x40, 0x0f},
    {0x02, 0x03, 0x4c, 0xb5, 0x6d},
    {0x09, 0x4d, 0x43, 0xb5, 0xce},
    {0x03, 0x0b, 0x47, 0xb5, 0x7c},
    {0x01, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x0b, 0x47, 0xb5, 0x7c},
    {0x05, 0x5e, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x4c, 0xb5, 0x6d},
    {0x04, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x05, 0x4c, 0xb5, 0x6d},
    {0x0a, 0x41, 0xf5, 0x40, 0xdd},
    {0x03, 0x0c, 0x45, 0xb5, 0x8c},
    {0x01, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x0c, 0x45, 0xb5, 0x8c},
    {0x06, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x09, 0x47, 0xb5, 0x7c},
    {0x04, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x09, 0x47, 0xb5, 0x7c},
    {0x07, 0x56, 0x03, 0xf5, 0xce},
    {0x03, 0x9a, 0x4a, 0xb5, 0xdd},
    {0x01, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x9a, 0x4a, 0xb5, 0xdd},
    {0x05, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x4c, 0xb5, 0x6d},
    {0x04, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x06, 0x4c, 0xb5, 0x6d},
    {0x4d, 0x0a, 0xb5, 0x00, 0xdd},
    {0x03, 0x14, 0x44, 0xb5, 0x9c},
    {0x01, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x14, 0x44, 0xb5, 0x9c},
    {0x06, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x82, 0x41, 0xb5, 0xdd},
    {0x04, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x82, 0x41, 0xb5, 0xdd},
    {0x08, 0x4d, 0x43, 0xb5, 0xce},
    {0x03, 0x18, 0x44, 0xb5, 0x9c},
    {0x01, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x18, 0x44, 0xb5, 0x9c},
    {0x05, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x0e, 0x45, 0xb5, 0x8c},
    {0x04, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x0e, 0x45, 0xb5, 0x8c},
    {0x4f, 0x02, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x44, 0xb5, 0x9c},
    {0x01, 0x9a, 0x42, 0xf5, 0xdd},
    {0x02, 0x1c, 0x44, 0xb5, 0x9c},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x4c, 0xb5, 0x6d},
    {0x04, 0x9a, 0x42, 0xf5, 0xdd},
    {0x02, 0x04, 0x4c, 0xb5, 0x6d},
    {0x07, 0x43, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x4c, 0xb5, 0x6d},
    {0x01, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x4c, 0xb5, 0x6d},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x4c, 0xb5, 0x6d},
    {0x04, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x4c, 0xb5, 0x6d},
    {0x52, 0x06, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x44, 0xb5, 0x9c},
    {0x01, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x17, 0x44, 0xb5, 0x9c},
    {0x06, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0x0a, 0x6d},
    {0x04, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0x0a, 0x6d},
    {0x09, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x1b, 0x44, 0xb5, 0x9c},
    {0x01, 0x82, 0x4a, 0xf5, 0xdd},
    {0x02, 0x1b, 0x44, 0xb5, 0x9c},
    {0x05, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0x0a, 0x6d},
    {0x04, 0x82, 0x4a, 0xf5, 0xdd},
    {0x02, 0x05, 0x43, 0x0a, 0x6d},
    {0x0b, 0x41, 0xf5, 0x40, 0xdd},
    {0x03, 0x27, 0x42, 0xb5, 0xac},
    {0x01, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x27, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x10, 0x45, 0xb5, 0x8c},
    {0x04, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x45, 0xb5, 0x8c},
    {0x07, 0x4b, 0x02, 0xf5, 0xac},
    {0x03, 0x89, 0x46, 0xb5, 0xee},
    {0x01, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x89, 0x46, 0xb5, 0xee},
    {0x05, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0x0a, 0x6d},
    {0x04, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x0a, 0x6d},
    {0x51, 0x06, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x44, 0xb5, 0x9c},
    {0x01, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x13, 0x44, 0xb5, 0x9c},
    {0x06, 0xda, 0x06, 0xb5, 0xee},
    {0x03, 0x08, 0x47, 0xb5, 0x7c},
    {0x04, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x08, 0x47, 0xb5, 0x7c},
    {0x08, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x37, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x37, 0x42, 0xb5, 0xac},
    {0x05, 0xda, 0x06, 0xb5, 0xee},
    {0x03, 0x81, 0x41, 0xb5, 0xdd},
    {0x04, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x81, 0x41, 0xb5, 0xdd},
    {0x0c, 0x41, 0xf5, 0x40, 0xdd},
    {0x03, 0x0a, 0x47, 0xb5, 0x7c},
    {0x01, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x0a, 0x47, 0xb5, 0x7c},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0x0a, 0x6d},
    {0x04, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x04, 0x43, 0x0a, 0x6d},
    {0x07, 0x45, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0x0a, 0x6d},
    {0x01, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x43, 0x0a, 0x6d},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0x0a, 0x6d},
    {0x04, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x43, 0x0a, 0x6d},
    {0xe0, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x42, 0xb5, 0xac},
    {0x01, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x2d, 0x42, 0xb5, 0xac},
    {0x06, 0x62, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x02, 0x6d},
    {0x04, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0x02, 0x6d},
    {0x09, 0x52, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x43, 0x02, 0x7d},
    {0x01, 0x03, 0x43, 0x42, 0x7d},
    {0x02, 0x0b, 0x43, 0x02, 0x7d},
    {0x05, 0x62, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x02, 0x6d},
    {0x04, 0x03, 0x43, 0x42, 0x7d},
    {0x02, 0x05, 0x41, 0x02, 0x6d},
    {0x0a, 0x48, 0x43, 0xf5, 0xce},
    {0x03, 0x35, 0x42, 0xb5, 0xac},
    {0x01, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x35, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x02, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x02, 0x7d},
    {0x04, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0x02, 0x7d},
    {0x07, 0x5a, 0x03, 0xf5, 0xce},
    {0x03, 0x87, 0x46, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x42, 0x7d},
    {0x02, 0x87, 0x46, 0xb5, 0xee},
    {0x05, 0xc2, 0x02, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x02, 0x6d},
    {0x04, 0x05, 0x43, 0x42, 0x7d},
    {0x02, 0x06, 0x41, 0x02, 0x6d},
    {0x73, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x42, 0xb5, 0xac},
    {0x01, 0x28, 0x42, 0xf5, 0xbd},
    {0x02, 0x23, 0x42, 0xb5, 0xac},
    {0x06, 0x72, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0x48, 0x03, 0xce},
    {0x04, 0x28, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x48, 0x03, 0xce},
    {0x08, 0x52, 0xf5, 0x00, 0xdd},
    {0x03, 0x33, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x33, 0x42, 0xb5, 0xac},
    {0x05, 0x72, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x45, 0xb5, 0x8c},
    {0x04, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x45, 0xb5, 0x8c},
    {0x63, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x42, 0xb5, 0xac},
    {0x01, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x42, 0xb5, 0xac},
    {0x06, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x02, 0x6d},
    {0x04, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x02, 0x6d},
    {0x07, 0x49, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0x02, 0x6d},
    {0x01, 0x06, 0x43, 0x42, 0x7d},
    {0x02, 0x02, 0x41, 0x02, 0x6d},
    {0x05, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x02, 0x6d},
    {0x04, 0x06, 0x43, 0x42, 0x7d},
    {0x02, 0x07, 0x41, 0x02, 0x6d},
    {0xc5, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x45, 0xb5, 0x8c},
    {0x01, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x0d, 0x45, 0xb5, 0x8c},
    {0x06, 0x7e, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0x0a, 0x6d},
    {0x04, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0x0a, 0x6d},
    {0x09, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x98, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x98, 0xf5, 0x00, 0x0b},
    {0x05, 0x7e, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0x0a, 0x6d},
    {0x04, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0x0a, 0x6d},
    {0x0b, 0x48, 0x43, 0xf5, 0xce},
    {0x03, 0x2b, 0x42, 0xb5, 0xac},
    {0x01, 0x38, 0x42, 0xf5, 0xbd},
    {0x02, 0x2b, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x11, 0x45, 0xb5, 0x8c},
    {0x04, 0x38, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x45, 0xb5, 0x8c},
    {0x07, 0xca, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x4a, 0xf5, 0xdd},
    {0x02, 0x94, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0x0a, 0x6d},
    {0x04, 0x81, 0x4a, 0xf5, 0xdd},
    {0x02, 0x06, 0x42, 0x0a, 0x6d},
    {0x4e, 0x0a, 0xb5, 0x00, 0xdd},
    {0x03, 0x01, 0x45, 0xb5, 0x8c},
    {0x01, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x01, 0x45, 0xb5, 0x8c},
    {0x06, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0x02, 0x7d},
    {0x04, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0x02, 0x7d},
    {0x08, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x4a, 0xb5, 0xdd},
    {0x01, 0x04, 0x43, 0x42, 0x7d},
    {0x02, 0x83, 0x4a, 0xb5, 0xdd},
    {0x05, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x81, 0x48, 0x03, 0xce},
    {0x04, 0x04, 0x43, 0x42, 0x7d},
    {0x02, 0x81, 0x48, 0x03, 0xce},
    {0x0c, 0x48, 0x43, 0xf5, 0xce},
    {0x03, 0x0a, 0x43, 0x02, 0x7d},
    {0x01, 0x02, 0x43, 0x42, 0x7d},
    {0x02, 0x0a, 0x43, 0x02, 0x7d},
    {0x06, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0x0a, 0x6d},
    {0x04, 0x02, 0x43, 0x42, 0x7d},
    {0x02, 0x04, 0x42, 0x0a, 0x6d},
    {0x07, 0x46, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x0a, 0x6d},
    {0x01, 0x07, 0x43, 0x42, 0x7d},
    {0x02, 0x02, 0x42, 0x0a, 0x6d},
    {0x05, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0x0a, 0x6d},
    {0x04, 0x07, 0x43, 0x42, 0x7d},
    {0x02, 0x07, 0x42, 0x0a, 0x6d},
    {0xf4, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x1d, 0x42, 0xb5, 0xac},
    {0x01, 0x2e, 0x42, 0xf5, 0xbd},
    {0x02, 0x1d, 0x42, 0xb5, 0xac},
    {0x06, 0x70, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x46, 0x06, 0x6e},
    {0x04, 0x2e, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0x06, 0x6e},
    {0x09, 0x55, 0xf5, 0x00, 0xdd},
    {0x03, 0x0b, 0x41, 0x06, 0x7e},
    {0x01, 0x03, 0x41, 0x46, 0x7e},
    {0x02, 0x0b, 0x41, 0x06, 0x7e},
    {0x05, 0x70, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x46, 0x06, 0x6e},
    {0x04, 0x03, 0x41, 0x46, 0x7e},
    {0x02, 0x05, 0x46, 0x06, 0x6e},
    {0x0a, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x0c, 0x43, 0x06, 0x8e},
    {0x01, 0x0b, 0x43, 0x46, 0x8e},
    {0x02, 0x0c, 0x43, 0x06, 0x8e},
    {0x06, 0x43, 0x03, 0x06, 0x8e},
    {0x03, 0x09, 0x41, 0x06, 0x7e},
    {0x04, 0x0b, 0x43, 0x46, 0x8e},
    {0x02, 0x09, 0x41, 0x06, 0x7e},
    {0x07, 0x66, 0xb5, 0x40, 0xdd},
    {0x03, 0x9a, 0x44, 0x03, 0xce},
    {0x01, 0x05, 0x41, 0x46, 0x7e},
    {0x02, 0x9a, 0x44, 0x03, 0xce},
    {0x05, 0x43, 0x03, 0x06, 0x8e},
    {0x03, 0x06, 0x46, 0x06, 0x6e},
    {0x04, 0x05, 0x41, 0x46, 0x7e},
    {0x02, 0x06, 0x46, 0x06, 0x6e},
    {0x4d, 0x04, 0x03, 0xb5, 0xce},
    {0x03, 0x21, 0x42, 0xb5, 0xac},
    {0x01, 0x36, 0x42, 0xf5, 0xbd},
    {0x02, 0x21, 0x42, 0xb5, 0xac},
    {0x06, 0x7c, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0xc3, 0xb5, 0x0d},
    {0x04, 0x36, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0xc3, 0xb5, 0x0d},
    {0x08, 0x55, 0xf5, 0x00, 0xdd},
    {0x03, 0x31, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x46, 0x8e},
    {0x02, 0x31, 0x42, 0xb5, 0xac},
    {0x05, 0x7c, 0x03, 0xb5, 0xce},
    {0x03, 0x0e, 0x43, 0x06, 0x8e},
    {0x04, 0x09, 0x43, 0x46, 0x8e},
    {0x02, 0x0e, 0x43, 0x06, 0x8e},
    {0x5b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x42, 0xb5, 0xac},
    {0x01, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x06, 0x8e},
    {0x03, 0x04, 0x46, 0x06, 0x6e},
    {0x04, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0x06, 0x6e},
    {0x07, 0xc2, 0x06, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x06, 0x6e},
    {0x01, 0x06, 0x41, 0x46, 0x7e},
    {0x02, 0x02, 0x46, 0x06, 0x6e},
    {0x05, 0x45, 0x03, 0x06, 0x8e},
    {0x03, 0x07, 0x46, 0x06, 0x6e},
    {0x04, 0x06, 0x41, 0x46, 0x7e},
    {0x02, 0x07, 0x46, 0x06, 0x6e},
    {0x7b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x42, 0xb5, 0xac},
    {0x01, 0x24, 0x42, 0xf5, 0xbd},
    {0x02, 0x2f, 0x42, 0xb5, 0xac},
    {0x06, 0x6a, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x04, 0x6c},
    {0x04, 0x24, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x04, 0x6c},
    {0x09, 0x51, 0x43, 0xb5, 0xce},
    {0x03, 0x3b, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x44, 0x43, 0xce},
    {0x02, 0x3b, 0x42, 0xb5, 0xac},
    {0x05, 0x6a, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x04, 0x6c},
    {0x04, 0x82, 0x44, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x04, 0x6c},
    {0x0b, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x29, 0x42, 0xb5, 0xac},
    {0x01, 0x34, 0x42, 0xf5, 0xbd},
    {0x02, 0x29, 0x42, 0xb5, 0xac},
    {0x06, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x06, 0x8e},
    {0x04, 0x34, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0x06, 0x8e},
    {0x07, 0x59, 0x03, 0xf5, 0xce},
    {0x03, 0x90, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x90, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x04, 0x6c},
    {0x04, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x04, 0x6c},
    {0x61, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x42, 0xb5, 0xac},
    {0x01, 0x00, 0x42, 0xf5, 0xbd},
    {0x02, 0x1f, 0x42, 0xb5, 0xac},
    {0x06, 0xd2, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x06, 0x7e},
    {0x04, 0x00, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0x06, 0x7e},
    {0x08, 0x51, 0x43, 0xb5, 0xce},
    {0x03, 0x39, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x46, 0x7e},
    {0x02, 0x39, 0x42, 0xb5, 0xac},
    {0x05, 0xd2, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc3, 0xb5, 0x0d},
    {0x04, 0x04, 0x41, 0x46, 0x7e},
    {0x02, 0x81, 0xc3, 0xb5, 0x0d},
    {0x0c, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x0a, 0x41, 0x06, 0x7e},
    {0x01, 0x02, 0x41, 0x46, 0x7e},
    {0x02, 0x0a, 0x41, 0x06, 0x7e},
    {0x06, 0x46, 0x03, 0x06, 0x8e},
    {0x03, 0x04, 0x43, 0x04, 0x6c},
    {0x04, 0x02, 0x41, 0x46, 0x7e},
    {0x02, 0x04, 0x43, 0x04, 0x6c},
    {0x07, 0x4f, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x04, 0x6c},
    {0x01, 0x07, 0x41, 0x46, 0x7e},
    {0x02, 0x02, 0x43, 0x04, 0x6c},
    {0x05, 0x46, 0x03, 0x06, 0x8e},
    {0x03, 0x07, 0x43, 0x04, 0x6c},
    {0x04, 0x07, 0x41, 0x46, 0x7e},
    {0x02, 0x07, 0x43, 0x04, 0x6c},
    {0xde, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x44, 0xb5, 0x9c},
    {0x01, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x16, 0x44, 0xb5, 0x9c},
    {0x06, 0x60, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x44, 0x02, 0x6d},
    {0x04, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0x02, 0x6d},
    {0x09, 0xc4, 0xf5, 0x00, 0x0d},
    {0x03, 0x0b, 0x42, 0x02, 0x7d},
    {0x01, 0x03, 0x42, 0x42, 0x7d},
    {0x02, 0x0b, 0x42, 0x02, 0x7d},
    {0x05, 0x60, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x44, 0x02, 0x6d},
    {0x04, 0x03, 0x42, 0x42, 0x7d},
    {0x02, 0x05, 0x44, 0x02, 0x6d},
    {0x0a, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x1a, 0x44, 0xb5, 0x9c},
    {0x01, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x44, 0xb5, 0x9c},
    {0x06, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0x02, 0x7d},
    {0x04, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x02, 0x7d},
    {0x07, 0xc6, 0xb5, 0x40, 0x0d},
    {0x03, 0x8c, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0x42, 0x7d},
    {0x02, 0x8c, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0x02, 0x6d},
    {0x04, 0x05, 0x42, 0x42, 0x7d},
    {0x02, 0x06, 0x44, 0x02, 0x6d},
    {0xc4, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x25, 0x42, 0xb5, 0xac},
    {0x01, 0x2c, 0x42, 0xf5, 0xbd},
    {0x02, 0x25, 0x42, 0xb5, 0xac},
    {0x06, 0x7a, 0x03, 0xb5, 0xce},
    {0x03, 0x82, 0xc1, 0xb5, 0x0c},
    {0x04, 0x2c, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0xc1, 0xb5, 0x0c},
    {0x08, 0xc4, 0xf5, 0x00, 0x0d},
    {0x03, 0x19, 0x44, 0xb5, 0x9c},
    {0x01, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x19, 0x44, 0xb5, 0x9c},
    {0x05, 0x7a, 0x03, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0x06, 0x8e},
    {0x04, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x06, 0x8e},
    {0x6b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x46, 0xb5, 0xee},
    {0x01, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x46, 0xb5, 0xee},
    {0x06, 0xc1, 0x02, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x02, 0x6d},
    {0x04, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x02, 0x6d},
    {0x07, 0x44, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0x02, 0x6d},
    {0x01, 0x06, 0x42, 0x42, 0x7d},
    {0x02, 0x02, 0x44, 0x02, 0x6d},
    {0x05, 0xc1, 0x02, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x02, 0x6d},
    {0x04, 0x06, 0x42, 0x42, 0x7d},
    {0x02, 0x07, 0x44, 0x02, 0x6d},
    {0x93, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0x0d, 0x43, 0x06, 0x8e},
    {0x01, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x06, 0x8e},
    {0x06, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x04, 0x6c},
    {0x04, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x04, 0x6c},
    {0x09, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x44, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x46, 0x8e},
    {0x02, 0x12, 0x44, 0xb5, 0x9c},
    {0x05, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x04, 0x6c},
    {0x04, 0x08, 0x43, 0x46, 0x8e},
    {0x02, 0x05, 0x42, 0x04, 0x6c},
    {0x0b, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x15, 0x44, 0xb5, 0x9c},
    {0x01, 0x83, 0x42, 0xf5, 0xdd},
    {0x02, 0x15, 0x44, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x06, 0x8e},
    {0x03, 0x11, 0x43, 0x06, 0x8e},
    {0x04, 0x83, 0x42, 0xf5, 0xdd},
    {0x02, 0x11, 0x43, 0x06, 0x8e},
    {0x07, 0x42, 0x04, 0xf5, 0x9c},
    {0x03, 0x84, 0x42, 0xb5, 0xdd},
    {0x01, 0x81, 0x44, 0x43, 0xce},
    {0x02, 0x84, 0x42, 0xb5, 0xdd},
    {0x05, 0x44, 0x03, 0x06, 0x8e},
    {0x03, 0x06, 0x42, 0x04, 0x6c},
    {0x04, 0x81, 0x44, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x04, 0x6c},
    {0x4e, 0x04, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x43, 0x06, 0x8e},
    {0x01, 0x0a, 0x43, 0x46, 0x8e},
    {0x02, 0x01, 0x43, 0x06, 0x8e},
    {0x06, 0x42, 0x03, 0x06, 0x8e},
    {0x03, 0x08, 0x42, 0x02, 0x7d},
    {0x04, 0x0a, 0x43, 0x46, 0x8e},
    {0x02, 0x08, 0x42, 0x02, 0x7d},
    {0x08, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x44, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0x42, 0x7d},
    {0x02, 0x83, 0x44, 0x03, 0xce},
    {0x05, 0x42, 0x03, 0x06, 0x8e},
    {0x03, 0x81, 0xc1, 0xb5, 0x0c},
    {0x04, 0x04, 0x42, 0x42, 0x7d},
    {0x02, 0x81, 0xc1, 0xb5, 0x0c},
    {0x0c, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x42, 0x02, 0x7d},
    {0x01, 0x02, 0x42, 0x42, 0x7d},
    {0x02, 0x0a, 0x42, 0x02, 0x7d},
    {0x06, 0x47, 0x03, 0x06, 0x8e},
    {0x03, 0x04, 0x42, 0x04, 0x6c},
    {0x04, 0x02, 0x42, 0x42, 0x7d},
    {0x02, 0x04, 0x42, 0x04, 0x6c},
    {0x07, 0x47, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x04, 0x6c},
    {0x01, 0x07, 0x42, 0x42, 0x7d},
    {0x02, 0x02, 0x42, 0x04, 0x6c},
    {0x05, 0x47, 0x03, 0x06, 0x8e},
    {0x03, 0x07, 0x42, 0x04, 0x6c},
    {0x04, 0x07, 0x42, 0x42, 0x7d},
    {0x02, 0x07, 0x42, 0x04, 0x6c},
    {0xf4, 0x46, 0xf5, 0x00, 0x0e},
    {0x03, 0xa7, 0xf5, 0x00, 0x0e},
    {0x01, 0x1e, 0x42, 0xf5, 0xbd},
    {0x02, 0xa7, 0xf5, 0x00, 0x0e},
    {0x06, 0x56, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x47, 0xb5, 0x6b},
    {0x04, 0x1e, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x47, 0xb5, 0x6b},
    {0x09, 0x41, 0x43, 0xb5, 0xce},
    {0x03, 0x0b, 0x45, 0xb5, 0x7b},
    {0x01, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x0b, 0x45, 0xb5, 0x7b},
    {0x05, 0x56, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x47, 0xb5, 0x6b},
    {0x04, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x05, 0x47, 0xb5, 0x6b},
    {0x0a, 0x4a, 0x43, 0xf5, 0xce},
    {0x03, 0x0c, 0x44, 0xb5, 0x8b},
    {0x01, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x0c, 0x44, 0xb5, 0x8b},
    {0x06, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x09, 0x45, 0xb5, 0x7b},
    {0x04, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x09, 0x45, 0xb5, 0x7b},
    {0x07, 0x4d, 0x02, 0xf5, 0xbd},
    {0x03, 0x9a, 0x42, 0x03, 0xce},
    {0x01, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x9a, 0x42, 0x03, 0xce},
    {0x05, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x47, 0xb5, 0x6b},
    {0x04, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x06, 0x47, 0xb5, 0x6b},
    {0x4d, 0x02, 0x03, 0xb5, 0xce},
    {0x03, 0x14, 0x42, 0xb5, 0x9b},
    {0x01, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x14, 0x42, 0xb5, 0x9b},
    {0x06, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x82, 0x4a, 0x03, 0xce},
    {0x04, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x82, 0x4a, 0x03, 0xce},
    {0x08, 0x41, 0x43, 0xb5, 0xce},
    {0x03, 0x18, 0x42, 0xb5, 0x9b},
    {0x01, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x18, 0x42, 0xb5, 0x9b},
    {0x05, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x0e, 0x44, 0xb5, 0x8b},
    {0x04, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x0e, 0x44, 0xb5, 0x8b},
    {0x4f, 0x07, 0xb5, 0x40, 0xdd},
    {0x03, 0x1c, 0x42, 0xb5, 0x9b},
    {0x01, 0x9a, 0x47, 0xf5, 0xdd},
    {0x02, 0x1c, 0x42, 0xb5, 0x9b},
    {0x06, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x47, 0xb5, 0x6b},
    {0x04, 0x9a, 0x47, 0xf5, 0xdd},
    {0x02, 0x04, 0x47, 0xb5, 0x6b},
    {0x07, 0x43, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x47, 0xb5, 0x6b},
    {0x01, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x47, 0xb5, 0x6b},
    {0x05, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x47, 0xb5, 0x6b},
    {0x04, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x47, 0xb5, 0x6b},
    {0x77, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x42, 0xb5, 0x9b},
    {0x01, 0x22, 0x42, 0xf5, 0xbd},
    {0x02, 0x17, 0x42, 0xb5, 0x9b},
    {0x06, 0x5a, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x02, 0x6c},
    {0x04, 0x22, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x02, 0x6c},
    {0x09, 0x48, 0x42, 0xb5, 0xbd},
    {0x03, 0x1b, 0x42, 0xb5, 0x9b},
    {0x01, 0x82, 0x42, 0x43, 0xce},
    {0x02, 0x1b, 0x42, 0xb5, 0x9b},
    {0x05, 0x5a, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x02, 0x6c},
    {0x04, 0x82, 0x42, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x02, 0x6c},
    {0x0b, 0x4a, 0x43, 0xf5, 0xce},
    {0x03, 0x28, 0x42, 0xb5, 0xac},
    {0x01, 0x32, 0x42, 0xf5, 0xbd},
    {0x02, 0x28, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x10, 0x44, 0xb5, 0x8b},
    {0x04, 0x32, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x44, 0xb5, 0x8b},
    {0x07, 0x52, 0x03, 0xf5, 0xce},
    {0x03, 0x8e, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x8e, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0x02, 0x6c},
    {0x04, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x02, 0x6c},
    {0x7f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0xb5, 0x9b},
    {0x01, 0x3e, 0x42, 0xf5, 0xbd},
    {0x02, 0x13, 0x42, 0xb5, 0x9b},
    {0x06, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x45, 0xb5, 0x7b},
    {0x04, 0x3e, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x45, 0xb5, 0x7b},
    {0x08, 0x48, 0x42, 0xb5, 0xbd},
    {0x03, 0x38, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x38, 0x42, 0xb5, 0xac},
    {0x05, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4a, 0x03, 0xce},
    {0x04, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x81, 0x4a, 0x03, 0xce},
    {0x0c, 0x4a, 0x43, 0xf5, 0xce},
    {0x03, 0x0a, 0x45, 0xb5, 0x7b},
    {0x01, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x0a, 0x45, 0xb5, 0x7b},
    {0x06, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0x02, 0x6c},
    {0x04, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0x02, 0x6c},
    {0x07, 0x45, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0x02, 0x6c},
    {0x01, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0x02, 0x6c},
    {0x05, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0x02, 0x6c},
    {0x04, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0x02, 0x6c},
    {0xe4, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x42, 0xb5, 0xac},
    {0x01, 0x30, 0x42, 0xf5, 0xbd},
    {0x02, 0x2e, 0x42, 0xb5, 0xac},
    {0x06, 0x66, 0x03, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x07, 0x6d},
    {0x04, 0x30, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x07, 0x6d},
    {0x09, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x43, 0x07, 0x7d},
    {0x01, 0x03, 0x43, 0x47, 0x7d},
    {0x02, 0x0b, 0x43, 0x07, 0x7d},
    {0x05, 0x66, 0x03, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x07, 0x6d},
    {0x04, 0x03, 0x43, 0x47, 0x7d},
    {0x02, 0x05, 0x41, 0x07, 0x6d},
    {0x0a, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x36, 0x42, 0xb5, 0xac},
    {0x01, 0x3c, 0x42, 0xf5, 0xbd},
    {0x02, 0x36, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x07, 0xb5, 0xdd},
    {0x03, 0x09, 0x43, 0x07, 0x7d},
    {0x04, 0x3c, 0x42, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x07, 0x7d},
    {0x07, 0x55, 0x03, 0xf5, 0xce},
    {0x03, 0x88, 0x46, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x47, 0x7d},
    {0x02, 0x88, 0x46, 0xb5, 0xee},
    {0x05, 0xc2, 0x07, 0xb5, 0xdd},
    {0x03, 0x06, 0x41, 0x07, 0x6d},
    {0x04, 0x05, 0x43, 0x47, 0x7d},
    {0x02, 0x06, 0x41, 0x07, 0x6d},
    {0x6f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x42, 0xb5, 0xac},
    {0x01, 0x2a, 0x42, 0xf5, 0xbd},
    {0x02, 0x24, 0x42, 0xb5, 0xac},
    {0x06, 0x59, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x44, 0x02, 0xbd},
    {0x04, 0x2a, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x44, 0x02, 0xbd},
    {0x08, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x34, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x34, 0x42, 0xb5, 0xac},
    {0x05, 0x59, 0x02, 0xb5, 0xbd},
    {0x03, 0x0f, 0x44, 0xb5, 0x8b},
    {0x04, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x44, 0xb5, 0x8b},
    {0x67, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x42, 0xb5, 0xac},
    {0x01, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x42, 0xb5, 0xac},
    {0x06, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x07, 0x6d},
    {0x04, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x07, 0x6d},
    {0x07, 0x51, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x07, 0x6d},
    {0x01, 0x06, 0x43, 0x47, 0x7d},
    {0x02, 0x02, 0x41, 0x07, 0x6d},
    {0x05, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x07, 0x6d},
    {0x04, 0x06, 0x43, 0x47, 0x7d},
    {0x02, 0x07, 0x41, 0x07, 0x6d},
    {0x75, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x44, 0xb5, 0x8b},
    {0x01, 0x20, 0x42, 0xf5, 0xbd},
    {0x02, 0x0d, 0x44, 0xb5, 0x8b},
    {0x06, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x02, 0x6c},
    {0x04, 0x20, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x02, 0x6c},
    {0x09, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x9b, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x9b, 0xf5, 0x00, 0x0b},
    {0x05, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x02, 0x6c},
    {0x04, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0x02, 0x6c},
    {0x0b, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x2c, 0x42, 0xb5, 0xac},
    {0x01, 0x3a, 0x42, 0xf5, 0xbd},
    {0x02, 0x2c, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x11, 0x44, 0xb5, 0x8b},
    {0x04, 0x3a, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x44, 0xb5, 0x8b},
    {0x07, 0xc4, 0xb5, 0x40, 0x0c},
    {0x03, 0x96, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x42, 0x43, 0xce},
    {0x02, 0x96, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0x02, 0x6c},
    {0x04, 0x81, 0x42, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x02, 0x6c},
    {0x4e, 0x02, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x44, 0xb5, 0x8b},
    {0x01, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x01, 0x44, 0xb5, 0x8b},
    {0x06, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x07, 0x7d},
    {0x04, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x07, 0x7d},
    {0x08, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x83, 0x42, 0x03, 0xce},
    {0x01, 0x04, 0x43, 0x47, 0x7d},
    {0x02, 0x83, 0x42, 0x03, 0xce},
    {0x05, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x81, 0x44, 0x02, 0xbd},
    {0x04, 0x04, 0x43, 0x47, 0x7d},
    {0x02, 0x81, 0x44, 0x02, 0xbd},
    {0x0c, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x07, 0x7d},
    {0x01, 0x02, 0x43, 0x47, 0x7d},
    {0x02, 0x0a, 0x43, 0x07, 0x7d},
    {0x06, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0x02, 0x6c},
    {0x04, 0x02, 0x43, 0x47, 0x7d},
    {0x02, 0x04, 0x42, 0x02, 0x6c},
    {0x07, 0x46, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x02, 0x6c},
    {0x01, 0x07, 0x43, 0x47, 0x7d},
    {0x02, 0x02, 0x42, 0x02, 0x6c},
    {0x05, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0x02, 0x6c},
    {0x04, 0x07, 0x43, 0x47, 0x7d},
    {0x02, 0x07, 0x42, 0x02, 0x6c},
    {0xf4, 0x47, 0xb5, 0x40, 0x0d},
    {0x03, 0x1e, 0x42, 0xb5, 0xac},
    {0x01, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x1e, 0x42, 0xb5, 0xac},
    {0x06, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x06, 0x6e},
    {0x04, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x06, 0x6e},
    {0x09, 0x4a, 0x42, 0xb5, 0xbd},
    {0x03, 0x0b, 0x44, 0x06, 0x7e},
    {0x01, 0x03, 0x44, 0x46, 0x7e},
    {0x02, 0x0b, 0x44, 0x06, 0x7e},
    {0x05, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x06, 0x6e},
    {0x04, 0x03, 0x44, 0x46, 0x7e},
    {0x02, 0x05, 0x45, 0x06, 0x6e},
    {0x0a, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x0c, 0x42, 0x06, 0x8e},
    {0x01, 0x0b, 0x42, 0x46, 0x8e},
    {0x02, 0x0c, 0x42, 0x06, 0x8e},
    {0x06, 0x43, 0x02, 0x06, 0x8e},
    {0x03, 0x09, 0x44, 0x06, 0x7e},
    {0x04, 0x0b, 0x42, 0x46, 0x8e},
    {0x02, 0x09, 0x44, 0x06, 0x7e},
    {0x07, 0x41, 0x02, 0xf5, 0xbd},
    {0x03, 0x9a, 0x47, 0x03, 0xce},
    {0x01, 0x05, 0x44, 0x46, 0x7e},
    {0x02, 0x9a, 0x47, 0x03, 0xce},
    {0x05, 0x43, 0x02, 0x06, 0x8e},
    {0x03, 0x06, 0x45, 0x06, 0x6e},
    {0x04, 0x05, 0x44, 0x46, 0x7e},
    {0x02, 0x06, 0x45, 0x06, 0x6e},
    {0x4d, 0x07, 0x03, 0xb5, 0xce},
    {0x03, 0x22, 0x42, 0xb5, 0xac},
    {0x01, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x22, 0x42, 0xb5, 0xac},
    {0x06, 0x52, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x42, 0x02, 0xbd},
    {0x04, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x02, 0xbd},
    {0x08, 0x4a, 0x42, 0xb5, 0xbd},
    {0x03, 0x32, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x46, 0x8e},
    {0x02, 0x32, 0x42, 0xb5, 0xac},
    {0x05, 0x52, 0x02, 0xb5, 0xbd},
    {0x03, 0x0e, 0x42, 0x06, 0x8e},
    {0x04, 0x09, 0x42, 0x46, 0x8e},
    {0x02, 0x0e, 0x42, 0x06, 0x8e},
    {0x53, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3e, 0x42, 0xb5, 0xac},
    {0x01, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x3e, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x06, 0x8e},
    {0x03, 0x04, 0x45, 0x06, 0x6e},
    {0x04, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x45, 0x06, 0x6e},
    {0x07, 0x48, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x06, 0x6e},
    {0x01, 0x06, 0x44, 0x46, 0x7e},
    {0x02, 0x02, 0x45, 0x06, 0x6e},
    {0x05, 0x45, 0x02, 0x06, 0x8e},
    {0x03, 0x07, 0x45, 0x06, 0x6e},
    {0x04, 0x06, 0x44, 0x46, 0x7e},
    {0x02, 0x07, 0x45, 0x06, 0x6e},
    {0x58, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x30, 0x42, 0xb5, 0xac},
    {0x01, 0x26, 0x42, 0xf5, 0xbd},
    {0x02, 0x30, 0x42, 0xb5, 0xac},
    {0x06, 0x55, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x07, 0x6c},
    {0x04, 0x26, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x07, 0x6c},
    {0x09, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3c, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x47, 0x43, 0xce},
    {0x02, 0x3c, 0x42, 0xb5, 0xac},
    {0x05, 0x55, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x07, 0x6c},
    {0x04, 0x82, 0x47, 0x43, 0xce},
    {0x02, 0x05, 0x43, 0x07, 0x6c},
    {0x0b, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x2a, 0x42, 0xb5, 0xac},
    {0x01, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x2a, 0x42, 0xb5, 0xac},
    {0x06, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x06, 0x8e},
    {0x04, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x06, 0x8e},
    {0x07, 0xc3, 0xb5, 0x40, 0x0b},
    {0x03, 0x92, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x92, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x07, 0x6c},
    {0x04, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x07, 0x6c},
    {0x56, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x20, 0x42, 0xb5, 0xac},
    {0x01, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x42, 0xb5, 0xac},
    {0x06, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x08, 0x44, 0x06, 0x7e},
    {0x04, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0x06, 0x7e},
    {0x08, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3a, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x46, 0x7e},
    {0x02, 0x3a, 0x42, 0xb5, 0xac},
    {0x05, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x81, 0x42, 0x02, 0xbd},
    {0x04, 0x04, 0x44, 0x46, 0x7e},
    {0x02, 0x81, 0x42, 0x02, 0xbd},
    {0x0c, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x44, 0x06, 0x7e},
    {0x01, 0x02, 0x44, 0x46, 0x7e},
    {0x02, 0x0a, 0x44, 0x06, 0x7e},
    {0x06, 0x46, 0x02, 0x06, 0x8e},
    {0x03, 0x04, 0x43, 0x07, 0x6c},
    {0x04, 0x02, 0x44, 0x46, 0x7e},
    {0x02, 0x04, 0x43, 0x07, 0x6c},
    {0x07, 0xc1, 0x06, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x07, 0x6c},
    {0x01, 0x07, 0x44, 0x46, 0x7e},
    {0x02, 0x02, 0x43, 0x07, 0x6c},
    {0x05, 0x46, 0x02, 0x06, 0x8e},
    {0x03, 0x07, 0x43, 0x07, 0x6c},
    {0x04, 0x07, 0x44, 0x46, 0x7e},
    {0x02, 0x07, 0x43, 0x07, 0x6c},
    {0xe8, 0x43, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x42, 0xb5, 0x9b},
    {0x01, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x16, 0x42, 0xb5, 0x9b},
    {0x06, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x07, 0x6d},
    {0x04, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x07, 0x6d},
    {0x09, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x07, 0x7d},
    {0x01, 0x03, 0x42, 0x47, 0x7d},
    {0x02, 0x0b, 0x42, 0x07, 0x7d},
    {0x05, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x07, 0x6d},
    {0x04, 0x03, 0x42, 0x47, 0x7d},
    {0x02, 0x05, 0x44, 0x07, 0x6d},
    {0x0a, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x42, 0xb5, 0x9b},
    {0x01, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0xb5, 0x9b},
    {0x06, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x07, 0x7d},
    {0x04, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x07, 0x7d},
    {0x07, 0x4a, 0x02, 0xf5, 0xac},
    {0x03, 0x8a, 0x46, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0x47, 0x7d},
    {0x02, 0x8a, 0x46, 0xb5, 0xee},
    {0x05, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x07, 0x6d},
    {0x04, 0x05, 0x42, 0x47, 0x7d},
    {0x02, 0x06, 0x44, 0x07, 0x6d},
    {0x50, 0x06, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x42, 0xb5, 0xac},
    {0x01, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x26, 0x42, 0xb5, 0xac},
    {0x06, 0xc3, 0x06, 0xb5, 0xee},
    {0x03, 0x82, 0x47, 0x02, 0xbd},
    {0x04, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x02, 0xbd},
    {0x08, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0xb5, 0x9b},
    {0x01, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x19, 0x42, 0xb5, 0x9b},
    {0x05, 0xc3, 0x06, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x06, 0x8e},
    {0x04, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0x06, 0x8e},
    {0x40, 0x06, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x46, 0xb5, 0xee},
    {0x01, 0x84, 0x46, 0xf5, 0xee},
    {0x02, 0x86, 0x46, 0xb5, 0xee},
    {0x06, 0xc1, 0x07, 0xb5, 0xdd},
    {0x03, 0x04, 0x44, 0x07, 0x6d},
    {0x04, 0x84, 0x46, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x07, 0x6d},
    {0x07, 0x44, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x07, 0x6d},
    {0x01, 0x06, 0x42, 0x47, 0x7d},
    {0x02, 0x02, 0x44, 0x07, 0x6d},
    {0x05, 0xc1, 0x07, 0xb5, 0xdd},
    {0x03, 0x07, 0x44, 0x07, 0x6d},
    {0x04, 0x06, 0x42, 0x47, 0x7d},
    {0x02, 0x07, 0x44, 0x07, 0x6d},
    {0xc1, 0x42, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x06, 0x8e},
    {0x01, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0x06, 0x8e},
    {0x06, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x07, 0x6c},
    {0x04, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x07, 0x6c},
    {0x09, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0x46, 0x8e},
    {0x02, 0x12, 0x42, 0xb5, 0x9b},
    {0x05, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x07, 0x6c},
    {0x04, 0x08, 0x42, 0x46, 0x8e},
    {0x02, 0x05, 0x42, 0x07, 0x6c},
    {0x0b, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x42, 0xb5, 0x9b},
    {0x01, 0x83, 0x47, 0xf5, 0xdd},
    {0x02, 0x15, 0x42, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0x06, 0x8e},
    {0x03, 0x11, 0x42, 0x06, 0x8e},
    {0x04, 0x83, 0x47, 0xf5, 0xdd},
    {0x02, 0x11, 0x42, 0x06, 0x8e},
    {0x07, 0x42, 0x02, 0xf5, 0x9b},
    {0x03, 0x84, 0x47, 0xb5, 0xdd},
    {0x01, 0x81, 0x47, 0x43, 0xce},
    {0x02, 0x84, 0x47, 0xb5, 0xdd},
    {0x05, 0x44, 0x02, 0x06, 0x8e},
    {0x03, 0x06, 0x42, 0x07, 0x6c},
    {0x04, 0x81, 0x47, 0x43, 0xce},
    {0x02, 0x06, 0x42, 0x07, 0x6c},
    {0x4e, 0x07, 0x03, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0x06, 0x8e},
    {0x01, 0x0a, 0x42, 0x46, 0x8e},
    {0x02, 0x01, 0x42, 0x06, 0x8e},
    {0x06, 0x42, 0x02, 0x06, 0x8e},
    {0x03, 0x08, 0x42, 0x07, 0x7d},
    {0x04, 0x0a, 0x42, 0x46, 0x8e},
    {0x02, 0x08, 0x42, 0x07, 0x7d},
    {0x08, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x47, 0x03, 0xce},
    {0x01, 0x04, 0x42, 0x47, 0x7d},
    {0x02, 0x83, 0x47, 0x03, 0xce},
    {0x05, 0x42, 0x02, 0x06, 0x8e},
    {0x03, 0x81, 0x47, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0x47, 0x7d},
    {0x02, 0x81, 0x47, 0x02, 0xbd},
    {0x0c, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x07, 0x7d},
    {0x01, 0x02, 0x42, 0x47, 0x7d},
    {0x02, 0x0a, 0x42, 0x07, 0x7d},
    {0x06, 0x47, 0x02, 0x06, 0x8e},
    {0x03, 0x04, 0x42, 0x07, 0x6c},
    {0x04, 0x02, 0x42, 0x47, 0x7d},
    {0x02, 0x04, 0x42, 0x07, 0x6c},
    {0x07, 0x47, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x07, 0x6c},
    {0x01, 0x07, 0x42, 0x47, 0x7d},
    {0x02, 0x02, 0x42, 0x07, 0x6c},
    {0x05, 0x47, 0x02, 0x06, 0x8e},
    {0x03, 0x07, 0x42, 0x07, 0x6c},
    {0x04, 0x07, 0x42, 0x47, 0x7d},
    {0x02, 0x07, 0x42, 0x07, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0e},
    {0x03, 0xb4, 0xf5, 0x00, 0x0e},
    {0x01, 0xb4, 0xf5, 0x40, 0x0e},
    {0x02, 0xb4, 0xf5, 0x00, 0x0e},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0xb4, 0xf5, 0x40, 0x0e},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x0b, 0xf5, 0x00, 0x77},
    {0x01, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x0b, 0xf5, 0x00, 0x77},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0xf5, 0x40, 0x77},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x5e, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0xf5, 0x00, 0x88},
    {0x01, 0x0b, 0xf5, 0x40, 0x88},
    {0x02, 0x0c, 0xf5, 0x00, 0x88},
    {0x06, 0x43, 0xb5, 0x00, 0x88},
    {0x03, 0x09, 0xf5, 0x00, 0x77},
    {0x04, 0x0b, 0xf5, 0x40, 0x88},
    {0x02, 0x09, 0xf5, 0x00, 0x77},
    {0x07, 0xf2, 0x00, 0x40, 0x05},
    {0x03, 0x9a, 0x56, 0xb5, 0xff},
    {0x01, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x9a, 0x56, 0xb5, 0xff},
    {0x05, 0x43, 0xb5, 0x00, 0x88},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0xf5, 0x40, 0x77},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0x16, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0xf5, 0x00, 0x99},
    {0x01, 0x0c, 0xf5, 0x40, 0x99},
    {0x02, 0x14, 0xf5, 0x00, 0x99},
    {0x06, 0x4b, 0xb5, 0x00, 0x99},
    {0x03, 0x82, 0x5e, 0xb5, 0xff},
    {0x04, 0x0c, 0xf5, 0x40, 0x99},
    {0x02, 0x82, 0x5e, 0xb5, 0xff},
    {0x08, 0xf5, 0x40, 0x00, 0x06},
    {0x03, 0x18, 0xf5, 0x00, 0x99},
    {0x01, 0x09, 0xf5, 0x40, 0x88},
    {0x02, 0x18, 0xf5, 0x00, 0x99},
    {0x05, 0x4b, 0xb5, 0x00, 0x99},
    {0x03, 0x0e, 0xf5, 0x00, 0x88},
    {0x04, 0x09, 0xf5, 0x40, 0x88},
    {0x02, 0x0e, 0xf5, 0x00, 0x88},
    {0x4f, 0x0d, 0xb5, 0x40, 0xff},
    {0x03, 0x1c, 0xf5, 0x00, 0x99},
    {0x01, 0x9a, 0x4d, 0xf5, 0xff},
    {0x02, 0x1c, 0xf5, 0x00, 0x99},
    {0x06, 0x45, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0x4d, 0xf5, 0xff},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0xf5, 0x00, 0x99},
    {0x01, 0x14, 0x47, 0xf5, 0xaf},
    {0x02, 0x17, 0xf5, 0x00, 0x99},
    {0x06, 0x4c, 0x07, 0xb5, 0xaf},
    {0x03, 0x03, 0x43, 0x16, 0x6f},
    {0x04, 0x14, 0x47, 0xf5, 0xaf},
    {0x02, 0x03, 0x43, 0x16, 0x6f},
    {0x09, 0x43, 0x47, 0xb5, 0xaf},
    {0x03, 0x1b, 0xf5, 0x00, 0x99},
    {0x01, 0x82, 0x56, 0xf5, 0xff},
    {0x02, 0x1b, 0xf5, 0x00, 0x99},
    {0x05, 0x4c, 0x07, 0xb5, 0xaf},
    {0x03, 0x05, 0x43, 0x16, 0x6f},
    {0x04, 0x82, 0x56, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x16, 0x6f},
    {0x0b, 0x5e, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x47, 0xb5, 0xaf},
    {0x01, 0x18, 0x47, 0xf5, 0xaf},
    {0x02, 0x27, 0x47, 0xb5, 0xaf},
    {0x06, 0x49, 0xb5, 0x00, 0x99},
    {0x03, 0x10, 0xf5, 0x00, 0x88},
    {0x04, 0x18, 0x47, 0xf5, 0xaf},
    {0x02, 0x10, 0xf5, 0x00, 0x88},
    {0x07, 0x4b, 0x07, 0xf5, 0xaf},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0xf5, 0x40, 0x99},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0xb5, 0x00, 0x99},
    {0x03, 0x06, 0x43, 0x16, 0x6f},
    {0x04, 0x0e, 0xf5, 0x40, 0x99},
    {0x02, 0x06, 0x43, 0x16, 0x6f},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0xf5, 0x00, 0x99},
    {0x01, 0x1c, 0x47, 0xf5, 0xaf},
    {0x02, 0x13, 0xf5, 0x00, 0x99},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0xf5, 0x00, 0x77},
    {0x04, 0x1c, 0x47, 0xf5, 0xaf},
    {0x02, 0x08, 0xf5, 0x00, 0x77},
    {0x08, 0x43, 0x47, 0xb5, 0xaf},
    {0x03, 0x37, 0x47, 0xb5, 0xaf},
    {0x01, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x37, 0x47, 0xb5, 0xaf},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x5e, 0xb5, 0xff},
    {0x04, 0x04, 0xf5, 0x40, 0x77},
    {0x02, 0x81, 0x5e, 0xb5, 0xff},
    {0x0c, 0x5e, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0xf5, 0x00, 0x77},
    {0x01, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x0a, 0xf5, 0x00, 0x77},
    {0x06, 0x46, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0x43, 0x16, 0x6f},
    {0x04, 0x02, 0xf5, 0x40, 0x77},
    {0x02, 0x04, 0x43, 0x16, 0x6f},
    {0x07, 0x45, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x43, 0x16, 0x6f},
    {0x01, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x02, 0x43, 0x16, 0x6f},
    {0x05, 0x46, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0x43, 0x16, 0x6f},
    {0x04, 0x07, 0xf5, 0x40, 0x77},
    {0x02, 0x07, 0x43, 0x16, 0x6f},
    {0xdc, 0x45, 0xf5, 0x40, 0x0f},
    {0x03, 0x2d, 0x47, 0xb5, 0xaf},
    {0x01, 0x17, 0x47, 0xf5, 0xaf},
    {0x02, 0x2d, 0x47, 0xb5, 0xaf},
    {0x06, 0x54, 0x05, 0xb5, 0xbf},
    {0x03, 0x03, 0x41, 0x0d, 0x6f},
    {0x04, 0x17, 0x47, 0xf5, 0xaf},
    {0x02, 0x03, 0x41, 0x0d, 0x6f},
    {0x09, 0x4b, 0x45, 0xb5, 0xbf},
    {0x03, 0x0b, 0x43, 0x0d, 0x7f},
    {0x01, 0x03, 0x43, 0x4d, 0x7f},
    {0x02, 0x0b, 0x43, 0x0d, 0x7f},
    {0x05, 0x54, 0x05, 0xb5, 0xbf},
    {0x03, 0x05, 0x41, 0x0d, 0x6f},
    {0x04, 0x03, 0x43, 0x4d, 0x7f},
    {0x02, 0x05, 0x41, 0x0d, 0x6f},
    {0x0a, 0x43, 0x45, 0xf5, 0xbf},
    {0x03, 0x35, 0x47, 0xb5, 0xaf},
    {0x01, 0x1b, 0x47, 0xf5, 0xaf},
    {0x02, 0x35, 0x47, 0xb5, 0xaf},
    {0x06, 0xc2, 0x0d, 0xb5, 0xff},
    {0x03, 0x09, 0x43, 0x0d, 0x7f},
    {0x04, 0x1b, 0x47, 0xf5, 0xaf},
    {0x02, 0x09, 0x43, 0x0d, 0x7f},
    {0x07, 0x4c, 0x05, 0xf5, 0xbf},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x4d, 0x7f},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x0d, 0xb5, 0xff},
    {0x03, 0x06, 0x41, 0x0d, 0x6f},
    {0x04, 0x05, 0x43, 0x4d, 0x7f},
    {0x02, 0x06, 0x41, 0x0d, 0x6f},
    {0x57, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x23, 0x47, 0xb5, 0xaf},
    {0x01, 0x27, 0x45, 0xf5, 0xbf},
    {0x02, 0x23, 0x47, 0xb5, 0xaf},
    {0x06, 0x58, 0x05, 0xb5, 0xbf},
    {0x03, 0x82, 0x43, 0x05, 0xbf},
    {0x04, 0x27, 0x45, 0xf5, 0xbf},
    {0x02, 0x82, 0x43, 0x05, 0xbf},
    {0x08, 0x4b, 0x45, 0xb5, 0xbf},
    {0x03, 0x33, 0x47, 0xb5, 0xaf},
    {0x01, 0x10, 0xf5, 0x40, 0x99},
    {0x02, 0x33, 0x47, 0xb5, 0xaf},
    {0x05, 0x58, 0x05, 0xb5, 0xbf},
    {0x03, 0x0f, 0xf5, 0x00, 0x88},
    {0x04, 0x10, 0xf5, 0x40, 0x99},
    {0x02, 0x0f, 0xf5, 0x00, 0x88},
    {0x54, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3f, 0x47, 0xb5, 0xaf},
    {0x01, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x3f, 0x47, 0xb5, 0xaf},
    {0x06, 0x4e, 0x07, 0xb5, 0xaf},
    {0x03, 0x04, 0x41, 0x0d, 0x6f},
    {0x04, 0x89, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x41, 0x0d, 0x6f},
    {0x07, 0x49, 0x07, 0xf5, 0xaf},
    {0x03, 0x02, 0x41, 0x0d, 0x6f},
    {0x01, 0x06, 0x43, 0x4d, 0x7f},
    {0x02, 0x02, 0x41, 0x0d, 0x6f},
    {0x05, 0x4e, 0x07, 0xb5, 0xaf},
    {0x03, 0x07, 0x41, 0x0d, 0x6f},
    {0x04, 0x06, 0x43, 0x4d, 0x7f},
    {0x02, 0x07, 0x41, 0x0d, 0x6f},
    {0x59, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x0d, 0xf5, 0x00, 0x88},
    {0x01, 0x13, 0x47, 0xf5, 0xaf},
    {0x02, 0x0d, 0xf5, 0x00, 0x88},
    {0x06, 0x5c, 0x05, 0xb5, 0xbf},
    {0x03, 0x03, 0x42, 0x16, 0x6f},
    {0x04, 0x13, 0x47, 0xf5, 0xaf},
    {0x02, 0x03, 0x42, 0x16, 0x6f},
    {0x09, 0x45, 0x47, 0xb5, 0xaf},
    {0x03, 0x97, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0xf5, 0x40, 0x88},
    {0x02, 0x97, 0xf5, 0x00, 0x0b},
    {0x05, 0x5c, 0x05, 0xb5, 0xbf},
    {0x03, 0x05, 0x42, 0x16, 0x6f},
    {0x04, 0x08, 0xf5, 0x40, 0x88},
    {0x02, 0x05, 0x42, 0x16, 0x6f},
    {0x0b, 0x43, 0x45, 0xf5, 0xbf},
    {0x03, 0x2b, 0x47, 0xb5, 0xaf},
    {0x01, 0x37, 0x45, 0xf5, 0xbf},
    {0x02, 0x2b, 0x47, 0xb5, 0xaf},
    {0x06, 0x44, 0xb5, 0x00, 0x88},
    {0x03, 0x11, 0xf5, 0x00, 0x88},
    {0x04, 0x37, 0x45, 0xf5, 0xbf},
    {0x02, 0x11, 0xf5, 0x00, 0x88},
    {0x07, 0xda, 0xb5, 0x40, 0x0b},
    {0x03, 0x93, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x56, 0xf5, 0xff},
    {0x02, 0x93, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0xb5, 0x00, 0x88},
    {0x03, 0x06, 0x42, 0x16, 0x6f},
    {0x04, 0x81, 0x56, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x16, 0x6f},
    {0x4e, 0x16, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0xf5, 0x00, 0x88},
    {0x01, 0x0a, 0xf5, 0x40, 0x88},
    {0x02, 0x01, 0xf5, 0x00, 0x88},
    {0x06, 0x42, 0xb5, 0x00, 0x88},
    {0x03, 0x08, 0x43, 0x0d, 0x7f},
    {0x04, 0x0a, 0xf5, 0x40, 0x88},
    {0x02, 0x08, 0x43, 0x0d, 0x7f},
    {0x08, 0x45, 0x47, 0xb5, 0xaf},
    {0x03, 0x83, 0x56, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0x4d, 0x7f},
    {0x02, 0x83, 0x56, 0xb5, 0xff},
    {0x05, 0x42, 0xb5, 0x00, 0x88},
    {0x03, 0x81, 0x43, 0x05, 0xbf},
    {0x04, 0x04, 0x43, 0x4d, 0x7f},
    {0x02, 0x81, 0x43, 0x05, 0xbf},
    {0x0c, 0x43, 0x45, 0xf5, 0xbf},
    {0x03, 0x0a, 0x43, 0x0d, 0x7f},
    {0x01, 0x02, 0x43, 0x4d, 0x7f},
    {0x02, 0x0a, 0x43, 0x0d, 0x7f},
    {0x06, 0x47, 0xb5, 0x00, 0x88},
    {0x03, 0x04, 0x42, 0x16, 0x6f},
    {0x04, 0x02, 0x43, 0x4d, 0x7f},
    {0x02, 0x04, 0x42, 0x16, 0x6f},
    {0x07, 0x46, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x42, 0x16, 0x6f},
    {0x01, 0x07, 0x43, 0x4d, 0x7f},
    {0x02, 0x02, 0x42, 0x16, 0x6f},
    {0x05, 0x47, 0xb5, 0x00, 0x88},
    {0x03, 0x07, 0x42, 0x16, 0x6f},
    {0x04, 0x07, 0x43, 0x4d, 0x7f},
    {0x02, 0x07, 0x42, 0x16, 0x6f},
    {0xf4, 0x4d, 0xf5, 0x40, 0x0f},
    {0x03, 0x1d, 0x47, 0xb5, 0xaf},
    {0x01, 0x2d, 0x45, 0xf5, 0xbf},
    {0x02, 0x1d, 0x47, 0xb5, 0xaf},
    {0x06, 0x57, 0x05, 0xb5, 0xbf},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x4c, 0x44, 0xb5, 0xcf},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0x05, 0xb5, 0xbf},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x4b, 0x44, 0xf5, 0xcf},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x54, 0x04, 0xf5, 0xcf},
    {0x03, 0x9a, 0x43, 0x04, 0xcf},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0x43, 0x04, 0xcf},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x03, 0x04, 0xb5, 0xcf},
    {0x03, 0x21, 0x47, 0xb5, 0xaf},
    {0x01, 0x35, 0x45, 0xf5, 0xbf},
    {0x02, 0x21, 0x47, 0xb5, 0xaf},
    {0x06, 0x5b, 0x05, 0xb5, 0xbf},
    {0x03, 0x82, 0x4b, 0x04, 0xcf},
    {0x04, 0x35, 0x45, 0xf5, 0xbf},
    {0x02, 0x82, 0x4b, 0x04, 0xcf},
    {0x08, 0x4c, 0x44, 0xb5, 0xcf},
    {0x03, 0x31, 0x47, 0xb5, 0xaf},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0x47, 0xb5, 0xaf},
    {0x05, 0x5b, 0x05, 0xb5, 0xbf},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0xc2, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x3d, 0x47, 0xb5, 0xaf},
    {0x01, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x47, 0xb5, 0xaf},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0x78, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x47, 0xb5, 0xaf},
    {0x01, 0x23, 0x45, 0xf5, 0xbf},
    {0x02, 0x2f, 0x47, 0xb5, 0xaf},
    {0x06, 0x67, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x03, 0x6c},
    {0x04, 0x23, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x43, 0x03, 0x6c},
    {0x09, 0x49, 0x45, 0xb5, 0xbf},
    {0x03, 0x3b, 0x47, 0xb5, 0xaf},
    {0x01, 0x82, 0x43, 0x44, 0xcf},
    {0x02, 0x3b, 0x47, 0xb5, 0xaf},
    {0x05, 0x67, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x03, 0x6c},
    {0x04, 0x82, 0x43, 0x44, 0xcf},
    {0x02, 0x05, 0x43, 0x03, 0x6c},
    {0x0b, 0x4b, 0x44, 0xf5, 0xcf},
    {0x03, 0x29, 0x47, 0xb5, 0xaf},
    {0x01, 0x33, 0x45, 0xf5, 0xbf},
    {0x02, 0x29, 0x47, 0xb5, 0xaf},
    {0x06, 0x50, 0x07, 0xb5, 0xaf},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0x45, 0xf5, 0xbf},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x58, 0x04, 0xf5, 0xcf},
    {0x03, 0x8f, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0xf5, 0x40, 0x99},
    {0x02, 0x8f, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x07, 0xb5, 0xaf},
    {0x03, 0x06, 0x43, 0x03, 0x6c},
    {0x04, 0x0f, 0xf5, 0x40, 0x99},
    {0x02, 0x06, 0x43, 0x03, 0x6c},
    {0x5e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x47, 0xb5, 0xaf},
    {0x01, 0x3f, 0x45, 0xf5, 0xbf},
    {0x02, 0x1f, 0x47, 0xb5, 0xaf},
    {0x06, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0x45, 0xf5, 0xbf},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0x45, 0xb5, 0xbf},
    {0x03, 0x39, 0x47, 0xb5, 0xaf},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0x47, 0xb5, 0xaf},
    {0x05, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4b, 0x04, 0xcf},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x4b, 0x04, 0xcf},
    {0x0c, 0x4b, 0x44, 0xf5, 0xcf},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x03, 0x6c},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x03, 0x6c},
    {0x07, 0x4e, 0x05, 0xf5, 0xbf},
    {0x03, 0x02, 0x43, 0x03, 0x6c},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x03, 0x6c},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x03, 0x6c},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x03, 0x6c},
    {0xdd, 0x45, 0xf5, 0x40, 0x0f},
    {0x03, 0x16, 0xf5, 0x00, 0x99},
    {0x01, 0x0d, 0xf5, 0x40, 0x99},
    {0x02, 0x16, 0xf5, 0x00, 0x99},
    {0x06, 0x53, 0x05, 0xb5, 0xbf},
    {0x03, 0x03, 0x44, 0x0d, 0x6f},
    {0x04, 0x0d, 0xf5, 0x40, 0x99},
    {0x02, 0x03, 0x44, 0x0d, 0x6f},
    {0x09, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x42, 0x0d, 0x7f},
    {0x01, 0x03, 0x42, 0x4d, 0x7f},
    {0x02, 0x0b, 0x42, 0x0d, 0x7f},
    {0x05, 0x53, 0x05, 0xb5, 0xbf},
    {0x03, 0x05, 0x44, 0x0d, 0x6f},
    {0x04, 0x03, 0x42, 0x4d, 0x7f},
    {0x02, 0x05, 0x44, 0x0d, 0x6f},
    {0x0a, 0x45, 0x45, 0xf5, 0xbf},
    {0x03, 0x1a, 0xf5, 0x00, 0x99},
    {0x01, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0xf5, 0x00, 0x99},
    {0x06, 0x48, 0xb5, 0x00, 0x99},
    {0x03, 0x09, 0x42, 0x0d, 0x7f},
    {0x04, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x0d, 0x7f},
    {0x07, 0x5c, 0x04, 0xf5, 0xcf},
    {0x03, 0x8b, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0x4d, 0x7f},
    {0x02, 0x8b, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0xb5, 0x00, 0x99},
    {0x03, 0x06, 0x44, 0x0d, 0x6f},
    {0x04, 0x05, 0x42, 0x4d, 0x7f},
    {0x02, 0x06, 0x44, 0x0d, 0x6f},
    {0x79, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x47, 0xb5, 0xaf},
    {0x01, 0x2b, 0x45, 0xf5, 0xbf},
    {0x02, 0x25, 0x47, 0xb5, 0xaf},
    {0x06, 0x77, 0x04, 0xb5, 0xcf},
    {0x03, 0x82, 0x45, 0x05, 0xbf},
    {0x04, 0x2b, 0x45, 0xf5, 0xbf},
    {0x02, 0x82, 0x45, 0x05, 0xbf},
    {0x08, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x19, 0xf5, 0x00, 0x99},
    {0x01, 0x11, 0xf5, 0x40, 0x99},
    {0x02, 0x19, 0xf5, 0x00, 0x99},
    {0x05, 0x77, 0x04, 0xb5, 0xcf},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0xf5, 0x40, 0x99},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x0d, 0xb5, 0xff},
    {0x03, 0x04, 0x44, 0x0d, 0x6f},
    {0x04, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x0d, 0x6f},
    {0x07, 0x44, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x44, 0x0d, 0x6f},
    {0x01, 0x06, 0x42, 0x4d, 0x7f},
    {0x02, 0x02, 0x44, 0x0d, 0x6f},
    {0x05, 0xc1, 0x0d, 0xb5, 0xff},
    {0x03, 0x07, 0x44, 0x0d, 0x6f},
    {0x04, 0x06, 0x42, 0x4d, 0x7f},
    {0x02, 0x07, 0x44, 0x0d, 0x6f},
    {0x76, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0xf5, 0x40, 0x99},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0xb5, 0x00, 0x99},
    {0x03, 0x03, 0x42, 0x03, 0x6c},
    {0x04, 0x01, 0xf5, 0x40, 0x99},
    {0x02, 0x03, 0x42, 0x03, 0x6c},
    {0x09, 0x46, 0x47, 0xb5, 0xaf},
    {0x03, 0x12, 0xf5, 0x00, 0x99},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0xf5, 0x00, 0x99},
    {0x05, 0x4a, 0xb5, 0x00, 0x99},
    {0x03, 0x05, 0x42, 0x03, 0x6c},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x03, 0x6c},
    {0x0b, 0x45, 0x45, 0xf5, 0xbf},
    {0x03, 0x15, 0xf5, 0x00, 0x99},
    {0x01, 0x83, 0x4d, 0xf5, 0xff},
    {0x02, 0x15, 0xf5, 0x00, 0x99},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0x4d, 0xf5, 0xff},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0xb5, 0x40, 0x99},
    {0x03, 0x84, 0x4d, 0xb5, 0xff},
    {0x01, 0x81, 0x43, 0x44, 0xcf},
    {0x02, 0x84, 0x4d, 0xb5, 0xff},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x03, 0x6c},
    {0x04, 0x81, 0x43, 0x44, 0xcf},
    {0x02, 0x06, 0x42, 0x03, 0x6c},
    {0x4e, 0x03, 0x04, 0xb5, 0xcf},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x0d, 0x7f},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x0d, 0x7f},
    {0x08, 0x46, 0x47, 0xb5, 0xaf},
    {0x03, 0x83, 0x43, 0x04, 0xcf},
    {0x01, 0x04, 0x42, 0x4d, 0x7f},
    {0x02, 0x83, 0x43, 0x04, 0xcf},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0x05, 0xbf},
    {0x04, 0x04, 0x42, 0x4d, 0x7f},
    {0x02, 0x81, 0x45, 0x05, 0xbf},
    {0x0c, 0x45, 0x45, 0xf5, 0xbf},
    {0x03, 0x0a, 0x42, 0x0d, 0x7f},
    {0x01, 0x02, 0x42, 0x4d, 0x7f},
    {0x02, 0x0a, 0x42, 0x0d, 0x7f},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x03, 0x6c},
    {0x04, 0x02, 0x42, 0x4d, 0x7f},
    {0x02, 0x04, 0x42, 0x03, 0x6c},
    {0x07, 0x47, 0xb5, 0x40, 0x99},
    {0x03, 0x02, 0x42, 0x03, 0x6c},
    {0x01, 0x07, 0x42, 0x4d, 0x7f},
    {0x02, 0x02, 0x42, 0x03, 0x6c},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x03, 0x6c},
    {0x04, 0x07, 0x42, 0x4d, 0x7f},
    {0x02, 0x07, 0x42, 0x03, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0x9c, 0xf5, 0x00, 0x0d},
    {0x01, 0x1d, 0x45, 0xf5, 0xbf},
    {0x02, 0x9c, 0xf5, 0x00, 0x0d},
    {0x06, 0x6d, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x49, 0xb5, 0x6c},
    {0x04, 0x1d, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x49, 0xb5, 0x6c},
    {0x09, 0x54, 0x42, 0xb5, 0xdf},
    {0x03, 0x0b, 0x46, 0xb5, 0x7b},
    {0x01, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x0b, 0x46, 0xb5, 0x7b},
    {0x05, 0x6d, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x49, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0xf5, 0x7b},
    {0x02, 0x05, 0x49, 0xb5, 0x6c},
    {0x0a, 0x4c, 0x42, 0xf5, 0xdf},
    {0x03, 0x0c, 0x41, 0xb5, 0x8b},
    {0x01, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x0c, 0x41, 0xb5, 0x8b},
    {0x06, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x09, 0x46, 0xb5, 0x7b},
    {0x04, 0x0b, 0x41, 0xf5, 0x8b},
    {0x02, 0x09, 0x46, 0xb5, 0x7b},
    {0x07, 0x57, 0x04, 0xf5, 0xcf},
    {0x03, 0x9a, 0x4b, 0x02, 0xdf},
    {0x01, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x9a, 0x4b, 0x02, 0xdf},
    {0x05, 0x43, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x49, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0xf5, 0x7b},
    {0x02, 0x06, 0x49, 0xb5, 0x6c},
    {0x4d, 0x0b, 0x02, 0xb5, 0xdf},
    {0x03, 0x14, 0x43, 0xb5, 0x9b},
    {0x01, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x14, 0x43, 0xb5, 0x9b},
    {0x06, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x82, 0x4c, 0x02, 0xdf},
    {0x04, 0x0c, 0x43, 0xf5, 0x9b},
    {0x02, 0x82, 0x4c, 0x02, 0xdf},
    {0x08, 0x54, 0x42, 0xb5, 0xdf},
    {0x03, 0x18, 0x43, 0xb5, 0x9b},
    {0x01, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x18, 0x43, 0xb5, 0x9b},
    {0x05, 0x4b, 0x03, 0xb5, 0x9b},
    {0x03, 0x0e, 0x41, 0xb5, 0x8b},
    {0x04, 0x09, 0x41, 0xf5, 0x8b},
    {0x02, 0x0e, 0x41, 0xb5, 0x8b},
    {0x4f, 0x03, 0x02, 0xf5, 0xdf},
    {0x03, 0x1c, 0x43, 0xb5, 0x9b},
    {0x01, 0x9a, 0x43, 0x42, 0xdf},
    {0x02, 0x1c, 0x43, 0xb5, 0x9b},
    {0x06, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x49, 0xb5, 0x6c},
    {0x04, 0x9a, 0x43, 0x42, 0xdf},
    {0x02, 0x04, 0x49, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x49, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x49, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x49, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x49, 0xb5, 0x6c},
    {0x74, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x43, 0xb5, 0x9b},
    {0x01, 0x21, 0x45, 0xf5, 0xbf},
    {0x02, 0x17, 0x43, 0xb5, 0x9b},
    {0x06, 0x75, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x0b, 0x6d},
    {0x04, 0x21, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x43, 0x0b, 0x6d},
    {0x09, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x1b, 0x43, 0xb5, 0x9b},
    {0x01, 0x82, 0x4b, 0x42, 0xdf},
    {0x02, 0x1b, 0x43, 0xb5, 0x9b},
    {0x05, 0x75, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x0b, 0x6d},
    {0x04, 0x82, 0x4b, 0x42, 0xdf},
    {0x02, 0x05, 0x43, 0x0b, 0x6d},
    {0x0b, 0x4c, 0x42, 0xf5, 0xdf},
    {0x03, 0x28, 0x47, 0xb5, 0xaf},
    {0x01, 0x31, 0x45, 0xf5, 0xbf},
    {0x02, 0x28, 0x47, 0xb5, 0xaf},
    {0x06, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x10, 0x41, 0xb5, 0x8b},
    {0x04, 0x31, 0x45, 0xf5, 0xbf},
    {0x02, 0x10, 0x41, 0xb5, 0x8b},
    {0x07, 0x5b, 0x04, 0xf5, 0xcf},
    {0x03, 0x8d, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x8d, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0x0b, 0x6d},
    {0x04, 0x0e, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x0b, 0x6d},
    {0x70, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0xb5, 0x9b},
    {0x01, 0x3d, 0x45, 0xf5, 0xbf},
    {0x02, 0x13, 0x43, 0xb5, 0x9b},
    {0x06, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0xb5, 0x7b},
    {0x04, 0x3d, 0x45, 0xf5, 0xbf},
    {0x02, 0x08, 0x46, 0xb5, 0x7b},
    {0x08, 0xc2, 0xf5, 0x00, 0x0b},
    {0x03, 0x38, 0x47, 0xb5, 0xaf},
    {0x01, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x38, 0x47, 0xb5, 0xaf},
    {0x05, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4c, 0x02, 0xdf},
    {0x04, 0x04, 0x46, 0xf5, 0x7b},
    {0x02, 0x81, 0x4c, 0x02, 0xdf},
    {0x0c, 0x4c, 0x42, 0xf5, 0xdf},
    {0x03, 0x0a, 0x46, 0xb5, 0x7b},
    {0x01, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x0a, 0x46, 0xb5, 0x7b},
    {0x06, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0x0b, 0x6d},
    {0x04, 0x02, 0x46, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0x0b, 0x6d},
    {0x07, 0x45, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0x0b, 0x6d},
    {0x01, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0x0b, 0x6d},
    {0x05, 0x46, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0x0b, 0x6d},
    {0x04, 0x07, 0x46, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0x0b, 0x6d},
    {0xe1, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x2e, 0x47, 0xb5, 0xaf},
    {0x01, 0x2f, 0x45, 0xf5, 0xbf},
    {0x02, 0x2e, 0x47, 0xb5, 0xaf},
    {0x06, 0x63, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x41, 0x03, 0x6d},
    {0x04, 0x2f, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x41, 0x03, 0x6d},
    {0x09, 0x58, 0x42, 0xb5, 0xdf},
    {0x03, 0x0b, 0x43, 0x03, 0x7d},
    {0x01, 0x03, 0x43, 0x43, 0x7d},
    {0x02, 0x0b, 0x43, 0x03, 0x7d},
    {0x05, 0x63, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x41, 0x03, 0x6d},
    {0x04, 0x03, 0x43, 0x43, 0x7d},
    {0x02, 0x05, 0x41, 0x03, 0x6d},
    {0x0a, 0x49, 0x44, 0xf5, 0xcf},
    {0x03, 0x36, 0x47, 0xb5, 0xaf},
    {0x01, 0x3b, 0x45, 0xf5, 0xbf},
    {0x02, 0x36, 0x47, 0xb5, 0xaf},
    {0x06, 0xc2, 0x03, 0x02, 0xdf},
    {0x03, 0x09, 0x43, 0x03, 0x7d},
    {0x04, 0x3b, 0x45, 0xf5, 0xbf},
    {0x02, 0x09, 0x43, 0x03, 0x7d},
    {0x07, 0x67, 0x02, 0xf5, 0xdf},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x43, 0x7d},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x03, 0x02, 0xdf},
    {0x03, 0x06, 0x41, 0x03, 0x6d},
    {0x04, 0x05, 0x43, 0x43, 0x7d},
    {0x02, 0x06, 0x41, 0x03, 0x6d},
    {0x6c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x47, 0xb5, 0xaf},
    {0x01, 0x29, 0x45, 0xf5, 0xbf},
    {0x02, 0x24, 0x47, 0xb5, 0xaf},
    {0x06, 0x73, 0x04, 0xb5, 0xcf},
    {0x03, 0x82, 0x49, 0x04, 0xcf},
    {0x04, 0x29, 0x45, 0xf5, 0xbf},
    {0x02, 0x82, 0x49, 0x04, 0xcf},
    {0x08, 0x58, 0x42, 0xb5, 0xdf},
    {0x03, 0x34, 0x47, 0xb5, 0xaf},
    {0x01, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x34, 0x47, 0xb5, 0xaf},
    {0x05, 0x73, 0x04, 0xb5, 0xcf},
    {0x03, 0x0f, 0x41, 0xb5, 0x8b},
    {0x04, 0x10, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x41, 0xb5, 0x8b},
    {0x64, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x47, 0xb5, 0xaf},
    {0x01, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x47, 0xb5, 0xaf},
    {0x06, 0x4f, 0x07, 0xb5, 0xaf},
    {0x03, 0x04, 0x41, 0x03, 0x6d},
    {0x04, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x03, 0x6d},
    {0x07, 0x50, 0x05, 0xf5, 0xbf},
    {0x03, 0x02, 0x41, 0x03, 0x6d},
    {0x01, 0x06, 0x43, 0x43, 0x7d},
    {0x02, 0x02, 0x41, 0x03, 0x6d},
    {0x05, 0x4f, 0x07, 0xb5, 0xaf},
    {0x03, 0x07, 0x41, 0x03, 0x6d},
    {0x04, 0x06, 0x43, 0x43, 0x7d},
    {0x02, 0x07, 0x41, 0x03, 0x6d},
    {0xc6, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x41, 0xb5, 0x8b},
    {0x01, 0x1f, 0x45, 0xf5, 0xbf},
    {0x02, 0x0d, 0x41, 0xb5, 0x8b},
    {0x06, 0x7f, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x42, 0x0b, 0x6d},
    {0x04, 0x1f, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x42, 0x0b, 0x6d},
    {0x09, 0x4e, 0x44, 0xb5, 0xcf},
    {0x03, 0x99, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x99, 0xf5, 0x00, 0x0b},
    {0x05, 0x7f, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x42, 0x0b, 0x6d},
    {0x04, 0x08, 0x41, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0x0b, 0x6d},
    {0x0b, 0x49, 0x44, 0xf5, 0xcf},
    {0x03, 0x2c, 0x47, 0xb5, 0xaf},
    {0x01, 0x39, 0x45, 0xf5, 0xbf},
    {0x02, 0x2c, 0x47, 0xb5, 0xaf},
    {0x06, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x11, 0x41, 0xb5, 0x8b},
    {0x04, 0x39, 0x45, 0xf5, 0xbf},
    {0x02, 0x11, 0x41, 0xb5, 0x8b},
    {0x07, 0xc9, 0xb5, 0x40, 0x0d},
    {0x03, 0x95, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x4b, 0x42, 0xdf},
    {0x02, 0x95, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x01, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0x0b, 0x6d},
    {0x04, 0x81, 0x4b, 0x42, 0xdf},
    {0x02, 0x06, 0x42, 0x0b, 0x6d},
    {0x4e, 0x0b, 0x02, 0xb5, 0xdf},
    {0x03, 0x01, 0x41, 0xb5, 0x8b},
    {0x01, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x01, 0x41, 0xb5, 0x8b},
    {0x06, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x03, 0x7d},
    {0x04, 0x0a, 0x41, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x03, 0x7d},
    {0x08, 0x4e, 0x44, 0xb5, 0xcf},
    {0x03, 0x83, 0x4b, 0x02, 0xdf},
    {0x01, 0x04, 0x43, 0x43, 0x7d},
    {0x02, 0x83, 0x4b, 0x02, 0xdf},
    {0x05, 0x42, 0x01, 0xb5, 0x8b},
    {0x03, 0x81, 0x49, 0x04, 0xcf},
    {0x04, 0x04, 0x43, 0x43, 0x7d},
    {0x02, 0x81, 0x49, 0x04, 0xcf},
    {0x0c, 0x49, 0x44, 0xf5, 0xcf},
    {0x03, 0x0a, 0x43, 0x03, 0x7d},
    {0x01, 0x02, 0x43, 0x43, 0x7d},
    {0x02, 0x0a, 0x43, 0x03, 0x7d},
    {0x06, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0x0b, 0x6d},
    {0x04, 0x02, 0x43, 0x43, 0x7d},
    {0x02, 0x04, 0x42, 0x0b, 0x6d},
    {0x07, 0x46, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x0b, 0x6d},
    {0x01, 0x07, 0x43, 0x43, 0x7d},
    {0x02, 0x02, 0x42, 0x0b, 0x6d},
    {0x05, 0x47, 0x01, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0x0b, 0x6d},
    {0x04, 0x07, 0x43, 0x43, 0x7d},
    {0x02, 0x07, 0x42, 0x0b, 0x6d},
    {0xf4, 0x43, 0x02, 0xf5, 0xff},
    {0x03, 0x1e, 0x47, 0xb5, 0xaf},
    {0x01, 0x16, 0x47, 0xf5, 0xaf},
    {0x02, 0x1e, 0x47, 0xb5, 0xaf},
    {0x06, 0x4d, 0x07, 0xb5, 0xaf},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0x47, 0xf5, 0xaf},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x5c, 0x42, 0xb5, 0xdf},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0x07, 0xb5, 0xaf},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x53, 0x04, 0xf5, 0xcf},
    {0x03, 0x9a, 0x45, 0x04, 0xcf},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x45, 0x04, 0xcf},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x05, 0x04, 0xb5, 0xcf},
    {0x03, 0x22, 0x47, 0xb5, 0xaf},
    {0x01, 0x1a, 0x47, 0xf5, 0xaf},
    {0x02, 0x22, 0x47, 0xb5, 0xaf},
    {0x06, 0xd7, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xda, 0xb5, 0x0d},
    {0x04, 0x1a, 0x47, 0xf5, 0xaf},
    {0x02, 0x82, 0xda, 0xb5, 0x0d},
    {0x08, 0x5c, 0x42, 0xb5, 0xdf},
    {0x03, 0x32, 0x47, 0xb5, 0xaf},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0x47, 0xb5, 0xaf},
    {0x05, 0xd7, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x47, 0xb5, 0xaf},
    {0x01, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x47, 0xb5, 0xaf},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0x07, 0xf5, 0xaf},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0x7c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x30, 0x47, 0xb5, 0xaf},
    {0x01, 0x25, 0x45, 0xf5, 0xbf},
    {0x02, 0x30, 0x47, 0xb5, 0xaf},
    {0x06, 0x6b, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x05, 0x6c},
    {0x04, 0x25, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x43, 0x05, 0x6c},
    {0x09, 0x44, 0x47, 0xb5, 0xaf},
    {0x03, 0x3c, 0x47, 0xb5, 0xaf},
    {0x01, 0x82, 0x45, 0x44, 0xcf},
    {0x02, 0x3c, 0x47, 0xb5, 0xaf},
    {0x05, 0x6b, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x05, 0x6c},
    {0x04, 0x82, 0x45, 0x44, 0xcf},
    {0x02, 0x05, 0x43, 0x05, 0x6c},
    {0x0b, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x2a, 0x47, 0xb5, 0xaf},
    {0x01, 0x19, 0x47, 0xf5, 0xaf},
    {0x02, 0x2a, 0x47, 0xb5, 0xaf},
    {0x06, 0x51, 0x07, 0xb5, 0xaf},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0x47, 0xf5, 0xaf},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x77, 0x02, 0xf5, 0xdf},
    {0x03, 0x91, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x91, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x07, 0xb5, 0xaf},
    {0x03, 0x06, 0x43, 0x05, 0x6c},
    {0x04, 0x0f, 0x43, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x05, 0x6c},
    {0x68, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x47, 0xb5, 0xaf},
    {0x01, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x47, 0xb5, 0xaf},
    {0x06, 0xd3, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0x47, 0xb5, 0xaf},
    {0x03, 0x3a, 0x47, 0xb5, 0xaf},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0x47, 0xb5, 0xaf},
    {0x05, 0xd3, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xda, 0xb5, 0x0d},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xda, 0xb5, 0x0d},
    {0x0c, 0xda, 0xf5, 0x40, 0x0d},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x05, 0x6c},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x05, 0x6c},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x05, 0x6c},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x05, 0x6c},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x05, 0x6c},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x05, 0x6c},
    {0xe5, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x16, 0x43, 0xb5, 0x9b},
    {0x01, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x16, 0x43, 0xb5, 0x9b},
    {0x06, 0x41, 0x07, 0xb5, 0xaf},
    {0x03, 0x03, 0x44, 0x03, 0x6d},
    {0x04, 0x0d, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x03, 0x6d},
    {0x09, 0x42, 0x47, 0xb5, 0xaf},
    {0x03, 0x0b, 0x42, 0x03, 0x7d},
    {0x01, 0x03, 0x42, 0x43, 0x7d},
    {0x02, 0x0b, 0x42, 0x03, 0x7d},
    {0x05, 0x41, 0x07, 0xb5, 0xaf},
    {0x03, 0x05, 0x44, 0x03, 0x6d},
    {0x04, 0x03, 0x42, 0x43, 0x7d},
    {0x02, 0x05, 0x44, 0x03, 0x6d},
    {0x0a, 0x46, 0x45, 0xf5, 0xbf},
    {0x03, 0x1a, 0x43, 0xb5, 0x9b},
    {0x01, 0x12, 0x47, 0xf5, 0xaf},
    {0x02, 0x1a, 0x43, 0xb5, 0x9b},
    {0x06, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x03, 0x7d},
    {0x04, 0x12, 0x47, 0xf5, 0xaf},
    {0x02, 0x09, 0x42, 0x03, 0x7d},
    {0x07, 0x4a, 0x07, 0xf5, 0xaf},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x43, 0x7d},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x03, 0x6d},
    {0x04, 0x05, 0x42, 0x43, 0x7d},
    {0x02, 0x06, 0x44, 0x03, 0x6d},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0x47, 0xb5, 0xaf},
    {0x01, 0x15, 0x47, 0xf5, 0xaf},
    {0x02, 0x26, 0x47, 0xb5, 0xaf},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0x05, 0xbf},
    {0x04, 0x15, 0x47, 0xf5, 0xaf},
    {0x02, 0x82, 0x46, 0x05, 0xbf},
    {0x08, 0x42, 0x47, 0xb5, 0xaf},
    {0x03, 0x19, 0x43, 0xb5, 0x9b},
    {0x01, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x19, 0x43, 0xb5, 0x9b},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x03, 0x02, 0xdf},
    {0x03, 0x04, 0x44, 0x03, 0x6d},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x03, 0x6d},
    {0x07, 0x44, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x03, 0x6d},
    {0x01, 0x06, 0x42, 0x43, 0x7d},
    {0x02, 0x02, 0x44, 0x03, 0x6d},
    {0x05, 0xc1, 0x03, 0x02, 0xdf},
    {0x03, 0x07, 0x44, 0x03, 0x6d},
    {0x04, 0x06, 0x42, 0x43, 0x7d},
    {0x02, 0x07, 0x44, 0x03, 0x6d},
    {0xc1, 0x47, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x05, 0x6c},
    {0x04, 0x01, 0x43, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x05, 0x6c},
    {0x09, 0x47, 0x47, 0xb5, 0xaf},
    {0x03, 0x12, 0x43, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0xb5, 0x9b},
    {0x05, 0x4a, 0x03, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x05, 0x6c},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x05, 0x6c},
    {0x0b, 0x46, 0x45, 0xf5, 0xbf},
    {0x03, 0x15, 0x43, 0xb5, 0x9b},
    {0x01, 0x83, 0x43, 0x42, 0xdf},
    {0x02, 0x15, 0x43, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x43, 0x42, 0xdf},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0xf5, 0x9b},
    {0x03, 0x84, 0x43, 0x02, 0xdf},
    {0x01, 0x81, 0x45, 0x44, 0xcf},
    {0x02, 0x84, 0x43, 0x02, 0xdf},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x05, 0x6c},
    {0x04, 0x81, 0x45, 0x44, 0xcf},
    {0x02, 0x06, 0x42, 0x05, 0x6c},
    {0x4e, 0x05, 0x04, 0xb5, 0xcf},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x03, 0x7d},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x03, 0x7d},
    {0x08, 0x47, 0x47, 0xb5, 0xaf},
    {0x03, 0x83, 0x45, 0x04, 0xcf},
    {0x01, 0x04, 0x42, 0x43, 0x7d},
    {0x02, 0x83, 0x45, 0x04, 0xcf},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0x05, 0xbf},
    {0x04, 0x04, 0x42, 0x43, 0x7d},
    {0x02, 0x81, 0x46, 0x05, 0xbf},
    {0x0c, 0x46, 0x45, 0xf5, 0xbf},
    {0x03, 0x0a, 0x42, 0x03, 0x7d},
    {0x01, 0x02, 0x42, 0x43, 0x7d},
    {0x02, 0x0a, 0x42, 0x03, 0x7d},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x05, 0x6c},
    {0x04, 0x02, 0x42, 0x43, 0x7d},
    {0x02, 0x04, 0x42, 0x05, 0x6c},
    {0x07, 0x47, 0x03, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x05, 0x6c},
    {0x01, 0x07, 0x42, 0x43, 0x7d},
    {0x02, 0x02, 0x42, 0x05, 0x6c},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x05, 0x6c},
    {0x04, 0x07, 0x42, 0x43, 0x7d},
    {0x02, 0x07, 0x42, 0x05, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0b},
    {0x03, 0xb4, 0xf5, 0x00, 0x0b},
    {0x01, 0xa0, 0xf5, 0x40, 0x0f},
    {0x02, 0xb4, 0xf5, 0x00, 0x0b},
    {0x06, 0x5d, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x4a, 0xb5, 0x6d},
    {0x04, 0xa0, 0xf5, 0x40, 0x0f},
    {0x02, 0x03, 0x4a, 0xb5, 0x6d},
    {0x09, 0x57, 0x42, 0xb5, 0xdf},
    {0x03, 0x0b, 0x49, 0xb5, 0x7d},
    {0x01, 0x03, 0x49, 0xf5, 0x7d},
    {0x02, 0x0b, 0x49, 0xb5, 0x7d},
    {0x05, 0x5d, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x4a, 0xb5, 0x6d},
    {0x04, 0x03, 0x49, 0xf5, 0x7d},
    {0x02, 0x05, 0x4a, 0xb5, 0x6d},
    {0x0a, 0x62, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x46, 0xb5, 0x8c},
    {0x01, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x0c, 0x46, 0xb5, 0x8c},
    {0x06, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x09, 0x49, 0xb5, 0x7d},
    {0x04, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x09, 0x49, 0xb5, 0x7d},
    {0x07, 0x6d, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0x5a, 0xb5, 0xff},
    {0x01, 0x05, 0x49, 0xf5, 0x7d},
    {0x02, 0x9a, 0x5a, 0xb5, 0xff},
    {0x05, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x4a, 0xb5, 0x6d},
    {0x04, 0x05, 0x49, 0xf5, 0x7d},
    {0x02, 0x06, 0x4a, 0xb5, 0x6d},
    {0x4d, 0x1a, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x41, 0xb5, 0x9c},
    {0x01, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x14, 0x41, 0xb5, 0x9c},
    {0x06, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x82, 0x62, 0xb5, 0xff},
    {0x04, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x82, 0x62, 0xb5, 0xff},
    {0x08, 0x57, 0x42, 0xb5, 0xdf},
    {0x03, 0x18, 0x41, 0xb5, 0x9c},
    {0x01, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x18, 0x41, 0xb5, 0x9c},
    {0x05, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x0e, 0x46, 0xb5, 0x8c},
    {0x04, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x0e, 0x46, 0xb5, 0x8c},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x41, 0xb5, 0x9c},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x41, 0xb5, 0x9c},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x4a, 0xb5, 0x6d},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0x4a, 0xb5, 0x6d},
    {0x07, 0x43, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x4a, 0xb5, 0x6d},
    {0x01, 0x06, 0x49, 0xf5, 0x7d},
    {0x02, 0x02, 0x4a, 0xb5, 0x6d},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x4a, 0xb5, 0x6d},
    {0x04, 0x06, 0x49, 0xf5, 0x7d},
    {0x02, 0x07, 0x4a, 0xb5, 0x6d},
    {0x52, 0x08, 0xf5, 0x00, 0xff},
    {0x03, 0x17, 0x41, 0xb5, 0x9c},
    {0x01, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x17, 0x41, 0xb5, 0x9c},
    {0x06, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0x1a, 0x6f},
    {0x04, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0x1a, 0x6f},
    {0x09, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x1b, 0x41, 0xb5, 0x9c},
    {0x01, 0x82, 0x5a, 0xf5, 0xff},
    {0x02, 0x1b, 0x41, 0xb5, 0x9c},
    {0x05, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0x1a, 0x6f},
    {0x04, 0x82, 0x5a, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x1a, 0x6f},
    {0x0b, 0x62, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x43, 0xb5, 0xac},
    {0x01, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x27, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x10, 0x46, 0xb5, 0x8c},
    {0x04, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x46, 0xb5, 0x8c},
    {0x07, 0x4b, 0x03, 0xf5, 0xac},
    {0x03, 0x89, 0x48, 0xb5, 0xff},
    {0x01, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x89, 0x48, 0xb5, 0xff},
    {0x05, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0x1a, 0x6f},
    {0x04, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x1a, 0x6f},
    {0x51, 0x08, 0xf5, 0x00, 0xff},
    {0x03, 0x13, 0x41, 0xb5, 0x9c},
    {0x01, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x13, 0x41, 0xb5, 0x9c},
    {0x06, 0xda, 0x08, 0xb5, 0xff},
    {0x03, 0x08, 0x49, 0xb5, 0x7d},
    {0x04, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x08, 0x49, 0xb5, 0x7d},
    {0x08, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x37, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x49, 0xf5, 0x7d},
    {0x02, 0x37, 0x43, 0xb5, 0xac},
    {0x05, 0xda, 0x08, 0xb5, 0xff},
    {0x03, 0x81, 0x62, 0xb5, 0xff},
    {0x04, 0x04, 0x49, 0xf5, 0x7d},
    {0x02, 0x81, 0x62, 0xb5, 0xff},
    {0x0c, 0x62, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x49, 0xb5, 0x7d},
    {0x01, 0x02, 0x49, 0xf5, 0x7d},
    {0x02, 0x0a, 0x49, 0xb5, 0x7d},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0x1a, 0x6f},
    {0x04, 0x02, 0x49, 0xf5, 0x7d},
    {0x02, 0x04, 0x43, 0x1a, 0x6f},
    {0x07, 0x45, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0x1a, 0x6f},
    {0x01, 0x07, 0x49, 0xf5, 0x7d},
    {0x02, 0x02, 0x43, 0x1a, 0x6f},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0x1a, 0x6f},
    {0x04, 0x07, 0x49, 0xf5, 0x7d},
    {0x02, 0x07, 0x43, 0x1a, 0x6f},
    {0xdf, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x2d, 0x43, 0xb5, 0xac},
    {0x01, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x2d, 0x43, 0xb5, 0xac},
    {0x06, 0x61, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x5b, 0x42, 0xb5, 0xdf},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x61, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x35, 0x43, 0xb5, 0xac},
    {0x01, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x35, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x75, 0x02, 0xf5, 0xdf},
    {0x03, 0x87, 0x48, 0xb5, 0xff},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0x48, 0xb5, 0xff},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x72, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x43, 0xb5, 0xac},
    {0x01, 0x28, 0x45, 0xf5, 0xbf},
    {0x02, 0x23, 0x43, 0xb5, 0xac},
    {0x06, 0x71, 0x04, 0xb5, 0xcf},
    {0x03, 0x82, 0xc2, 0xb5, 0x0c},
    {0x04, 0x28, 0x45, 0xf5, 0xbf},
    {0x02, 0x82, 0xc2, 0xb5, 0x0c},
    {0x08, 0x5b, 0x42, 0xb5, 0xdf},
    {0x03, 0x33, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x33, 0x43, 0xb5, 0xac},
    {0x05, 0x71, 0x04, 0xb5, 0xcf},
    {0x03, 0x0f, 0x46, 0xb5, 0x8c},
    {0x04, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x46, 0xb5, 0x8c},
    {0x62, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x43, 0xb5, 0xac},
    {0x01, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x43, 0xb5, 0xac},
    {0x06, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0xda, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x46, 0xb5, 0x8c},
    {0x01, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x0d, 0x46, 0xb5, 0x8c},
    {0x06, 0x7d, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x42, 0x1a, 0x6f},
    {0x04, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0x1a, 0x6f},
    {0x09, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x98, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x98, 0xf5, 0x00, 0x0b},
    {0x05, 0x7d, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x42, 0x1a, 0x6f},
    {0x04, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0x1a, 0x6f},
    {0x0b, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x2b, 0x43, 0xb5, 0xac},
    {0x01, 0x38, 0x45, 0xf5, 0xbf},
    {0x02, 0x2b, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x11, 0x46, 0xb5, 0x8c},
    {0x04, 0x38, 0x45, 0xf5, 0xbf},
    {0x02, 0x11, 0x46, 0xb5, 0x8c},
    {0x07, 0xc7, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0x5a, 0xf5, 0xff},
    {0x02, 0x94, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0x1a, 0x6f},
    {0x04, 0x81, 0x5a, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x1a, 0x6f},
    {0x4e, 0x1a, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x46, 0xb5, 0x8c},
    {0x01, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x01, 0x46, 0xb5, 0x8c},
    {0x06, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x5a, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0x5a, 0xb5, 0xff},
    {0x05, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x81, 0xc2, 0xb5, 0x0c},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0xc2, 0xb5, 0x0c},
    {0x0c, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0x1a, 0x6f},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x1a, 0x6f},
    {0x07, 0x46, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x1a, 0x6f},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x1a, 0x6f},
    {0x05, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0x1a, 0x6f},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x1a, 0x6f},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x43, 0xb5, 0xac},
    {0x01, 0x2e, 0x45, 0xf5, 0xbf},
    {0x02, 0x1d, 0x43, 0xb5, 0xac},
    {0x06, 0x6f, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x46, 0x08, 0x6f},
    {0x04, 0x2e, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x46, 0x08, 0x6f},
    {0x09, 0x68, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x08, 0x7f},
    {0x01, 0x03, 0x41, 0x48, 0x7f},
    {0x02, 0x0b, 0x41, 0x08, 0x7f},
    {0x05, 0x6f, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x46, 0x08, 0x6f},
    {0x04, 0x03, 0x41, 0x48, 0x7f},
    {0x02, 0x05, 0x46, 0x08, 0x6f},
    {0x0a, 0x72, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x43, 0x08, 0x8f},
    {0x01, 0x0b, 0x43, 0x48, 0x8f},
    {0x02, 0x0c, 0x43, 0x08, 0x8f},
    {0x06, 0x43, 0x03, 0x08, 0x8f},
    {0x03, 0x09, 0x41, 0x08, 0x7f},
    {0x04, 0x0b, 0x43, 0x48, 0x8f},
    {0x02, 0x09, 0x41, 0x08, 0x7f},
    {0x07, 0x63, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0x49, 0x02, 0xdf},
    {0x01, 0x05, 0x41, 0x48, 0x7f},
    {0x02, 0x9a, 0x49, 0x02, 0xdf},
    {0x05, 0x43, 0x03, 0x08, 0x8f},
    {0x03, 0x06, 0x46, 0x08, 0x6f},
    {0x04, 0x05, 0x41, 0x48, 0x7f},
    {0x02, 0x06, 0x46, 0x08, 0x6f},
    {0x4d, 0x09, 0x02, 0xb5, 0xdf},
    {0x03, 0x21, 0x43, 0xb5, 0xac},
    {0x01, 0x36, 0x45, 0xf5, 0xbf},
    {0x02, 0x21, 0x43, 0xb5, 0xac},
    {0x06, 0x7b, 0x04, 0xb5, 0xcf},
    {0x03, 0x82, 0x72, 0xb5, 0xff},
    {0x04, 0x36, 0x45, 0xf5, 0xbf},
    {0x02, 0x82, 0x72, 0xb5, 0xff},
    {0x08, 0x68, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x48, 0x8f},
    {0x02, 0x31, 0x43, 0xb5, 0xac},
    {0x05, 0x7b, 0x04, 0xb5, 0xcf},
    {0x03, 0x0e, 0x43, 0x08, 0x8f},
    {0x04, 0x09, 0x43, 0x48, 0x8f},
    {0x02, 0x0e, 0x43, 0x08, 0x8f},
    {0x5a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x43, 0xb5, 0xac},
    {0x01, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x3d, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x08, 0x8f},
    {0x03, 0x04, 0x46, 0x08, 0x6f},
    {0x04, 0x88, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x46, 0x08, 0x6f},
    {0x07, 0xc2, 0x08, 0xf5, 0xff},
    {0x03, 0x02, 0x46, 0x08, 0x6f},
    {0x01, 0x06, 0x41, 0x48, 0x7f},
    {0x02, 0x02, 0x46, 0x08, 0x6f},
    {0x05, 0x45, 0x03, 0x08, 0x8f},
    {0x03, 0x07, 0x46, 0x08, 0x6f},
    {0x04, 0x06, 0x41, 0x48, 0x7f},
    {0x02, 0x07, 0x46, 0x08, 0x6f},
    {0xd6, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x2f, 0x43, 0xb5, 0xac},
    {0x01, 0x24, 0x45, 0xf5, 0xbf},
    {0x02, 0x2f, 0x43, 0xb5, 0xac},
    {0x06, 0x69, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x09, 0x6d},
    {0x04, 0x24, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x43, 0x09, 0x6d},
    {0x09, 0x50, 0x44, 0xb5, 0xcf},
    {0x03, 0x3b, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x49, 0x42, 0xdf},
    {0x02, 0x3b, 0x43, 0xb5, 0xac},
    {0x05, 0x69, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x09, 0x6d},
    {0x04, 0x82, 0x49, 0x42, 0xdf},
    {0x02, 0x05, 0x43, 0x09, 0x6d},
    {0x0b, 0x72, 0xf5, 0x40, 0xff},
    {0x03, 0x29, 0x43, 0xb5, 0xac},
    {0x01, 0x34, 0x45, 0xf5, 0xbf},
    {0x02, 0x29, 0x43, 0xb5, 0xac},
    {0x06, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x08, 0x8f},
    {0x04, 0x34, 0x45, 0xf5, 0xbf},
    {0x02, 0x10, 0x43, 0x08, 0x8f},
    {0x07, 0x73, 0x02, 0xf5, 0xdf},
    {0x03, 0x90, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x90, 0xf5, 0x00, 0x0b},
    {0x05, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x09, 0x6d},
    {0x04, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x09, 0x6d},
    {0x60, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x43, 0xb5, 0xac},
    {0x01, 0x00, 0x45, 0xf5, 0xbf},
    {0x02, 0x1f, 0x43, 0xb5, 0xac},
    {0x06, 0xcf, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x08, 0x7f},
    {0x04, 0x00, 0x45, 0xf5, 0xbf},
    {0x02, 0x08, 0x41, 0x08, 0x7f},
    {0x08, 0x50, 0x44, 0xb5, 0xcf},
    {0x03, 0x39, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x48, 0x7f},
    {0x02, 0x39, 0x43, 0xb5, 0xac},
    {0x05, 0xcf, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x72, 0xb5, 0xff},
    {0x04, 0x04, 0x41, 0x48, 0x7f},
    {0x02, 0x81, 0x72, 0xb5, 0xff},
    {0x0c, 0x72, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x41, 0x08, 0x7f},
    {0x01, 0x02, 0x41, 0x48, 0x7f},
    {0x02, 0x0a, 0x41, 0x08, 0x7f},
    {0x06, 0x46, 0x03, 0x08, 0x8f},
    {0x03, 0x04, 0x43, 0x09, 0x6d},
    {0x04, 0x02, 0x41, 0x48, 0x7f},
    {0x02, 0x04, 0x43, 0x09, 0x6d},
    {0x07, 0x4f, 0x05, 0xf5, 0xbf},
    {0x03, 0x02, 0x43, 0x09, 0x6d},
    {0x01, 0x07, 0x41, 0x48, 0x7f},
    {0x02, 0x02, 0x43, 0x09, 0x6d},
    {0x05, 0x46, 0x03, 0x08, 0x8f},
    {0x03, 0x07, 0x43, 0x09, 0x6d},
    {0x04, 0x07, 0x41, 0x48, 0x7f},
    {0x02, 0x07, 0x43, 0x09, 0x6d},
    {0xde, 0x45, 0xf5, 0x40, 0x0f},
    {0x03, 0x16, 0x41, 0xb5, 0x9c},
    {0x01, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x16, 0x41, 0xb5, 0x9c},
    {0x06, 0x5f, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xce, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x5f, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x4e, 0x42, 0xf5, 0xdf},
    {0x03, 0x1a, 0x41, 0xb5, 0x9c},
    {0x01, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x41, 0xb5, 0x9c},
    {0x06, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x7f, 0x02, 0xf5, 0xdf},
    {0x03, 0x8c, 0xf5, 0x00, 0x0b},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8c, 0xf5, 0x00, 0x0b},
    {0x05, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x7d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x43, 0xb5, 0xac},
    {0x01, 0x2c, 0x45, 0xf5, 0xbf},
    {0x02, 0x25, 0x43, 0xb5, 0xac},
    {0x06, 0x79, 0x04, 0xb5, 0xcf},
    {0x03, 0x82, 0x4e, 0x02, 0xdf},
    {0x04, 0x2c, 0x45, 0xf5, 0xbf},
    {0x02, 0x82, 0x4e, 0x02, 0xdf},
    {0x08, 0xce, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x41, 0xb5, 0x9c},
    {0x01, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x19, 0x41, 0xb5, 0x9c},
    {0x05, 0x79, 0x04, 0xb5, 0xcf},
    {0x03, 0x0f, 0x43, 0x08, 0x8f},
    {0x04, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x08, 0x8f},
    {0x6a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x48, 0xb5, 0xff},
    {0x01, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x48, 0xb5, 0xff},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0xd0, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x43, 0x08, 0x8f},
    {0x01, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x08, 0x8f},
    {0x06, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x09, 0x6d},
    {0x04, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x09, 0x6d},
    {0x09, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x41, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x48, 0x8f},
    {0x02, 0x12, 0x41, 0xb5, 0x9c},
    {0x05, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x09, 0x6d},
    {0x04, 0x08, 0x43, 0x48, 0x8f},
    {0x02, 0x05, 0x42, 0x09, 0x6d},
    {0x0b, 0x4e, 0x42, 0xf5, 0xdf},
    {0x03, 0x15, 0x41, 0xb5, 0x9c},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x41, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x08, 0x8f},
    {0x03, 0x11, 0x43, 0x08, 0x8f},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0x08, 0x8f},
    {0x07, 0x42, 0x01, 0xf5, 0x9c},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x49, 0x42, 0xdf},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0x08, 0x8f},
    {0x03, 0x06, 0x42, 0x09, 0x6d},
    {0x04, 0x81, 0x49, 0x42, 0xdf},
    {0x02, 0x06, 0x42, 0x09, 0x6d},
    {0x4e, 0x09, 0x02, 0xb5, 0xdf},
    {0x03, 0x01, 0x43, 0x08, 0x8f},
    {0x01, 0x0a, 0x43, 0x48, 0x8f},
    {0x02, 0x01, 0x43, 0x08, 0x8f},
    {0x06, 0x42, 0x03, 0x08, 0x8f},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0x48, 0x8f},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x49, 0x02, 0xdf},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x49, 0x02, 0xdf},
    {0x05, 0x42, 0x03, 0x08, 0x8f},
    {0x03, 0x81, 0x4e, 0x02, 0xdf},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x4e, 0x02, 0xdf},
    {0x0c, 0x4e, 0x42, 0xf5, 0xdf},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0x08, 0x8f},
    {0x03, 0x04, 0x42, 0x09, 0x6d},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x09, 0x6d},
    {0x07, 0x47, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x09, 0x6d},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x09, 0x6d},
    {0x05, 0x47, 0x03, 0x08, 0x8f},
    {0x03, 0x07, 0x42, 0x09, 0x6d},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x09, 0x6d},
    {0xf4, 0x48, 0xf5, 0x40, 0x0f},
    {0x03, 0x9d, 0xf5, 0x00, 0x0d},
    {0x01, 0x1e, 0x45, 0xf5, 0xbf},
    {0x02, 0x9d, 0xf5, 0x00, 0x0d},
    {0x06, 0x56, 0x05, 0xb5, 0xbf},
    {0x03, 0x03, 0x47, 0xb5, 0x6b},
    {0x04, 0x1e, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x47, 0xb5, 0x6b},
    {0x09, 0x53, 0x42, 0xb5, 0xdf},
    {0x03, 0x0b, 0x45, 0xb5, 0x7b},
    {0x01, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x0b, 0x45, 0xb5, 0x7b},
    {0x05, 0x56, 0x05, 0xb5, 0xbf},
    {0x03, 0x05, 0x47, 0xb5, 0x6b},
    {0x04, 0x03, 0x45, 0xf5, 0x7b},
    {0x02, 0x05, 0x47, 0xb5, 0x6b},
    {0x0a, 0x7e, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x44, 0xb5, 0x8b},
    {0x01, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x0c, 0x44, 0xb5, 0x8b},
    {0x06, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x09, 0x45, 0xb5, 0x7b},
    {0x04, 0x0b, 0x44, 0xf5, 0x8b},
    {0x02, 0x09, 0x45, 0xb5, 0x7b},
    {0x07, 0x4d, 0x05, 0xf5, 0xbf},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x47, 0xb5, 0x6b},
    {0x04, 0x05, 0x45, 0xf5, 0x7b},
    {0x02, 0x06, 0x47, 0xb5, 0x6b},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x42, 0xb5, 0x9b},
    {0x01, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x14, 0x42, 0xb5, 0x9b},
    {0x06, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x82, 0x7e, 0xb5, 0xff},
    {0x04, 0x0c, 0x42, 0xf5, 0x9b},
    {0x02, 0x82, 0x7e, 0xb5, 0xff},
    {0x08, 0x53, 0x42, 0xb5, 0xdf},
    {0x03, 0x18, 0x42, 0xb5, 0x9b},
    {0x01, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x18, 0x42, 0xb5, 0x9b},
    {0x05, 0x4b, 0x02, 0xb5, 0x9b},
    {0x03, 0x0e, 0x44, 0xb5, 0x8b},
    {0x04, 0x09, 0x44, 0xf5, 0x8b},
    {0x02, 0x0e, 0x44, 0xb5, 0x8b},
    {0x4f, 0x05, 0x02, 0xf5, 0xdf},
    {0x03, 0x1c, 0x42, 0xb5, 0x9b},
    {0x01, 0x9a, 0x45, 0x42, 0xdf},
    {0x02, 0x1c, 0x42, 0xb5, 0x9b},
    {0x06, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x47, 0xb5, 0x6b},
    {0x04, 0x9a, 0x45, 0x42, 0xdf},
    {0x02, 0x04, 0x47, 0xb5, 0x6b},
    {0x07, 0x43, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x47, 0xb5, 0x6b},
    {0x01, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x47, 0xb5, 0x6b},
    {0x05, 0x45, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x47, 0xb5, 0x6b},
    {0x04, 0x06, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x47, 0xb5, 0x6b},
    {0xcc, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x17, 0x42, 0xb5, 0x9b},
    {0x01, 0x22, 0x45, 0xf5, 0xbf},
    {0x02, 0x17, 0x42, 0xb5, 0x9b},
    {0x06, 0x5a, 0x05, 0xb5, 0xbf},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x22, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x48, 0x45, 0xb5, 0xbf},
    {0x03, 0x1b, 0x42, 0xb5, 0x9b},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x42, 0xb5, 0x9b},
    {0x05, 0x5a, 0x05, 0xb5, 0xbf},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x7e, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x43, 0xb5, 0xac},
    {0x01, 0x32, 0x45, 0xf5, 0xbf},
    {0x02, 0x28, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x10, 0x44, 0xb5, 0x8b},
    {0x04, 0x32, 0x45, 0xf5, 0xbf},
    {0x02, 0x10, 0x44, 0xb5, 0x8b},
    {0x07, 0xd8, 0xb5, 0x40, 0x0e},
    {0x03, 0x8e, 0xf5, 0x00, 0x0b},
    {0x01, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x8e, 0xf5, 0x00, 0x0b},
    {0x05, 0x49, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x7e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0xb5, 0x9b},
    {0x01, 0x3e, 0x45, 0xf5, 0xbf},
    {0x02, 0x13, 0x42, 0xb5, 0x9b},
    {0x06, 0xcb, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x45, 0xb5, 0x7b},
    {0x04, 0x3e, 0x45, 0xf5, 0xbf},
    {0x02, 0x08, 0x45, 0xb5, 0x7b},
    {0x08, 0x48, 0x45, 0xb5, 0xbf},
    {0x03, 0x38, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x38, 0x43, 0xb5, 0xac},
    {0x05, 0xcb, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x7e, 0xb5, 0xff},
    {0x04, 0x04, 0x45, 0xf5, 0x7b},
    {0x02, 0x81, 0x7e, 0xb5, 0xff},
    {0x0c, 0x7e, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x45, 0xb5, 0x7b},
    {0x01, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x0a, 0x45, 0xb5, 0x7b},
    {0x06, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x45, 0xf5, 0x7b},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x45, 0xf5, 0x7b},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe3, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x2e, 0x43, 0xb5, 0xac},
    {0x01, 0x30, 0x45, 0xf5, 0xbf},
    {0x02, 0x2e, 0x43, 0xb5, 0xac},
    {0x06, 0x65, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x41, 0x05, 0x6d},
    {0x04, 0x30, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x41, 0x05, 0x6d},
    {0x09, 0x78, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x05, 0x7d},
    {0x01, 0x03, 0x43, 0x45, 0x7d},
    {0x02, 0x0b, 0x43, 0x05, 0x7d},
    {0x05, 0x65, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x41, 0x05, 0x6d},
    {0x04, 0x03, 0x43, 0x45, 0x7d},
    {0x02, 0x05, 0x41, 0x05, 0x6d},
    {0x0a, 0x44, 0x45, 0xf5, 0xbf},
    {0x03, 0x36, 0x43, 0xb5, 0xac},
    {0x01, 0x3c, 0x45, 0xf5, 0xbf},
    {0x02, 0x36, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x05, 0x02, 0xdf},
    {0x03, 0x09, 0x43, 0x05, 0x7d},
    {0x04, 0x3c, 0x45, 0xf5, 0xbf},
    {0x02, 0x09, 0x43, 0x05, 0x7d},
    {0x07, 0x6b, 0x02, 0xf5, 0xdf},
    {0x03, 0x88, 0x48, 0xb5, 0xff},
    {0x01, 0x05, 0x43, 0x45, 0x7d},
    {0x02, 0x88, 0x48, 0xb5, 0xff},
    {0x05, 0xc2, 0x05, 0x02, 0xdf},
    {0x03, 0x06, 0x41, 0x05, 0x6d},
    {0x04, 0x05, 0x43, 0x45, 0x7d},
    {0x02, 0x06, 0x41, 0x05, 0x6d},
    {0x6e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x43, 0xb5, 0xac},
    {0x01, 0x2a, 0x45, 0xf5, 0xbf},
    {0x02, 0x24, 0x43, 0xb5, 0xac},
    {0x06, 0x59, 0x05, 0xb5, 0xbf},
    {0x03, 0x82, 0x44, 0x05, 0xbf},
    {0x04, 0x2a, 0x45, 0xf5, 0xbf},
    {0x02, 0x82, 0x44, 0x05, 0xbf},
    {0x08, 0x78, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x34, 0x43, 0xb5, 0xac},
    {0x05, 0x59, 0x05, 0xb5, 0xbf},
    {0x03, 0x0f, 0x44, 0xb5, 0x8b},
    {0x04, 0x10, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x44, 0xb5, 0x8b},
    {0x66, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x43, 0xb5, 0xac},
    {0x01, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x43, 0xb5, 0xac},
    {0x06, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x05, 0x6d},
    {0x04, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x05, 0x6d},
    {0x07, 0x51, 0x05, 0xf5, 0xbf},
    {0x03, 0x02, 0x41, 0x05, 0x6d},
    {0x01, 0x06, 0x43, 0x45, 0x7d},
    {0x02, 0x02, 0x41, 0x05, 0x6d},
    {0x05, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x05, 0x6d},
    {0x04, 0x06, 0x43, 0x45, 0x7d},
    {0x02, 0x07, 0x41, 0x05, 0x6d},
    {0xc8, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x44, 0xb5, 0x8b},
    {0x01, 0x20, 0x45, 0xf5, 0xbf},
    {0x02, 0x0d, 0x44, 0xb5, 0x8b},
    {0x06, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x20, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x9b, 0xf5, 0x00, 0x0b},
    {0x01, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x9b, 0xf5, 0x00, 0x0b},
    {0x05, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x44, 0xf5, 0x8b},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x44, 0x45, 0xf5, 0xbf},
    {0x03, 0x2c, 0x43, 0xb5, 0xac},
    {0x01, 0x3a, 0x45, 0xf5, 0xbf},
    {0x02, 0x2c, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x11, 0x44, 0xb5, 0x8b},
    {0x04, 0x3a, 0x45, 0xf5, 0xbf},
    {0x02, 0x11, 0x44, 0xb5, 0x8b},
    {0x07, 0xd4, 0xb5, 0x40, 0x0e},
    {0x03, 0x96, 0xf5, 0x00, 0x0b},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x96, 0xf5, 0x00, 0x0b},
    {0x05, 0x44, 0x04, 0xb5, 0x8b},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x44, 0xb5, 0x8b},
    {0x01, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x01, 0x44, 0xb5, 0x8b},
    {0x06, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x08, 0x43, 0x05, 0x7d},
    {0x04, 0x0a, 0x44, 0xf5, 0x8b},
    {0x02, 0x08, 0x43, 0x05, 0x7d},
    {0x08, 0xc1, 0xf5, 0x00, 0x0b},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0x45, 0x7d},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x04, 0xb5, 0x8b},
    {0x03, 0x81, 0x44, 0x05, 0xbf},
    {0x04, 0x04, 0x43, 0x45, 0x7d},
    {0x02, 0x81, 0x44, 0x05, 0xbf},
    {0x0c, 0x44, 0x45, 0xf5, 0xbf},
    {0x03, 0x0a, 0x43, 0x05, 0x7d},
    {0x01, 0x02, 0x43, 0x45, 0x7d},
    {0x02, 0x0a, 0x43, 0x05, 0x7d},
    {0x06, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0x45, 0x7d},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0x45, 0x7d},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x04, 0xb5, 0x8b},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0x45, 0x7d},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xf4, 0x45, 0x02, 0xf5, 0xff},
    {0x03, 0x1e, 0x43, 0xb5, 0xac},
    {0x01, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x1e, 0x43, 0xb5, 0xac},
    {0x06, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x08, 0x6f},
    {0x04, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x08, 0x6f},
    {0x09, 0x4a, 0x45, 0xb5, 0xbf},
    {0x03, 0x0b, 0x44, 0x08, 0x7f},
    {0x01, 0x03, 0x44, 0x48, 0x7f},
    {0x02, 0x0b, 0x44, 0x08, 0x7f},
    {0x05, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x08, 0x6f},
    {0x04, 0x03, 0x44, 0x48, 0x7f},
    {0x02, 0x05, 0x45, 0x08, 0x6f},
    {0x0a, 0x42, 0x45, 0xf5, 0xbf},
    {0x03, 0x0c, 0x42, 0x08, 0x8f},
    {0x01, 0x0b, 0x42, 0x48, 0x8f},
    {0x02, 0x0c, 0x42, 0x08, 0x8f},
    {0x06, 0x43, 0x02, 0x08, 0x8f},
    {0x03, 0x09, 0x44, 0x08, 0x7f},
    {0x04, 0x0b, 0x42, 0x48, 0x8f},
    {0x02, 0x09, 0x44, 0x08, 0x7f},
    {0x07, 0x41, 0x05, 0xf5, 0xbf},
    {0x03, 0x9a, 0x46, 0x04, 0xcf},
    {0x01, 0x05, 0x44, 0x48, 0x7f},
    {0x02, 0x9a, 0x46, 0x04, 0xcf},
    {0x05, 0x43, 0x02, 0x08, 0x8f},
    {0x03, 0x06, 0x45, 0x08, 0x6f},
    {0x04, 0x05, 0x44, 0x48, 0x7f},
    {0x02, 0x06, 0x45, 0x08, 0x6f},
    {0x4d, 0x06, 0x04, 0xb5, 0xcf},
    {0x03, 0x22, 0x43, 0xb5, 0xac},
    {0x01, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x22, 0x43, 0xb5, 0xac},
    {0x06, 0x52, 0x05, 0xb5, 0xbf},
    {0x03, 0x82, 0x42, 0x05, 0xbf},
    {0x04, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x05, 0xbf},
    {0x08, 0x4a, 0x45, 0xb5, 0xbf},
    {0x03, 0x32, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x48, 0x8f},
    {0x02, 0x32, 0x43, 0xb5, 0xac},
    {0x05, 0x52, 0x05, 0xb5, 0xbf},
    {0x03, 0x0e, 0x42, 0x08, 0x8f},
    {0x04, 0x09, 0x42, 0x48, 0x8f},
    {0x02, 0x0e, 0x42, 0x08, 0x8f},
    {0x53, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x3e, 0x43, 0xb5, 0xac},
    {0x01, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x3e, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x08, 0x8f},
    {0x03, 0x04, 0x45, 0x08, 0x6f},
    {0x04, 0x8a, 0xf5, 0x40, 0x0b},
    {0x02, 0x04, 0x45, 0x08, 0x6f},
    {0x07, 0x48, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x08, 0x6f},
    {0x01, 0x06, 0x44, 0x48, 0x7f},
    {0x02, 0x02, 0x45, 0x08, 0x6f},
    {0x05, 0x45, 0x02, 0x08, 0x8f},
    {0x03, 0x07, 0x45, 0x08, 0x6f},
    {0x04, 0x06, 0x44, 0x48, 0x7f},
    {0x02, 0x07, 0x45, 0x08, 0x6f},
    {0x58, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x30, 0x43, 0xb5, 0xac},
    {0x01, 0x26, 0x45, 0xf5, 0xbf},
    {0x02, 0x30, 0x43, 0xb5, 0xac},
    {0x06, 0x55, 0x05, 0xb5, 0xbf},
    {0x03, 0x03, 0x43, 0x06, 0x6c},
    {0x04, 0x26, 0x45, 0xf5, 0xbf},
    {0x02, 0x03, 0x43, 0x06, 0x6c},
    {0x09, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3c, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x46, 0x44, 0xcf},
    {0x02, 0x3c, 0x43, 0xb5, 0xac},
    {0x05, 0x55, 0x05, 0xb5, 0xbf},
    {0x03, 0x05, 0x43, 0x06, 0x6c},
    {0x04, 0x82, 0x46, 0x44, 0xcf},
    {0x02, 0x05, 0x43, 0x06, 0x6c},
    {0x0b, 0x42, 0x45, 0xf5, 0xbf},
    {0x03, 0x2a, 0x43, 0xb5, 0xac},
    {0x01, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x2a, 0x43, 0xb5, 0xac},
    {0x06, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x08, 0x8f},
    {0x04, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x08, 0x8f},
    {0x07, 0xc3, 0xb5, 0x40, 0x0b},
    {0x03, 0x92, 0xf5, 0x00, 0x0b},
    {0x01, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x92, 0xf5, 0x00, 0x0b},
    {0x05, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x06, 0x6c},
    {0x04, 0x0f, 0x42, 0xf5, 0x9b},
    {0x02, 0x06, 0x43, 0x06, 0x6c},
    {0x56, 0xb5, 0x40, 0x40, 0x0b},
    {0x03, 0x20, 0x43, 0xb5, 0xac},
    {0x01, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x20, 0x43, 0xb5, 0xac},
    {0x06, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x08, 0x44, 0x08, 0x7f},
    {0x04, 0x86, 0xf5, 0x40, 0x0b},
    {0x02, 0x08, 0x44, 0x08, 0x7f},
    {0x08, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3a, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x48, 0x7f},
    {0x02, 0x3a, 0x43, 0xb5, 0xac},
    {0x05, 0xc4, 0xb5, 0x00, 0x0b},
    {0x03, 0x81, 0x42, 0x05, 0xbf},
    {0x04, 0x04, 0x44, 0x48, 0x7f},
    {0x02, 0x81, 0x42, 0x05, 0xbf},
    {0x0c, 0x42, 0x45, 0xf5, 0xbf},
    {0x03, 0x0a, 0x44, 0x08, 0x7f},
    {0x01, 0x02, 0x44, 0x48, 0x7f},
    {0x02, 0x0a, 0x44, 0x08, 0x7f},
    {0x06, 0x46, 0x02, 0x08, 0x8f},
    {0x03, 0x04, 0x43, 0x06, 0x6c},
    {0x04, 0x02, 0x44, 0x48, 0x7f},
    {0x02, 0x04, 0x43, 0x06, 0x6c},
    {0x07, 0xc1, 0x08, 0xf5, 0xff},
    {0x03, 0x02, 0x43, 0x06, 0x6c},
    {0x01, 0x07, 0x44, 0x48, 0x7f},
    {0x02, 0x02, 0x43, 0x06, 0x6c},
    {0x05, 0x46, 0x02, 0x08, 0x8f},
    {0x03, 0x07, 0x43, 0x06, 0x6c},
    {0x04, 0x07, 0x44, 0x48, 0x7f},
    {0x02, 0x07, 0x43, 0x06, 0x6c},
    {0xe7, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x16, 0x42, 0xb5, 0x9b},
    {0x01, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x16, 0x42, 0xb5, 0x9b},
    {0x06, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x05, 0x6d},
    {0x04, 0x0d, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x44, 0x05, 0x6d},
    {0x09, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x05, 0x7d},
    {0x01, 0x03, 0x42, 0x45, 0x7d},
    {0x02, 0x0b, 0x42, 0x05, 0x7d},
    {0x05, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x05, 0x6d},
    {0x04, 0x03, 0x42, 0x45, 0x7d},
    {0x02, 0x05, 0x44, 0x05, 0x6d},
    {0x0a, 0x47, 0x45, 0xf5, 0xbf},
    {0x03, 0x1a, 0x42, 0xb5, 0x9b},
    {0x01, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0xb5, 0x9b},
    {0x06, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x09, 0x42, 0x05, 0x7d},
    {0x04, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x05, 0x7d},
    {0x07, 0x4a, 0x03, 0xf5, 0xac},
    {0x03, 0x8a, 0x48, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x45, 0x7d},
    {0x02, 0x8a, 0x48, 0xb5, 0xff},
    {0x05, 0x48, 0x02, 0xb5, 0x9b},
    {0x03, 0x06, 0x44, 0x05, 0x6d},
    {0x04, 0x05, 0x42, 0x45, 0x7d},
    {0x02, 0x06, 0x44, 0x05, 0x6d},
    {0x50, 0x08, 0xf5, 0x00, 0xff},
    {0x03, 0x26, 0x43, 0xb5, 0xac},
    {0x01, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x26, 0x43, 0xb5, 0xac},
    {0x06, 0xc3, 0x08, 0xb5, 0xff},
    {0x03, 0x82, 0x47, 0x05, 0xbf},
    {0x04, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x05, 0xbf},
    {0x08, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0xb5, 0x9b},
    {0x01, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x19, 0x42, 0xb5, 0x9b},
    {0x05, 0xc3, 0x08, 0xb5, 0xff},
    {0x03, 0x0f, 0x42, 0x08, 0x8f},
    {0x04, 0x11, 0x42, 0xf5, 0x9b},
    {0x02, 0x0f, 0x42, 0x08, 0x8f},
    {0x40, 0x08, 0xf5, 0x00, 0xff},
    {0x03, 0x86, 0x48, 0xb5, 0xff},
    {0x01, 0x84, 0x48, 0xf5, 0xff},
    {0x02, 0x86, 0x48, 0xb5, 0xff},
    {0x06, 0xc1, 0x05, 0x02, 0xdf},
    {0x03, 0x04, 0x44, 0x05, 0x6d},
    {0x04, 0x84, 0x48, 0xf5, 0xff},
    {0x02, 0x04, 0x44, 0x05, 0x6d},
    {0x07, 0x44, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x44, 0x05, 0x6d},
    {0x01, 0x06, 0x42, 0x45, 0x7d},
    {0x02, 0x02, 0x44, 0x05, 0x6d},
    {0x05, 0xc1, 0x05, 0x02, 0xdf},
    {0x03, 0x07, 0x44, 0x05, 0x6d},
    {0x04, 0x06, 0x42, 0x45, 0x7d},
    {0x02, 0x07, 0x44, 0x05, 0x6d},
    {0xc1, 0x43, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x08, 0x8f},
    {0x01, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x0d, 0x42, 0x08, 0x8f},
    {0x06, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x03, 0x42, 0x06, 0x6c},
    {0x04, 0x01, 0x42, 0xf5, 0x9b},
    {0x02, 0x03, 0x42, 0x06, 0x6c},
    {0x09, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0xb5, 0x9b},
    {0x01, 0x08, 0x42, 0x48, 0x8f},
    {0x02, 0x12, 0x42, 0xb5, 0x9b},
    {0x05, 0x4a, 0x02, 0xb5, 0x9b},
    {0x03, 0x05, 0x42, 0x06, 0x6c},
    {0x04, 0x08, 0x42, 0x48, 0x8f},
    {0x02, 0x05, 0x42, 0x06, 0x6c},
    {0x0b, 0x47, 0x45, 0xf5, 0xbf},
    {0x03, 0x15, 0x42, 0xb5, 0x9b},
    {0x01, 0x83, 0x45, 0x42, 0xdf},
    {0x02, 0x15, 0x42, 0xb5, 0x9b},
    {0x06, 0x44, 0x02, 0x08, 0x8f},
    {0x03, 0x11, 0x42, 0x08, 0x8f},
    {0x04, 0x83, 0x45, 0x42, 0xdf},
    {0x02, 0x11, 0x42, 0x08, 0x8f},
    {0x07, 0x42, 0x02, 0xf5, 0x9b},
    {0x03, 0x84, 0x45, 0x02, 0xdf},
    {0x01, 0x81, 0x46, 0x44, 0xcf},
    {0x02, 0x84, 0x45, 0x02, 0xdf},
    {0x05, 0x44, 0x02, 0x08, 0x8f},
    {0x03, 0x06, 0x42, 0x06, 0x6c},
    {0x04, 0x81, 0x46, 0x44, 0xcf},
    {0x02, 0x06, 0x42, 0x06, 0x6c},
    {0x4e, 0x06, 0x04, 0xb5, 0xcf},
    {0x03, 0x01, 0x42, 0x08, 0x8f},
    {0x01, 0x0a, 0x42, 0x48, 0x8f},
    {0x02, 0x01, 0x42, 0x08, 0x8f},
    {0x06, 0x42, 0x02, 0x08, 0x8f},
    {0x03, 0x08, 0x42, 0x05, 0x7d},
    {0x04, 0x0a, 0x42, 0x48, 0x8f},
    {0x02, 0x08, 0x42, 0x05, 0x7d},
    {0x08, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x46, 0x04, 0xcf},
    {0x01, 0x04, 0x42, 0x45, 0x7d},
    {0x02, 0x83, 0x46, 0x04, 0xcf},
    {0x05, 0x42, 0x02, 0x08, 0x8f},
    {0x03, 0x81, 0x47, 0x05, 0xbf},
    {0x04, 0x04, 0x42, 0x45, 0x7d},
    {0x02, 0x81, 0x47, 0x05, 0xbf},
    {0x0c, 0x47, 0x45, 0xf5, 0xbf},
    {0x03, 0x0a, 0x42, 0x05, 0x7d},
    {0x01, 0x02, 0x42, 0x45, 0x7d},
    {0x02, 0x0a, 0x42, 0x05, 0x7d},
    {0x06, 0x47, 0x02, 0x08, 0x8f},
    {0x03, 0x04, 0x42, 0x06, 0x6c},
    {0x04, 0x02, 0x42, 0x45, 0x7d},
    {0x02, 0x04, 0x42, 0x06, 0x6c},
    {0x07, 0x47, 0x02, 0xf5, 0x9b},
    {0x03, 0x02, 0x42, 0x06, 0x6c},
    {0x01, 0x07, 0x42, 0x45, 0x7d},
    {0x02, 0x02, 0x42, 0x06, 0x6c},
    {0x05, 0x47, 0x02, 0x08, 0x8f},
    {0x03, 0x07, 0x42, 0x06, 0x6c},
    {0x04, 0x07, 0x42, 0x45, 0x7d},
    {0x02, 0x07, 0x42, 0x06, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xb4, 0xf5, 0x00, 0x0c},
    {0x01, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0xb4, 0xf5, 0x00, 0x0c},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0x6e, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x4b, 0xb5, 0x7e},
    {0x01, 0x03, 0x4b, 0xf5, 0x7e},
    {0x02, 0x0b, 0x4b, 0xb5, 0x7e},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0x4b, 0xf5, 0x7e},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x70, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x48, 0xb5, 0x8e},
    {0x01, 0x0b, 0x48, 0xf5, 0x8e},
    {0x02, 0x0c, 0x48, 0xb5, 0x8e},
    {0x06, 0x43, 0x08, 0xb5, 0x8e},
    {0x03, 0x09, 0x4b, 0xb5, 0x7e},
    {0x04, 0x0b, 0x48, 0xf5, 0x8e},
    {0x02, 0x09, 0x4b, 0xb5, 0x7e},
    {0x07, 0x5d, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x4b, 0xf5, 0x7e},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x08, 0xb5, 0x8e},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0x4b, 0xf5, 0x7e},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x46, 0xb5, 0x9d},
    {0x01, 0x0c, 0x46, 0xf5, 0x9d},
    {0x02, 0x14, 0x46, 0xb5, 0x9d},
    {0x06, 0x4b, 0x06, 0xb5, 0x9d},
    {0x03, 0x82, 0x70, 0xb5, 0xff},
    {0x04, 0x0c, 0x46, 0xf5, 0x9d},
    {0x02, 0x82, 0x70, 0xb5, 0xff},
    {0x08, 0x6e, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x46, 0xb5, 0x9d},
    {0x01, 0x09, 0x48, 0xf5, 0x8e},
    {0x02, 0x18, 0x46, 0xb5, 0x9d},
    {0x05, 0x4b, 0x06, 0xb5, 0x9d},
    {0x03, 0x0e, 0x48, 0xb5, 0x8e},
    {0x04, 0x09, 0x48, 0xf5, 0x8e},
    {0x02, 0x0e, 0x48, 0xb5, 0x8e},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x46, 0xb5, 0x9d},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x46, 0xb5, 0x9d},
    {0x06, 0x45, 0x08, 0xb5, 0x8e},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0x4b, 0xf5, 0x7e},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0x08, 0xb5, 0x8e},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0x4b, 0xf5, 0x7e},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x17, 0x46, 0xb5, 0x9d},
    {0x01, 0x14, 0x41, 0xf5, 0xad},
    {0x02, 0x17, 0x46, 0xb5, 0x9d},
    {0x06, 0x4c, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0x41, 0xb5, 0xad},
    {0x03, 0x1b, 0x46, 0xb5, 0x9d},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x46, 0xb5, 0x9d},
    {0x05, 0x4c, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x70, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x41, 0xb5, 0xad},
    {0x01, 0x18, 0x41, 0xf5, 0xad},
    {0x02, 0x27, 0x41, 0xb5, 0xad},
    {0x06, 0x49, 0x06, 0xb5, 0x9d},
    {0x03, 0x10, 0x48, 0xb5, 0x8e},
    {0x04, 0x18, 0x41, 0xf5, 0xad},
    {0x02, 0x10, 0x48, 0xb5, 0x8e},
    {0x07, 0x4b, 0x01, 0xf5, 0xad},
    {0x03, 0x89, 0xf5, 0x00, 0x0a},
    {0x01, 0x0e, 0x46, 0xf5, 0x9d},
    {0x02, 0x89, 0xf5, 0x00, 0x0a},
    {0x05, 0x49, 0x06, 0xb5, 0x9d},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x46, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x13, 0x46, 0xb5, 0x9d},
    {0x01, 0x1c, 0x41, 0xf5, 0xad},
    {0x02, 0x13, 0x46, 0xb5, 0x9d},
    {0x06, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x08, 0x4b, 0xb5, 0x7e},
    {0x04, 0x1c, 0x41, 0xf5, 0xad},
    {0x02, 0x08, 0x4b, 0xb5, 0x7e},
    {0x08, 0x43, 0x41, 0xb5, 0xad},
    {0x03, 0x37, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x4b, 0xf5, 0x7e},
    {0x02, 0x37, 0x41, 0xb5, 0xad},
    {0x05, 0xda, 0xb5, 0x00, 0x0a},
    {0x03, 0x81, 0x70, 0xb5, 0xff},
    {0x04, 0x04, 0x4b, 0xf5, 0x7e},
    {0x02, 0x81, 0x70, 0xb5, 0xff},
    {0x0c, 0x70, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x4b, 0xb5, 0x7e},
    {0x01, 0x02, 0x4b, 0xf5, 0x7e},
    {0x02, 0x0a, 0x4b, 0xb5, 0x7e},
    {0x06, 0x46, 0x08, 0xb5, 0x8e},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x4b, 0xf5, 0x7e},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x4b, 0xf5, 0x7e},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x08, 0xb5, 0x8e},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x4b, 0xf5, 0x7e},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xdc, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x2d, 0x41, 0xb5, 0xad},
    {0x01, 0x17, 0x41, 0xf5, 0xad},
    {0x02, 0x2d, 0x41, 0xb5, 0xad},
    {0x06, 0x54, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0x4b, 0x43, 0xb5, 0xbd},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x54, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x35, 0x41, 0xb5, 0xad},
    {0x01, 0x1b, 0x41, 0xf5, 0xad},
    {0x02, 0x35, 0x41, 0xb5, 0xad},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x41, 0xf5, 0xad},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x4c, 0x03, 0xf5, 0xbd},
    {0x03, 0x87, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x57, 0x04, 0xf5, 0x40, 0xff},
    {0x03, 0x23, 0x41, 0xb5, 0xad},
    {0x01, 0x27, 0x43, 0xf5, 0xbd},
    {0x02, 0x23, 0x41, 0xb5, 0xad},
    {0x06, 0x58, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x43, 0x03, 0xbd},
    {0x04, 0x27, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x43, 0x03, 0xbd},
    {0x08, 0x4b, 0x43, 0xb5, 0xbd},
    {0x03, 0x33, 0x41, 0xb5, 0xad},
    {0x01, 0x10, 0x46, 0xf5, 0x9d},
    {0x02, 0x33, 0x41, 0xb5, 0xad},
    {0x05, 0x58, 0x03, 0xb5, 0xbd},
    {0x03, 0x0f, 0x48, 0xb5, 0x8e},
    {0x04, 0x10, 0x46, 0xf5, 0x9d},
    {0x02, 0x0f, 0x48, 0xb5, 0x8e},
    {0x54, 0x04, 0xf5, 0x40, 0xff},
    {0x03, 0x3f, 0x41, 0xb5, 0xad},
    {0x01, 0x89, 0x44, 0xf5, 0xff},
    {0x02, 0x3f, 0x41, 0xb5, 0xad},
    {0x06, 0x4e, 0x01, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x89, 0x44, 0xf5, 0xff},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x01, 0xf5, 0xad},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x01, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0x59, 0x04, 0xf5, 0x40, 0xff},
    {0x03, 0x0d, 0x48, 0xb5, 0x8e},
    {0x01, 0x13, 0x41, 0xf5, 0xad},
    {0x02, 0x0d, 0x48, 0xb5, 0x8e},
    {0x06, 0x5c, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0x41, 0xb5, 0xad},
    {0x03, 0x97, 0x44, 0xb5, 0xff},
    {0x01, 0x08, 0x48, 0xf5, 0x8e},
    {0x02, 0x97, 0x44, 0xb5, 0xff},
    {0x05, 0x5c, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x48, 0xf5, 0x8e},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x2b, 0x41, 0xb5, 0xad},
    {0x01, 0x37, 0x43, 0xf5, 0xbd},
    {0x02, 0x2b, 0x41, 0xb5, 0xad},
    {0x06, 0x44, 0x08, 0xb5, 0x8e},
    {0x03, 0x11, 0x48, 0xb5, 0x8e},
    {0x04, 0x37, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x48, 0xb5, 0x8e},
    {0x07, 0xda, 0x04, 0xf5, 0xff},
    {0x03, 0x93, 0x44, 0xb5, 0xff},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x93, 0x44, 0xb5, 0xff},
    {0x05, 0x44, 0x08, 0xb5, 0x8e},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x48, 0xb5, 0x8e},
    {0x01, 0x0a, 0x48, 0xf5, 0x8e},
    {0x02, 0x01, 0x48, 0xb5, 0x8e},
    {0x06, 0x42, 0x08, 0xb5, 0x8e},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x48, 0xf5, 0x8e},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x08, 0xb5, 0x8e},
    {0x03, 0x81, 0x43, 0x03, 0xbd},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x43, 0x03, 0xbd},
    {0x0c, 0x43, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x08, 0xb5, 0x8e},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x08, 0xb5, 0x8e},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x41, 0xb5, 0xad},
    {0x01, 0x2d, 0x43, 0xf5, 0xbd},
    {0x02, 0x1d, 0x41, 0xb5, 0xad},
    {0x06, 0x57, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x46, 0xb5, 0x6a},
    {0x04, 0x2d, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0xb5, 0x6a},
    {0x09, 0x76, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0xb5, 0x7a},
    {0x01, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x0b, 0x41, 0xb5, 0x7a},
    {0x05, 0x57, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x46, 0xb5, 0x6a},
    {0x04, 0x03, 0x41, 0xf5, 0x7a},
    {0x02, 0x05, 0x46, 0xb5, 0x6a},
    {0x0a, 0x7c, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x43, 0xb5, 0x8a},
    {0x01, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x0c, 0x43, 0xb5, 0x8a},
    {0x06, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x09, 0x41, 0xb5, 0x7a},
    {0x04, 0x0b, 0x43, 0xf5, 0x8a},
    {0x02, 0x09, 0x41, 0xb5, 0x7a},
    {0x07, 0x61, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0xc2, 0xb5, 0x0d},
    {0x01, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x9a, 0xc2, 0xb5, 0x0d},
    {0x05, 0x43, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x46, 0xb5, 0x6a},
    {0x04, 0x05, 0x41, 0xf5, 0x7a},
    {0x02, 0x06, 0x46, 0xb5, 0x6a},
    {0x4d, 0x82, 0xb5, 0x00, 0x0d},
    {0x03, 0x21, 0x41, 0xb5, 0xad},
    {0x01, 0x35, 0x43, 0xf5, 0xbd},
    {0x02, 0x21, 0x41, 0xb5, 0xad},
    {0x06, 0x5b, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x7c, 0xb5, 0xff},
    {0x04, 0x35, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x7c, 0xb5, 0xff},
    {0x08, 0x76, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x41, 0xb5, 0xad},
    {0x01, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x31, 0x41, 0xb5, 0xad},
    {0x05, 0x5b, 0x03, 0xb5, 0xbd},
    {0x03, 0x0e, 0x43, 0xb5, 0x8a},
    {0x04, 0x09, 0x43, 0xf5, 0x8a},
    {0x02, 0x0e, 0x43, 0xb5, 0x8a},
    {0xc3, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x3d, 0x41, 0xb5, 0xad},
    {0x01, 0x87, 0x44, 0xf5, 0xff},
    {0x02, 0x3d, 0x41, 0xb5, 0xad},
    {0x06, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x46, 0xb5, 0x6a},
    {0x04, 0x87, 0x44, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0xb5, 0x6a},
    {0x07, 0xc2, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x46, 0xb5, 0x6a},
    {0x01, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x46, 0xb5, 0x6a},
    {0x05, 0x45, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x46, 0xb5, 0x6a},
    {0x04, 0x06, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x46, 0xb5, 0x6a},
    {0xd4, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x2f, 0x41, 0xb5, 0xad},
    {0x01, 0x23, 0x43, 0xf5, 0xbd},
    {0x02, 0x2f, 0x41, 0xb5, 0xad},
    {0x06, 0x68, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x82, 0x6d},
    {0x04, 0x23, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x82, 0x6d},
    {0x09, 0x49, 0x43, 0xb5, 0xbd},
    {0x03, 0x3b, 0x41, 0xb5, 0xad},
    {0x01, 0x82, 0xc2, 0xf5, 0x0d},
    {0x02, 0x3b, 0x41, 0xb5, 0xad},
    {0x05, 0x68, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x82, 0x6d},
    {0x04, 0x82, 0xc2, 0xf5, 0x0d},
    {0x02, 0x05, 0x43, 0x82, 0x6d},
    {0x0b, 0x7c, 0xf5, 0x40, 0xff},
    {0x03, 0x29, 0x41, 0xb5, 0xad},
    {0x01, 0x33, 0x43, 0xf5, 0xbd},
    {0x02, 0x29, 0x41, 0xb5, 0xad},
    {0x06, 0x50, 0x01, 0xb5, 0xad},
    {0x03, 0x10, 0x43, 0xb5, 0x8a},
    {0x04, 0x33, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0xb5, 0x8a},
    {0x07, 0x71, 0x02, 0xf5, 0xdf},
    {0x03, 0x8f, 0x44, 0xb5, 0xff},
    {0x01, 0x0f, 0x46, 0xf5, 0x9d},
    {0x02, 0x8f, 0x44, 0xb5, 0xff},
    {0x05, 0x50, 0x01, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x82, 0x6d},
    {0x04, 0x0f, 0x46, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x82, 0x6d},
    {0x5f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x41, 0xb5, 0xad},
    {0x01, 0x3f, 0x43, 0xf5, 0xbd},
    {0x02, 0x1f, 0x41, 0xb5, 0xad},
    {0x06, 0xcd, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0xb5, 0x7a},
    {0x04, 0x3f, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0xb5, 0x7a},
    {0x08, 0x49, 0x43, 0xb5, 0xbd},
    {0x03, 0x39, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x39, 0x41, 0xb5, 0xad},
    {0x05, 0xcd, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x7c, 0xb5, 0xff},
    {0x04, 0x04, 0x41, 0xf5, 0x7a},
    {0x02, 0x81, 0x7c, 0xb5, 0xff},
    {0x0c, 0x7c, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x41, 0xb5, 0x7a},
    {0x01, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x0a, 0x41, 0xb5, 0x7a},
    {0x06, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x82, 0x6d},
    {0x04, 0x02, 0x41, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x82, 0x6d},
    {0x07, 0x4e, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x82, 0x6d},
    {0x01, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x82, 0x6d},
    {0x05, 0x46, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x82, 0x6d},
    {0x04, 0x07, 0x41, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x82, 0x6d},
    {0xdd, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x46, 0xb5, 0x9d},
    {0x01, 0x0d, 0x46, 0xf5, 0x9d},
    {0x02, 0x16, 0x46, 0xb5, 0x9d},
    {0x06, 0x53, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x46, 0xf5, 0x9d},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xc8, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x53, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x46, 0xb5, 0x9d},
    {0x01, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x46, 0xb5, 0x9d},
    {0x06, 0x48, 0x06, 0xb5, 0x9d},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0x7d, 0x02, 0xf5, 0xdf},
    {0x03, 0x8b, 0x44, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8b, 0x44, 0xb5, 0xff},
    {0x05, 0x48, 0x06, 0xb5, 0x9d},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0x7a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x41, 0xb5, 0xad},
    {0x01, 0x2b, 0x43, 0xf5, 0xbd},
    {0x02, 0x25, 0x41, 0xb5, 0xad},
    {0x06, 0x78, 0x04, 0xb5, 0xcf},
    {0x03, 0x82, 0x45, 0x03, 0xbd},
    {0x04, 0x2b, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x45, 0x03, 0xbd},
    {0x08, 0xc8, 0xf5, 0x00, 0x0e},
    {0x03, 0x19, 0x46, 0xb5, 0x9d},
    {0x01, 0x11, 0x46, 0xf5, 0x9d},
    {0x02, 0x19, 0x46, 0xb5, 0x9d},
    {0x05, 0x78, 0x04, 0xb5, 0xcf},
    {0x03, 0x0f, 0x43, 0xb5, 0x8a},
    {0x04, 0x11, 0x46, 0xf5, 0x9d},
    {0x02, 0x0f, 0x43, 0xb5, 0x8a},
    {0x55, 0x04, 0xf5, 0x40, 0xff},
    {0x03, 0x85, 0xf5, 0x00, 0x0a},
    {0x01, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0xce, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x43, 0xb5, 0x8a},
    {0x01, 0x01, 0x46, 0xf5, 0x9d},
    {0x02, 0x0d, 0x43, 0xb5, 0x8a},
    {0x06, 0x4a, 0x06, 0xb5, 0x9d},
    {0x03, 0x03, 0x42, 0x82, 0x6d},
    {0x04, 0x01, 0x46, 0xf5, 0x9d},
    {0x02, 0x03, 0x42, 0x82, 0x6d},
    {0x09, 0x46, 0x41, 0xb5, 0xad},
    {0x03, 0x12, 0x46, 0xb5, 0x9d},
    {0x01, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x12, 0x46, 0xb5, 0x9d},
    {0x05, 0x4a, 0x06, 0xb5, 0x9d},
    {0x03, 0x05, 0x42, 0x82, 0x6d},
    {0x04, 0x08, 0x43, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x82, 0x6d},
    {0x0b, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x46, 0xb5, 0x9d},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x46, 0xb5, 0x9d},
    {0x06, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x11, 0x43, 0xb5, 0x8a},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0xb5, 0x8a},
    {0x07, 0x42, 0x06, 0xf5, 0x9d},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0xc2, 0xf5, 0x0d},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x82, 0x6d},
    {0x04, 0x81, 0xc2, 0xf5, 0x0d},
    {0x02, 0x06, 0x42, 0x82, 0x6d},
    {0x4e, 0x82, 0xb5, 0x00, 0x0d},
    {0x03, 0x01, 0x43, 0xb5, 0x8a},
    {0x01, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x01, 0x43, 0xb5, 0x8a},
    {0x06, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0xc2, 0xb5, 0x0d},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0xc2, 0xb5, 0x0d},
    {0x05, 0x42, 0x03, 0xb5, 0x8a},
    {0x03, 0x81, 0x45, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0x45, 0x03, 0xbd},
    {0x0c, 0x45, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x82, 0x6d},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x82, 0x6d},
    {0x07, 0x47, 0x06, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x82, 0x6d},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x82, 0x6d},
    {0x05, 0x47, 0x03, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x82, 0x6d},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x82, 0x6d},
    {0xb4, 0xb5, 0x00, 0x00, 0x0a},
    {0x03, 0xa2, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x43, 0xf5, 0xbd},
    {0x02, 0xa2, 0xf5, 0x00, 0x0e},
    {0x06, 0x6e, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x48, 0xb5, 0x6c},
    {0x04, 0x1d, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x48, 0xb5, 0x6c},
    {0x09, 0x64, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0x04, 0x7f},
    {0x01, 0x03, 0x46, 0x44, 0x7f},
    {0x02, 0x0b, 0x46, 0x04, 0x7f},
    {0x05, 0x6e, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x48, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0x44, 0x7f},
    {0x02, 0x05, 0x48, 0xb5, 0x6c},
    {0x0a, 0x6a, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x41, 0x04, 0x8f},
    {0x01, 0x0b, 0x41, 0x44, 0x8f},
    {0x02, 0x0c, 0x41, 0x04, 0x8f},
    {0x06, 0x43, 0x01, 0x04, 0x8f},
    {0x03, 0x09, 0x46, 0x04, 0x7f},
    {0x04, 0x0b, 0x41, 0x44, 0x8f},
    {0x02, 0x09, 0x46, 0x04, 0x7f},
    {0x07, 0x6f, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0x59, 0xb5, 0xff},
    {0x01, 0x05, 0x46, 0x44, 0x7f},
    {0x02, 0x9a, 0x59, 0xb5, 0xff},
    {0x05, 0x43, 0x01, 0x04, 0x8f},
    {0x03, 0x06, 0x48, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0x44, 0x7f},
    {0x02, 0x06, 0x48, 0xb5, 0x6c},
    {0x4d, 0x19, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x43, 0x04, 0x9f},
    {0x01, 0x0c, 0x43, 0x44, 0x9f},
    {0x02, 0x14, 0x43, 0x04, 0x9f},
    {0x06, 0x4b, 0x03, 0x04, 0x9f},
    {0x03, 0x82, 0x6a, 0xb5, 0xff},
    {0x04, 0x0c, 0x43, 0x44, 0x9f},
    {0x02, 0x82, 0x6a, 0xb5, 0xff},
    {0x08, 0x64, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0x04, 0x9f},
    {0x01, 0x09, 0x41, 0x44, 0x8f},
    {0x02, 0x18, 0x43, 0x04, 0x9f},
    {0x05, 0x4b, 0x03, 0x04, 0x9f},
    {0x03, 0x0e, 0x41, 0x04, 0x8f},
    {0x04, 0x09, 0x41, 0x44, 0x8f},
    {0x02, 0x0e, 0x41, 0x04, 0x8f},
    {0x4f, 0x11, 0xb5, 0x40, 0xff},
    {0x03, 0x1c, 0x43, 0x04, 0x9f},
    {0x01, 0x9a, 0x51, 0xf5, 0xff},
    {0x02, 0x1c, 0x43, 0x04, 0x9f},
    {0x06, 0x45, 0x01, 0x04, 0x8f},
    {0x03, 0x04, 0x48, 0xb5, 0x6c},
    {0x04, 0x9a, 0x51, 0xf5, 0xff},
    {0x02, 0x04, 0x48, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0x44, 0x9f},
    {0x03, 0x02, 0x48, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0x44, 0x7f},
    {0x02, 0x02, 0x48, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0x04, 0x8f},
    {0x03, 0x07, 0x48, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0x44, 0x7f},
    {0x02, 0x07, 0x48, 0xb5, 0x6c},
    {0xca, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x17, 0x43, 0x04, 0x9f},
    {0x01, 0x21, 0x43, 0xf5, 0xbd},
    {0x02, 0x17, 0x43, 0x04, 0x9f},
    {0x06, 0x76, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x19, 0x6f},
    {0x04, 0x21, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x19, 0x6f},
    {0x09, 0xc2, 0x44, 0xb5, 0xff},
    {0x03, 0x1b, 0x43, 0x04, 0x9f},
    {0x01, 0x82, 0x59, 0xf5, 0xff},
    {0x02, 0x1b, 0x43, 0x04, 0x9f},
    {0x05, 0x76, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x19, 0x6f},
    {0x04, 0x82, 0x59, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x19, 0x6f},
    {0x0b, 0x6a, 0xf5, 0x40, 0xff},
    {0x03, 0x28, 0x41, 0xb5, 0xad},
    {0x01, 0x31, 0x43, 0xf5, 0xbd},
    {0x02, 0x28, 0x41, 0xb5, 0xad},
    {0x06, 0x49, 0x03, 0x04, 0x9f},
    {0x03, 0x10, 0x41, 0x04, 0x8f},
    {0x04, 0x31, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x41, 0x04, 0x8f},
    {0x07, 0x7b, 0x02, 0xf5, 0xdf},
    {0x03, 0x8d, 0x44, 0xb5, 0xff},
    {0x01, 0x0e, 0x43, 0x44, 0x9f},
    {0x02, 0x8d, 0x44, 0xb5, 0xff},
    {0x05, 0x49, 0x03, 0x04, 0x9f},
    {0x03, 0x06, 0x43, 0x19, 0x6f},
    {0x04, 0x0e, 0x43, 0x44, 0x9f},
    {0x02, 0x06, 0x43, 0x19, 0x6f},
    {0x71, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0x04, 0x9f},
    {0x01, 0x3d, 0x43, 0xf5, 0xbd},
    {0x02, 0x13, 0x43, 0x04, 0x9f},
    {0x06, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0x04, 0x7f},
    {0x04, 0x3d, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x46, 0x04, 0x7f},
    {0x08, 0xc2, 0x44, 0xb5, 0xff},
    {0x03, 0x38, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x46, 0x44, 0x7f},
    {0x02, 0x38, 0x41, 0xb5, 0xad},
    {0x05, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x6a, 0xb5, 0xff},
    {0x04, 0x04, 0x46, 0x44, 0x7f},
    {0x02, 0x81, 0x6a, 0xb5, 0xff},
    {0x0c, 0x6a, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x46, 0x04, 0x7f},
    {0x01, 0x02, 0x46, 0x44, 0x7f},
    {0x02, 0x0a, 0x46, 0x04, 0x7f},
    {0x06, 0x46, 0x01, 0x04, 0x8f},
    {0x03, 0x04, 0x43, 0x19, 0x6f},
    {0x04, 0x02, 0x46, 0x44, 0x7f},
    {0x02, 0x04, 0x43, 0x19, 0x6f},
    {0x07, 0x45, 0x03, 0x44, 0x9f},
    {0x03, 0x02, 0x43, 0x19, 0x6f},
    {0x01, 0x07, 0x46, 0x44, 0x7f},
    {0x02, 0x02, 0x43, 0x19, 0x6f},
    {0x05, 0x46, 0x01, 0x04, 0x8f},
    {0x03, 0x07, 0x43, 0x19, 0x6f},
    {0x04, 0x07, 0x46, 0x44, 0x7f},
    {0x02, 0x07, 0x43, 0x19, 0x6f},
    {0xe2, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x2e, 0x41, 0xb5, 0xad},
    {0x01, 0x2f, 0x43, 0xf5, 0xbd},
    {0x02, 0x2e, 0x41, 0xb5, 0xad},
    {0x06, 0x64, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x41, 0x11, 0x6f},
    {0x04, 0x2f, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x11, 0x6f},
    {0x09, 0x74, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x11, 0x7f},
    {0x01, 0x03, 0x43, 0x51, 0x7f},
    {0x02, 0x0b, 0x43, 0x11, 0x7f},
    {0x05, 0x64, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x41, 0x11, 0x6f},
    {0x04, 0x03, 0x43, 0x51, 0x7f},
    {0x02, 0x05, 0x41, 0x11, 0x6f},
    {0x0a, 0x50, 0x42, 0xf5, 0xdf},
    {0x03, 0x36, 0x41, 0xb5, 0xad},
    {0x01, 0x3b, 0x43, 0xf5, 0xbd},
    {0x02, 0x36, 0x41, 0xb5, 0xad},
    {0x06, 0xc2, 0x11, 0xb5, 0xff},
    {0x03, 0x09, 0x43, 0x11, 0x7f},
    {0x04, 0x3b, 0x43, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x11, 0x7f},
    {0x07, 0x69, 0x02, 0xf5, 0xdf},
    {0x03, 0x88, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x43, 0x51, 0x7f},
    {0x02, 0x88, 0xf5, 0x00, 0x0a},
    {0x05, 0xc2, 0x11, 0xb5, 0xff},
    {0x03, 0x06, 0x41, 0x11, 0x6f},
    {0x04, 0x05, 0x43, 0x51, 0x7f},
    {0x02, 0x06, 0x41, 0x11, 0x6f},
    {0x6d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x41, 0xb5, 0xad},
    {0x01, 0x29, 0x43, 0xf5, 0xbd},
    {0x02, 0x24, 0x41, 0xb5, 0xad},
    {0x06, 0x74, 0x04, 0xb5, 0xcf},
    {0x03, 0x82, 0x50, 0x02, 0xdf},
    {0x04, 0x29, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x50, 0x02, 0xdf},
    {0x08, 0x74, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x41, 0xb5, 0xad},
    {0x01, 0x10, 0x43, 0x44, 0x9f},
    {0x02, 0x34, 0x41, 0xb5, 0xad},
    {0x05, 0x74, 0x04, 0xb5, 0xcf},
    {0x03, 0x0f, 0x41, 0x04, 0x8f},
    {0x04, 0x10, 0x43, 0x44, 0x9f},
    {0x02, 0x0f, 0x41, 0x04, 0x8f},
    {0x65, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x41, 0xb5, 0xad},
    {0x01, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x41, 0xb5, 0xad},
    {0x06, 0x4f, 0x01, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x11, 0x6f},
    {0x04, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x11, 0x6f},
    {0x07, 0x50, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x11, 0x6f},
    {0x01, 0x06, 0x43, 0x51, 0x7f},
    {0x02, 0x02, 0x41, 0x11, 0x6f},
    {0x05, 0x4f, 0x01, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x11, 0x6f},
    {0x04, 0x06, 0x43, 0x51, 0x7f},
    {0x02, 0x07, 0x41, 0x11, 0x6f},
    {0xc7, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x41, 0x04, 0x8f},
    {0x01, 0x1f, 0x43, 0xf5, 0xbd},
    {0x02, 0x0d, 0x41, 0x04, 0x8f},
    {0x06, 0x40, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x42, 0x19, 0x6f},
    {0x04, 0x1f, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x19, 0x6f},
    {0x09, 0x4f, 0x44, 0xb5, 0xcf},
    {0x03, 0x99, 0x44, 0xb5, 0xff},
    {0x01, 0x08, 0x41, 0x44, 0x8f},
    {0x02, 0x99, 0x44, 0xb5, 0xff},
    {0x05, 0x40, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x42, 0x19, 0x6f},
    {0x04, 0x08, 0x41, 0x44, 0x8f},
    {0x02, 0x05, 0x42, 0x19, 0x6f},
    {0x0b, 0x50, 0x42, 0xf5, 0xdf},
    {0x03, 0x2c, 0x41, 0xb5, 0xad},
    {0x01, 0x39, 0x43, 0xf5, 0xbd},
    {0x02, 0x2c, 0x41, 0xb5, 0xad},
    {0x06, 0x44, 0x01, 0x04, 0x8f},
    {0x03, 0x11, 0x41, 0x04, 0x8f},
    {0x04, 0x39, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x41, 0x04, 0x8f},
    {0x07, 0xd0, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0x44, 0xb5, 0xff},
    {0x01, 0x81, 0x59, 0xf5, 0xff},
    {0x02, 0x95, 0x44, 0xb5, 0xff},
    {0x05, 0x44, 0x01, 0x04, 0x8f},
    {0x03, 0x06, 0x42, 0x19, 0x6f},
    {0x04, 0x81, 0x59, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x19, 0x6f},
    {0x4e, 0x19, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x41, 0x04, 0x8f},
    {0x01, 0x0a, 0x41, 0x44, 0x8f},
    {0x02, 0x01, 0x41, 0x04, 0x8f},
    {0x06, 0x42, 0x01, 0x04, 0x8f},
    {0x03, 0x08, 0x43, 0x11, 0x7f},
    {0x04, 0x0a, 0x41, 0x44, 0x8f},
    {0x02, 0x08, 0x43, 0x11, 0x7f},
    {0x08, 0x4f, 0x44, 0xb5, 0xcf},
    {0x03, 0x83, 0x59, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0x51, 0x7f},
    {0x02, 0x83, 0x59, 0xb5, 0xff},
    {0x05, 0x42, 0x01, 0x04, 0x8f},
    {0x03, 0x81, 0x50, 0x02, 0xdf},
    {0x04, 0x04, 0x43, 0x51, 0x7f},
    {0x02, 0x81, 0x50, 0x02, 0xdf},
    {0x0c, 0x50, 0x42, 0xf5, 0xdf},
    {0x03, 0x0a, 0x43, 0x11, 0x7f},
    {0x01, 0x02, 0x43, 0x51, 0x7f},
    {0x02, 0x0a, 0x43, 0x11, 0x7f},
    {0x06, 0x47, 0x01, 0x04, 0x8f},
    {0x03, 0x04, 0x42, 0x19, 0x6f},
    {0x04, 0x02, 0x43, 0x51, 0x7f},
    {0x02, 0x04, 0x42, 0x19, 0x6f},
    {0x07, 0x46, 0x03, 0x44, 0x9f},
    {0x03, 0x02, 0x42, 0x19, 0x6f},
    {0x01, 0x07, 0x43, 0x51, 0x7f},
    {0x02, 0x02, 0x42, 0x19, 0x6f},
    {0x05, 0x47, 0x01, 0x04, 0x8f},
    {0x03, 0x07, 0x42, 0x19, 0x6f},
    {0x04, 0x07, 0x43, 0x51, 0x7f},
    {0x02, 0x07, 0x42, 0x19, 0x6f},
    {0xf4, 0x51, 0xf5, 0x40, 0x0f},
    {0x03, 0x1e, 0x41, 0xb5, 0xad},
    {0x01, 0x16, 0x41, 0xf5, 0xad},
    {0x02, 0x1e, 0x41, 0xb5, 0xad},
    {0x06, 0x4d, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x45, 0xb5, 0x6a},
    {0x04, 0x16, 0x41, 0xf5, 0xad},
    {0x02, 0x03, 0x45, 0xb5, 0x6a},
    {0x09, 0x40, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x44, 0xb5, 0x7a},
    {0x01, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x0b, 0x44, 0xb5, 0x7a},
    {0x05, 0x4d, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x45, 0xb5, 0x6a},
    {0x04, 0x03, 0x44, 0xf5, 0x7a},
    {0x02, 0x05, 0x45, 0xb5, 0x6a},
    {0x0a, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0c, 0x42, 0xb5, 0x8a},
    {0x01, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x0c, 0x42, 0xb5, 0x8a},
    {0x06, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x09, 0x44, 0xb5, 0x7a},
    {0x04, 0x0b, 0x42, 0xf5, 0x8a},
    {0x02, 0x09, 0x44, 0xb5, 0x7a},
    {0x07, 0x5f, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0x4f, 0xb5, 0xee},
    {0x01, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x9a, 0x4f, 0xb5, 0xee},
    {0x05, 0x43, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x45, 0xb5, 0x6a},
    {0x04, 0x05, 0x44, 0xf5, 0x7a},
    {0x02, 0x06, 0x45, 0xb5, 0x6a},
    {0x4d, 0x0f, 0xb5, 0x00, 0xee},
    {0x03, 0x22, 0x41, 0xb5, 0xad},
    {0x01, 0x1a, 0x41, 0xf5, 0xad},
    {0x02, 0x22, 0x41, 0xb5, 0xad},
    {0x06, 0xd9, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xf5, 0x00, 0x07},
    {0x04, 0x1a, 0x41, 0xf5, 0xad},
    {0x02, 0x82, 0xf5, 0x00, 0x07},
    {0x08, 0x40, 0xf5, 0x00, 0xee},
    {0x03, 0x32, 0x41, 0xb5, 0xad},
    {0x01, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x32, 0x41, 0xb5, 0xad},
    {0x05, 0xd9, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0xb5, 0x8a},
    {0x04, 0x09, 0x42, 0xf5, 0x8a},
    {0x02, 0x0e, 0x42, 0xb5, 0x8a},
    {0x5d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x41, 0xb5, 0xad},
    {0x01, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x41, 0xb5, 0xad},
    {0x06, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x45, 0xb5, 0x6a},
    {0x04, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0xb5, 0x6a},
    {0x07, 0x48, 0x01, 0xf5, 0xad},
    {0x03, 0x02, 0x45, 0xb5, 0x6a},
    {0x01, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x45, 0xb5, 0x6a},
    {0x05, 0x45, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x45, 0xb5, 0x6a},
    {0x04, 0x06, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x45, 0xb5, 0x6a},
    {0xd8, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x30, 0x41, 0xb5, 0xad},
    {0x01, 0x25, 0x43, 0xf5, 0xbd},
    {0x02, 0x30, 0x41, 0xb5, 0xad},
    {0x06, 0x6c, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x0f, 0x6e},
    {0x04, 0x25, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x0f, 0x6e},
    {0x09, 0x44, 0x41, 0xb5, 0xad},
    {0x03, 0x3c, 0x41, 0xb5, 0xad},
    {0x01, 0x82, 0x4f, 0xf5, 0xee},
    {0x02, 0x3c, 0x41, 0xb5, 0xad},
    {0x05, 0x6c, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x0f, 0x6e},
    {0x04, 0x82, 0x4f, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x0f, 0x6e},
    {0x0b, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x2a, 0x41, 0xb5, 0xad},
    {0x01, 0x19, 0x41, 0xf5, 0xad},
    {0x02, 0x2a, 0x41, 0xb5, 0xad},
    {0x06, 0x51, 0x01, 0xb5, 0xad},
    {0x03, 0x10, 0x42, 0xb5, 0x8a},
    {0x04, 0x19, 0x41, 0xf5, 0xad},
    {0x02, 0x10, 0x42, 0xb5, 0x8a},
    {0x07, 0x79, 0x02, 0xf5, 0xdf},
    {0x03, 0x91, 0x44, 0xb5, 0xff},
    {0x01, 0x0f, 0x43, 0x44, 0x9f},
    {0x02, 0x91, 0x44, 0xb5, 0xff},
    {0x05, 0x51, 0x01, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x0f, 0x6e},
    {0x04, 0x0f, 0x43, 0x44, 0x9f},
    {0x02, 0x06, 0x43, 0x0f, 0x6e},
    {0x69, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x41, 0xb5, 0xad},
    {0x01, 0x85, 0x44, 0xf5, 0xff},
    {0x02, 0x20, 0x41, 0xb5, 0xad},
    {0x06, 0xd5, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0xb5, 0x7a},
    {0x04, 0x85, 0x44, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0xb5, 0x7a},
    {0x08, 0x44, 0x41, 0xb5, 0xad},
    {0x03, 0x3a, 0x41, 0xb5, 0xad},
    {0x01, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x3a, 0x41, 0xb5, 0xad},
    {0x05, 0xd5, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xf5, 0x00, 0x07},
    {0x04, 0x04, 0x44, 0xf5, 0x7a},
    {0x02, 0x81, 0xf5, 0x00, 0x07},
    {0x0c, 0xf5, 0x40, 0x40, 0x07},
    {0x03, 0x0a, 0x44, 0xb5, 0x7a},
    {0x01, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x0a, 0x44, 0xb5, 0x7a},
    {0x06, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x43, 0x0f, 0x6e},
    {0x04, 0x02, 0x44, 0xf5, 0x7a},
    {0x02, 0x04, 0x43, 0x0f, 0x6e},
    {0x07, 0xc1, 0xb5, 0x40, 0x0a},
    {0x03, 0x02, 0x43, 0x0f, 0x6e},
    {0x01, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x02, 0x43, 0x0f, 0x6e},
    {0x05, 0x46, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x43, 0x0f, 0x6e},
    {0x04, 0x07, 0x44, 0xf5, 0x7a},
    {0x02, 0x07, 0x43, 0x0f, 0x6e},
    {0xe6, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x16, 0x43, 0x04, 0x9f},
    {0x01, 0x0d, 0x43, 0x44, 0x9f},
    {0x02, 0x16, 0x43, 0x04, 0x9f},
    {0x06, 0x41, 0x01, 0xb5, 0xad},
    {0x03, 0x03, 0x44, 0x11, 0x6f},
    {0x04, 0x0d, 0x43, 0x44, 0x9f},
    {0x02, 0x03, 0x44, 0x11, 0x6f},
    {0x09, 0x42, 0x41, 0xb5, 0xad},
    {0x03, 0x0b, 0x42, 0x11, 0x7f},
    {0x01, 0x03, 0x42, 0x51, 0x7f},
    {0x02, 0x0b, 0x42, 0x11, 0x7f},
    {0x05, 0x41, 0x01, 0xb5, 0xad},
    {0x03, 0x05, 0x44, 0x11, 0x6f},
    {0x04, 0x03, 0x42, 0x51, 0x7f},
    {0x02, 0x05, 0x44, 0x11, 0x6f},
    {0x0a, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x43, 0x04, 0x9f},
    {0x01, 0x12, 0x41, 0xf5, 0xad},
    {0x02, 0x1a, 0x43, 0x04, 0x9f},
    {0x06, 0x48, 0x03, 0x04, 0x9f},
    {0x03, 0x09, 0x42, 0x11, 0x7f},
    {0x04, 0x12, 0x41, 0xf5, 0xad},
    {0x02, 0x09, 0x42, 0x11, 0x7f},
    {0x07, 0x4a, 0x01, 0xf5, 0xad},
    {0x03, 0x8a, 0xf5, 0x00, 0x0a},
    {0x01, 0x05, 0x42, 0x51, 0x7f},
    {0x02, 0x8a, 0xf5, 0x00, 0x0a},
    {0x05, 0x48, 0x03, 0x04, 0x9f},
    {0x03, 0x06, 0x44, 0x11, 0x6f},
    {0x04, 0x05, 0x42, 0x51, 0x7f},
    {0x02, 0x06, 0x44, 0x11, 0x6f},
    {0x50, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x26, 0x41, 0xb5, 0xad},
    {0x01, 0x15, 0x41, 0xf5, 0xad},
    {0x02, 0x26, 0x41, 0xb5, 0xad},
    {0x06, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x82, 0x46, 0x03, 0xbd},
    {0x04, 0x15, 0x41, 0xf5, 0xad},
    {0x02, 0x82, 0x46, 0x03, 0xbd},
    {0x08, 0x42, 0x41, 0xb5, 0xad},
    {0x03, 0x19, 0x43, 0x04, 0x9f},
    {0x01, 0x11, 0x43, 0x44, 0x9f},
    {0x02, 0x19, 0x43, 0x04, 0x9f},
    {0x05, 0xc3, 0xb5, 0x00, 0x0a},
    {0x03, 0x0f, 0x42, 0xb5, 0x8a},
    {0x04, 0x11, 0x43, 0x44, 0x9f},
    {0x02, 0x0f, 0x42, 0xb5, 0x8a},
    {0x40, 0xb5, 0x40, 0x00, 0x0a},
    {0x03, 0x86, 0xf5, 0x00, 0x0a},
    {0x01, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x86, 0xf5, 0x00, 0x0a},
    {0x06, 0xc1, 0x11, 0xb5, 0xff},
    {0x03, 0x04, 0x44, 0x11, 0x6f},
    {0x04, 0x84, 0xf5, 0x40, 0x0a},
    {0x02, 0x04, 0x44, 0x11, 0x6f},
    {0x07, 0x44, 0x03, 0x44, 0x9f},
    {0x03, 0x02, 0x44, 0x11, 0x6f},
    {0x01, 0x06, 0x42, 0x51, 0x7f},
    {0x02, 0x02, 0x44, 0x11, 0x6f},
    {0x05, 0xc1, 0x11, 0xb5, 0xff},
    {0x03, 0x07, 0x44, 0x11, 0x6f},
    {0x04, 0x06, 0x42, 0x51, 0x7f},
    {0x02, 0x07, 0x44, 0x11, 0x6f},
    {0xc1, 0x41, 0xb5, 0x40, 0x0d},
    {0x03, 0x0d, 0x42, 0xb5, 0x8a},
    {0x01, 0x01, 0x43, 0x44, 0x9f},
    {0x02, 0x0d, 0x42, 0xb5, 0x8a},
    {0x06, 0x4a, 0x03, 0x04, 0x9f},
    {0x03, 0x03, 0x42, 0x0f, 0x6e},
    {0x04, 0x01, 0x43, 0x44, 0x9f},
    {0x02, 0x03, 0x42, 0x0f, 0x6e},
    {0x09, 0x47, 0x41, 0xb5, 0xad},
    {0x03, 0x12, 0x43, 0x04, 0x9f},
    {0x01, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x12, 0x43, 0x04, 0x9f},
    {0x05, 0x4a, 0x03, 0x04, 0x9f},
    {0x03, 0x05, 0x42, 0x0f, 0x6e},
    {0x04, 0x08, 0x42, 0xf5, 0x8a},
    {0x02, 0x05, 0x42, 0x0f, 0x6e},
    {0x0b, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x43, 0x04, 0x9f},
    {0x01, 0x83, 0x51, 0xf5, 0xff},
    {0x02, 0x15, 0x43, 0x04, 0x9f},
    {0x06, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x11, 0x42, 0xb5, 0x8a},
    {0x04, 0x83, 0x51, 0xf5, 0xff},
    {0x02, 0x11, 0x42, 0xb5, 0x8a},
    {0x07, 0x42, 0x03, 0x44, 0x9f},
    {0x03, 0x84, 0x51, 0xb5, 0xff},
    {0x01, 0x81, 0x4f, 0xf5, 0xee},
    {0x02, 0x84, 0x51, 0xb5, 0xff},
    {0x05, 0x44, 0x02, 0xb5, 0x8a},
    {0x03, 0x06, 0x42, 0x0f, 0x6e},
    {0x04, 0x81, 0x4f, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x0f, 0x6e},
    {0x4e, 0x0f, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x42, 0xb5, 0x8a},
    {0x01, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x01, 0x42, 0xb5, 0x8a},
    {0x06, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x08, 0x42, 0x11, 0x7f},
    {0x04, 0x0a, 0x42, 0xf5, 0x8a},
    {0x02, 0x08, 0x42, 0x11, 0x7f},
    {0x08, 0x47, 0x41, 0xb5, 0xad},
    {0x03, 0x83, 0x4f, 0xb5, 0xee},
    {0x01, 0x04, 0x42, 0x51, 0x7f},
    {0x02, 0x83, 0x4f, 0xb5, 0xee},
    {0x05, 0x42, 0x02, 0xb5, 0x8a},
    {0x03, 0x81, 0x46, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0x51, 0x7f},
    {0x02, 0x81, 0x46, 0x03, 0xbd},
    {0x0c, 0x46, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x11, 0x7f},
    {0x01, 0x02, 0x42, 0x51, 0x7f},
    {0x02, 0x0a, 0x42, 0x11, 0x7f},
    {0x06, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x04, 0x42, 0x0f, 0x6e},
    {0x04, 0x02, 0x42, 0x51, 0x7f},
    {0x02, 0x04, 0x42, 0x0f, 0x6e},
    {0x07, 0x47, 0x03, 0x44, 0x9f},
    {0x03, 0x02, 0x42, 0x0f, 0x6e},
    {0x01, 0x07, 0x42, 0x51, 0x7f},
    {0x02, 0x02, 0x42, 0x0f, 0x6e},
    {0x05, 0x47, 0x02, 0xb5, 0x8a},
    {0x03, 0x07, 0x42, 0x0f, 0x6e},
    {0x04, 0x07, 0x42, 0x51, 0x7f},
    {0x02, 0x07, 0x42, 0x0f, 0x6e},
    {0xf4, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0xb4, 0x44, 0xb5, 0xff},
    {0x01, 0x9e, 0xf5, 0x40, 0x0e},
    {0x02, 0xb4, 0x44, 0xb5, 0xff},
    {0x06, 0x5e, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0x9e, 0xf5, 0x40, 0x0e},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0x4d, 0x44, 0xb5, 0xcf},
    {0x03, 0x0b, 0x47, 0xb5, 0x7c},
    {0x01, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x0b, 0x47, 0xb5, 0x7c},
    {0x05, 0x5e, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x60, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x45, 0xb5, 0x8c},
    {0x01, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x0c, 0x45, 0xb5, 0x8c},
    {0x06, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x09, 0x47, 0xb5, 0x7c},
    {0x04, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x09, 0x47, 0xb5, 0x7c},
    {0x07, 0x56, 0x04, 0xf5, 0xcf},
    {0x03, 0x9a, 0xf5, 0x00, 0x08},
    {0x01, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x9a, 0xf5, 0x00, 0x08},
    {0x05, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x14, 0x44, 0xb5, 0x9c},
    {0x01, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x14, 0x44, 0xb5, 0x9c},
    {0x06, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x82, 0x60, 0xb5, 0xff},
    {0x04, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x82, 0x60, 0xb5, 0xff},
    {0x08, 0x4d, 0x44, 0xb5, 0xcf},
    {0x03, 0x18, 0x44, 0xb5, 0x9c},
    {0x01, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x18, 0x44, 0xb5, 0x9c},
    {0x05, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x0e, 0x45, 0xb5, 0x8c},
    {0x04, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x0e, 0x45, 0xb5, 0x8c},
    {0x4f, 0xb5, 0x00, 0x40, 0x09},
    {0x03, 0x1c, 0x44, 0xb5, 0x9c},
    {0x01, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x1c, 0x44, 0xb5, 0x9c},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0xf5, 0x40, 0x09},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0x81, 0xf5, 0x00, 0x0f},
    {0x03, 0x17, 0x44, 0xb5, 0x9c},
    {0x01, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x17, 0x44, 0xb5, 0x9c},
    {0x06, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0xb5, 0x68},
    {0x04, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0xb5, 0x68},
    {0x09, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x1b, 0x44, 0xb5, 0x9c},
    {0x01, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x1b, 0x44, 0xb5, 0x9c},
    {0x05, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0xb5, 0x68},
    {0x04, 0x82, 0xf5, 0x40, 0x08},
    {0x02, 0x05, 0x43, 0xb5, 0x68},
    {0x0b, 0x60, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x42, 0xb5, 0xac},
    {0x01, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x27, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x10, 0x45, 0xb5, 0x8c},
    {0x04, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x45, 0xb5, 0x8c},
    {0x07, 0x4b, 0x02, 0xf5, 0xac},
    {0x03, 0x89, 0xc1, 0xb5, 0x0f},
    {0x01, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x89, 0xc1, 0xb5, 0x0f},
    {0x05, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0xb5, 0x68},
    {0x04, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0xb5, 0x68},
    {0x51, 0x81, 0xf5, 0x00, 0x0f},
    {0x03, 0x13, 0x44, 0xb5, 0x9c},
    {0x01, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x13, 0x44, 0xb5, 0x9c},
    {0x06, 0xda, 0x81, 0xb5, 0x0f},
    {0x03, 0x08, 0x47, 0xb5, 0x7c},
    {0x04, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x08, 0x47, 0xb5, 0x7c},
    {0x08, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x37, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x37, 0x42, 0xb5, 0xac},
    {0x05, 0xda, 0x81, 0xb5, 0x0f},
    {0x03, 0x81, 0x60, 0xb5, 0xff},
    {0x04, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x81, 0x60, 0xb5, 0xff},
    {0x0c, 0x60, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x47, 0xb5, 0x7c},
    {0x01, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x0a, 0x47, 0xb5, 0x7c},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0xb5, 0x68},
    {0x04, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x04, 0x43, 0xb5, 0x68},
    {0x07, 0x45, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0xb5, 0x68},
    {0x01, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x43, 0xb5, 0x68},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0xb5, 0x68},
    {0x04, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x43, 0xb5, 0x68},
    {0xe0, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x2d, 0x42, 0xb5, 0xac},
    {0x01, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x2d, 0x42, 0xb5, 0xac},
    {0x06, 0x62, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x41, 0xb5, 0x69},
    {0x04, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0xb5, 0x69},
    {0x09, 0xdb, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x43, 0xb5, 0x79},
    {0x01, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x0b, 0x43, 0xb5, 0x79},
    {0x05, 0x62, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x41, 0xb5, 0x69},
    {0x04, 0x03, 0x43, 0xf5, 0x79},
    {0x02, 0x05, 0x41, 0xb5, 0x69},
    {0x0a, 0x48, 0x44, 0xf5, 0xcf},
    {0x03, 0x35, 0x42, 0xb5, 0xac},
    {0x01, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x35, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x09, 0x43, 0xb5, 0x79},
    {0x04, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0xb5, 0x79},
    {0x07, 0x5a, 0x04, 0xf5, 0xcf},
    {0x03, 0x87, 0xc1, 0xb5, 0x0f},
    {0x01, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x87, 0xc1, 0xb5, 0x0f},
    {0x05, 0xc2, 0xb5, 0x00, 0x09},
    {0x03, 0x06, 0x41, 0xb5, 0x69},
    {0x04, 0x05, 0x43, 0xf5, 0x79},
    {0x02, 0x06, 0x41, 0xb5, 0x69},
    {0x73, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x42, 0xb5, 0xac},
    {0x01, 0x28, 0x43, 0xf5, 0xbd},
    {0x02, 0x23, 0x42, 0xb5, 0xac},
    {0x06, 0x72, 0x04, 0xb5, 0xcf},
    {0x03, 0x82, 0x48, 0x04, 0xcf},
    {0x04, 0x28, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x48, 0x04, 0xcf},
    {0x08, 0xdb, 0xf5, 0x00, 0x0f},
    {0x03, 0x33, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x33, 0x42, 0xb5, 0xac},
    {0x05, 0x72, 0x04, 0xb5, 0xcf},
    {0x03, 0x0f, 0x45, 0xb5, 0x8c},
    {0x04, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x45, 0xb5, 0x8c},
    {0x63, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x42, 0xb5, 0xac},
    {0x01, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x42, 0xb5, 0xac},
    {0x06, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0xb5, 0x69},
    {0x04, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0xb5, 0x69},
    {0x07, 0x49, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0xb5, 0x69},
    {0x01, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x41, 0xb5, 0x69},
    {0x05, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0xb5, 0x69},
    {0x04, 0x06, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x41, 0xb5, 0x69},
    {0xc5, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x45, 0xb5, 0x8c},
    {0x01, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x0d, 0x45, 0xb5, 0x8c},
    {0x06, 0x7e, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x42, 0xb5, 0x68},
    {0x04, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0xb5, 0x68},
    {0x09, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x98, 0x44, 0xb5, 0xff},
    {0x01, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x98, 0x44, 0xb5, 0xff},
    {0x05, 0x7e, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x42, 0xb5, 0x68},
    {0x04, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0xb5, 0x68},
    {0x0b, 0x48, 0x44, 0xf5, 0xcf},
    {0x03, 0x2b, 0x42, 0xb5, 0xac},
    {0x01, 0x38, 0x43, 0xf5, 0xbd},
    {0x02, 0x2b, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x11, 0x45, 0xb5, 0x8c},
    {0x04, 0x38, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x45, 0xb5, 0x8c},
    {0x07, 0xcc, 0xb5, 0x40, 0x0e},
    {0x03, 0x94, 0x44, 0xb5, 0xff},
    {0x01, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x94, 0x44, 0xb5, 0xff},
    {0x05, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0xb5, 0x68},
    {0x04, 0x81, 0xf5, 0x40, 0x08},
    {0x02, 0x06, 0x42, 0xb5, 0x68},
    {0x4e, 0xb5, 0x00, 0x00, 0x08},
    {0x03, 0x01, 0x45, 0xb5, 0x8c},
    {0x01, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x01, 0x45, 0xb5, 0x8c},
    {0x06, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0xb5, 0x79},
    {0x04, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0xb5, 0x79},
    {0x08, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0xf5, 0x00, 0x08},
    {0x01, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x83, 0xf5, 0x00, 0x08},
    {0x05, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x81, 0x48, 0x04, 0xcf},
    {0x04, 0x04, 0x43, 0xf5, 0x79},
    {0x02, 0x81, 0x48, 0x04, 0xcf},
    {0x0c, 0x48, 0x44, 0xf5, 0xcf},
    {0x03, 0x0a, 0x43, 0xb5, 0x79},
    {0x01, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x0a, 0x43, 0xb5, 0x79},
    {0x06, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0xb5, 0x68},
    {0x04, 0x02, 0x43, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0xb5, 0x68},
    {0x07, 0x46, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0xb5, 0x68},
    {0x01, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0xb5, 0x68},
    {0x05, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0xb5, 0x68},
    {0x04, 0x07, 0x43, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0xb5, 0x68},
    {0xb4, 0xb5, 0x00, 0x00, 0x09},
    {0x03, 0x1d, 0x42, 0xb5, 0xac},
    {0x01, 0x2e, 0x43, 0xf5, 0xbd},
    {0x02, 0x1d, 0x42, 0xb5, 0xac},
    {0x06, 0x70, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x46, 0x81, 0x6f},
    {0x04, 0x2e, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0x81, 0x6f},
    {0x09, 0x6c, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x81, 0x7f},
    {0x01, 0x03, 0x41, 0xc1, 0x7f},
    {0x02, 0x0b, 0x41, 0x81, 0x7f},
    {0x05, 0x70, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x46, 0x81, 0x6f},
    {0x04, 0x03, 0x41, 0xc1, 0x7f},
    {0x02, 0x05, 0x46, 0x81, 0x6f},
    {0x0a, 0x7a, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x43, 0x81, 0x8f},
    {0x01, 0x0b, 0x43, 0xc1, 0x8f},
    {0x02, 0x0c, 0x43, 0x81, 0x8f},
    {0x06, 0x43, 0x03, 0x81, 0x8f},
    {0x03, 0x09, 0x41, 0x81, 0x7f},
    {0x04, 0x0b, 0x43, 0xc1, 0x8f},
    {0x02, 0x09, 0x41, 0x81, 0x7f},
    {0x07, 0x65, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0x44, 0x04, 0xcf},
    {0x01, 0x05, 0x41, 0xc1, 0x7f},
    {0x02, 0x9a, 0x44, 0x04, 0xcf},
    {0x05, 0x43, 0x03, 0x81, 0x8f},
    {0x03, 0x06, 0x46, 0x81, 0x6f},
    {0x04, 0x05, 0x41, 0xc1, 0x7f},
    {0x02, 0x06, 0x46, 0x81, 0x6f},
    {0x4d, 0x04, 0x04, 0xb5, 0xcf},
    {0x03, 0x21, 0x42, 0xb5, 0xac},
    {0x01, 0x36, 0x43, 0xf5, 0xbd},
    {0x02, 0x21, 0x42, 0xb5, 0xac},
    {0x06, 0x7c, 0x04, 0xb5, 0xcf},
    {0x03, 0x82, 0x7a, 0xb5, 0xff},
    {0x04, 0x36, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x7a, 0xb5, 0xff},
    {0x08, 0x6c, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0xc1, 0x8f},
    {0x02, 0x31, 0x42, 0xb5, 0xac},
    {0x05, 0x7c, 0x04, 0xb5, 0xcf},
    {0x03, 0x0e, 0x43, 0x81, 0x8f},
    {0x04, 0x09, 0x43, 0xc1, 0x8f},
    {0x02, 0x0e, 0x43, 0x81, 0x8f},
    {0x5b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x42, 0xb5, 0xac},
    {0x01, 0x88, 0x44, 0xf5, 0xff},
    {0x02, 0x3d, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x81, 0x8f},
    {0x03, 0x04, 0x46, 0x81, 0x6f},
    {0x04, 0x88, 0x44, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0x81, 0x6f},
    {0x07, 0xc2, 0x81, 0xf5, 0x0f},
    {0x03, 0x02, 0x46, 0x81, 0x6f},
    {0x01, 0x06, 0x41, 0xc1, 0x7f},
    {0x02, 0x02, 0x46, 0x81, 0x6f},
    {0x05, 0x45, 0x03, 0x81, 0x8f},
    {0x03, 0x07, 0x46, 0x81, 0x6f},
    {0x04, 0x06, 0x41, 0xc1, 0x7f},
    {0x02, 0x07, 0x46, 0x81, 0x6f},
    {0x7b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x42, 0xb5, 0xac},
    {0x01, 0x24, 0x43, 0xf5, 0xbd},
    {0x02, 0x2f, 0x42, 0xb5, 0xac},
    {0x06, 0x6a, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x43, 0x04, 0x6c},
    {0x04, 0x24, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x04, 0x6c},
    {0x09, 0x51, 0x44, 0xb5, 0xcf},
    {0x03, 0x3b, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x44, 0x44, 0xcf},
    {0x02, 0x3b, 0x42, 0xb5, 0xac},
    {0x05, 0x6a, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x43, 0x04, 0x6c},
    {0x04, 0x82, 0x44, 0x44, 0xcf},
    {0x02, 0x05, 0x43, 0x04, 0x6c},
    {0x0b, 0x7a, 0xf5, 0x40, 0xff},
    {0x03, 0x29, 0x42, 0xb5, 0xac},
    {0x01, 0x34, 0x43, 0xf5, 0xbd},
    {0x02, 0x29, 0x42, 0xb5, 0xac},
    {0x06, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x81, 0x8f},
    {0x04, 0x34, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0x81, 0x8f},
    {0x07, 0x59, 0x04, 0xf5, 0xcf},
    {0x03, 0x90, 0x44, 0xb5, 0xff},
    {0x01, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x90, 0x44, 0xb5, 0xff},
    {0x05, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x04, 0x6c},
    {0x04, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x04, 0x6c},
    {0x61, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x42, 0xb5, 0xac},
    {0x01, 0x00, 0x43, 0xf5, 0xbd},
    {0x02, 0x1f, 0x42, 0xb5, 0xac},
    {0x06, 0xd1, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x81, 0x7f},
    {0x04, 0x00, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0x81, 0x7f},
    {0x08, 0x51, 0x44, 0xb5, 0xcf},
    {0x03, 0x39, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0xc1, 0x7f},
    {0x02, 0x39, 0x42, 0xb5, 0xac},
    {0x05, 0xd1, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x7a, 0xb5, 0xff},
    {0x04, 0x04, 0x41, 0xc1, 0x7f},
    {0x02, 0x81, 0x7a, 0xb5, 0xff},
    {0x0c, 0x7a, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x41, 0x81, 0x7f},
    {0x01, 0x02, 0x41, 0xc1, 0x7f},
    {0x02, 0x0a, 0x41, 0x81, 0x7f},
    {0x06, 0x46, 0x03, 0x81, 0x8f},
    {0x03, 0x04, 0x43, 0x04, 0x6c},
    {0x04, 0x02, 0x41, 0xc1, 0x7f},
    {0x02, 0x04, 0x43, 0x04, 0x6c},
    {0x07, 0x4f, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x04, 0x6c},
    {0x01, 0x07, 0x41, 0xc1, 0x7f},
    {0x02, 0x02, 0x43, 0x04, 0x6c},
    {0x05, 0x46, 0x03, 0x81, 0x8f},
    {0x03, 0x07, 0x43, 0x04, 0x6c},
    {0x04, 0x07, 0x41, 0xc1, 0x7f},
    {0x02, 0x07, 0x43, 0x04, 0x6c},
    {0xde, 0x43, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x44, 0xb5, 0x9c},
    {0x01, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x16, 0x44, 0xb5, 0x9c},
    {0x06, 0x60, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x44, 0xb5, 0x69},
    {0x04, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0xb5, 0x69},
    {0x09, 0xd6, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0xb5, 0x79},
    {0x01, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x0b, 0x42, 0xb5, 0x79},
    {0x05, 0x60, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x44, 0xb5, 0x69},
    {0x04, 0x03, 0x42, 0xf5, 0x79},
    {0x02, 0x05, 0x44, 0xb5, 0x69},
    {0x0a, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x1a, 0x44, 0xb5, 0x9c},
    {0x01, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x44, 0xb5, 0x9c},
    {0x06, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0xb5, 0x79},
    {0x04, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0xb5, 0x79},
    {0x07, 0xc5, 0xb5, 0x40, 0x0d},
    {0x03, 0x8c, 0x44, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x8c, 0x44, 0xb5, 0xff},
    {0x05, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0xb5, 0x69},
    {0x04, 0x05, 0x42, 0xf5, 0x79},
    {0x02, 0x06, 0x44, 0xb5, 0x69},
    {0xc4, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x25, 0x42, 0xb5, 0xac},
    {0x01, 0x2c, 0x43, 0xf5, 0xbd},
    {0x02, 0x25, 0x42, 0xb5, 0xac},
    {0x06, 0x7a, 0x04, 0xb5, 0xcf},
    {0x03, 0x82, 0xc1, 0xb5, 0x0c},
    {0x04, 0x2c, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0xc1, 0xb5, 0x0c},
    {0x08, 0xd6, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x44, 0xb5, 0x9c},
    {0x01, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x19, 0x44, 0xb5, 0x9c},
    {0x05, 0x7a, 0x04, 0xb5, 0xcf},
    {0x03, 0x0f, 0x43, 0x81, 0x8f},
    {0x04, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x81, 0x8f},
    {0x6b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0xc1, 0xb5, 0x0f},
    {0x01, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0xc1, 0xb5, 0x0f},
    {0x06, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x04, 0x44, 0xb5, 0x69},
    {0x04, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0xb5, 0x69},
    {0x07, 0x44, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0xb5, 0x69},
    {0x01, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x44, 0xb5, 0x69},
    {0x05, 0xc1, 0xb5, 0x00, 0x09},
    {0x03, 0x07, 0x44, 0xb5, 0x69},
    {0x04, 0x06, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x44, 0xb5, 0x69},
    {0xd2, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x43, 0x81, 0x8f},
    {0x01, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x81, 0x8f},
    {0x06, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x04, 0x6c},
    {0x04, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x04, 0x6c},
    {0x09, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x44, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0xc1, 0x8f},
    {0x02, 0x12, 0x44, 0xb5, 0x9c},
    {0x05, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x04, 0x6c},
    {0x04, 0x08, 0x43, 0xc1, 0x8f},
    {0x02, 0x05, 0x42, 0x04, 0x6c},
    {0x0b, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x15, 0x44, 0xb5, 0x9c},
    {0x01, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x15, 0x44, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x81, 0x8f},
    {0x03, 0x11, 0x43, 0x81, 0x8f},
    {0x04, 0x83, 0xf5, 0x40, 0x09},
    {0x02, 0x11, 0x43, 0x81, 0x8f},
    {0x07, 0x42, 0x04, 0xf5, 0x9c},
    {0x03, 0x84, 0xf5, 0x00, 0x09},
    {0x01, 0x81, 0x44, 0x44, 0xcf},
    {0x02, 0x84, 0xf5, 0x00, 0x09},
    {0x05, 0x44, 0x03, 0x81, 0x8f},
    {0x03, 0x06, 0x42, 0x04, 0x6c},
    {0x04, 0x81, 0x44, 0x44, 0xcf},
    {0x02, 0x06, 0x42, 0x04, 0x6c},
    {0x4e, 0x04, 0x04, 0xb5, 0xcf},
    {0x03, 0x01, 0x43, 0x81, 0x8f},
    {0x01, 0x0a, 0x43, 0xc1, 0x8f},
    {0x02, 0x01, 0x43, 0x81, 0x8f},
    {0x06, 0x42, 0x03, 0x81, 0x8f},
    {0x03, 0x08, 0x42, 0xb5, 0x79},
    {0x04, 0x0a, 0x43, 0xc1, 0x8f},
    {0x02, 0x08, 0x42, 0xb5, 0x79},
    {0x08, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x44, 0x04, 0xcf},
    {0x01, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x83, 0x44, 0x04, 0xcf},
    {0x05, 0x42, 0x03, 0x81, 0x8f},
    {0x03, 0x81, 0xc1, 0xb5, 0x0c},
    {0x04, 0x04, 0x42, 0xf5, 0x79},
    {0x02, 0x81, 0xc1, 0xb5, 0x0c},
    {0x0c, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x42, 0xb5, 0x79},
    {0x01, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x0a, 0x42, 0xb5, 0x79},
    {0x06, 0x47, 0x03, 0x81, 0x8f},
    {0x03, 0x04, 0x42, 0x04, 0x6c},
    {0x04, 0x02, 0x42, 0xf5, 0x79},
    {0x02, 0x04, 0x42, 0x04, 0x6c},
    {0x07, 0x47, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x04, 0x6c},
    {0x01, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x02, 0x42, 0x04, 0x6c},
    {0x05, 0x47, 0x03, 0x81, 0x8f},
    {0x03, 0x07, 0x42, 0x04, 0x6c},
    {0x04, 0x07, 0x42, 0xf5, 0x79},
    {0x02, 0x07, 0x42, 0x04, 0x6c},
    {0xb4, 0x81, 0xb5, 0x00, 0x0f},
    {0x03, 0xa6, 0xf5, 0x00, 0x0e},
    {0x01, 0x1e, 0x43, 0xf5, 0xbd},
    {0x02, 0xa6, 0xf5, 0x00, 0x0e},
    {0x06, 0x56, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x47, 0x04, 0x6f},
    {0x04, 0x1e, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x47, 0x04, 0x6f},
    {0x09, 0x41, 0x44, 0xb5, 0xcf},
    {0x03, 0x0b, 0x45, 0x04, 0x7f},
    {0x01, 0x03, 0x45, 0x44, 0x7f},
    {0x02, 0x0b, 0x45, 0x04, 0x7f},
    {0x05, 0x56, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x47, 0x04, 0x6f},
    {0x04, 0x03, 0x45, 0x44, 0x7f},
    {0x02, 0x05, 0x47, 0x04, 0x6f},
    {0x0a, 0x4a, 0x44, 0xf5, 0xcf},
    {0x03, 0x0c, 0x44, 0x04, 0x8f},
    {0x01, 0x0b, 0x44, 0x44, 0x8f},
    {0x02, 0x0c, 0x44, 0x04, 0x8f},
    {0x06, 0x43, 0x04, 0x04, 0x8f},
    {0x03, 0x09, 0x45, 0x04, 0x7f},
    {0x04, 0x0b, 0x44, 0x44, 0x8f},
    {0x02, 0x09, 0x45, 0x04, 0x7f},
    {0x07, 0x4d, 0x03, 0xf5, 0xbd},
    {0x03, 0x9a, 0x42, 0x04, 0xcf},
    {0x01, 0x05, 0x45, 0x44, 0x7f},
    {0x02, 0x9a, 0x42, 0x04, 0xcf},
    {0x05, 0x43, 0x04, 0x04, 0x8f},
    {0x03, 0x06, 0x47, 0x04, 0x6f},
    {0x04, 0x05, 0x45, 0x44, 0x7f},
    {0x02, 0x06, 0x47, 0x04, 0x6f},
    {0x4d, 0x02, 0x04, 0xb5, 0xcf},
    {0x03, 0x14, 0x42, 0x04, 0x9f},
    {0x01, 0x0c, 0x42, 0x44, 0x9f},
    {0x02, 0x14, 0x42, 0x04, 0x9f},
    {0x06, 0x4b, 0x02, 0x04, 0x9f},
    {0x03, 0x82, 0x4a, 0x04, 0xcf},
    {0x04, 0x0c, 0x42, 0x44, 0x9f},
    {0x02, 0x82, 0x4a, 0x04, 0xcf},
    {0x08, 0x41, 0x44, 0xb5, 0xcf},
    {0x03, 0x18, 0x42, 0x04, 0x9f},
    {0x01, 0x09, 0x44, 0x44, 0x8f},
    {0x02, 0x18, 0x42, 0x04, 0x9f},
    {0x05, 0x4b, 0x02, 0x04, 0x9f},
    {0x03, 0x0e, 0x44, 0x04, 0x8f},
    {0x04, 0x09, 0x44, 0x44, 0x8f},
    {0x02, 0x0e, 0x44, 0x04, 0x8f},
    {0x4f, 0x06, 0x02, 0xf5, 0xdf},
    {0x03, 0x1c, 0x42, 0x04, 0x9f},
    {0x01, 0x9a, 0x46, 0x42, 0xdf},
    {0x02, 0x1c, 0x42, 0x04, 0x9f},
    {0x06, 0x45, 0x04, 0x04, 0x8f},
    {0x03, 0x04, 0x47, 0x04, 0x6f},
    {0x04, 0x9a, 0x46, 0x42, 0xdf},
    {0x02, 0x04, 0x47, 0x04, 0x6f},
    {0x07, 0x43, 0x02, 0x44, 0x9f},
    {0x03, 0x02, 0x47, 0x04, 0x6f},
    {0x01, 0x06, 0x45, 0x44, 0x7f},
    {0x02, 0x02, 0x47, 0x04, 0x6f},
    {0x05, 0x45, 0x04, 0x04, 0x8f},
    {0x03, 0x07, 0x47, 0x04, 0x6f},
    {0x04, 0x06, 0x45, 0x44, 0x7f},
    {0x02, 0x07, 0x47, 0x04, 0x6f},
    {0x77, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x42, 0x04, 0x9f},
    {0x01, 0x22, 0x43, 0xf5, 0xbd},
    {0x02, 0x17, 0x42, 0x04, 0x9f},
    {0x06, 0x5a, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x02, 0x6c},
    {0x04, 0x22, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x02, 0x6c},
    {0x09, 0x48, 0x43, 0xb5, 0xbd},
    {0x03, 0x1b, 0x42, 0x04, 0x9f},
    {0x01, 0x82, 0x42, 0x44, 0xcf},
    {0x02, 0x1b, 0x42, 0x04, 0x9f},
    {0x05, 0x5a, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x02, 0x6c},
    {0x04, 0x82, 0x42, 0x44, 0xcf},
    {0x02, 0x05, 0x43, 0x02, 0x6c},
    {0x0b, 0x4a, 0x44, 0xf5, 0xcf},
    {0x03, 0x28, 0x42, 0xb5, 0xac},
    {0x01, 0x32, 0x43, 0xf5, 0xbd},
    {0x02, 0x28, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0x04, 0x9f},
    {0x03, 0x10, 0x44, 0x04, 0x8f},
    {0x04, 0x32, 0x43, 0xf5, 0xbd},
    {0x02, 0x10, 0x44, 0x04, 0x8f},
    {0x07, 0x52, 0x04, 0xf5, 0xcf},
    {0x03, 0x8e, 0x44, 0xb5, 0xff},
    {0x01, 0x0e, 0x42, 0x44, 0x9f},
    {0x02, 0x8e, 0x44, 0xb5, 0xff},
    {0x05, 0x49, 0x02, 0x04, 0x9f},
    {0x03, 0x06, 0x43, 0x02, 0x6c},
    {0x04, 0x0e, 0x42, 0x44, 0x9f},
    {0x02, 0x06, 0x43, 0x02, 0x6c},
    {0x7f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0x04, 0x9f},
    {0x01, 0x3e, 0x43, 0xf5, 0xbd},
    {0x02, 0x13, 0x42, 0x04, 0x9f},
    {0x06, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x45, 0x04, 0x7f},
    {0x04, 0x3e, 0x43, 0xf5, 0xbd},
    {0x02, 0x08, 0x45, 0x04, 0x7f},
    {0x08, 0x48, 0x43, 0xb5, 0xbd},
    {0x03, 0x38, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0x44, 0x7f},
    {0x02, 0x38, 0x42, 0xb5, 0xac},
    {0x05, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4a, 0x04, 0xcf},
    {0x04, 0x04, 0x45, 0x44, 0x7f},
    {0x02, 0x81, 0x4a, 0x04, 0xcf},
    {0x0c, 0x4a, 0x44, 0xf5, 0xcf},
    {0x03, 0x0a, 0x45, 0x04, 0x7f},
    {0x01, 0x02, 0x45, 0x44, 0x7f},
    {0x02, 0x0a, 0x45, 0x04, 0x7f},
    {0x06, 0x46, 0x04, 0x04, 0x8f},
    {0x03, 0x04, 0x43, 0x02, 0x6c},
    {0x04, 0x02, 0x45, 0x44, 0x7f},
    {0x02, 0x04, 0x43, 0x02, 0x6c},
    {0x07, 0x45, 0x02, 0x44, 0x9f},
    {0x03, 0x02, 0x43, 0x02, 0x6c},
    {0x01, 0x07, 0x45, 0x44, 0x7f},
    {0x02, 0x02, 0x43, 0x02, 0x6c},
    {0x05, 0x46, 0x04, 0x04, 0x8f},
    {0x03, 0x07, 0x43, 0x02, 0x6c},
    {0x04, 0x07, 0x45, 0x44, 0x7f},
    {0x02, 0x07, 0x43, 0x02, 0x6c},
    {0xe4, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x2e, 0x42, 0xb5, 0xac},
    {0x01, 0x30, 0x43, 0xf5, 0xbd},
    {0x02, 0x2e, 0x42, 0xb5, 0xac},
    {0x06, 0x66, 0x04, 0xb5, 0xcf},
    {0x03, 0x03, 0x41, 0x06, 0x6d},
    {0x04, 0x30, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x06, 0x6d},
    {0x09, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x43, 0x06, 0x7d},
    {0x01, 0x03, 0x43, 0x46, 0x7d},
    {0x02, 0x0b, 0x43, 0x06, 0x7d},
    {0x05, 0x66, 0x04, 0xb5, 0xcf},
    {0x03, 0x05, 0x41, 0x06, 0x6d},
    {0x04, 0x03, 0x43, 0x46, 0x7d},
    {0x02, 0x05, 0x41, 0x06, 0x6d},
    {0x0a, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x36, 0x42, 0xb5, 0xac},
    {0x01, 0x3c, 0x43, 0xf5, 0xbd},
    {0x02, 0x36, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x06, 0x02, 0xdf},
    {0x03, 0x09, 0x43, 0x06, 0x7d},
    {0x04, 0x3c, 0x43, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x06, 0x7d},
    {0x07, 0x55, 0x04, 0xf5, 0xcf},
    {0x03, 0x88, 0xc1, 0xb5, 0x0f},
    {0x01, 0x05, 0x43, 0x46, 0x7d},
    {0x02, 0x88, 0xc1, 0xb5, 0x0f},
    {0x05, 0xc2, 0x06, 0x02, 0xdf},
    {0x03, 0x06, 0x41, 0x06, 0x6d},
    {0x04, 0x05, 0x43, 0x46, 0x7d},
    {0x02, 0x06, 0x41, 0x06, 0x6d},
    {0x6f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x42, 0xb5, 0xac},
    {0x01, 0x2a, 0x43, 0xf5, 0xbd},
    {0x02, 0x24, 0x42, 0xb5, 0xac},
    {0x06, 0x59, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x44, 0x03, 0xbd},
    {0x04, 0x2a, 0x43, 0xf5, 0xbd},
    {0x02, 0x82, 0x44, 0x03, 0xbd},
    {0x08, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x34, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0x44, 0x9f},
    {0x02, 0x34, 0x42, 0xb5, 0xac},
    {0x05, 0x59, 0x03, 0xb5, 0xbd},
    {0x03, 0x0f, 0x44, 0x04, 0x8f},
    {0x04, 0x10, 0x42, 0x44, 0x9f},
    {0x02, 0x0f, 0x44, 0x04, 0x8f},
    {0x67, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x42, 0xb5, 0xac},
    {0x01, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x42, 0xb5, 0xac},
    {0x06, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x06, 0x6d},
    {0x04, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x06, 0x6d},
    {0x07, 0x51, 0x03, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x06, 0x6d},
    {0x01, 0x06, 0x43, 0x46, 0x7d},
    {0x02, 0x02, 0x41, 0x06, 0x6d},
    {0x05, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x06, 0x6d},
    {0x04, 0x06, 0x43, 0x46, 0x7d},
    {0x02, 0x07, 0x41, 0x06, 0x6d},
    {0x75, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x44, 0x04, 0x8f},
    {0x01, 0x20, 0x43, 0xf5, 0xbd},
    {0x02, 0x0d, 0x44, 0x04, 0x8f},
    {0x06, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x02, 0x6c},
    {0x04, 0x20, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x02, 0x6c},
    {0x09, 0xc1, 0x44, 0xb5, 0xff},
    {0x03, 0x9b, 0x44, 0xb5, 0xff},
    {0x01, 0x08, 0x44, 0x44, 0x8f},
    {0x02, 0x9b, 0x44, 0xb5, 0xff},
    {0x05, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x02, 0x6c},
    {0x04, 0x08, 0x44, 0x44, 0x8f},
    {0x02, 0x05, 0x42, 0x02, 0x6c},
    {0x0b, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x2c, 0x42, 0xb5, 0xac},
    {0x01, 0x3a, 0x43, 0xf5, 0xbd},
    {0x02, 0x2c, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0x04, 0x8f},
    {0x03, 0x11, 0x44, 0x04, 0x8f},
    {0x04, 0x3a, 0x43, 0xf5, 0xbd},
    {0x02, 0x11, 0x44, 0x04, 0x8f},
    {0x07, 0xc4, 0xb5, 0x40, 0x0c},
    {0x03, 0x96, 0x44, 0xb5, 0xff},
    {0x01, 0x81, 0x42, 0x44, 0xcf},
    {0x02, 0x96, 0x44, 0xb5, 0xff},
    {0x05, 0x44, 0x04, 0x04, 0x8f},
    {0x03, 0x06, 0x42, 0x02, 0x6c},
    {0x04, 0x81, 0x42, 0x44, 0xcf},
    {0x02, 0x06, 0x42, 0x02, 0x6c},
    {0x4e, 0x02, 0x04, 0xb5, 0xcf},
    {0x03, 0x01, 0x44, 0x04, 0x8f},
    {0x01, 0x0a, 0x44, 0x44, 0x8f},
    {0x02, 0x01, 0x44, 0x04, 0x8f},
    {0x06, 0x42, 0x04, 0x04, 0x8f},
    {0x03, 0x08, 0x43, 0x06, 0x7d},
    {0x04, 0x0a, 0x44, 0x44, 0x8f},
    {0x02, 0x08, 0x43, 0x06, 0x7d},
    {0x08, 0xc1, 0x44, 0xb5, 0xff},
    {0x03, 0x83, 0x42, 0x04, 0xcf},
    {0x01, 0x04, 0x43, 0x46, 0x7d},
    {0x02, 0x83, 0x42, 0x04, 0xcf},
    {0x05, 0x42, 0x04, 0x04, 0x8f},
    {0x03, 0x81, 0x44, 0x03, 0xbd},
    {0x04, 0x04, 0x43, 0x46, 0x7d},
    {0x02, 0x81, 0x44, 0x03, 0xbd},
    {0x0c, 0x44, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x06, 0x7d},
    {0x01, 0x02, 0x43, 0x46, 0x7d},
    {0x02, 0x0a, 0x43, 0x06, 0x7d},
    {0x06, 0x47, 0x04, 0x04, 0x8f},
    {0x03, 0x04, 0x42, 0x02, 0x6c},
    {0x04, 0x02, 0x43, 0x46, 0x7d},
    {0x02, 0x04, 0x42, 0x02, 0x6c},
    {0x07, 0x46, 0x02, 0x44, 0x9f},
    {0x03, 0x02, 0x42, 0x02, 0x6c},
    {0x01, 0x07, 0x43, 0x46, 0x7d},
    {0x02, 0x02, 0x42, 0x02, 0x6c},
    {0x05, 0x47, 0x04, 0x04, 0x8f},
    {0x03, 0x07, 0x42, 0x02, 0x6c},
    {0x04, 0x07, 0x43, 0x46, 0x7d},
    {0x02, 0x07, 0x42, 0x02, 0x6c},
    {0xf4, 0x46, 0x02, 0xf5, 0xff},
    {0x03, 0x1e, 0x42, 0xb5, 0xac},
    {0x01, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x1e, 0x42, 0xb5, 0xac},
    {0x06, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x81, 0x6f},
    {0x04, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x81, 0x6f},
    {0x09, 0x4a, 0x43, 0xb5, 0xbd},
    {0x03, 0x0b, 0x44, 0x81, 0x7f},
    {0x01, 0x03, 0x44, 0xc1, 0x7f},
    {0x02, 0x0b, 0x44, 0x81, 0x7f},
    {0x05, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x81, 0x6f},
    {0x04, 0x03, 0x44, 0xc1, 0x7f},
    {0x02, 0x05, 0x45, 0x81, 0x6f},
    {0x0a, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x0c, 0x42, 0x81, 0x8f},
    {0x01, 0x0b, 0x42, 0xc1, 0x8f},
    {0x02, 0x0c, 0x42, 0x81, 0x8f},
    {0x06, 0x43, 0x02, 0x81, 0x8f},
    {0x03, 0x09, 0x44, 0x81, 0x7f},
    {0x04, 0x0b, 0x42, 0xc1, 0x8f},
    {0x02, 0x09, 0x44, 0x81, 0x7f},
    {0x07, 0x41, 0x03, 0xf5, 0xbd},
    {0x03, 0x9a, 0x47, 0x04, 0xcf},
    {0x01, 0x05, 0x44, 0xc1, 0x7f},
    {0x02, 0x9a, 0x47, 0x04, 0xcf},
    {0x05, 0x43, 0x02, 0x81, 0x8f},
    {0x03, 0x06, 0x45, 0x81, 0x6f},
    {0x04, 0x05, 0x44, 0xc1, 0x7f},
    {0x02, 0x06, 0x45, 0x81, 0x6f},
    {0x4d, 0x07, 0x04, 0xb5, 0xcf},
    {0x03, 0x22, 0x42, 0xb5, 0xac},
    {0x01, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x22, 0x42, 0xb5, 0xac},
    {0x06, 0x52, 0x03, 0xb5, 0xbd},
    {0x03, 0x82, 0x42, 0x03, 0xbd},
    {0x04, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x03, 0xbd},
    {0x08, 0x4a, 0x43, 0xb5, 0xbd},
    {0x03, 0x32, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0xc1, 0x8f},
    {0x02, 0x32, 0x42, 0xb5, 0xac},
    {0x05, 0x52, 0x03, 0xb5, 0xbd},
    {0x03, 0x0e, 0x42, 0x81, 0x8f},
    {0x04, 0x09, 0x42, 0xc1, 0x8f},
    {0x02, 0x0e, 0x42, 0x81, 0x8f},
    {0x53, 0x04, 0xf5, 0x40, 0xff},
    {0x03, 0x3e, 0x42, 0xb5, 0xac},
    {0x01, 0x8a, 0x44, 0xf5, 0xff},
    {0x02, 0x3e, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x81, 0x8f},
    {0x03, 0x04, 0x45, 0x81, 0x6f},
    {0x04, 0x8a, 0x44, 0xf5, 0xff},
    {0x02, 0x04, 0x45, 0x81, 0x6f},
    {0x07, 0x48, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x81, 0x6f},
    {0x01, 0x06, 0x44, 0xc1, 0x7f},
    {0x02, 0x02, 0x45, 0x81, 0x6f},
    {0x05, 0x45, 0x02, 0x81, 0x8f},
    {0x03, 0x07, 0x45, 0x81, 0x6f},
    {0x04, 0x06, 0x44, 0xc1, 0x7f},
    {0x02, 0x07, 0x45, 0x81, 0x6f},
    {0x58, 0x04, 0xf5, 0x40, 0xff},
    {0x03, 0x30, 0x42, 0xb5, 0xac},
    {0x01, 0x26, 0x43, 0xf5, 0xbd},
    {0x02, 0x30, 0x42, 0xb5, 0xac},
    {0x06, 0x55, 0x03, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x07, 0x6c},
    {0x04, 0x26, 0x43, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x07, 0x6c},
    {0x09, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3c, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x47, 0x44, 0xcf},
    {0x02, 0x3c, 0x42, 0xb5, 0xac},
    {0x05, 0x55, 0x03, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x07, 0x6c},
    {0x04, 0x82, 0x47, 0x44, 0xcf},
    {0x02, 0x05, 0x43, 0x07, 0x6c},
    {0x0b, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x2a, 0x42, 0xb5, 0xac},
    {0x01, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x2a, 0x42, 0xb5, 0xac},
    {0x06, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x81, 0x8f},
    {0x04, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x81, 0x8f},
    {0x07, 0xc3, 0x04, 0xf5, 0xff},
    {0x03, 0x92, 0x44, 0xb5, 0xff},
    {0x01, 0x0f, 0x42, 0x44, 0x9f},
    {0x02, 0x92, 0x44, 0xb5, 0xff},
    {0x05, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x07, 0x6c},
    {0x04, 0x0f, 0x42, 0x44, 0x9f},
    {0x02, 0x06, 0x43, 0x07, 0x6c},
    {0x56, 0x04, 0xf5, 0x40, 0xff},
    {0x03, 0x20, 0x42, 0xb5, 0xac},
    {0x01, 0x86, 0x44, 0xf5, 0xff},
    {0x02, 0x20, 0x42, 0xb5, 0xac},
    {0x06, 0xc4, 0x04, 0xb5, 0xff},
    {0x03, 0x08, 0x44, 0x81, 0x7f},
    {0x04, 0x86, 0x44, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0x81, 0x7f},
    {0x08, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3a, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0xc1, 0x7f},
    {0x02, 0x3a, 0x42, 0xb5, 0xac},
    {0x05, 0xc4, 0x04, 0xb5, 0xff},
    {0x03, 0x81, 0x42, 0x03, 0xbd},
    {0x04, 0x04, 0x44, 0xc1, 0x7f},
    {0x02, 0x81, 0x42, 0x03, 0xbd},
    {0x0c, 0x42, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x44, 0x81, 0x7f},
    {0x01, 0x02, 0x44, 0xc1, 0x7f},
    {0x02, 0x0a, 0x44, 0x81, 0x7f},
    {0x06, 0x46, 0x02, 0x81, 0x8f},
    {0x03, 0x04, 0x43, 0x07, 0x6c},
    {0x04, 0x02, 0x44, 0xc1, 0x7f},
    {0x02, 0x04, 0x43, 0x07, 0x6c},
    {0x07, 0xc1, 0x81, 0xf5, 0x0f},
    {0x03, 0x02, 0x43, 0x07, 0x6c},
    {0x01, 0x07, 0x44, 0xc1, 0x7f},
    {0x02, 0x02, 0x43, 0x07, 0x6c},
    {0x05, 0x46, 0x02, 0x81, 0x8f},
    {0x03, 0x07, 0x43, 0x07, 0x6c},
    {0x04, 0x07, 0x44, 0xc1, 0x7f},
    {0x02, 0x07, 0x43, 0x07, 0x6c},
    {0xe8, 0x44, 0xf5, 0x40, 0x0f},
    {0x03, 0x16, 0x42, 0x04, 0x9f},
    {0x01, 0x0d, 0x42, 0x44, 0x9f},
    {0x02, 0x16, 0x42, 0x04, 0x9f},
    {0x06, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x06, 0x6d},
    {0x04, 0x0d, 0x42, 0x44, 0x9f},
    {0x02, 0x03, 0x44, 0x06, 0x6d},
    {0x09, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x06, 0x7d},
    {0x01, 0x03, 0x42, 0x46, 0x7d},
    {0x02, 0x0b, 0x42, 0x06, 0x7d},
    {0x05, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x06, 0x6d},
    {0x04, 0x03, 0x42, 0x46, 0x7d},
    {0x02, 0x05, 0x44, 0x06, 0x6d},
    {0x0a, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x1a, 0x42, 0x04, 0x9f},
    {0x01, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0x04, 0x9f},
    {0x06, 0x48, 0x02, 0x04, 0x9f},
    {0x03, 0x09, 0x42, 0x06, 0x7d},
    {0x04, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x06, 0x7d},
    {0x07, 0x4a, 0x02, 0xf5, 0xac},
    {0x03, 0x8a, 0xc1, 0xb5, 0x0f},
    {0x01, 0x05, 0x42, 0x46, 0x7d},
    {0x02, 0x8a, 0xc1, 0xb5, 0x0f},
    {0x05, 0x48, 0x02, 0x04, 0x9f},
    {0x03, 0x06, 0x44, 0x06, 0x6d},
    {0x04, 0x05, 0x42, 0x46, 0x7d},
    {0x02, 0x06, 0x44, 0x06, 0x6d},
    {0x50, 0x81, 0xf5, 0x00, 0x0f},
    {0x03, 0x26, 0x42, 0xb5, 0xac},
    {0x01, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x26, 0x42, 0xb5, 0xac},
    {0x06, 0xc3, 0x81, 0xb5, 0x0f},
    {0x03, 0x82, 0x47, 0x03, 0xbd},
    {0x04, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x03, 0xbd},
    {0x08, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0x04, 0x9f},
    {0x01, 0x11, 0x42, 0x44, 0x9f},
    {0x02, 0x19, 0x42, 0x04, 0x9f},
    {0x05, 0xc3, 0x81, 0xb5, 0x0f},
    {0x03, 0x0f, 0x42, 0x81, 0x8f},
    {0x04, 0x11, 0x42, 0x44, 0x9f},
    {0x02, 0x0f, 0x42, 0x81, 0x8f},
    {0x40, 0x81, 0xf5, 0x00, 0x0f},
    {0x03, 0x86, 0xc1, 0xb5, 0x0f},
    {0x01, 0x84, 0xc1, 0xf5, 0x0f},
    {0x02, 0x86, 0xc1, 0xb5, 0x0f},
    {0x06, 0xc1, 0x06, 0x02, 0xdf},
    {0x03, 0x04, 0x44, 0x06, 0x6d},
    {0x04, 0x84, 0xc1, 0xf5, 0x0f},
    {0x02, 0x04, 0x44, 0x06, 0x6d},
    {0x07, 0x44, 0x02, 0x44, 0x9f},
    {0x03, 0x02, 0x44, 0x06, 0x6d},
    {0x01, 0x06, 0x42, 0x46, 0x7d},
    {0x02, 0x02, 0x44, 0x06, 0x6d},
    {0x05, 0xc1, 0x06, 0x02, 0xdf},
    {0x03, 0x07, 0x44, 0x06, 0x6d},
    {0x04, 0x06, 0x42, 0x46, 0x7d},
    {0x02, 0x07, 0x44, 0x06, 0x6d},
    {0xc1, 0x42, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x81, 0x8f},
    {0x01, 0x01, 0x42, 0x44, 0x9f},
    {0x02, 0x0d, 0x42, 0x81, 0x8f},
    {0x06, 0x4a, 0x02, 0x04, 0x9f},
    {0x03, 0x03, 0x42, 0x07, 0x6c},
    {0x04, 0x01, 0x42, 0x44, 0x9f},
    {0x02, 0x03, 0x42, 0x07, 0x6c},
    {0x09, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0x04, 0x9f},
    {0x01, 0x08, 0x42, 0xc1, 0x8f},
    {0x02, 0x12, 0x42, 0x04, 0x9f},
    {0x05, 0x4a, 0x02, 0x04, 0x9f},
    {0x03, 0x05, 0x42, 0x07, 0x6c},
    {0x04, 0x08, 0x42, 0xc1, 0x8f},
    {0x02, 0x05, 0x42, 0x07, 0x6c},
    {0x0b, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x15, 0x42, 0x04, 0x9f},
    {0x01, 0x83, 0x46, 0x42, 0xdf},
    {0x02, 0x15, 0x42, 0x04, 0x9f},
    {0x06, 0x44, 0x02, 0x81, 0x8f},
    {0x03, 0x11, 0x42, 0x81, 0x8f},
    {0x04, 0x83, 0x46, 0x42, 0xdf},
    {0x02, 0x11, 0x42, 0x81, 0x8f},
    {0x07, 0x42, 0x02, 0x44, 0x9f},
    {0x03, 0x84, 0x46, 0x02, 0xdf},
    {0x01, 0x81, 0x47, 0x44, 0xcf},
    {0x02, 0x84, 0x46, 0x02, 0xdf},
    {0x05, 0x44, 0x02, 0x81, 0x8f},
    {0x03, 0x06, 0x42, 0x07, 0x6c},
    {0x04, 0x81, 0x47, 0x44, 0xcf},
    {0x02, 0x06, 0x42, 0x07, 0x6c},
    {0x4e, 0x07, 0x04, 0xb5, 0xcf},
    {0x03, 0x01, 0x42, 0x81, 0x8f},
    {0x01, 0x0a, 0x42, 0xc1, 0x8f},
    {0x02, 0x01, 0x42, 0x81, 0x8f},
    {0x06, 0x42, 0x02, 0x81, 0x8f},
    {0x03, 0x08, 0x42, 0x06, 0x7d},
    {0x04, 0x0a, 0x42, 0xc1, 0x8f},
    {0x02, 0x08, 0x42, 0x06, 0x7d},
    {0x08, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x47, 0x04, 0xcf},
    {0x01, 0x04, 0x42, 0x46, 0x7d},
    {0x02, 0x83, 0x47, 0x04, 0xcf},
    {0x05, 0x42, 0x02, 0x81, 0x8f},
    {0x03, 0x81, 0x47, 0x03, 0xbd},
    {0x04, 0x04, 0x42, 0x46, 0x7d},
    {0x02, 0x81, 0x47, 0x03, 0xbd},
    {0x0c, 0x47, 0x43, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x06, 0x7d},
    {0x01, 0x02, 0x42, 0x46, 0x7d},
    {0x02, 0x0a, 0x42, 0x06, 0x7d},
    {0x06, 0x47, 0x02, 0x81, 0x8f},
    {0x03, 0x04, 0x42, 0x07, 0x6c},
    {0x04, 0x02, 0x42, 0x46, 0x7d},
    {0x02, 0x04, 0x42, 0x07, 0x6c},
    {0x07, 0x47, 0x02, 0x44, 0x9f},
    {0x03, 0x02, 0x42, 0x07, 0x6c},
    {0x01, 0x07, 0x42, 0x46, 0x7d},
    {0x02, 0x02, 0x42, 0x07, 0x6c},
    {0x05, 0x47, 0x02, 0x81, 0x8f},
    {0x03, 0x07, 0x42, 0x07, 0x6c},
    {0x04, 0x07, 0x42, 0x46, 0x7d},
    {0x02, 0x07, 0x42, 0x07, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0d},
    {0x03, 0xb4, 0xf5, 0x00, 0x0d},
    {0x01, 0xb4, 0xf5, 0x40, 0x0d},
    {0x02, 0xb4, 0xf5, 0x00, 0x0d},
    {0x06, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0xf5, 0x00, 0x66},
    {0x04, 0xb4, 0xf5, 0x40, 0x0d},
    {0x02, 0x03, 0xf5, 0x00, 0x66},
    {0x09, 0x5e, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x4e, 0xb5, 0x7f},
    {0x01, 0x03, 0x4e, 0xf5, 0x7f},
    {0x02, 0x0b, 0x4e, 0xb5, 0x7f},
    {0x05, 0xf2, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0xf5, 0x00, 0x66},
    {0x04, 0x03, 0x4e, 0xf5, 0x7f},
    {0x02, 0x05, 0xf5, 0x00, 0x66},
    {0x0a, 0x56, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x4c, 0xb5, 0x8f},
    {0x01, 0x0b, 0x4c, 0xf5, 0x8f},
    {0x02, 0x0c, 0x4c, 0xb5, 0x8f},
    {0x06, 0x43, 0x0c, 0xb5, 0x8f},
    {0x03, 0x09, 0x4e, 0xb5, 0x7f},
    {0x04, 0x0b, 0x4c, 0xf5, 0x8f},
    {0x02, 0x09, 0x4e, 0xb5, 0x7f},
    {0x07, 0xf5, 0x00, 0x40, 0x05},
    {0x03, 0x9a, 0x4d, 0xb5, 0xee},
    {0x01, 0x05, 0x4e, 0xf5, 0x7f},
    {0x02, 0x9a, 0x4d, 0xb5, 0xee},
    {0x05, 0x43, 0x0c, 0xb5, 0x8f},
    {0x03, 0x06, 0xf5, 0x00, 0x66},
    {0x04, 0x05, 0x4e, 0xf5, 0x7f},
    {0x02, 0x06, 0xf5, 0x00, 0x66},
    {0x4d, 0x0d, 0xb5, 0x00, 0xee},
    {0x03, 0x14, 0x47, 0xb5, 0x9e},
    {0x01, 0x0c, 0x47, 0xf5, 0x9e},
    {0x02, 0x14, 0x47, 0xb5, 0x9e},
    {0x06, 0x4b, 0x07, 0xb5, 0x9e},
    {0x03, 0x82, 0x56, 0xb5, 0xee},
    {0x04, 0x0c, 0x47, 0xf5, 0x9e},
    {0x02, 0x82, 0x56, 0xb5, 0xee},
    {0x08, 0x5e, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x47, 0xb5, 0x9e},
    {0x01, 0x09, 0x4c, 0xf5, 0x8f},
    {0x02, 0x18, 0x47, 0xb5, 0x9e},
    {0x05, 0x4b, 0x07, 0xb5, 0x9e},
    {0x03, 0x0e, 0x4c, 0xb5, 0x8f},
    {0x04, 0x09, 0x4c, 0xf5, 0x8f},
    {0x02, 0x0e, 0x4c, 0xb5, 0x8f},
    {0x4f, 0x01, 0xb5, 0x40, 0xff},
    {0x03, 0x1c, 0x47, 0xb5, 0x9e},
    {0x01, 0x9a, 0x41, 0xf5, 0xff},
    {0x02, 0x1c, 0x47, 0xb5, 0x9e},
    {0x06, 0x45, 0x0c, 0xb5, 0x8f},
    {0x03, 0x04, 0xf5, 0x00, 0x66},
    {0x04, 0x9a, 0x41, 0xf5, 0xff},
    {0x02, 0x04, 0xf5, 0x00, 0x66},
    {0x07, 0x43, 0x07, 0xf5, 0x9e},
    {0x03, 0x02, 0xf5, 0x00, 0x66},
    {0x01, 0x06, 0x4e, 0xf5, 0x7f},
    {0x02, 0x02, 0xf5, 0x00, 0x66},
    {0x05, 0x45, 0x0c, 0xb5, 0x8f},
    {0x03, 0x07, 0xf5, 0x00, 0x66},
    {0x04, 0x06, 0x4e, 0xf5, 0x7f},
    {0x02, 0x07, 0xf5, 0x00, 0x66},
    {0x52, 0x0a, 0xf5, 0x00, 0xff},
    {0x03, 0x17, 0x47, 0xb5, 0x9e},
    {0x01, 0x14, 0x45, 0xf5, 0xae},
    {0x02, 0x17, 0x47, 0xb5, 0x9e},
    {0x06, 0x4c, 0x05, 0xb5, 0xae},
    {0x03, 0x03, 0x43, 0x0d, 0x6e},
    {0x04, 0x14, 0x45, 0xf5, 0xae},
    {0x02, 0x03, 0x43, 0x0d, 0x6e},
    {0x09, 0x43, 0x45, 0xb5, 0xae},
    {0x03, 0x1b, 0x47, 0xb5, 0x9e},
    {0x01, 0x82, 0x4d, 0xf5, 0xee},
    {0x02, 0x1b, 0x47, 0xb5, 0x9e},
    {0x05, 0x4c, 0x05, 0xb5, 0xae},
    {0x03, 0x05, 0x43, 0x0d, 0x6e},
    {0x04, 0x82, 0x4d, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x0d, 0x6e},
    {0x0b, 0x56, 0xf5, 0x40, 0xee},
    {0x03, 0x27, 0x45, 0xb5, 0xae},
    {0x01, 0x18, 0x45, 0xf5, 0xae},
    {0x02, 0x27, 0x45, 0xb5, 0xae},
    {0x06, 0x49, 0x07, 0xb5, 0x9e},
    {0x03, 0x10, 0x4c, 0xb5, 0x8f},
    {0x04, 0x18, 0x45, 0xf5, 0xae},
    {0x02, 0x10, 0x4c, 0xb5, 0x8f},
    {0x07, 0x4b, 0x05, 0xf5, 0xae},
    {0x03, 0x89, 0x4a, 0xb5, 0xff},
    {0x01, 0x0e, 0x47, 0xf5, 0x9e},
    {0x02, 0x89, 0x4a, 0xb5, 0xff},
    {0x05, 0x49, 0x07, 0xb5, 0x9e},
    {0x03, 0x06, 0x43, 0x0d, 0x6e},
    {0x04, 0x0e, 0x47, 0xf5, 0x9e},
    {0x02, 0x06, 0x43, 0x0d, 0x6e},
    {0x51, 0x0a, 0xf5, 0x00, 0xff},
    {0x03, 0x13, 0x47, 0xb5, 0x9e},
    {0x01, 0x1c, 0x45, 0xf5, 0xae},
    {0x02, 0x13, 0x47, 0xb5, 0x9e},
    {0x06, 0xda, 0x0a, 0xb5, 0xff},
    {0x03, 0x08, 0x4e, 0xb5, 0x7f},
    {0x04, 0x1c, 0x45, 0xf5, 0xae},
    {0x02, 0x08, 0x4e, 0xb5, 0x7f},
    {0x08, 0x43, 0x45, 0xb5, 0xae},
    {0x03, 0x37, 0x45, 0xb5, 0xae},
    {0x01, 0x04, 0x4e, 0xf5, 0x7f},
    {0x02, 0x37, 0x45, 0xb5, 0xae},
    {0x05, 0xda, 0x0a, 0xb5, 0xff},
    {0x03, 0x81, 0x56, 0xb5, 0xee},
    {0x04, 0x04, 0x4e, 0xf5, 0x7f},
    {0x02, 0x81, 0x56, 0xb5, 0xee},
    {0x0c, 0x56, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x4e, 0xb5, 0x7f},
    {0x01, 0x02, 0x4e, 0xf5, 0x7f},
    {0x02, 0x0a, 0x4e, 0xb5, 0x7f},
    {0x06, 0x46, 0x0c, 0xb5, 0x8f},
    {0x03, 0x04, 0x43, 0x0d, 0x6e},
    {0x04, 0x02, 0x4e, 0xf5, 0x7f},
    {0x02, 0x04, 0x43, 0x0d, 0x6e},
    {0x07, 0x45, 0x07, 0xf5, 0x9e},
    {0x03, 0x02, 0x43, 0x0d, 0x6e},
    {0x01, 0x07, 0x4e, 0xf5, 0x7f},
    {0x02, 0x02, 0x43, 0x0d, 0x6e},
    {0x05, 0x46, 0x0c, 0xb5, 0x8f},
    {0x03, 0x07, 0x43, 0x0d, 0x6e},
    {0x04, 0x07, 0x4e, 0xf5, 0x7f},
    {0x02, 0x07, 0x43, 0x0d, 0x6e},
    {0xdc, 0x44, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x45, 0xb5, 0xae},
    {0x01, 0x17, 0x45, 0xf5, 0xae},
    {0x02, 0x2d, 0x45, 0xb5, 0xae},
    {0x06, 0x54, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x41, 0x01, 0x6f},
    {0x04, 0x17, 0x45, 0xf5, 0xae},
    {0x02, 0x03, 0x41, 0x01, 0x6f},
    {0x09, 0x4b, 0x44, 0xb5, 0xbe},
    {0x03, 0x0b, 0x43, 0x01, 0x7f},
    {0x01, 0x03, 0x43, 0x41, 0x7f},
    {0x02, 0x0b, 0x43, 0x01, 0x7f},
    {0x05, 0x54, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x41, 0x01, 0x6f},
    {0x04, 0x03, 0x43, 0x41, 0x7f},
    {0x02, 0x05, 0x41, 0x01, 0x6f},
    {0x0a, 0x43, 0x44, 0xf5, 0xbe},
    {0x03, 0x35, 0x45, 0xb5, 0xae},
    {0x01, 0x1b, 0x45, 0xf5, 0xae},
    {0x02, 0x35, 0x45, 0xb5, 0xae},
    {0x06, 0xc2, 0x01, 0xb5, 0xff},
    {0x03, 0x09, 0x43, 0x01, 0x7f},
    {0x04, 0x1b, 0x45, 0xf5, 0xae},
    {0x02, 0x09, 0x43, 0x01, 0x7f},
    {0x07, 0x4c, 0x04, 0xf5, 0xbe},
    {0x03, 0x87, 0x4a, 0xb5, 0xff},
    {0x01, 0x05, 0x43, 0x41, 0x7f},
    {0x02, 0x87, 0x4a, 0xb5, 0xff},
    {0x05, 0xc2, 0x01, 0xb5, 0xff},
    {0x03, 0x06, 0x41, 0x01, 0x6f},
    {0x04, 0x05, 0x43, 0x41, 0x7f},
    {0x02, 0x06, 0x41, 0x01, 0x6f},
    {0x57, 0x02, 0xf5, 0x40, 0xff},
    {0x03, 0x23, 0x45, 0xb5, 0xae},
    {0x01, 0x27, 0x44, 0xf5, 0xbe},
    {0x02, 0x23, 0x45, 0xb5, 0xae},
    {0x06, 0x58, 0x04, 0xb5, 0xbe},
    {0x03, 0x82, 0x43, 0x04, 0xbe},
    {0x04, 0x27, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x43, 0x04, 0xbe},
    {0x08, 0x4b, 0x44, 0xb5, 0xbe},
    {0x03, 0x33, 0x45, 0xb5, 0xae},
    {0x01, 0x10, 0x47, 0xf5, 0x9e},
    {0x02, 0x33, 0x45, 0xb5, 0xae},
    {0x05, 0x58, 0x04, 0xb5, 0xbe},
    {0x03, 0x0f, 0x4c, 0xb5, 0x8f},
    {0x04, 0x10, 0x47, 0xf5, 0x9e},
    {0x02, 0x0f, 0x4c, 0xb5, 0x8f},
    {0x54, 0x02, 0xf5, 0x40, 0xff},
    {0x03, 0x3f, 0x45, 0xb5, 0xae},
    {0x01, 0x89, 0x42, 0xf5, 0xff},
    {0x02, 0x3f, 0x45, 0xb5, 0xae},
    {0x06, 0x4e, 0x05, 0xb5, 0xae},
    {0x03, 0x04, 0x41, 0x01, 0x6f},
    {0x04, 0x89, 0x42, 0xf5, 0xff},
    {0x02, 0x04, 0x41, 0x01, 0x6f},
    {0x07, 0x49, 0x05, 0xf5, 0xae},
    {0x03, 0x02, 0x41, 0x01, 0x6f},
    {0x01, 0x06, 0x43, 0x41, 0x7f},
    {0x02, 0x02, 0x41, 0x01, 0x6f},
    {0x05, 0x4e, 0x05, 0xb5, 0xae},
    {0x03, 0x07, 0x41, 0x01, 0x6f},
    {0x04, 0x06, 0x43, 0x41, 0x7f},
    {0x02, 0x07, 0x41, 0x01, 0x6f},
    {0x59, 0x02, 0xf5, 0x40, 0xff},
    {0x03, 0x0d, 0x4c, 0xb5, 0x8f},
    {0x01, 0x13, 0x45, 0xf5, 0xae},
    {0x02, 0x0d, 0x4c, 0xb5, 0x8f},
    {0x06, 0x5c, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x42, 0x0d, 0x6e},
    {0x04, 0x13, 0x45, 0xf5, 0xae},
    {0x02, 0x03, 0x42, 0x0d, 0x6e},
    {0x09, 0x45, 0x45, 0xb5, 0xae},
    {0x03, 0x97, 0x42, 0xb5, 0xff},
    {0x01, 0x08, 0x4c, 0xf5, 0x8f},
    {0x02, 0x97, 0x42, 0xb5, 0xff},
    {0x05, 0x5c, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x42, 0x0d, 0x6e},
    {0x04, 0x08, 0x4c, 0xf5, 0x8f},
    {0x02, 0x05, 0x42, 0x0d, 0x6e},
    {0x0b, 0x43, 0x44, 0xf5, 0xbe},
    {0x03, 0x2b, 0x45, 0xb5, 0xae},
    {0x01, 0x37, 0x44, 0xf5, 0xbe},
    {0x02, 0x2b, 0x45, 0xb5, 0xae},
    {0x06, 0x44, 0x0c, 0xb5, 0x8f},
    {0x03, 0x11, 0x4c, 0xb5, 0x8f},
    {0x04, 0x37, 0x44, 0xf5, 0xbe},
    {0x02, 0x11, 0x4c, 0xb5, 0x8f},
    {0x07, 0xda, 0x02, 0xf5, 0xff},
    {0x03, 0x93, 0x42, 0xb5, 0xff},
    {0x01, 0x81, 0x4d, 0xf5, 0xee},
    {0x02, 0x93, 0x42, 0xb5, 0xff},
    {0x05, 0x44, 0x0c, 0xb5, 0x8f},
    {0x03, 0x06, 0x42, 0x0d, 0x6e},
    {0x04, 0x81, 0x4d, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x0d, 0x6e},
    {0x4e, 0x0d, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x4c, 0xb5, 0x8f},
    {0x01, 0x0a, 0x4c, 0xf5, 0x8f},
    {0x02, 0x01, 0x4c, 0xb5, 0x8f},
    {0x06, 0x42, 0x0c, 0xb5, 0x8f},
    {0x03, 0x08, 0x43, 0x01, 0x7f},
    {0x04, 0x0a, 0x4c, 0xf5, 0x8f},
    {0x02, 0x08, 0x43, 0x01, 0x7f},
    {0x08, 0x45, 0x45, 0xb5, 0xae},
    {0x03, 0x83, 0x4d, 0xb5, 0xee},
    {0x01, 0x04, 0x43, 0x41, 0x7f},
    {0x02, 0x83, 0x4d, 0xb5, 0xee},
    {0x05, 0x42, 0x0c, 0xb5, 0x8f},
    {0x03, 0x81, 0x43, 0x04, 0xbe},
    {0x04, 0x04, 0x43, 0x41, 0x7f},
    {0x02, 0x81, 0x43, 0x04, 0xbe},
    {0x0c, 0x43, 0x44, 0xf5, 0xbe},
    {0x03, 0x0a, 0x43, 0x01, 0x7f},
    {0x01, 0x02, 0x43, 0x41, 0x7f},
    {0x02, 0x0a, 0x43, 0x01, 0x7f},
    {0x06, 0x47, 0x0c, 0xb5, 0x8f},
    {0x03, 0x04, 0x42, 0x0d, 0x6e},
    {0x04, 0x02, 0x43, 0x41, 0x7f},
    {0x02, 0x04, 0x42, 0x0d, 0x6e},
    {0x07, 0x46, 0x07, 0xf5, 0x9e},
    {0x03, 0x02, 0x42, 0x0d, 0x6e},
    {0x01, 0x07, 0x43, 0x41, 0x7f},
    {0x02, 0x02, 0x42, 0x0d, 0x6e},
    {0x05, 0x47, 0x0c, 0xb5, 0x8f},
    {0x03, 0x07, 0x42, 0x0d, 0x6e},
    {0x04, 0x07, 0x43, 0x41, 0x7f},
    {0x02, 0x07, 0x42, 0x0d, 0x6e},
    {0xf4, 0x41, 0xf5, 0x40, 0x0f},
    {0x03, 0x1d, 0x45, 0xb5, 0xae},
    {0x01, 0x2d, 0x44, 0xf5, 0xbe},
    {0x02, 0x1d, 0x45, 0xb5, 0xae},
    {0x06, 0x57, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x46, 0x0a, 0x6f},
    {0x04, 0x2d, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x46, 0x0a, 0x6f},
    {0x09, 0x4c, 0x42, 0xb5, 0xce},
    {0x03, 0x0b, 0x41, 0x0a, 0x7f},
    {0x01, 0x03, 0x41, 0x4a, 0x7f},
    {0x02, 0x0b, 0x41, 0x0a, 0x7f},
    {0x05, 0x57, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x46, 0x0a, 0x6f},
    {0x04, 0x03, 0x41, 0x4a, 0x7f},
    {0x02, 0x05, 0x46, 0x0a, 0x6f},
    {0x0a, 0x4b, 0x42, 0xf5, 0xce},
    {0x03, 0x0c, 0x43, 0x0a, 0x8f},
    {0x01, 0x0b, 0x43, 0x4a, 0x8f},
    {0x02, 0x0c, 0x43, 0x0a, 0x8f},
    {0x06, 0x43, 0x03, 0x0a, 0x8f},
    {0x03, 0x09, 0x41, 0x0a, 0x7f},
    {0x04, 0x0b, 0x43, 0x4a, 0x8f},
    {0x02, 0x09, 0x41, 0x0a, 0x7f},
    {0x07, 0x54, 0x02, 0xf5, 0xce},
    {0x03, 0x9a, 0x43, 0x02, 0xce},
    {0x01, 0x05, 0x41, 0x4a, 0x7f},
    {0x02, 0x9a, 0x43, 0x02, 0xce},
    {0x05, 0x43, 0x03, 0x0a, 0x8f},
    {0x03, 0x06, 0x46, 0x0a, 0x6f},
    {0x04, 0x05, 0x41, 0x4a, 0x7f},
    {0x02, 0x06, 0x46, 0x0a, 0x6f},
    {0x4d, 0x03, 0x02, 0xb5, 0xce},
    {0x03, 0x21, 0x45, 0xb5, 0xae},
    {0x01, 0x35, 0x44, 0xf5, 0xbe},
    {0x02, 0x21, 0x45, 0xb5, 0xae},
    {0x06, 0x5b, 0x04, 0xb5, 0xbe},
    {0x03, 0x82, 0x4b, 0x02, 0xce},
    {0x04, 0x35, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x4b, 0x02, 0xce},
    {0x08, 0x4c, 0x42, 0xb5, 0xce},
    {0x03, 0x31, 0x45, 0xb5, 0xae},
    {0x01, 0x09, 0x43, 0x4a, 0x8f},
    {0x02, 0x31, 0x45, 0xb5, 0xae},
    {0x05, 0x5b, 0x04, 0xb5, 0xbe},
    {0x03, 0x0e, 0x43, 0x0a, 0x8f},
    {0x04, 0x09, 0x43, 0x4a, 0x8f},
    {0x02, 0x0e, 0x43, 0x0a, 0x8f},
    {0xc2, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x3d, 0x45, 0xb5, 0xae},
    {0x01, 0x87, 0x42, 0xf5, 0xff},
    {0x02, 0x3d, 0x45, 0xb5, 0xae},
    {0x06, 0x45, 0x03, 0x0a, 0x8f},
    {0x03, 0x04, 0x46, 0x0a, 0x6f},
    {0x04, 0x87, 0x42, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0x0a, 0x6f},
    {0x07, 0xc2, 0x0a, 0xf5, 0xff},
    {0x03, 0x02, 0x46, 0x0a, 0x6f},
    {0x01, 0x06, 0x41, 0x4a, 0x7f},
    {0x02, 0x02, 0x46, 0x0a, 0x6f},
    {0x05, 0x45, 0x03, 0x0a, 0x8f},
    {0x03, 0x07, 0x46, 0x0a, 0x6f},
    {0x04, 0x06, 0x41, 0x4a, 0x7f},
    {0x02, 0x07, 0x46, 0x0a, 0x6f},
    {0x78, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x45, 0xb5, 0xae},
    {0x01, 0x23, 0x44, 0xf5, 0xbe},
    {0x02, 0x2f, 0x45, 0xb5, 0xae},
    {0x06, 0x67, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x03, 0x6c},
    {0x04, 0x23, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x03, 0x6c},
    {0x09, 0x49, 0x44, 0xb5, 0xbe},
    {0x03, 0x3b, 0x45, 0xb5, 0xae},
    {0x01, 0x82, 0x43, 0x42, 0xce},
    {0x02, 0x3b, 0x45, 0xb5, 0xae},
    {0x05, 0x67, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x03, 0x6c},
    {0x04, 0x82, 0x43, 0x42, 0xce},
    {0x02, 0x05, 0x43, 0x03, 0x6c},
    {0x0b, 0x4b, 0x42, 0xf5, 0xce},
    {0x03, 0x29, 0x45, 0xb5, 0xae},
    {0x01, 0x33, 0x44, 0xf5, 0xbe},
    {0x02, 0x29, 0x45, 0xb5, 0xae},
    {0x06, 0x50, 0x05, 0xb5, 0xae},
    {0x03, 0x10, 0x43, 0x0a, 0x8f},
    {0x04, 0x33, 0x44, 0xf5, 0xbe},
    {0x02, 0x10, 0x43, 0x0a, 0x8f},
    {0x07, 0x58, 0x02, 0xf5, 0xce},
    {0x03, 0x8f, 0x42, 0xb5, 0xff},
    {0x01, 0x0f, 0x47, 0xf5, 0x9e},
    {0x02, 0x8f, 0x42, 0xb5, 0xff},
    {0x05, 0x50, 0x05, 0xb5, 0xae},
    {0x03, 0x06, 0x43, 0x03, 0x6c},
    {0x04, 0x0f, 0x47, 0xf5, 0x9e},
    {0x02, 0x06, 0x43, 0x03, 0x6c},
    {0x5e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x45, 0xb5, 0xae},
    {0x01, 0x3f, 0x44, 0xf5, 0xbe},
    {0x02, 0x1f, 0x45, 0xb5, 0xae},
    {0x06, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x41, 0x0a, 0x7f},
    {0x04, 0x3f, 0x44, 0xf5, 0xbe},
    {0x02, 0x08, 0x41, 0x0a, 0x7f},
    {0x08, 0x49, 0x44, 0xb5, 0xbe},
    {0x03, 0x39, 0x45, 0xb5, 0xae},
    {0x01, 0x04, 0x41, 0x4a, 0x7f},
    {0x02, 0x39, 0x45, 0xb5, 0xae},
    {0x05, 0xc9, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4b, 0x02, 0xce},
    {0x04, 0x04, 0x41, 0x4a, 0x7f},
    {0x02, 0x81, 0x4b, 0x02, 0xce},
    {0x0c, 0x4b, 0x42, 0xf5, 0xce},
    {0x03, 0x0a, 0x41, 0x0a, 0x7f},
    {0x01, 0x02, 0x41, 0x4a, 0x7f},
    {0x02, 0x0a, 0x41, 0x0a, 0x7f},
    {0x06, 0x46, 0x03, 0x0a, 0x8f},
    {0x03, 0x04, 0x43, 0x03, 0x6c},
    {0x04, 0x02, 0x41, 0x4a, 0x7f},
    {0x02, 0x04, 0x43, 0x03, 0x6c},
    {0x07, 0x4e, 0x04, 0xf5, 0xbe},
    {0x03, 0x02, 0x43, 0x03, 0x6c},
    {0x01, 0x07, 0x41, 0x4a, 0x7f},
    {0x02, 0x02, 0x43, 0x03, 0x6c},
    {0x05, 0x46, 0x03, 0x0a, 0x8f},
    {0x03, 0x07, 0x43, 0x03, 0x6c},
    {0x04, 0x07, 0x41, 0x4a, 0x7f},
    {0x02, 0x07, 0x43, 0x03, 0x6c},
    {0xdd, 0x44, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x47, 0xb5, 0x9e},
    {0x01, 0x0d, 0x47, 0xf5, 0x9e},
    {0x02, 0x16, 0x47, 0xb5, 0x9e},
    {0x06, 0x53, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x44, 0x01, 0x6f},
    {0x04, 0x0d, 0x47, 0xf5, 0x9e},
    {0x02, 0x03, 0x44, 0x01, 0x6f},
    {0x09, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x42, 0x01, 0x7f},
    {0x01, 0x03, 0x42, 0x41, 0x7f},
    {0x02, 0x0b, 0x42, 0x01, 0x7f},
    {0x05, 0x53, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x44, 0x01, 0x6f},
    {0x04, 0x03, 0x42, 0x41, 0x7f},
    {0x02, 0x05, 0x44, 0x01, 0x6f},
    {0x0a, 0x45, 0x44, 0xf5, 0xbe},
    {0x03, 0x1a, 0x47, 0xb5, 0x9e},
    {0x01, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x47, 0xb5, 0x9e},
    {0x06, 0x48, 0x07, 0xb5, 0x9e},
    {0x03, 0x09, 0x42, 0x01, 0x7f},
    {0x04, 0x97, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x01, 0x7f},
    {0x07, 0x5c, 0x02, 0xf5, 0xce},
    {0x03, 0x8b, 0x42, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x41, 0x7f},
    {0x02, 0x8b, 0x42, 0xb5, 0xff},
    {0x05, 0x48, 0x07, 0xb5, 0x9e},
    {0x03, 0x06, 0x44, 0x01, 0x6f},
    {0x04, 0x05, 0x42, 0x41, 0x7f},
    {0x02, 0x06, 0x44, 0x01, 0x6f},
    {0x79, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x45, 0xb5, 0xae},
    {0x01, 0x2b, 0x44, 0xf5, 0xbe},
    {0x02, 0x25, 0x45, 0xb5, 0xae},
    {0x06, 0x77, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x45, 0x04, 0xbe},
    {0x04, 0x2b, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x45, 0x04, 0xbe},
    {0x08, 0xda, 0xf5, 0x00, 0x0c},
    {0x03, 0x19, 0x47, 0xb5, 0x9e},
    {0x01, 0x11, 0x47, 0xf5, 0x9e},
    {0x02, 0x19, 0x47, 0xb5, 0x9e},
    {0x05, 0x77, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0x0a, 0x8f},
    {0x04, 0x11, 0x47, 0xf5, 0x9e},
    {0x02, 0x0f, 0x43, 0x0a, 0x8f},
    {0x55, 0x02, 0xf5, 0x40, 0xff},
    {0x03, 0x85, 0x4a, 0xb5, 0xff},
    {0x01, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x4a, 0xb5, 0xff},
    {0x06, 0xc1, 0x01, 0xb5, 0xff},
    {0x03, 0x04, 0x44, 0x01, 0x6f},
    {0x04, 0x93, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x01, 0x6f},
    {0x07, 0x44, 0x07, 0xf5, 0x9e},
    {0x03, 0x02, 0x44, 0x01, 0x6f},
    {0x01, 0x06, 0x42, 0x41, 0x7f},
    {0x02, 0x02, 0x44, 0x01, 0x6f},
    {0x05, 0xc1, 0x01, 0xb5, 0xff},
    {0x03, 0x07, 0x44, 0x01, 0x6f},
    {0x04, 0x06, 0x42, 0x41, 0x7f},
    {0x02, 0x07, 0x44, 0x01, 0x6f},
    {0x76, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x43, 0x0a, 0x8f},
    {0x01, 0x01, 0x47, 0xf5, 0x9e},
    {0x02, 0x0d, 0x43, 0x0a, 0x8f},
    {0x06, 0x4a, 0x07, 0xb5, 0x9e},
    {0x03, 0x03, 0x42, 0x03, 0x6c},
    {0x04, 0x01, 0x47, 0xf5, 0x9e},
    {0x02, 0x03, 0x42, 0x03, 0x6c},
    {0x09, 0x46, 0x45, 0xb5, 0xae},
    {0x03, 0x12, 0x47, 0xb5, 0x9e},
    {0x01, 0x08, 0x43, 0x4a, 0x8f},
    {0x02, 0x12, 0x47, 0xb5, 0x9e},
    {0x05, 0x4a, 0x07, 0xb5, 0x9e},
    {0x03, 0x05, 0x42, 0x03, 0x6c},
    {0x04, 0x08, 0x43, 0x4a, 0x8f},
    {0x02, 0x05, 0x42, 0x03, 0x6c},
    {0x0b, 0x45, 0x44, 0xf5, 0xbe},
    {0x03, 0x15, 0x47, 0xb5, 0x9e},
    {0x01, 0x83, 0x41, 0xf5, 0xff},
    {0x02, 0x15, 0x47, 0xb5, 0x9e},
    {0x06, 0x44, 0x03, 0x0a, 0x8f},
    {0x03, 0x11, 0x43, 0x0a, 0x8f},
    {0x04, 0x83, 0x41, 0xf5, 0xff},
    {0x02, 0x11, 0x43, 0x0a, 0x8f},
    {0x07, 0x42, 0x07, 0xf5, 0x9e},
    {0x03, 0x84, 0x41, 0xb5, 0xff},
    {0x01, 0x81, 0x43, 0x42, 0xce},
    {0x02, 0x84, 0x41, 0xb5, 0xff},
    {0x05, 0x44, 0x03, 0x0a, 0x8f},
    {0x03, 0x06, 0x42, 0x03, 0x6c},
    {0x04, 0x81, 0x43, 0x42, 0xce},
    {0x02, 0x06, 0x42, 0x03, 0x6c},
    {0x4e, 0x03, 0x02, 0xb5, 0xce},
    {0x03, 0x01, 0x43, 0x0a, 0x8f},
    {0x01, 0x0a, 0x43, 0x4a, 0x8f},
    {0x02, 0x01, 0x43, 0x0a, 0x8f},
    {0x06, 0x42, 0x03, 0x0a, 0x8f},
    {0x03, 0x08, 0x42, 0x01, 0x7f},
    {0x04, 0x0a, 0x43, 0x4a, 0x8f},
    {0x02, 0x08, 0x42, 0x01, 0x7f},
    {0x08, 0x46, 0x45, 0xb5, 0xae},
    {0x03, 0x83, 0x43, 0x02, 0xce},
    {0x01, 0x04, 0x42, 0x41, 0x7f},
    {0x02, 0x83, 0x43, 0x02, 0xce},
    {0x05, 0x42, 0x03, 0x0a, 0x8f},
    {0x03, 0x81, 0x45, 0x04, 0xbe},
    {0x04, 0x04, 0x42, 0x41, 0x7f},
    {0x02, 0x81, 0x45, 0x04, 0xbe},
    {0x0c, 0x45, 0x44, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0x01, 0x7f},
    {0x01, 0x02, 0x42, 0x41, 0x7f},
    {0x02, 0x0a, 0x42, 0x01, 0x7f},
    {0x06, 0x47, 0x03, 0x0a, 0x8f},
    {0x03, 0x04, 0x42, 0x03, 0x6c},
    {0x04, 0x02, 0x42, 0x41, 0x7f},
    {0x02, 0x04, 0x42, 0x03, 0x6c},
    {0x07, 0x47, 0x07, 0xf5, 0x9e},
    {0x03, 0x02, 0x42, 0x03, 0x6c},
    {0x01, 0x07, 0x42, 0x41, 0x7f},
    {0x02, 0x02, 0x42, 0x03, 0x6c},
    {0x05, 0x47, 0x03, 0x0a, 0x8f},
    {0x03, 0x07, 0x42, 0x03, 0x6c},
    {0x04, 0x07, 0x42, 0x41, 0x7f},
    {0x02, 0x07, 0x42, 0x03, 0x6c},
    {0xf4, 0x4a, 0xf5, 0x40, 0x0f},
    {0x03, 0xa0, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x44, 0xf5, 0xbe},
    {0x02, 0xa0, 0xf5, 0x00, 0x0e},
    {0x06, 0x6d, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x49, 0xb5, 0x6c},
    {0x04, 0x1d, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x49, 0xb5, 0x6c},
    {0x09, 0x62, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0x02, 0x7f},
    {0x01, 0x03, 0x46, 0x42, 0x7f},
    {0x02, 0x0b, 0x46, 0x02, 0x7f},
    {0x05, 0x6d, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x49, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0x42, 0x7f},
    {0x02, 0x05, 0x49, 0xb5, 0x6c},
    {0x0a, 0x5a, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x41, 0x02, 0x8f},
    {0x01, 0x0b, 0x41, 0x42, 0x8f},
    {0x02, 0x0c, 0x41, 0x02, 0x8f},
    {0x06, 0x43, 0x01, 0x02, 0x8f},
    {0x03, 0x09, 0x46, 0x02, 0x7f},
    {0x04, 0x0b, 0x41, 0x42, 0x8f},
    {0x02, 0x09, 0x46, 0x02, 0x7f},
    {0x07, 0x57, 0x02, 0xf5, 0xce},
    {0x03, 0x9a, 0x52, 0xb5, 0xff},
    {0x01, 0x05, 0x46, 0x42, 0x7f},
    {0x02, 0x9a, 0x52, 0xb5, 0xff},
    {0x05, 0x43, 0x01, 0x02, 0x8f},
    {0x03, 0x06, 0x49, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0x42, 0x7f},
    {0x02, 0x06, 0x49, 0xb5, 0x6c},
    {0x4d, 0x12, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x43, 0x02, 0x9f},
    {0x01, 0x0c, 0x43, 0x42, 0x9f},
    {0x02, 0x14, 0x43, 0x02, 0x9f},
    {0x06, 0x4b, 0x03, 0x02, 0x9f},
    {0x03, 0x82, 0x5a, 0xb5, 0xee},
    {0x04, 0x0c, 0x43, 0x42, 0x9f},
    {0x02, 0x82, 0x5a, 0xb5, 0xee},
    {0x08, 0x62, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0x02, 0x9f},
    {0x01, 0x09, 0x41, 0x42, 0x8f},
    {0x02, 0x18, 0x43, 0x02, 0x9f},
    {0x05, 0x4b, 0x03, 0x02, 0x9f},
    {0x03, 0x0e, 0x41, 0x02, 0x8f},
    {0x04, 0x09, 0x41, 0x42, 0x8f},
    {0x02, 0x0e, 0x41, 0x02, 0x8f},
    {0x4f, 0x08, 0xb5, 0x40, 0xee},
    {0x03, 0x1c, 0x43, 0x02, 0x9f},
    {0x01, 0x9a, 0x48, 0xf5, 0xee},
    {0x02, 0x1c, 0x43, 0x02, 0x9f},
    {0x06, 0x45, 0x01, 0x02, 0x8f},
    {0x03, 0x04, 0x49, 0xb5, 0x6c},
    {0x04, 0x9a, 0x48, 0xf5, 0xee},
    {0x02, 0x04, 0x49, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0x42, 0x9f},
    {0x03, 0x02, 0x49, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0x42, 0x7f},
    {0x02, 0x02, 0x49, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0x02, 0x8f},
    {0x03, 0x07, 0x49, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0x42, 0x7f},
    {0x02, 0x07, 0x49, 0xb5, 0x6c},
    {0x74, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x43, 0x02, 0x9f},
    {0x01, 0x21, 0x44, 0xf5, 0xbe},
    {0x02, 0x17, 0x43, 0x02, 0x9f},
    {0x06, 0x75, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x12, 0x6f},
    {0x04, 0x21, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x12, 0x6f},
    {0x09, 0xc2, 0x42, 0xb5, 0xff},
    {0x03, 0x1b, 0x43, 0x02, 0x9f},
    {0x01, 0x82, 0x52, 0xf5, 0xff},
    {0x02, 0x1b, 0x43, 0x02, 0x9f},
    {0x05, 0x75, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x12, 0x6f},
    {0x04, 0x82, 0x52, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x12, 0x6f},
    {0x0b, 0x5a, 0xf5, 0x40, 0xee},
    {0x03, 0x28, 0x45, 0xb5, 0xae},
    {0x01, 0x31, 0x44, 0xf5, 0xbe},
    {0x02, 0x28, 0x45, 0xb5, 0xae},
    {0x06, 0x49, 0x03, 0x02, 0x9f},
    {0x03, 0x10, 0x41, 0x02, 0x8f},
    {0x04, 0x31, 0x44, 0xf5, 0xbe},
    {0x02, 0x10, 0x41, 0x02, 0x8f},
    {0x07, 0x5b, 0x02, 0xf5, 0xce},
    {0x03, 0x8d, 0x42, 0xb5, 0xff},
    {0x01, 0x0e, 0x43, 0x42, 0x9f},
    {0x02, 0x8d, 0x42, 0xb5, 0xff},
    {0x05, 0x49, 0x03, 0x02, 0x9f},
    {0x03, 0x06, 0x43, 0x12, 0x6f},
    {0x04, 0x0e, 0x43, 0x42, 0x9f},
    {0x02, 0x06, 0x43, 0x12, 0x6f},
    {0x70, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0x02, 0x9f},
    {0x01, 0x3d, 0x44, 0xf5, 0xbe},
    {0x02, 0x13, 0x43, 0x02, 0x9f},
    {0x06, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0x02, 0x7f},
    {0x04, 0x3d, 0x44, 0xf5, 0xbe},
    {0x02, 0x08, 0x46, 0x02, 0x7f},
    {0x08, 0xc2, 0x42, 0xb5, 0xff},
    {0x03, 0x38, 0x45, 0xb5, 0xae},
    {0x01, 0x04, 0x46, 0x42, 0x7f},
    {0x02, 0x38, 0x45, 0xb5, 0xae},
    {0x05, 0xc7, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x5a, 0xb5, 0xee},
    {0x04, 0x04, 0x46, 0x42, 0x7f},
    {0x02, 0x81, 0x5a, 0xb5, 0xee},
    {0x0c, 0x5a, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x46, 0x02, 0x7f},
    {0x01, 0x02, 0x46, 0x42, 0x7f},
    {0x02, 0x0a, 0x46, 0x02, 0x7f},
    {0x06, 0x46, 0x01, 0x02, 0x8f},
    {0x03, 0x04, 0x43, 0x12, 0x6f},
    {0x04, 0x02, 0x46, 0x42, 0x7f},
    {0x02, 0x04, 0x43, 0x12, 0x6f},
    {0x07, 0x45, 0x03, 0x42, 0x9f},
    {0x03, 0x02, 0x43, 0x12, 0x6f},
    {0x01, 0x07, 0x46, 0x42, 0x7f},
    {0x02, 0x02, 0x43, 0x12, 0x6f},
    {0x05, 0x46, 0x01, 0x02, 0x8f},
    {0x03, 0x07, 0x43, 0x12, 0x6f},
    {0x04, 0x07, 0x46, 0x42, 0x7f},
    {0x02, 0x07, 0x43, 0x12, 0x6f},
    {0xe1, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x45, 0xb5, 0xae},
    {0x01, 0x2f, 0x44, 0xf5, 0xbe},
    {0x02, 0x2e, 0x45, 0xb5, 0xae},
    {0x06, 0x63, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x08, 0x6e},
    {0x04, 0x2f, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x41, 0x08, 0x6e},
    {0x09, 0x72, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x08, 0x7e},
    {0x01, 0x03, 0x43, 0x48, 0x7e},
    {0x02, 0x0b, 0x43, 0x08, 0x7e},
    {0x05, 0x63, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x08, 0x6e},
    {0x04, 0x03, 0x43, 0x48, 0x7e},
    {0x02, 0x05, 0x41, 0x08, 0x6e},
    {0x0a, 0x49, 0x42, 0xf5, 0xce},
    {0x03, 0x36, 0x45, 0xb5, 0xae},
    {0x01, 0x3b, 0x44, 0xf5, 0xbe},
    {0x02, 0x36, 0x45, 0xb5, 0xae},
    {0x06, 0xc2, 0x08, 0xb5, 0xee},
    {0x03, 0x09, 0x43, 0x08, 0x7e},
    {0x04, 0x3b, 0x44, 0xf5, 0xbe},
    {0x02, 0x09, 0x43, 0x08, 0x7e},
    {0x07, 0x68, 0x02, 0xf5, 0xdf},
    {0x03, 0x88, 0x4a, 0xb5, 0xff},
    {0x01, 0x05, 0x43, 0x48, 0x7e},
    {0x02, 0x88, 0x4a, 0xb5, 0xff},
    {0x05, 0xc2, 0x08, 0xb5, 0xee},
    {0x03, 0x06, 0x41, 0x08, 0x6e},
    {0x04, 0x05, 0x43, 0x48, 0x7e},
    {0x02, 0x06, 0x41, 0x08, 0x6e},
    {0x6c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x45, 0xb5, 0xae},
    {0x01, 0x29, 0x44, 0xf5, 0xbe},
    {0x02, 0x24, 0x45, 0xb5, 0xae},
    {0x06, 0x73, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x49, 0x02, 0xce},
    {0x04, 0x29, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x49, 0x02, 0xce},
    {0x08, 0x72, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x45, 0xb5, 0xae},
    {0x01, 0x10, 0x43, 0x42, 0x9f},
    {0x02, 0x34, 0x45, 0xb5, 0xae},
    {0x05, 0x73, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x41, 0x02, 0x8f},
    {0x04, 0x10, 0x43, 0x42, 0x9f},
    {0x02, 0x0f, 0x41, 0x02, 0x8f},
    {0x64, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x45, 0xb5, 0xae},
    {0x01, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x45, 0xb5, 0xae},
    {0x06, 0x4f, 0x05, 0xb5, 0xae},
    {0x03, 0x04, 0x41, 0x08, 0x6e},
    {0x04, 0x8f, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x08, 0x6e},
    {0x07, 0x50, 0x04, 0xf5, 0xbe},
    {0x03, 0x02, 0x41, 0x08, 0x6e},
    {0x01, 0x06, 0x43, 0x48, 0x7e},
    {0x02, 0x02, 0x41, 0x08, 0x6e},
    {0x05, 0x4f, 0x05, 0xb5, 0xae},
    {0x03, 0x07, 0x41, 0x08, 0x6e},
    {0x04, 0x06, 0x43, 0x48, 0x7e},
    {0x02, 0x07, 0x41, 0x08, 0x6e},
    {0xc6, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x41, 0x02, 0x8f},
    {0x01, 0x1f, 0x44, 0xf5, 0xbe},
    {0x02, 0x0d, 0x41, 0x02, 0x8f},
    {0x06, 0x7f, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0x12, 0x6f},
    {0x04, 0x1f, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x42, 0x12, 0x6f},
    {0x09, 0x4e, 0x42, 0xb5, 0xce},
    {0x03, 0x99, 0x42, 0xb5, 0xff},
    {0x01, 0x08, 0x41, 0x42, 0x8f},
    {0x02, 0x99, 0x42, 0xb5, 0xff},
    {0x05, 0x7f, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0x12, 0x6f},
    {0x04, 0x08, 0x41, 0x42, 0x8f},
    {0x02, 0x05, 0x42, 0x12, 0x6f},
    {0x0b, 0x49, 0x42, 0xf5, 0xce},
    {0x03, 0x2c, 0x45, 0xb5, 0xae},
    {0x01, 0x39, 0x44, 0xf5, 0xbe},
    {0x02, 0x2c, 0x45, 0xb5, 0xae},
    {0x06, 0x44, 0x01, 0x02, 0x8f},
    {0x03, 0x11, 0x41, 0x02, 0x8f},
    {0x04, 0x39, 0x44, 0xf5, 0xbe},
    {0x02, 0x11, 0x41, 0x02, 0x8f},
    {0x07, 0xce, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0x42, 0xb5, 0xff},
    {0x01, 0x81, 0x52, 0xf5, 0xff},
    {0x02, 0x95, 0x42, 0xb5, 0xff},
    {0x05, 0x44, 0x01, 0x02, 0x8f},
    {0x03, 0x06, 0x42, 0x12, 0x6f},
    {0x04, 0x81, 0x52, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x12, 0x6f},
    {0x4e, 0x12, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x41, 0x02, 0x8f},
    {0x01, 0x0a, 0x41, 0x42, 0x8f},
    {0x02, 0x01, 0x41, 0x02, 0x8f},
    {0x06, 0x42, 0x01, 0x02, 0x8f},
    {0x03, 0x08, 0x43, 0x08, 0x7e},
    {0x04, 0x0a, 0x41, 0x42, 0x8f},
    {0x02, 0x08, 0x43, 0x08, 0x7e},
    {0x08, 0x4e, 0x42, 0xb5, 0xce},
    {0x03, 0x83, 0x52, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0x48, 0x7e},
    {0x02, 0x83, 0x52, 0xb5, 0xff},
    {0x05, 0x42, 0x01, 0x02, 0x8f},
    {0x03, 0x81, 0x49, 0x02, 0xce},
    {0x04, 0x04, 0x43, 0x48, 0x7e},
    {0x02, 0x81, 0x49, 0x02, 0xce},
    {0x0c, 0x49, 0x42, 0xf5, 0xce},
    {0x03, 0x0a, 0x43, 0x08, 0x7e},
    {0x01, 0x02, 0x43, 0x48, 0x7e},
    {0x02, 0x0a, 0x43, 0x08, 0x7e},
    {0x06, 0x47, 0x01, 0x02, 0x8f},
    {0x03, 0x04, 0x42, 0x12, 0x6f},
    {0x04, 0x02, 0x43, 0x48, 0x7e},
    {0x02, 0x04, 0x42, 0x12, 0x6f},
    {0x07, 0x46, 0x03, 0x42, 0x9f},
    {0x03, 0x02, 0x42, 0x12, 0x6f},
    {0x01, 0x07, 0x43, 0x48, 0x7e},
    {0x02, 0x02, 0x42, 0x12, 0x6f},
    {0x05, 0x47, 0x01, 0x02, 0x8f},
    {0x03, 0x07, 0x42, 0x12, 0x6f},
    {0x04, 0x07, 0x43, 0x48, 0x7e},
    {0x02, 0x07, 0x42, 0x12, 0x6f},
    {0xf4, 0x48, 0xf5, 0x00, 0x0e},
    {0x03, 0x1e, 0x45, 0xb5, 0xae},
    {0x01, 0x16, 0x45, 0xf5, 0xae},
    {0x02, 0x1e, 0x45, 0xb5, 0xae},
    {0x06, 0x4d, 0x05, 0xb5, 0xae},
    {0x03, 0x03, 0x45, 0x0a, 0x6f},
    {0x04, 0x16, 0x45, 0xf5, 0xae},
    {0x02, 0x03, 0x45, 0x0a, 0x6f},
    {0x09, 0x7e, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x44, 0x0a, 0x7f},
    {0x01, 0x03, 0x44, 0x4a, 0x7f},
    {0x02, 0x0b, 0x44, 0x0a, 0x7f},
    {0x05, 0x4d, 0x05, 0xb5, 0xae},
    {0x03, 0x05, 0x45, 0x0a, 0x6f},
    {0x04, 0x03, 0x44, 0x4a, 0x7f},
    {0x02, 0x05, 0x45, 0x0a, 0x6f},
    {0x0a, 0xca, 0xf5, 0x40, 0x0f},
    {0x03, 0x0c, 0x42, 0x0a, 0x8f},
    {0x01, 0x0b, 0x42, 0x4a, 0x8f},
    {0x02, 0x0c, 0x42, 0x0a, 0x8f},
    {0x06, 0x43, 0x02, 0x0a, 0x8f},
    {0x03, 0x09, 0x44, 0x0a, 0x7f},
    {0x04, 0x0b, 0x42, 0x4a, 0x8f},
    {0x02, 0x09, 0x44, 0x0a, 0x7f},
    {0x07, 0x53, 0x02, 0xf5, 0xce},
    {0x03, 0x9a, 0x45, 0x02, 0xce},
    {0x01, 0x05, 0x44, 0x4a, 0x7f},
    {0x02, 0x9a, 0x45, 0x02, 0xce},
    {0x05, 0x43, 0x02, 0x0a, 0x8f},
    {0x03, 0x06, 0x45, 0x0a, 0x6f},
    {0x04, 0x05, 0x44, 0x4a, 0x7f},
    {0x02, 0x06, 0x45, 0x0a, 0x6f},
    {0x4d, 0x05, 0x02, 0xb5, 0xce},
    {0x03, 0x22, 0x45, 0xb5, 0xae},
    {0x01, 0x1a, 0x45, 0xf5, 0xae},
    {0x02, 0x22, 0x45, 0xb5, 0xae},
    {0x06, 0xd8, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xca, 0xb5, 0x0f},
    {0x04, 0x1a, 0x45, 0xf5, 0xae},
    {0x02, 0x82, 0xca, 0xb5, 0x0f},
    {0x08, 0x7e, 0xf5, 0x00, 0xee},
    {0x03, 0x32, 0x45, 0xb5, 0xae},
    {0x01, 0x09, 0x42, 0x4a, 0x8f},
    {0x02, 0x32, 0x45, 0xb5, 0xae},
    {0x05, 0xd8, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0x0a, 0x8f},
    {0x04, 0x09, 0x42, 0x4a, 0x8f},
    {0x02, 0x0e, 0x42, 0x0a, 0x8f},
    {0x5c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x45, 0xb5, 0xae},
    {0x01, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x45, 0xb5, 0xae},
    {0x06, 0x45, 0x02, 0x0a, 0x8f},
    {0x03, 0x04, 0x45, 0x0a, 0x6f},
    {0x04, 0x8b, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0x0a, 0x6f},
    {0x07, 0x48, 0x05, 0xf5, 0xae},
    {0x03, 0x02, 0x45, 0x0a, 0x6f},
    {0x01, 0x06, 0x44, 0x4a, 0x7f},
    {0x02, 0x02, 0x45, 0x0a, 0x6f},
    {0x05, 0x45, 0x02, 0x0a, 0x8f},
    {0x03, 0x07, 0x45, 0x0a, 0x6f},
    {0x04, 0x06, 0x44, 0x4a, 0x7f},
    {0x02, 0x07, 0x45, 0x0a, 0x6f},
    {0x7c, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x30, 0x45, 0xb5, 0xae},
    {0x01, 0x25, 0x44, 0xf5, 0xbe},
    {0x02, 0x30, 0x45, 0xb5, 0xae},
    {0x06, 0x6b, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x05, 0x6c},
    {0x04, 0x25, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x05, 0x6c},
    {0x09, 0x44, 0x45, 0xb5, 0xae},
    {0x03, 0x3c, 0x45, 0xb5, 0xae},
    {0x01, 0x82, 0x45, 0x42, 0xce},
    {0x02, 0x3c, 0x45, 0xb5, 0xae},
    {0x05, 0x6b, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x05, 0x6c},
    {0x04, 0x82, 0x45, 0x42, 0xce},
    {0x02, 0x05, 0x43, 0x05, 0x6c},
    {0x0b, 0xca, 0xf5, 0x40, 0x0f},
    {0x03, 0x2a, 0x45, 0xb5, 0xae},
    {0x01, 0x19, 0x45, 0xf5, 0xae},
    {0x02, 0x2a, 0x45, 0xb5, 0xae},
    {0x06, 0x51, 0x05, 0xb5, 0xae},
    {0x03, 0x10, 0x42, 0x0a, 0x8f},
    {0x04, 0x19, 0x45, 0xf5, 0xae},
    {0x02, 0x10, 0x42, 0x0a, 0x8f},
    {0x07, 0x78, 0x02, 0xf5, 0xdf},
    {0x03, 0x91, 0x42, 0xb5, 0xff},
    {0x01, 0x0f, 0x43, 0x42, 0x9f},
    {0x02, 0x91, 0x42, 0xb5, 0xff},
    {0x05, 0x51, 0x05, 0xb5, 0xae},
    {0x03, 0x06, 0x43, 0x05, 0x6c},
    {0x04, 0x0f, 0x43, 0x42, 0x9f},
    {0x02, 0x06, 0x43, 0x05, 0x6c},
    {0x68, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x45, 0xb5, 0xae},
    {0x01, 0x85, 0x42, 0xf5, 0xff},
    {0x02, 0x20, 0x45, 0xb5, 0xae},
    {0x06, 0xd4, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0x0a, 0x7f},
    {0x04, 0x85, 0x42, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0x0a, 0x7f},
    {0x08, 0x44, 0x45, 0xb5, 0xae},
    {0x03, 0x3a, 0x45, 0xb5, 0xae},
    {0x01, 0x04, 0x44, 0x4a, 0x7f},
    {0x02, 0x3a, 0x45, 0xb5, 0xae},
    {0x05, 0xd4, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xca, 0xb5, 0x0f},
    {0x04, 0x04, 0x44, 0x4a, 0x7f},
    {0x02, 0x81, 0xca, 0xb5, 0x0f},
    {0x0c, 0xca, 0xf5, 0x40, 0x0f},
    {0x03, 0x0a, 0x44, 0x0a, 0x7f},
    {0x01, 0x02, 0x44, 0x4a, 0x7f},
    {0x02, 0x0a, 0x44, 0x0a, 0x7f},
    {0x06, 0x46, 0x02, 0x0a, 0x8f},
    {0x03, 0x04, 0x43, 0x05, 0x6c},
    {0x04, 0x02, 0x44, 0x4a, 0x7f},
    {0x02, 0x04, 0x43, 0x05, 0x6c},
    {0x07, 0xc1, 0x0a, 0xf5, 0xff},
    {0x03, 0x02, 0x43, 0x05, 0x6c},
    {0x01, 0x07, 0x44, 0x4a, 0x7f},
    {0x02, 0x02, 0x43, 0x05, 0x6c},
    {0x05, 0x46, 0x02, 0x0a, 0x8f},
    {0x03, 0x07, 0x43, 0x05, 0x6c},
    {0x04, 0x07, 0x44, 0x4a, 0x7f},
    {0x02, 0x07, 0x43, 0x05, 0x6c},
    {0xe5, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x43, 0x02, 0x9f},
    {0x01, 0x0d, 0x43, 0x42, 0x9f},
    {0x02, 0x16, 0x43, 0x02, 0x9f},
    {0x06, 0x41, 0x05, 0xb5, 0xae},
    {0x03, 0x03, 0x44, 0x08, 0x6e},
    {0x04, 0x0d, 0x43, 0x42, 0x9f},
    {0x02, 0x03, 0x44, 0x08, 0x6e},
    {0x09, 0x42, 0x45, 0xb5, 0xae},
    {0x03, 0x0b, 0x42, 0x08, 0x7e},
    {0x01, 0x03, 0x42, 0x48, 0x7e},
    {0x02, 0x0b, 0x42, 0x08, 0x7e},
    {0x05, 0x41, 0x05, 0xb5, 0xae},
    {0x03, 0x05, 0x44, 0x08, 0x6e},
    {0x04, 0x03, 0x42, 0x48, 0x7e},
    {0x02, 0x05, 0x44, 0x08, 0x6e},
    {0x0a, 0x46, 0x44, 0xf5, 0xbe},
    {0x03, 0x1a, 0x43, 0x02, 0x9f},
    {0x01, 0x12, 0x45, 0xf5, 0xae},
    {0x02, 0x1a, 0x43, 0x02, 0x9f},
    {0x06, 0x48, 0x03, 0x02, 0x9f},
    {0x03, 0x09, 0x42, 0x08, 0x7e},
    {0x04, 0x12, 0x45, 0xf5, 0xae},
    {0x02, 0x09, 0x42, 0x08, 0x7e},
    {0x07, 0x4a, 0x05, 0xf5, 0xae},
    {0x03, 0x8a, 0x4a, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x48, 0x7e},
    {0x02, 0x8a, 0x4a, 0xb5, 0xff},
    {0x05, 0x48, 0x03, 0x02, 0x9f},
    {0x03, 0x06, 0x44, 0x08, 0x6e},
    {0x04, 0x05, 0x42, 0x48, 0x7e},
    {0x02, 0x06, 0x44, 0x08, 0x6e},
    {0x50, 0x0a, 0xf5, 0x00, 0xff},
    {0x03, 0x26, 0x45, 0xb5, 0xae},
    {0x01, 0x15, 0x45, 0xf5, 0xae},
    {0x02, 0x26, 0x45, 0xb5, 0xae},
    {0x06, 0xc3, 0x0a, 0xb5, 0xff},
    {0x03, 0x82, 0x46, 0x04, 0xbe},
    {0x04, 0x15, 0x45, 0xf5, 0xae},
    {0x02, 0x82, 0x46, 0x04, 0xbe},
    {0x08, 0x42, 0x45, 0xb5, 0xae},
    {0x03, 0x19, 0x43, 0x02, 0x9f},
    {0x01, 0x11, 0x43, 0x42, 0x9f},
    {0x02, 0x19, 0x43, 0x02, 0x9f},
    {0x05, 0xc3, 0x0a, 0xb5, 0xff},
    {0x03, 0x0f, 0x42, 0x0a, 0x8f},
    {0x04, 0x11, 0x43, 0x42, 0x9f},
    {0x02, 0x0f, 0x42, 0x0a, 0x8f},
    {0x40, 0x0a, 0xf5, 0x00, 0xff},
    {0x03, 0x86, 0x4a, 0xb5, 0xff},
    {0x01, 0x84, 0x4a, 0xf5, 0xff},
    {0x02, 0x86, 0x4a, 0xb5, 0xff},
    {0x06, 0xc1, 0x08, 0xb5, 0xee},
    {0x03, 0x04, 0x44, 0x08, 0x6e},
    {0x04, 0x84, 0x4a, 0xf5, 0xff},
    {0x02, 0x04, 0x44, 0x08, 0x6e},
    {0x07, 0x44, 0x03, 0x42, 0x9f},
    {0x03, 0x02, 0x44, 0x08, 0x6e},
    {0x01, 0x06, 0x42, 0x48, 0x7e},
    {0x02, 0x02, 0x44, 0x08, 0x6e},
    {0x05, 0xc1, 0x08, 0xb5, 0xee},
    {0x03, 0x07, 0x44, 0x08, 0x6e},
    {0x04, 0x06, 0x42, 0x48, 0x7e},
    {0x02, 0x07, 0x44, 0x08, 0x6e},
    {0xc1, 0x45, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x42, 0x0a, 0x8f},
    {0x01, 0x01, 0x43, 0x42, 0x9f},
    {0x02, 0x0d, 0x42, 0x0a, 0x8f},
    {0x06, 0x4a, 0x03, 0x02, 0x9f},
    {0x03, 0x03, 0x42, 0x05, 0x6c},
    {0x04, 0x01, 0x43, 0x42, 0x9f},
    {0x02, 0x03, 0x42, 0x05, 0x6c},
    {0x09, 0x47, 0x45, 0xb5, 0xae},
    {0x03, 0x12, 0x43, 0x02, 0x9f},
    {0x01, 0x08, 0x42, 0x4a, 0x8f},
    {0x02, 0x12, 0x43, 0x02, 0x9f},
    {0x05, 0x4a, 0x03, 0x02, 0x9f},
    {0x03, 0x05, 0x42, 0x05, 0x6c},
    {0x04, 0x08, 0x42, 0x4a, 0x8f},
    {0x02, 0x05, 0x42, 0x05, 0x6c},
    {0x0b, 0x46, 0x44, 0xf5, 0xbe},
    {0x03, 0x15, 0x43, 0x02, 0x9f},
    {0x01, 0x83, 0x48, 0xf5, 0xee},
    {0x02, 0x15, 0x43, 0x02, 0x9f},
    {0x06, 0x44, 0x02, 0x0a, 0x8f},
    {0x03, 0x11, 0x42, 0x0a, 0x8f},
    {0x04, 0x83, 0x48, 0xf5, 0xee},
    {0x02, 0x11, 0x42, 0x0a, 0x8f},
    {0x07, 0x42, 0x03, 0x42, 0x9f},
    {0x03, 0x84, 0x48, 0xb5, 0xee},
    {0x01, 0x81, 0x45, 0x42, 0xce},
    {0x02, 0x84, 0x48, 0xb5, 0xee},
    {0x05, 0x44, 0x02, 0x0a, 0x8f},
    {0x03, 0x06, 0x42, 0x05, 0x6c},
    {0x04, 0x81, 0x45, 0x42, 0xce},
    {0x02, 0x06, 0x42, 0x05, 0x6c},
    {0x4e, 0x05, 0x02, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0x0a, 0x8f},
    {0x01, 0x0a, 0x42, 0x4a, 0x8f},
    {0x02, 0x01, 0x42, 0x0a, 0x8f},
    {0x06, 0x42, 0x02, 0x0a, 0x8f},
    {0x03, 0x08, 0x42, 0x08, 0x7e},
    {0x04, 0x0a, 0x42, 0x4a, 0x8f},
    {0x02, 0x08, 0x42, 0x08, 0x7e},
    {0x08, 0x47, 0x45, 0xb5, 0xae},
    {0x03, 0x83, 0x45, 0x02, 0xce},
    {0x01, 0x04, 0x42, 0x48, 0x7e},
    {0x02, 0x83, 0x45, 0x02, 0xce},
    {0x05, 0x42, 0x02, 0x0a, 0x8f},
    {0x03, 0x81, 0x46, 0x04, 0xbe},
    {0x04, 0x04, 0x42, 0x48, 0x7e},
    {0x02, 0x81, 0x46, 0x04, 0xbe},
    {0x0c, 0x46, 0x44, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0x08, 0x7e},
    {0x01, 0x02, 0x42, 0x48, 0x7e},
    {0x02, 0x0a, 0x42, 0x08, 0x7e},
    {0x06, 0x47, 0x02, 0x0a, 0x8f},
    {0x03, 0x04, 0x42, 0x05, 0x6c},
    {0x04, 0x02, 0x42, 0x48, 0x7e},
    {0x02, 0x04, 0x42, 0x05, 0x6c},
    {0x07, 0x47, 0x03, 0x42, 0x9f},
    {0x03, 0x02, 0x42, 0x05, 0x6c},
    {0x01, 0x07, 0x42, 0x48, 0x7e},
    {0x02, 0x02, 0x42, 0x05, 0x6c},
    {0x05, 0x47, 0x02, 0x0a, 0x8f},
    {0x03, 0x07, 0x42, 0x05, 0x6c},
    {0x04, 0x07, 0x42, 0x48, 0x7e},
    {0x02, 0x07, 0x42, 0x05, 0x6c},
    {0xf4, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0xb4, 0x42, 0xb5, 0xff},
    {0x01, 0xa4, 0xf5, 0x40, 0x0f},
    {0x02, 0xb4, 0x42, 0xb5, 0xff},
    {0x06, 0x5d, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x4b, 0xb5, 0x6d},
    {0x04, 0xa4, 0xf5, 0x40, 0x0f},
    {0x02, 0x03, 0x4b, 0xb5, 0x6d},
    {0x09, 0x70, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x48, 0xb5, 0x7d},
    {0x01, 0x03, 0x48, 0xf5, 0x7d},
    {0x02, 0x0b, 0x48, 0xb5, 0x7d},
    {0x05, 0x5d, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x4b, 0xb5, 0x6d},
    {0x04, 0x03, 0x48, 0xf5, 0x7d},
    {0x02, 0x05, 0x4b, 0xb5, 0x6d},
    {0x0a, 0x66, 0xf5, 0x40, 0xff},
    {0x03, 0x0c, 0x46, 0xb5, 0x8c},
    {0x01, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x0c, 0x46, 0xb5, 0x8c},
    {0x06, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x09, 0x48, 0xb5, 0x7d},
    {0x04, 0x0b, 0x46, 0xf5, 0x8c},
    {0x02, 0x09, 0x48, 0xb5, 0x7d},
    {0x07, 0x6e, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0x55, 0xb5, 0xff},
    {0x01, 0x05, 0x48, 0xf5, 0x7d},
    {0x02, 0x9a, 0x55, 0xb5, 0xff},
    {0x05, 0x43, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x4b, 0xb5, 0x6d},
    {0x04, 0x05, 0x48, 0xf5, 0x7d},
    {0x02, 0x06, 0x4b, 0xb5, 0x6d},
    {0x4d, 0x15, 0xb5, 0x00, 0xff},
    {0x03, 0x14, 0x41, 0xb5, 0x9c},
    {0x01, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x14, 0x41, 0xb5, 0x9c},
    {0x06, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x82, 0x66, 0xb5, 0xff},
    {0x04, 0x0c, 0x41, 0xf5, 0x9c},
    {0x02, 0x82, 0x66, 0xb5, 0xff},
    {0x08, 0x70, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x41, 0xb5, 0x9c},
    {0x01, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x18, 0x41, 0xb5, 0x9c},
    {0x05, 0x4b, 0x01, 0xb5, 0x9c},
    {0x03, 0x0e, 0x46, 0xb5, 0x8c},
    {0x04, 0x09, 0x46, 0xf5, 0x8c},
    {0x02, 0x0e, 0x46, 0xb5, 0x8c},
    {0x4f, 0x83, 0xb5, 0x40, 0x0f},
    {0x03, 0x1c, 0x41, 0xb5, 0x9c},
    {0x01, 0x9a, 0xc3, 0xf5, 0x0f},
    {0x02, 0x1c, 0x41, 0xb5, 0x9c},
    {0x06, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x4b, 0xb5, 0x6d},
    {0x04, 0x9a, 0xc3, 0xf5, 0x0f},
    {0x02, 0x04, 0x4b, 0xb5, 0x6d},
    {0x07, 0x43, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x4b, 0xb5, 0x6d},
    {0x01, 0x06, 0x48, 0xf5, 0x7d},
    {0x02, 0x02, 0x4b, 0xb5, 0x6d},
    {0x05, 0x45, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x4b, 0xb5, 0x6d},
    {0x04, 0x06, 0x48, 0xf5, 0x7d},
    {0x02, 0x07, 0x4b, 0xb5, 0x6d},
    {0x52, 0x04, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x41, 0xb5, 0x9c},
    {0x01, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x17, 0x41, 0xb5, 0x9c},
    {0x06, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0x15, 0x6f},
    {0x04, 0x14, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0x15, 0x6f},
    {0x09, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x1b, 0x41, 0xb5, 0x9c},
    {0x01, 0x82, 0x55, 0xf5, 0xff},
    {0x02, 0x1b, 0x41, 0xb5, 0x9c},
    {0x05, 0x4c, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0x15, 0x6f},
    {0x04, 0x82, 0x55, 0xf5, 0xff},
    {0x02, 0x05, 0x43, 0x15, 0x6f},
    {0x0b, 0x66, 0xf5, 0x40, 0xff},
    {0x03, 0x27, 0x43, 0xb5, 0xac},
    {0x01, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x27, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x10, 0x46, 0xb5, 0x8c},
    {0x04, 0x18, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x46, 0xb5, 0x8c},
    {0x07, 0x4b, 0x03, 0xf5, 0xac},
    {0x03, 0x89, 0x44, 0xb5, 0xee},
    {0x01, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x89, 0x44, 0xb5, 0xee},
    {0x05, 0x49, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0x15, 0x6f},
    {0x04, 0x0e, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x15, 0x6f},
    {0x51, 0x04, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x41, 0xb5, 0x9c},
    {0x01, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x13, 0x41, 0xb5, 0x9c},
    {0x06, 0xda, 0x04, 0xb5, 0xee},
    {0x03, 0x08, 0x48, 0xb5, 0x7d},
    {0x04, 0x1c, 0x43, 0xf5, 0xac},
    {0x02, 0x08, 0x48, 0xb5, 0x7d},
    {0x08, 0x43, 0x43, 0xb5, 0xac},
    {0x03, 0x37, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x48, 0xf5, 0x7d},
    {0x02, 0x37, 0x43, 0xb5, 0xac},
    {0x05, 0xda, 0x04, 0xb5, 0xee},
    {0x03, 0x81, 0x66, 0xb5, 0xff},
    {0x04, 0x04, 0x48, 0xf5, 0x7d},
    {0x02, 0x81, 0x66, 0xb5, 0xff},
    {0x0c, 0x66, 0xf5, 0x40, 0xff},
    {0x03, 0x0a, 0x48, 0xb5, 0x7d},
    {0x01, 0x02, 0x48, 0xf5, 0x7d},
    {0x02, 0x0a, 0x48, 0xb5, 0x7d},
    {0x06, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0x15, 0x6f},
    {0x04, 0x02, 0x48, 0xf5, 0x7d},
    {0x02, 0x04, 0x43, 0x15, 0x6f},
    {0x07, 0x45, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0x15, 0x6f},
    {0x01, 0x07, 0x48, 0xf5, 0x7d},
    {0x02, 0x02, 0x43, 0x15, 0x6f},
    {0x05, 0x46, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0x15, 0x6f},
    {0x04, 0x07, 0x48, 0xf5, 0x7d},
    {0x02, 0x07, 0x43, 0x15, 0x6f},
    {0xdf, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x43, 0xb5, 0xac},
    {0x01, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x2d, 0x43, 0xb5, 0xac},
    {0x06, 0x61, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x83, 0x6f},
    {0x04, 0x17, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0x83, 0x6f},
    {0x09, 0x7c, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x83, 0x7f},
    {0x01, 0x03, 0x43, 0xc3, 0x7f},
    {0x02, 0x0b, 0x43, 0x83, 0x7f},
    {0x05, 0x61, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x83, 0x6f},
    {0x04, 0x03, 0x43, 0xc3, 0x7f},
    {0x02, 0x05, 0x41, 0x83, 0x6f},
    {0x0a, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x35, 0x43, 0xb5, 0xac},
    {0x01, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x35, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x83, 0xb5, 0x0f},
    {0x03, 0x09, 0x43, 0x83, 0x7f},
    {0x04, 0x1b, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0x83, 0x7f},
    {0x07, 0x76, 0x02, 0xf5, 0xdf},
    {0x03, 0x87, 0x44, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0xc3, 0x7f},
    {0x02, 0x87, 0x44, 0xb5, 0xee},
    {0x05, 0xc2, 0x83, 0xb5, 0x0f},
    {0x03, 0x06, 0x41, 0x83, 0x6f},
    {0x04, 0x05, 0x43, 0xc3, 0x7f},
    {0x02, 0x06, 0x41, 0x83, 0x6f},
    {0x72, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x43, 0xb5, 0xac},
    {0x01, 0x28, 0x44, 0xf5, 0xbe},
    {0x02, 0x23, 0x43, 0xb5, 0xac},
    {0x06, 0x71, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0xc2, 0xb5, 0x0c},
    {0x04, 0x28, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0xc2, 0xb5, 0x0c},
    {0x08, 0x7c, 0xf5, 0x00, 0xee},
    {0x03, 0x33, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x33, 0x43, 0xb5, 0xac},
    {0x05, 0x71, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x46, 0xb5, 0x8c},
    {0x04, 0x10, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x46, 0xb5, 0x8c},
    {0x62, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x43, 0xb5, 0xac},
    {0x01, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x43, 0xb5, 0xac},
    {0x06, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x83, 0x6f},
    {0x04, 0x8d, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x83, 0x6f},
    {0x07, 0x49, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0x83, 0x6f},
    {0x01, 0x06, 0x43, 0xc3, 0x7f},
    {0x02, 0x02, 0x41, 0x83, 0x6f},
    {0x05, 0x4e, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x83, 0x6f},
    {0x04, 0x06, 0x43, 0xc3, 0x7f},
    {0x02, 0x07, 0x41, 0x83, 0x6f},
    {0xdb, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x46, 0xb5, 0x8c},
    {0x01, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x0d, 0x46, 0xb5, 0x8c},
    {0x06, 0x7d, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0x15, 0x6f},
    {0x04, 0x13, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0x15, 0x6f},
    {0x09, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x98, 0x42, 0xb5, 0xff},
    {0x01, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x98, 0x42, 0xb5, 0xff},
    {0x05, 0x7d, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0x15, 0x6f},
    {0x04, 0x08, 0x46, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0x15, 0x6f},
    {0x0b, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x2b, 0x43, 0xb5, 0xac},
    {0x01, 0x38, 0x44, 0xf5, 0xbe},
    {0x02, 0x2b, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x11, 0x46, 0xb5, 0x8c},
    {0x04, 0x38, 0x44, 0xf5, 0xbe},
    {0x02, 0x11, 0x46, 0xb5, 0x8c},
    {0x07, 0xc8, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0x42, 0xb5, 0xff},
    {0x01, 0x81, 0x55, 0xf5, 0xff},
    {0x02, 0x94, 0x42, 0xb5, 0xff},
    {0x05, 0x44, 0x06, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0x15, 0x6f},
    {0x04, 0x81, 0x55, 0xf5, 0xff},
    {0x02, 0x06, 0x42, 0x15, 0x6f},
    {0x4e, 0x15, 0xb5, 0x00, 0xff},
    {0x03, 0x01, 0x46, 0xb5, 0x8c},
    {0x01, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x01, 0x46, 0xb5, 0x8c},
    {0x06, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0x83, 0x7f},
    {0x04, 0x0a, 0x46, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0x83, 0x7f},
    {0x08, 0x45, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x55, 0xb5, 0xff},
    {0x01, 0x04, 0x43, 0xc3, 0x7f},
    {0x02, 0x83, 0x55, 0xb5, 0xff},
    {0x05, 0x42, 0x06, 0xb5, 0x8c},
    {0x03, 0x81, 0xc2, 0xb5, 0x0c},
    {0x04, 0x04, 0x43, 0xc3, 0x7f},
    {0x02, 0x81, 0xc2, 0xb5, 0x0c},
    {0x0c, 0xc2, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x43, 0x83, 0x7f},
    {0x01, 0x02, 0x43, 0xc3, 0x7f},
    {0x02, 0x0a, 0x43, 0x83, 0x7f},
    {0x06, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0x15, 0x6f},
    {0x04, 0x02, 0x43, 0xc3, 0x7f},
    {0x02, 0x04, 0x42, 0x15, 0x6f},
    {0x07, 0x46, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x15, 0x6f},
    {0x01, 0x07, 0x43, 0xc3, 0x7f},
    {0x02, 0x02, 0x42, 0x15, 0x6f},
    {0x05, 0x47, 0x06, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0x15, 0x6f},
    {0x04, 0x07, 0x43, 0xc3, 0x7f},
    {0x02, 0x07, 0x42, 0x15, 0x6f},
    {0xb4, 0x83, 0xb5, 0x00, 0x0f},
    {0x03, 0x1d, 0x43, 0xb5, 0xac},
    {0x01, 0x2e, 0x44, 0xf5, 0xbe},
    {0x02, 0x1d, 0x43, 0xb5, 0xac},
    {0x06, 0x6f, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x46, 0x04, 0x6e},
    {0x04, 0x2e, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x46, 0x04, 0x6e},
    {0x09, 0x6a, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x41, 0x04, 0x7e},
    {0x01, 0x03, 0x41, 0x44, 0x7e},
    {0x02, 0x0b, 0x41, 0x04, 0x7e},
    {0x05, 0x6f, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x46, 0x04, 0x6e},
    {0x04, 0x03, 0x41, 0x44, 0x7e},
    {0x02, 0x05, 0x46, 0x04, 0x6e},
    {0x0a, 0x59, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x43, 0x04, 0x8e},
    {0x01, 0x0b, 0x43, 0x44, 0x8e},
    {0x02, 0x0c, 0x43, 0x04, 0x8e},
    {0x06, 0x43, 0x03, 0x04, 0x8e},
    {0x03, 0x09, 0x41, 0x04, 0x7e},
    {0x04, 0x0b, 0x43, 0x44, 0x8e},
    {0x02, 0x09, 0x41, 0x04, 0x7e},
    {0x07, 0x64, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0x51, 0xb5, 0xee},
    {0x01, 0x05, 0x41, 0x44, 0x7e},
    {0x02, 0x9a, 0x51, 0xb5, 0xee},
    {0x05, 0x43, 0x03, 0x04, 0x8e},
    {0x03, 0x06, 0x46, 0x04, 0x6e},
    {0x04, 0x05, 0x41, 0x44, 0x7e},
    {0x02, 0x06, 0x46, 0x04, 0x6e},
    {0x4d, 0x11, 0xb5, 0x00, 0xee},
    {0x03, 0x21, 0x43, 0xb5, 0xac},
    {0x01, 0x36, 0x44, 0xf5, 0xbe},
    {0x02, 0x21, 0x43, 0xb5, 0xac},
    {0x06, 0x7b, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x59, 0xb5, 0xee},
    {0x04, 0x36, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x59, 0xb5, 0xee},
    {0x08, 0x6a, 0xf5, 0x00, 0xee},
    {0x03, 0x31, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x44, 0x8e},
    {0x02, 0x31, 0x43, 0xb5, 0xac},
    {0x05, 0x7b, 0x02, 0xb5, 0xce},
    {0x03, 0x0e, 0x43, 0x04, 0x8e},
    {0x04, 0x09, 0x43, 0x44, 0x8e},
    {0x02, 0x0e, 0x43, 0x04, 0x8e},
    {0x5a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x43, 0xb5, 0xac},
    {0x01, 0x88, 0x42, 0xf5, 0xff},
    {0x02, 0x3d, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x04, 0x8e},
    {0x03, 0x04, 0x46, 0x04, 0x6e},
    {0x04, 0x88, 0x42, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0x04, 0x6e},
    {0x07, 0xc2, 0x04, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x04, 0x6e},
    {0x01, 0x06, 0x41, 0x44, 0x7e},
    {0x02, 0x02, 0x46, 0x04, 0x6e},
    {0x05, 0x45, 0x03, 0x04, 0x8e},
    {0x03, 0x07, 0x46, 0x04, 0x6e},
    {0x04, 0x06, 0x41, 0x44, 0x7e},
    {0x02, 0x07, 0x46, 0x04, 0x6e},
    {0xd7, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x2f, 0x43, 0xb5, 0xac},
    {0x01, 0x24, 0x44, 0xf5, 0xbe},
    {0x02, 0x2f, 0x43, 0xb5, 0xac},
    {0x06, 0x69, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x11, 0x6e},
    {0x04, 0x24, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x11, 0x6e},
    {0x09, 0x50, 0x42, 0xb5, 0xce},
    {0x03, 0x3b, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x51, 0xf5, 0xee},
    {0x02, 0x3b, 0x43, 0xb5, 0xac},
    {0x05, 0x69, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x11, 0x6e},
    {0x04, 0x82, 0x51, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x11, 0x6e},
    {0x0b, 0x59, 0xf5, 0x40, 0xee},
    {0x03, 0x29, 0x43, 0xb5, 0xac},
    {0x01, 0x34, 0x44, 0xf5, 0xbe},
    {0x02, 0x29, 0x43, 0xb5, 0xac},
    {0x06, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x04, 0x8e},
    {0x04, 0x34, 0x44, 0xf5, 0xbe},
    {0x02, 0x10, 0x43, 0x04, 0x8e},
    {0x07, 0x74, 0x02, 0xf5, 0xdf},
    {0x03, 0x90, 0x42, 0xb5, 0xff},
    {0x01, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x90, 0x42, 0xb5, 0xff},
    {0x05, 0x50, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x11, 0x6e},
    {0x04, 0x0f, 0x41, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x11, 0x6e},
    {0x60, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x43, 0xb5, 0xac},
    {0x01, 0x00, 0x44, 0xf5, 0xbe},
    {0x02, 0x1f, 0x43, 0xb5, 0xac},
    {0x06, 0xd0, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x04, 0x7e},
    {0x04, 0x00, 0x44, 0xf5, 0xbe},
    {0x02, 0x08, 0x41, 0x04, 0x7e},
    {0x08, 0x50, 0x42, 0xb5, 0xce},
    {0x03, 0x39, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x44, 0x7e},
    {0x02, 0x39, 0x43, 0xb5, 0xac},
    {0x05, 0xd0, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x59, 0xb5, 0xee},
    {0x04, 0x04, 0x41, 0x44, 0x7e},
    {0x02, 0x81, 0x59, 0xb5, 0xee},
    {0x0c, 0x59, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x41, 0x04, 0x7e},
    {0x01, 0x02, 0x41, 0x44, 0x7e},
    {0x02, 0x0a, 0x41, 0x04, 0x7e},
    {0x06, 0x46, 0x03, 0x04, 0x8e},
    {0x03, 0x04, 0x43, 0x11, 0x6e},
    {0x04, 0x02, 0x41, 0x44, 0x7e},
    {0x02, 0x04, 0x43, 0x11, 0x6e},
    {0x07, 0x4f, 0x04, 0xf5, 0xbe},
    {0x03, 0x02, 0x43, 0x11, 0x6e},
    {0x01, 0x07, 0x41, 0x44, 0x7e},
    {0x02, 0x02, 0x43, 0x11, 0x6e},
    {0x05, 0x46, 0x03, 0x04, 0x8e},
    {0x03, 0x07, 0x43, 0x11, 0x6e},
    {0x04, 0x07, 0x41, 0x44, 0x7e},
    {0x02, 0x07, 0x43, 0x11, 0x6e},
    {0xde, 0x44, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x41, 0xb5, 0x9c},
    {0x01, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x16, 0x41, 0xb5, 0x9c},
    {0x06, 0x5f, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x44, 0x83, 0x6f},
    {0x04, 0x0d, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0x83, 0x6f},
    {0x09, 0xd2, 0xf5, 0x00, 0x0f},
    {0x03, 0x0b, 0x42, 0x83, 0x7f},
    {0x01, 0x03, 0x42, 0xc3, 0x7f},
    {0x02, 0x0b, 0x42, 0x83, 0x7f},
    {0x05, 0x5f, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x44, 0x83, 0x6f},
    {0x04, 0x03, 0x42, 0xc3, 0x7f},
    {0x02, 0x05, 0x44, 0x83, 0x6f},
    {0x0a, 0x4f, 0x42, 0xf5, 0xdf},
    {0x03, 0x1a, 0x41, 0xb5, 0x9c},
    {0x01, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x41, 0xb5, 0x9c},
    {0x06, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0x83, 0x7f},
    {0x04, 0x99, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x83, 0x7f},
    {0x07, 0x40, 0x02, 0xf5, 0xdf},
    {0x03, 0x8c, 0x42, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0xc3, 0x7f},
    {0x02, 0x8c, 0x42, 0xb5, 0xff},
    {0x05, 0x48, 0x01, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0x83, 0x6f},
    {0x04, 0x05, 0x42, 0xc3, 0x7f},
    {0x02, 0x06, 0x44, 0x83, 0x6f},
    {0x7d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x43, 0xb5, 0xac},
    {0x01, 0x2c, 0x44, 0xf5, 0xbe},
    {0x02, 0x25, 0x43, 0xb5, 0xac},
    {0x06, 0x79, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x4f, 0x02, 0xdf},
    {0x04, 0x2c, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x4f, 0x02, 0xdf},
    {0x08, 0xd2, 0xf5, 0x00, 0x0f},
    {0x03, 0x19, 0x41, 0xb5, 0x9c},
    {0x01, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x19, 0x41, 0xb5, 0x9c},
    {0x05, 0x79, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0x04, 0x8e},
    {0x04, 0x11, 0x41, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x04, 0x8e},
    {0x6a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x44, 0xb5, 0xee},
    {0x01, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x44, 0xb5, 0xee},
    {0x06, 0xc1, 0x83, 0xb5, 0x0f},
    {0x03, 0x04, 0x44, 0x83, 0x6f},
    {0x04, 0x95, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x83, 0x6f},
    {0x07, 0x44, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0x83, 0x6f},
    {0x01, 0x06, 0x42, 0xc3, 0x7f},
    {0x02, 0x02, 0x44, 0x83, 0x6f},
    {0x05, 0xc1, 0x83, 0xb5, 0x0f},
    {0x03, 0x07, 0x44, 0x83, 0x6f},
    {0x04, 0x06, 0x42, 0xc3, 0x7f},
    {0x02, 0x07, 0x44, 0x83, 0x6f},
    {0xd1, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x43, 0x04, 0x8e},
    {0x01, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x04, 0x8e},
    {0x06, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x11, 0x6e},
    {0x04, 0x01, 0x41, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x11, 0x6e},
    {0x09, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x41, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x44, 0x8e},
    {0x02, 0x12, 0x41, 0xb5, 0x9c},
    {0x05, 0x4a, 0x01, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x11, 0x6e},
    {0x04, 0x08, 0x43, 0x44, 0x8e},
    {0x02, 0x05, 0x42, 0x11, 0x6e},
    {0x0b, 0x4f, 0x42, 0xf5, 0xdf},
    {0x03, 0x15, 0x41, 0xb5, 0x9c},
    {0x01, 0x83, 0xc3, 0xf5, 0x0f},
    {0x02, 0x15, 0x41, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x04, 0x8e},
    {0x03, 0x11, 0x43, 0x04, 0x8e},
    {0x04, 0x83, 0xc3, 0xf5, 0x0f},
    {0x02, 0x11, 0x43, 0x04, 0x8e},
    {0x07, 0x42, 0x01, 0xf5, 0x9c},
    {0x03, 0x84, 0xc3, 0xb5, 0x0f},
    {0x01, 0x81, 0x51, 0xf5, 0xee},
    {0x02, 0x84, 0xc3, 0xb5, 0x0f},
    {0x05, 0x44, 0x03, 0x04, 0x8e},
    {0x03, 0x06, 0x42, 0x11, 0x6e},
    {0x04, 0x81, 0x51, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x11, 0x6e},
    {0x4e, 0x11, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x43, 0x04, 0x8e},
    {0x01, 0x0a, 0x43, 0x44, 0x8e},
    {0x02, 0x01, 0x43, 0x04, 0x8e},
    {0x06, 0x42, 0x03, 0x04, 0x8e},
    {0x03, 0x08, 0x42, 0x83, 0x7f},
    {0x04, 0x0a, 0x43, 0x44, 0x8e},
    {0x02, 0x08, 0x42, 0x83, 0x7f},
    {0x08, 0x46, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x51, 0xb5, 0xee},
    {0x01, 0x04, 0x42, 0xc3, 0x7f},
    {0x02, 0x83, 0x51, 0xb5, 0xee},
    {0x05, 0x42, 0x03, 0x04, 0x8e},
    {0x03, 0x81, 0x4f, 0x02, 0xdf},
    {0x04, 0x04, 0x42, 0xc3, 0x7f},
    {0x02, 0x81, 0x4f, 0x02, 0xdf},
    {0x0c, 0x4f, 0x42, 0xf5, 0xdf},
    {0x03, 0x0a, 0x42, 0x83, 0x7f},
    {0x01, 0x02, 0x42, 0xc3, 0x7f},
    {0x02, 0x0a, 0x42, 0x83, 0x7f},
    {0x06, 0x47, 0x03, 0x04, 0x8e},
    {0x03, 0x04, 0x42, 0x11, 0x6e},
    {0x04, 0x02, 0x42, 0xc3, 0x7f},
    {0x02, 0x04, 0x42, 0x11, 0x6e},
    {0x07, 0x47, 0x01, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x11, 0x6e},
    {0x01, 0x07, 0x42, 0xc3, 0x7f},
    {0x02, 0x02, 0x42, 0x11, 0x6e},
    {0x05, 0x47, 0x03, 0x04, 0x8e},
    {0x03, 0x07, 0x42, 0x11, 0x6e},
    {0x04, 0x07, 0x42, 0xc3, 0x7f},
    {0x02, 0x07, 0x42, 0x11, 0x6e},
    {0xf4, 0x44, 0xf5, 0x00, 0x0e},
    {0x03, 0x9e, 0xf5, 0x00, 0x0d},
    {0x01, 0x1e, 0x44, 0xf5, 0xbe},
    {0x02, 0x9e, 0xf5, 0x00, 0x0d},
    {0x06, 0x56, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x47, 0x02, 0x6f},
    {0x04, 0x1e, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x47, 0x02, 0x6f},
    {0x09, 0x60, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x45, 0x02, 0x7f},
    {0x01, 0x03, 0x45, 0x42, 0x7f},
    {0x02, 0x0b, 0x45, 0x02, 0x7f},
    {0x05, 0x56, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x47, 0x02, 0x6f},
    {0x04, 0x03, 0x45, 0x42, 0x7f},
    {0x02, 0x05, 0x47, 0x02, 0x6f},
    {0x0a, 0xc6, 0xf5, 0x40, 0x0f},
    {0x03, 0x0c, 0x44, 0x02, 0x8f},
    {0x01, 0x0b, 0x44, 0x42, 0x8f},
    {0x02, 0x0c, 0x44, 0x02, 0x8f},
    {0x06, 0x43, 0x04, 0x02, 0x8f},
    {0x03, 0x09, 0x45, 0x02, 0x7f},
    {0x04, 0x0b, 0x44, 0x42, 0x8f},
    {0x02, 0x09, 0x45, 0x02, 0x7f},
    {0x07, 0x4d, 0x04, 0xf5, 0xbe},
    {0x03, 0x9a, 0xc4, 0xb5, 0x0f},
    {0x01, 0x05, 0x45, 0x42, 0x7f},
    {0x02, 0x9a, 0xc4, 0xb5, 0x0f},
    {0x05, 0x43, 0x04, 0x02, 0x8f},
    {0x03, 0x06, 0x47, 0x02, 0x6f},
    {0x04, 0x05, 0x45, 0x42, 0x7f},
    {0x02, 0x06, 0x47, 0x02, 0x6f},
    {0x4d, 0x84, 0xb5, 0x00, 0x0f},
    {0x03, 0x14, 0x42, 0x02, 0x9f},
    {0x01, 0x0c, 0x42, 0x42, 0x9f},
    {0x02, 0x14, 0x42, 0x02, 0x9f},
    {0x06, 0x4b, 0x02, 0x02, 0x9f},
    {0x03, 0x82, 0xc6, 0xb5, 0x0f},
    {0x04, 0x0c, 0x42, 0x42, 0x9f},
    {0x02, 0x82, 0xc6, 0xb5, 0x0f},
    {0x08, 0x60, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x42, 0x02, 0x9f},
    {0x01, 0x09, 0x44, 0x42, 0x8f},
    {0x02, 0x18, 0x42, 0x02, 0x9f},
    {0x05, 0x4b, 0x02, 0x02, 0x9f},
    {0x03, 0x0e, 0x44, 0x02, 0x8f},
    {0x04, 0x09, 0x44, 0x42, 0x8f},
    {0x02, 0x0e, 0x44, 0x02, 0x8f},
    {0x4f, 0x81, 0xb5, 0x40, 0x0e},
    {0x03, 0x1c, 0x42, 0x02, 0x9f},
    {0x01, 0x9a, 0xc1, 0xf5, 0x0e},
    {0x02, 0x1c, 0x42, 0x02, 0x9f},
    {0x06, 0x45, 0x04, 0x02, 0x8f},
    {0x03, 0x04, 0x47, 0x02, 0x6f},
    {0x04, 0x9a, 0xc1, 0xf5, 0x0e},
    {0x02, 0x04, 0x47, 0x02, 0x6f},
    {0x07, 0x43, 0x02, 0x42, 0x9f},
    {0x03, 0x02, 0x47, 0x02, 0x6f},
    {0x01, 0x06, 0x45, 0x42, 0x7f},
    {0x02, 0x02, 0x47, 0x02, 0x6f},
    {0x05, 0x45, 0x04, 0x02, 0x8f},
    {0x03, 0x07, 0x47, 0x02, 0x6f},
    {0x04, 0x06, 0x45, 0x42, 0x7f},
    {0x02, 0x07, 0x47, 0x02, 0x6f},
    {0xcd, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x17, 0x42, 0x02, 0x9f},
    {0x01, 0x22, 0x44, 0xf5, 0xbe},
    {0x02, 0x17, 0x42, 0x02, 0x9f},
    {0x06, 0x5a, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x43, 0x84, 0x6f},
    {0x04, 0x22, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x84, 0x6f},
    {0x09, 0x48, 0x44, 0xb5, 0xbe},
    {0x03, 0x1b, 0x42, 0x02, 0x9f},
    {0x01, 0x82, 0xc4, 0xf5, 0x0f},
    {0x02, 0x1b, 0x42, 0x02, 0x9f},
    {0x05, 0x5a, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x43, 0x84, 0x6f},
    {0x04, 0x82, 0xc4, 0xf5, 0x0f},
    {0x02, 0x05, 0x43, 0x84, 0x6f},
    {0x0b, 0xc6, 0xf5, 0x40, 0x0f},
    {0x03, 0x28, 0x43, 0xb5, 0xac},
    {0x01, 0x32, 0x44, 0xf5, 0xbe},
    {0x02, 0x28, 0x43, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0x02, 0x9f},
    {0x03, 0x10, 0x44, 0x02, 0x8f},
    {0x04, 0x32, 0x44, 0xf5, 0xbe},
    {0x02, 0x10, 0x44, 0x02, 0x8f},
    {0x07, 0xdb, 0xb5, 0x40, 0x0e},
    {0x03, 0x8e, 0x42, 0xb5, 0xff},
    {0x01, 0x0e, 0x42, 0x42, 0x9f},
    {0x02, 0x8e, 0x42, 0xb5, 0xff},
    {0x05, 0x49, 0x02, 0x02, 0x9f},
    {0x03, 0x06, 0x43, 0x84, 0x6f},
    {0x04, 0x0e, 0x42, 0x42, 0x9f},
    {0x02, 0x06, 0x43, 0x84, 0x6f},
    {0x7e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0x02, 0x9f},
    {0x01, 0x3e, 0x44, 0xf5, 0xbe},
    {0x02, 0x13, 0x42, 0x02, 0x9f},
    {0x06, 0xcc, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x45, 0x02, 0x7f},
    {0x04, 0x3e, 0x44, 0xf5, 0xbe},
    {0x02, 0x08, 0x45, 0x02, 0x7f},
    {0x08, 0x48, 0x44, 0xb5, 0xbe},
    {0x03, 0x38, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0x42, 0x7f},
    {0x02, 0x38, 0x43, 0xb5, 0xac},
    {0x05, 0xcc, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc6, 0xb5, 0x0f},
    {0x04, 0x04, 0x45, 0x42, 0x7f},
    {0x02, 0x81, 0xc6, 0xb5, 0x0f},
    {0x0c, 0xc6, 0xf5, 0x40, 0x0f},
    {0x03, 0x0a, 0x45, 0x02, 0x7f},
    {0x01, 0x02, 0x45, 0x42, 0x7f},
    {0x02, 0x0a, 0x45, 0x02, 0x7f},
    {0x06, 0x46, 0x04, 0x02, 0x8f},
    {0x03, 0x04, 0x43, 0x84, 0x6f},
    {0x04, 0x02, 0x45, 0x42, 0x7f},
    {0x02, 0x04, 0x43, 0x84, 0x6f},
    {0x07, 0x45, 0x02, 0x42, 0x9f},
    {0x03, 0x02, 0x43, 0x84, 0x6f},
    {0x01, 0x07, 0x45, 0x42, 0x7f},
    {0x02, 0x02, 0x43, 0x84, 0x6f},
    {0x05, 0x46, 0x04, 0x02, 0x8f},
    {0x03, 0x07, 0x43, 0x84, 0x6f},
    {0x04, 0x07, 0x45, 0x42, 0x7f},
    {0x02, 0x07, 0x43, 0x84, 0x6f},
    {0xe3, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x43, 0xb5, 0xac},
    {0x01, 0x30, 0x44, 0xf5, 0xbe},
    {0x02, 0x2e, 0x43, 0xb5, 0xac},
    {0x06, 0x65, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x81, 0x6e},
    {0x04, 0x30, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x41, 0x81, 0x6e},
    {0x09, 0x7a, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x43, 0x81, 0x7e},
    {0x01, 0x03, 0x43, 0xc1, 0x7e},
    {0x02, 0x0b, 0x43, 0x81, 0x7e},
    {0x05, 0x65, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x81, 0x6e},
    {0x04, 0x03, 0x43, 0xc1, 0x7e},
    {0x02, 0x05, 0x41, 0x81, 0x6e},
    {0x0a, 0x44, 0x44, 0xf5, 0xbe},
    {0x03, 0x36, 0x43, 0xb5, 0xac},
    {0x01, 0x3c, 0x44, 0xf5, 0xbe},
    {0x02, 0x36, 0x43, 0xb5, 0xac},
    {0x06, 0xc2, 0x81, 0xb5, 0x0e},
    {0x03, 0x09, 0x43, 0x81, 0x7e},
    {0x04, 0x3c, 0x44, 0xf5, 0xbe},
    {0x02, 0x09, 0x43, 0x81, 0x7e},
    {0x07, 0x6c, 0x02, 0xf5, 0xdf},
    {0x03, 0x88, 0x44, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0xc1, 0x7e},
    {0x02, 0x88, 0x44, 0xb5, 0xee},
    {0x05, 0xc2, 0x81, 0xb5, 0x0e},
    {0x03, 0x06, 0x41, 0x81, 0x6e},
    {0x04, 0x05, 0x43, 0xc1, 0x7e},
    {0x02, 0x06, 0x41, 0x81, 0x6e},
    {0x6e, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x43, 0xb5, 0xac},
    {0x01, 0x2a, 0x44, 0xf5, 0xbe},
    {0x02, 0x24, 0x43, 0xb5, 0xac},
    {0x06, 0x59, 0x04, 0xb5, 0xbe},
    {0x03, 0x82, 0x44, 0x04, 0xbe},
    {0x04, 0x2a, 0x44, 0xf5, 0xbe},
    {0x02, 0x82, 0x44, 0x04, 0xbe},
    {0x08, 0x7a, 0xf5, 0x00, 0xee},
    {0x03, 0x34, 0x43, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0x42, 0x9f},
    {0x02, 0x34, 0x43, 0xb5, 0xac},
    {0x05, 0x59, 0x04, 0xb5, 0xbe},
    {0x03, 0x0f, 0x44, 0x02, 0x8f},
    {0x04, 0x10, 0x42, 0x42, 0x9f},
    {0x02, 0x0f, 0x44, 0x02, 0x8f},
    {0x66, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x43, 0xb5, 0xac},
    {0x01, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x43, 0xb5, 0xac},
    {0x06, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x81, 0x6e},
    {0x04, 0x91, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x81, 0x6e},
    {0x07, 0x51, 0x04, 0xf5, 0xbe},
    {0x03, 0x02, 0x41, 0x81, 0x6e},
    {0x01, 0x06, 0x43, 0xc1, 0x7e},
    {0x02, 0x02, 0x41, 0x81, 0x6e},
    {0x05, 0x4f, 0x03, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x81, 0x6e},
    {0x04, 0x06, 0x43, 0xc1, 0x7e},
    {0x02, 0x07, 0x41, 0x81, 0x6e},
    {0xc9, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x44, 0x02, 0x8f},
    {0x01, 0x20, 0x44, 0xf5, 0xbe},
    {0x02, 0x0d, 0x44, 0x02, 0x8f},
    {0x06, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x84, 0x6f},
    {0x04, 0x20, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x42, 0x84, 0x6f},
    {0x09, 0xc1, 0x42, 0xb5, 0xff},
    {0x03, 0x9b, 0x42, 0xb5, 0xff},
    {0x01, 0x08, 0x44, 0x42, 0x8f},
    {0x02, 0x9b, 0x42, 0xb5, 0xff},
    {0x05, 0xc5, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x84, 0x6f},
    {0x04, 0x08, 0x44, 0x42, 0x8f},
    {0x02, 0x05, 0x42, 0x84, 0x6f},
    {0x0b, 0x44, 0x44, 0xf5, 0xbe},
    {0x03, 0x2c, 0x43, 0xb5, 0xac},
    {0x01, 0x3a, 0x44, 0xf5, 0xbe},
    {0x02, 0x2c, 0x43, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0x02, 0x8f},
    {0x03, 0x11, 0x44, 0x02, 0x8f},
    {0x04, 0x3a, 0x44, 0xf5, 0xbe},
    {0x02, 0x11, 0x44, 0x02, 0x8f},
    {0x07, 0xd6, 0xb5, 0x40, 0x0e},
    {0x03, 0x96, 0x42, 0xb5, 0xff},
    {0x01, 0x81, 0xc4, 0xf5, 0x0f},
    {0x02, 0x96, 0x42, 0xb5, 0xff},
    {0x05, 0x44, 0x04, 0x02, 0x8f},
    {0x03, 0x06, 0x42, 0x84, 0x6f},
    {0x04, 0x81, 0xc4, 0xf5, 0x0f},
    {0x02, 0x06, 0x42, 0x84, 0x6f},
    {0x4e, 0x84, 0xb5, 0x00, 0x0f},
    {0x03, 0x01, 0x44, 0x02, 0x8f},
    {0x01, 0x0a, 0x44, 0x42, 0x8f},
    {0x02, 0x01, 0x44, 0x02, 0x8f},
    {0x06, 0x42, 0x04, 0x02, 0x8f},
    {0x03, 0x08, 0x43, 0x81, 0x7e},
    {0x04, 0x0a, 0x44, 0x42, 0x8f},
    {0x02, 0x08, 0x43, 0x81, 0x7e},
    {0x08, 0xc1, 0x42, 0xb5, 0xff},
    {0x03, 0x83, 0xc4, 0xb5, 0x0f},
    {0x01, 0x04, 0x43, 0xc1, 0x7e},
    {0x02, 0x83, 0xc4, 0xb5, 0x0f},
    {0x05, 0x42, 0x04, 0x02, 0x8f},
    {0x03, 0x81, 0x44, 0x04, 0xbe},
    {0x04, 0x04, 0x43, 0xc1, 0x7e},
    {0x02, 0x81, 0x44, 0x04, 0xbe},
    {0x0c, 0x44, 0x44, 0xf5, 0xbe},
    {0x03, 0x0a, 0x43, 0x81, 0x7e},
    {0x01, 0x02, 0x43, 0xc1, 0x7e},
    {0x02, 0x0a, 0x43, 0x81, 0x7e},
    {0x06, 0x47, 0x04, 0x02, 0x8f},
    {0x03, 0x04, 0x42, 0x84, 0x6f},
    {0x04, 0x02, 0x43, 0xc1, 0x7e},
    {0x02, 0x04, 0x42, 0x84, 0x6f},
    {0x07, 0x46, 0x02, 0x42, 0x9f},
    {0x03, 0x02, 0x42, 0x84, 0x6f},
    {0x01, 0x07, 0x43, 0xc1, 0x7e},
    {0x02, 0x02, 0x42, 0x84, 0x6f},
    {0x05, 0x47, 0x04, 0x02, 0x8f},
    {0x03, 0x07, 0x42, 0x84, 0x6f},
    {0x04, 0x07, 0x43, 0xc1, 0x7e},
    {0x02, 0x07, 0x42, 0x84, 0x6f},
    {0xb4, 0x81, 0xb5, 0x00, 0x0e},
    {0x03, 0x1e, 0x43, 0xb5, 0xac},
    {0x01, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x1e, 0x43, 0xb5, 0xac},
    {0x06, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x04, 0x6e},
    {0x04, 0x16, 0x43, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x04, 0x6e},
    {0x09, 0x4a, 0x44, 0xb5, 0xbe},
    {0x03, 0x0b, 0x44, 0x04, 0x7e},
    {0x01, 0x03, 0x44, 0x44, 0x7e},
    {0x02, 0x0b, 0x44, 0x04, 0x7e},
    {0x05, 0x4d, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x04, 0x6e},
    {0x04, 0x03, 0x44, 0x44, 0x7e},
    {0x02, 0x05, 0x45, 0x04, 0x6e},
    {0x0a, 0x42, 0x44, 0xf5, 0xbe},
    {0x03, 0x0c, 0x42, 0x04, 0x8e},
    {0x01, 0x0b, 0x42, 0x44, 0x8e},
    {0x02, 0x0c, 0x42, 0x04, 0x8e},
    {0x06, 0x43, 0x02, 0x04, 0x8e},
    {0x03, 0x09, 0x44, 0x04, 0x7e},
    {0x04, 0x0b, 0x42, 0x44, 0x8e},
    {0x02, 0x09, 0x44, 0x04, 0x7e},
    {0x07, 0x41, 0x04, 0xf5, 0xbe},
    {0x03, 0x9a, 0x46, 0x02, 0xce},
    {0x01, 0x05, 0x44, 0x44, 0x7e},
    {0x02, 0x9a, 0x46, 0x02, 0xce},
    {0x05, 0x43, 0x02, 0x04, 0x8e},
    {0x03, 0x06, 0x45, 0x04, 0x6e},
    {0x04, 0x05, 0x44, 0x44, 0x7e},
    {0x02, 0x06, 0x45, 0x04, 0x6e},
    {0x4d, 0x06, 0x02, 0xb5, 0xce},
    {0x03, 0x22, 0x43, 0xb5, 0xac},
    {0x01, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x22, 0x43, 0xb5, 0xac},
    {0x06, 0x52, 0x04, 0xb5, 0xbe},
    {0x03, 0x82, 0x42, 0x04, 0xbe},
    {0x04, 0x1a, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x04, 0xbe},
    {0x08, 0x4a, 0x44, 0xb5, 0xbe},
    {0x03, 0x32, 0x43, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x44, 0x8e},
    {0x02, 0x32, 0x43, 0xb5, 0xac},
    {0x05, 0x52, 0x04, 0xb5, 0xbe},
    {0x03, 0x0e, 0x42, 0x04, 0x8e},
    {0x04, 0x09, 0x42, 0x44, 0x8e},
    {0x02, 0x0e, 0x42, 0x04, 0x8e},
    {0x53, 0x02, 0xf5, 0x40, 0xff},
    {0x03, 0x3e, 0x43, 0xb5, 0xac},
    {0x01, 0x8a, 0x42, 0xf5, 0xff},
    {0x02, 0x3e, 0x43, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x04, 0x8e},
    {0x03, 0x04, 0x45, 0x04, 0x6e},
    {0x04, 0x8a, 0x42, 0xf5, 0xff},
    {0x02, 0x04, 0x45, 0x04, 0x6e},
    {0x07, 0x48, 0x03, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x04, 0x6e},
    {0x01, 0x06, 0x44, 0x44, 0x7e},
    {0x02, 0x02, 0x45, 0x04, 0x6e},
    {0x05, 0x45, 0x02, 0x04, 0x8e},
    {0x03, 0x07, 0x45, 0x04, 0x6e},
    {0x04, 0x06, 0x44, 0x44, 0x7e},
    {0x02, 0x07, 0x45, 0x04, 0x6e},
    {0x58, 0x02, 0xf5, 0x40, 0xff},
    {0x03, 0x30, 0x43, 0xb5, 0xac},
    {0x01, 0x26, 0x44, 0xf5, 0xbe},
    {0x02, 0x30, 0x43, 0xb5, 0xac},
    {0x06, 0x55, 0x04, 0xb5, 0xbe},
    {0x03, 0x03, 0x43, 0x06, 0x6c},
    {0x04, 0x26, 0x44, 0xf5, 0xbe},
    {0x02, 0x03, 0x43, 0x06, 0x6c},
    {0x09, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3c, 0x43, 0xb5, 0xac},
    {0x01, 0x82, 0x46, 0x42, 0xce},
    {0x02, 0x3c, 0x43, 0xb5, 0xac},
    {0x05, 0x55, 0x04, 0xb5, 0xbe},
    {0x03, 0x05, 0x43, 0x06, 0x6c},
    {0x04, 0x82, 0x46, 0x42, 0xce},
    {0x02, 0x05, 0x43, 0x06, 0x6c},
    {0x0b, 0x42, 0x44, 0xf5, 0xbe},
    {0x03, 0x2a, 0x43, 0xb5, 0xac},
    {0x01, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x2a, 0x43, 0xb5, 0xac},
    {0x06, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x04, 0x8e},
    {0x04, 0x19, 0x43, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x04, 0x8e},
    {0x07, 0xc3, 0x02, 0xf5, 0xff},
    {0x03, 0x92, 0x42, 0xb5, 0xff},
    {0x01, 0x0f, 0x42, 0x42, 0x9f},
    {0x02, 0x92, 0x42, 0xb5, 0xff},
    {0x05, 0x51, 0x03, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x06, 0x6c},
    {0x04, 0x0f, 0x42, 0x42, 0x9f},
    {0x02, 0x06, 0x43, 0x06, 0x6c},
    {0x56, 0x02, 0xf5, 0x40, 0xff},
    {0x03, 0x20, 0x43, 0xb5, 0xac},
    {0x01, 0x86, 0x42, 0xf5, 0xff},
    {0x02, 0x20, 0x43, 0xb5, 0xac},
    {0x06, 0xc4, 0x02, 0xb5, 0xff},
    {0x03, 0x08, 0x44, 0x04, 0x7e},
    {0x04, 0x86, 0x42, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0x04, 0x7e},
    {0x08, 0x44, 0x43, 0xb5, 0xac},
    {0x03, 0x3a, 0x43, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x44, 0x7e},
    {0x02, 0x3a, 0x43, 0xb5, 0xac},
    {0x05, 0xc4, 0x02, 0xb5, 0xff},
    {0x03, 0x81, 0x42, 0x04, 0xbe},
    {0x04, 0x04, 0x44, 0x44, 0x7e},
    {0x02, 0x81, 0x42, 0x04, 0xbe},
    {0x0c, 0x42, 0x44, 0xf5, 0xbe},
    {0x03, 0x0a, 0x44, 0x04, 0x7e},
    {0x01, 0x02, 0x44, 0x44, 0x7e},
    {0x02, 0x0a, 0x44, 0x04, 0x7e},
    {0x06, 0x46, 0x02, 0x04, 0x8e},
    {0x03, 0x04, 0x43, 0x06, 0x6c},
    {0x04, 0x02, 0x44, 0x44, 0x7e},
    {0x02, 0x04, 0x43, 0x06, 0x6c},
    {0x07, 0xc1, 0x04, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x06, 0x6c},
    {0x01, 0x07, 0x44, 0x44, 0x7e},
    {0x02, 0x02, 0x43, 0x06, 0x6c},
    {0x05, 0x46, 0x02, 0x04, 0x8e},
    {0x03, 0x07, 0x43, 0x06, 0x6c},
    {0x04, 0x07, 0x44, 0x44, 0x7e},
    {0x02, 0x07, 0x43, 0x06, 0x6c},
    {0xe7, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x42, 0x02, 0x9f},
    {0x01, 0x0d, 0x42, 0x42, 0x9f},
    {0x02, 0x16, 0x42, 0x02, 0x9f},
    {0x06, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x81, 0x6e},
    {0x04, 0x0d, 0x42, 0x42, 0x9f},
    {0x02, 0x03, 0x44, 0x81, 0x6e},
    {0x09, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x81, 0x7e},
    {0x01, 0x03, 0x42, 0xc1, 0x7e},
    {0x02, 0x0b, 0x42, 0x81, 0x7e},
    {0x05, 0x41, 0x03, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x81, 0x6e},
    {0x04, 0x03, 0x42, 0xc1, 0x7e},
    {0x02, 0x05, 0x44, 0x81, 0x6e},
    {0x0a, 0x47, 0x44, 0xf5, 0xbe},
    {0x03, 0x1a, 0x42, 0x02, 0x9f},
    {0x01, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0x02, 0x9f},
    {0x06, 0x48, 0x02, 0x02, 0x9f},
    {0x03, 0x09, 0x42, 0x81, 0x7e},
    {0x04, 0x12, 0x43, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x81, 0x7e},
    {0x07, 0x4a, 0x03, 0xf5, 0xac},
    {0x03, 0x8a, 0x44, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0xc1, 0x7e},
    {0x02, 0x8a, 0x44, 0xb5, 0xee},
    {0x05, 0x48, 0x02, 0x02, 0x9f},
    {0x03, 0x06, 0x44, 0x81, 0x6e},
    {0x04, 0x05, 0x42, 0xc1, 0x7e},
    {0x02, 0x06, 0x44, 0x81, 0x6e},
    {0x50, 0x04, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x43, 0xb5, 0xac},
    {0x01, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x26, 0x43, 0xb5, 0xac},
    {0x06, 0xc3, 0x04, 0xb5, 0xee},
    {0x03, 0x82, 0x47, 0x04, 0xbe},
    {0x04, 0x15, 0x43, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x04, 0xbe},
    {0x08, 0x42, 0x43, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0x02, 0x9f},
    {0x01, 0x11, 0x42, 0x42, 0x9f},
    {0x02, 0x19, 0x42, 0x02, 0x9f},
    {0x05, 0xc3, 0x04, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x04, 0x8e},
    {0x04, 0x11, 0x42, 0x42, 0x9f},
    {0x02, 0x0f, 0x42, 0x04, 0x8e},
    {0x40, 0x04, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x44, 0xb5, 0xee},
    {0x01, 0x84, 0x44, 0xf5, 0xee},
    {0x02, 0x86, 0x44, 0xb5, 0xee},
    {0x06, 0xc1, 0x81, 0xb5, 0x0e},
    {0x03, 0x04, 0x44, 0x81, 0x6e},
    {0x04, 0x84, 0x44, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x81, 0x6e},
    {0x07, 0x44, 0x02, 0x42, 0x9f},
    {0x03, 0x02, 0x44, 0x81, 0x6e},
    {0x01, 0x06, 0x42, 0xc1, 0x7e},
    {0x02, 0x02, 0x44, 0x81, 0x6e},
    {0x05, 0xc1, 0x81, 0xb5, 0x0e},
    {0x03, 0x07, 0x44, 0x81, 0x6e},
    {0x04, 0x06, 0x42, 0xc1, 0x7e},
    {0x02, 0x07, 0x44, 0x81, 0x6e},
    {0xc1, 0x43, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x04, 0x8e},
    {0x01, 0x01, 0x42, 0x42, 0x9f},
    {0x02, 0x0d, 0x42, 0x04, 0x8e},
    {0x06, 0x4a, 0x02, 0x02, 0x9f},
    {0x03, 0x03, 0x42, 0x06, 0x6c},
    {0x04, 0x01, 0x42, 0x42, 0x9f},
    {0x02, 0x03, 0x42, 0x06, 0x6c},
    {0x09, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0x02, 0x9f},
    {0x01, 0x08, 0x42, 0x44, 0x8e},
    {0x02, 0x12, 0x42, 0x02, 0x9f},
    {0x05, 0x4a, 0x02, 0x02, 0x9f},
    {0x03, 0x05, 0x42, 0x06, 0x6c},
    {0x04, 0x08, 0x42, 0x44, 0x8e},
    {0x02, 0x05, 0x42, 0x06, 0x6c},
    {0x0b, 0x47, 0x44, 0xf5, 0xbe},
    {0x03, 0x15, 0x42, 0x02, 0x9f},
    {0x01, 0x83, 0xc1, 0xf5, 0x0e},
    {0x02, 0x15, 0x42, 0x02, 0x9f},
    {0x06, 0x44, 0x02, 0x04, 0x8e},
    {0x03, 0x11, 0x42, 0x04, 0x8e},
    {0x04, 0x83, 0xc1, 0xf5, 0x0e},
    {0x02, 0x11, 0x42, 0x04, 0x8e},
    {0x07, 0x42, 0x02, 0x42, 0x9f},
    {0x03, 0x84, 0xc1, 0xb5, 0x0e},
    {0x01, 0x81, 0x46, 0x42, 0xce},
    {0x02, 0x84, 0xc1, 0xb5, 0x0e},
    {0x05, 0x44, 0x02, 0x04, 0x8e},
    {0x03, 0x06, 0x42, 0x06, 0x6c},
    {0x04, 0x81, 0x46, 0x42, 0xce},
    {0x02, 0x06, 0x42, 0x06, 0x6c},
    {0x4e, 0x06, 0x02, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0x04, 0x8e},
    {0x01, 0x0a, 0x42, 0x44, 0x8e},
    {0x02, 0x01, 0x42, 0x04, 0x8e},
    {0x06, 0x42, 0x02, 0x04, 0x8e},
    {0x03, 0x08, 0x42, 0x81, 0x7e},
    {0x04, 0x0a, 0x42, 0x44, 0x8e},
    {0x02, 0x08, 0x42, 0x81, 0x7e},
    {0x08, 0x47, 0x43, 0xb5, 0xac},
    {0x03, 0x83, 0x46, 0x02, 0xce},
    {0x01, 0x04, 0x42, 0xc1, 0x7e},
    {0x02, 0x83, 0x46, 0x02, 0xce},
    {0x05, 0x42, 0x02, 0x04, 0x8e},
    {0x03, 0x81, 0x47, 0x04, 0xbe},
    {0x04, 0x04, 0x42, 0xc1, 0x7e},
    {0x02, 0x81, 0x47, 0x04, 0xbe},
    {0x0c, 0x47, 0x44, 0xf5, 0xbe},
    {0x03, 0x0a, 0x42, 0x81, 0x7e},
    {0x01, 0x02, 0x42, 0xc1, 0x7e},
    {0x02, 0x0a, 0x42, 0x81, 0x7e},
    {0x06, 0x47, 0x02, 0x04, 0x8e},
    {0x03, 0x04, 0x42, 0x06, 0x6c},
    {0x04, 0x02, 0x42, 0xc1, 0x7e},
    {0x02, 0x04, 0x42, 0x06, 0x6c},
    {0x07, 0x47, 0x02, 0x42, 0x9f},
    {0x03, 0x02, 0x42, 0x06, 0x6c},
    {0x01, 0x07, 0x42, 0xc1, 0x7e},
    {0x02, 0x02, 0x42, 0x06, 0x6c},
    {0x05, 0x47, 0x02, 0x04, 0x8e},
    {0x03, 0x07, 0x42, 0x06, 0x6c},
    {0x04, 0x07, 0x42, 0xc1, 0x7e},
    {0x02, 0x07, 0x42, 0x06, 0x6c},
    {0xb4, 0xb5, 0x00, 0x00, 0x0c},
    {0x03, 0xb4, 0xf5, 0x00, 0x0c},
    {0x01, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0xb4, 0xf5, 0x00, 0x0c},
    {0x06, 0xf5, 0x00, 0x00, 0x04},
    {0x03, 0x03, 0x4e, 0xb5, 0x6e},
    {0x04, 0xb4, 0xf5, 0x40, 0x0c},
    {0x02, 0x03, 0x4e, 0xb5, 0x6e},
    {0x09, 0x56, 0x42, 0xb5, 0xdf},
    {0x03, 0x0b, 0x4c, 0xb5, 0x7e},
    {0x01, 0x03, 0x4c, 0xf5, 0x7e},
    {0x02, 0x0b, 0x4c, 0xb5, 0x7e},
    {0x05, 0xf5, 0x00, 0x00, 0x04},
    {0x03, 0x05, 0x4e, 0xb5, 0x6e},
    {0x04, 0x03, 0x4c, 0xf5, 0x7e},
    {0x02, 0x05, 0x4e, 0xb5, 0x6e},
    {0x0a, 0x4d, 0x42, 0xf5, 0xdf},
    {0x03, 0x0c, 0x47, 0xb5, 0x8d},
    {0x01, 0x0b, 0x47, 0xf5, 0x8d},
    {0x02, 0x0c, 0x47, 0xb5, 0x8d},
    {0x06, 0x43, 0x07, 0xb5, 0x8d},
    {0x03, 0x09, 0x4c, 0xb5, 0x7e},
    {0x04, 0x0b, 0x47, 0xf5, 0x8d},
    {0x02, 0x09, 0x4c, 0xb5, 0x7e},
    {0x07, 0x5e, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0x41, 0xb5, 0xee},
    {0x01, 0x05, 0x4c, 0xf5, 0x7e},
    {0x02, 0x9a, 0x41, 0xb5, 0xee},
    {0x05, 0x43, 0x07, 0xb5, 0x8d},
    {0x03, 0x06, 0x4e, 0xb5, 0x6e},
    {0x04, 0x05, 0x4c, 0xf5, 0x7e},
    {0x02, 0x06, 0x4e, 0xb5, 0x6e},
    {0x4d, 0x01, 0xb5, 0x00, 0xee},
    {0x03, 0x14, 0x45, 0xb5, 0x9d},
    {0x01, 0x0c, 0x45, 0xf5, 0x9d},
    {0x02, 0x14, 0x45, 0xb5, 0x9d},
    {0x06, 0x4b, 0x05, 0xb5, 0x9d},
    {0x03, 0x82, 0x4d, 0x02, 0xdf},
    {0x04, 0x0c, 0x45, 0xf5, 0x9d},
    {0x02, 0x82, 0x4d, 0x02, 0xdf},
    {0x08, 0x56, 0x42, 0xb5, 0xdf},
    {0x03, 0x18, 0x45, 0xb5, 0x9d},
    {0x01, 0x09, 0x47, 0xf5, 0x8d},
    {0x02, 0x18, 0x45, 0xb5, 0x9d},
    {0x05, 0x4b, 0x05, 0xb5, 0x9d},
    {0x03, 0x0e, 0x47, 0xb5, 0x8d},
    {0x04, 0x09, 0x47, 0xf5, 0x8d},
    {0x02, 0x0e, 0x47, 0xb5, 0x8d},
    {0x4f, 0x0a, 0xb5, 0x40, 0xee},
    {0x03, 0x1c, 0x45, 0xb5, 0x9d},
    {0x01, 0x9a, 0x4a, 0xf5, 0xee},
    {0x02, 0x1c, 0x45, 0xb5, 0x9d},
    {0x06, 0x45, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0x4e, 0xb5, 0x6e},
    {0x04, 0x9a, 0x4a, 0xf5, 0xee},
    {0x02, 0x04, 0x4e, 0xb5, 0x6e},
    {0x07, 0x43, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x4e, 0xb5, 0x6e},
    {0x01, 0x06, 0x4c, 0xf5, 0x7e},
    {0x02, 0x02, 0x4e, 0xb5, 0x6e},
    {0x05, 0x45, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0x4e, 0xb5, 0x6e},
    {0x04, 0x06, 0x4c, 0xf5, 0x7e},
    {0x02, 0x07, 0x4e, 0xb5, 0x6e},
    {0x52, 0x02, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x45, 0xb5, 0x9d},
    {0x01, 0x14, 0x44, 0xf5, 0xad},
    {0x02, 0x17, 0x45, 0xb5, 0x9d},
    {0x06, 0x4c, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x43, 0x01, 0x6e},
    {0x04, 0x14, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x43, 0x01, 0x6e},
    {0x09, 0x43, 0x44, 0xb5, 0xad},
    {0x03, 0x1b, 0x45, 0xb5, 0x9d},
    {0x01, 0x82, 0x41, 0xf5, 0xee},
    {0x02, 0x1b, 0x45, 0xb5, 0x9d},
    {0x05, 0x4c, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x43, 0x01, 0x6e},
    {0x04, 0x82, 0x41, 0xf5, 0xee},
    {0x02, 0x05, 0x43, 0x01, 0x6e},
    {0x0b, 0x4d, 0x42, 0xf5, 0xdf},
    {0x03, 0x27, 0x44, 0xb5, 0xad},
    {0x01, 0x18, 0x44, 0xf5, 0xad},
    {0x02, 0x27, 0x44, 0xb5, 0xad},
    {0x06, 0x49, 0x05, 0xb5, 0x9d},
    {0x03, 0x10, 0x47, 0xb5, 0x8d},
    {0x04, 0x18, 0x44, 0xf5, 0xad},
    {0x02, 0x10, 0x47, 0xb5, 0x8d},
    {0x07, 0x4b, 0x04, 0xf5, 0xad},
    {0x03, 0x89, 0x42, 0xb5, 0xee},
    {0x01, 0x0e, 0x45, 0xf5, 0x9d},
    {0x02, 0x89, 0x42, 0xb5, 0xee},
    {0x05, 0x49, 0x05, 0xb5, 0x9d},
    {0x03, 0x06, 0x43, 0x01, 0x6e},
    {0x04, 0x0e, 0x45, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x01, 0x6e},
    {0x51, 0x02, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x45, 0xb5, 0x9d},
    {0x01, 0x1c, 0x44, 0xf5, 0xad},
    {0x02, 0x13, 0x45, 0xb5, 0x9d},
    {0x06, 0xda, 0x02, 0xb5, 0xee},
    {0x03, 0x08, 0x4c, 0xb5, 0x7e},
    {0x04, 0x1c, 0x44, 0xf5, 0xad},
    {0x02, 0x08, 0x4c, 0xb5, 0x7e},
    {0x08, 0x43, 0x44, 0xb5, 0xad},
    {0x03, 0x37, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x4c, 0xf5, 0x7e},
    {0x02, 0x37, 0x44, 0xb5, 0xad},
    {0x05, 0xda, 0x02, 0xb5, 0xee},
    {0x03, 0x81, 0x4d, 0x02, 0xdf},
    {0x04, 0x04, 0x4c, 0xf5, 0x7e},
    {0x02, 0x81, 0x4d, 0x02, 0xdf},
    {0x0c, 0x4d, 0x42, 0xf5, 0xdf},
    {0x03, 0x0a, 0x4c, 0xb5, 0x7e},
    {0x01, 0x02, 0x4c, 0xf5, 0x7e},
    {0x02, 0x0a, 0x4c, 0xb5, 0x7e},
    {0x06, 0x46, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0x43, 0x01, 0x6e},
    {0x04, 0x02, 0x4c, 0xf5, 0x7e},
    {0x02, 0x04, 0x43, 0x01, 0x6e},
    {0x07, 0x45, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x43, 0x01, 0x6e},
    {0x01, 0x07, 0x4c, 0xf5, 0x7e},
    {0x02, 0x02, 0x43, 0x01, 0x6e},
    {0x05, 0x46, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0x43, 0x01, 0x6e},
    {0x04, 0x07, 0x4c, 0xf5, 0x7e},
    {0x02, 0x07, 0x43, 0x01, 0x6e},
    {0xdc, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x2d, 0x44, 0xb5, 0xad},
    {0x01, 0x17, 0x44, 0xf5, 0xad},
    {0x02, 0x2d, 0x44, 0xb5, 0xad},
    {0x06, 0x54, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x41, 0x0a, 0x6e},
    {0x04, 0x17, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x41, 0x0a, 0x6e},
    {0x09, 0x4b, 0x42, 0xb5, 0xbd},
    {0x03, 0x0b, 0x43, 0x0a, 0x7e},
    {0x01, 0x03, 0x43, 0x4a, 0x7e},
    {0x02, 0x0b, 0x43, 0x0a, 0x7e},
    {0x05, 0x54, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x41, 0x0a, 0x6e},
    {0x04, 0x03, 0x43, 0x4a, 0x7e},
    {0x02, 0x05, 0x41, 0x0a, 0x6e},
    {0x0a, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x35, 0x44, 0xb5, 0xad},
    {0x01, 0x1b, 0x44, 0xf5, 0xad},
    {0x02, 0x35, 0x44, 0xb5, 0xad},
    {0x06, 0xc2, 0x0a, 0xb5, 0xee},
    {0x03, 0x09, 0x43, 0x0a, 0x7e},
    {0x04, 0x1b, 0x44, 0xf5, 0xad},
    {0x02, 0x09, 0x43, 0x0a, 0x7e},
    {0x07, 0x4c, 0x02, 0xf5, 0xbd},
    {0x03, 0x87, 0x42, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x4a, 0x7e},
    {0x02, 0x87, 0x42, 0xb5, 0xee},
    {0x05, 0xc2, 0x0a, 0xb5, 0xee},
    {0x03, 0x06, 0x41, 0x0a, 0x6e},
    {0x04, 0x05, 0x43, 0x4a, 0x7e},
    {0x02, 0x06, 0x41, 0x0a, 0x6e},
    {0x57, 0x07, 0xf5, 0x40, 0xff},
    {0x03, 0x23, 0x44, 0xb5, 0xad},
    {0x01, 0x27, 0x42, 0xf5, 0xbd},
    {0x02, 0x23, 0x44, 0xb5, 0xad},
    {0x06, 0x58, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x43, 0x02, 0xbd},
    {0x04, 0x27, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x43, 0x02, 0xbd},
    {0x08, 0x4b, 0x42, 0xb5, 0xbd},
    {0x03, 0x33, 0x44, 0xb5, 0xad},
    {0x01, 0x10, 0x45, 0xf5, 0x9d},
    {0x02, 0x33, 0x44, 0xb5, 0xad},
    {0x05, 0x58, 0x02, 0xb5, 0xbd},
    {0x03, 0x0f, 0x47, 0xb5, 0x8d},
    {0x04, 0x10, 0x45, 0xf5, 0x9d},
    {0x02, 0x0f, 0x47, 0xb5, 0x8d},
    {0x54, 0x07, 0xf5, 0x40, 0xff},
    {0x03, 0x3f, 0x44, 0xb5, 0xad},
    {0x01, 0x89, 0x47, 0xf5, 0xff},
    {0x02, 0x3f, 0x44, 0xb5, 0xad},
    {0x06, 0x4e, 0x04, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x0a, 0x6e},
    {0x04, 0x89, 0x47, 0xf5, 0xff},
    {0x02, 0x04, 0x41, 0x0a, 0x6e},
    {0x07, 0x49, 0x04, 0xf5, 0xad},
    {0x03, 0x02, 0x41, 0x0a, 0x6e},
    {0x01, 0x06, 0x43, 0x4a, 0x7e},
    {0x02, 0x02, 0x41, 0x0a, 0x6e},
    {0x05, 0x4e, 0x04, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x0a, 0x6e},
    {0x04, 0x06, 0x43, 0x4a, 0x7e},
    {0x02, 0x07, 0x41, 0x0a, 0x6e},
    {0x59, 0x07, 0xf5, 0x40, 0xff},
    {0x03, 0x0d, 0x47, 0xb5, 0x8d},
    {0x01, 0x13, 0x44, 0xf5, 0xad},
    {0x02, 0x0d, 0x47, 0xb5, 0x8d},
    {0x06, 0x5c, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x42, 0x01, 0x6e},
    {0x04, 0x13, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x42, 0x01, 0x6e},
    {0x09, 0x45, 0x44, 0xb5, 0xad},
    {0x03, 0x97, 0x47, 0xb5, 0xff},
    {0x01, 0x08, 0x47, 0xf5, 0x8d},
    {0x02, 0x97, 0x47, 0xb5, 0xff},
    {0x05, 0x5c, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x42, 0x01, 0x6e},
    {0x04, 0x08, 0x47, 0xf5, 0x8d},
    {0x02, 0x05, 0x42, 0x01, 0x6e},
    {0x0b, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x2b, 0x44, 0xb5, 0xad},
    {0x01, 0x37, 0x42, 0xf5, 0xbd},
    {0x02, 0x2b, 0x44, 0xb5, 0xad},
    {0x06, 0x44, 0x07, 0xb5, 0x8d},
    {0x03, 0x11, 0x47, 0xb5, 0x8d},
    {0x04, 0x37, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x47, 0xb5, 0x8d},
    {0x07, 0xda, 0x07, 0xf5, 0xff},
    {0x03, 0x93, 0x47, 0xb5, 0xff},
    {0x01, 0x81, 0x41, 0xf5, 0xee},
    {0x02, 0x93, 0x47, 0xb5, 0xff},
    {0x05, 0x44, 0x07, 0xb5, 0x8d},
    {0x03, 0x06, 0x42, 0x01, 0x6e},
    {0x04, 0x81, 0x41, 0xf5, 0xee},
    {0x02, 0x06, 0x42, 0x01, 0x6e},
    {0x4e, 0x01, 0xb5, 0x00, 0xee},
    {0x03, 0x01, 0x47, 0xb5, 0x8d},
    {0x01, 0x0a, 0x47, 0xf5, 0x8d},
    {0x02, 0x01, 0x47, 0xb5, 0x8d},
    {0x06, 0x42, 0x07, 0xb5, 0x8d},
    {0x03, 0x08, 0x43, 0x0a, 0x7e},
    {0x04, 0x0a, 0x47, 0xf5, 0x8d},
    {0x02, 0x08, 0x43, 0x0a, 0x7e},
    {0x08, 0x45, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0x41, 0xb5, 0xee},
    {0x01, 0x04, 0x43, 0x4a, 0x7e},
    {0x02, 0x83, 0x41, 0xb5, 0xee},
    {0x05, 0x42, 0x07, 0xb5, 0x8d},
    {0x03, 0x81, 0x43, 0x02, 0xbd},
    {0x04, 0x04, 0x43, 0x4a, 0x7e},
    {0x02, 0x81, 0x43, 0x02, 0xbd},
    {0x0c, 0x43, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x0a, 0x7e},
    {0x01, 0x02, 0x43, 0x4a, 0x7e},
    {0x02, 0x0a, 0x43, 0x0a, 0x7e},
    {0x06, 0x47, 0x07, 0xb5, 0x8d},
    {0x03, 0x04, 0x42, 0x01, 0x6e},
    {0x04, 0x02, 0x43, 0x4a, 0x7e},
    {0x02, 0x04, 0x42, 0x01, 0x6e},
    {0x07, 0x46, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x01, 0x6e},
    {0x01, 0x07, 0x43, 0x4a, 0x7e},
    {0x02, 0x02, 0x42, 0x01, 0x6e},
    {0x05, 0x47, 0x07, 0xb5, 0x8d},
    {0x03, 0x07, 0x42, 0x01, 0x6e},
    {0x04, 0x07, 0x43, 0x4a, 0x7e},
    {0x02, 0x07, 0x42, 0x01, 0x6e},
    {0xf4, 0x4a, 0xf5, 0x00, 0x0e},
    {0x03, 0x1d, 0x44, 0xb5, 0xad},
    {0x01, 0x2d, 0x42, 0xf5, 0xbd},
    {0x02, 0x1d, 0x44, 0xb5, 0xad},
    {0x06, 0x57, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x46, 0x02, 0x6e},
    {0x04, 0x2d, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0x02, 0x6e},
    {0x09, 0x5a, 0x42, 0xb5, 0xdf},
    {0x03, 0x0b, 0x41, 0x02, 0x7e},
    {0x01, 0x03, 0x41, 0x42, 0x7e},
    {0x02, 0x0b, 0x41, 0x02, 0x7e},
    {0x05, 0x57, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x46, 0x02, 0x6e},
    {0x04, 0x03, 0x41, 0x42, 0x7e},
    {0x02, 0x05, 0x46, 0x02, 0x6e},
    {0x0a, 0x52, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x43, 0x02, 0x8e},
    {0x01, 0x0b, 0x43, 0x42, 0x8e},
    {0x02, 0x0c, 0x43, 0x02, 0x8e},
    {0x06, 0x43, 0x03, 0x02, 0x8e},
    {0x03, 0x09, 0x41, 0x02, 0x7e},
    {0x04, 0x0b, 0x43, 0x42, 0x8e},
    {0x02, 0x09, 0x41, 0x02, 0x7e},
    {0x07, 0x62, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0x48, 0x02, 0xdf},
    {0x01, 0x05, 0x41, 0x42, 0x7e},
    {0x02, 0x9a, 0x48, 0x02, 0xdf},
    {0x05, 0x43, 0x03, 0x02, 0x8e},
    {0x03, 0x06, 0x46, 0x02, 0x6e},
    {0x04, 0x05, 0x41, 0x42, 0x7e},
    {0x02, 0x06, 0x46, 0x02, 0x6e},
    {0x4d, 0x08, 0x02, 0xb5, 0xdf},
    {0x03, 0x21, 0x44, 0xb5, 0xad},
    {0x01, 0x35, 0x42, 0xf5, 0xbd},
    {0x02, 0x21, 0x44, 0xb5, 0xad},
    {0x06, 0x5b, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x52, 0xb5, 0xee},
    {0x04, 0x35, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x52, 0xb5, 0xee},
    {0x08, 0x5a, 0x42, 0xb5, 0xdf},
    {0x03, 0x31, 0x44, 0xb5, 0xad},
    {0x01, 0x09, 0x43, 0x42, 0x8e},
    {0x02, 0x31, 0x44, 0xb5, 0xad},
    {0x05, 0x5b, 0x02, 0xb5, 0xbd},
    {0x03, 0x0e, 0x43, 0x02, 0x8e},
    {0x04, 0x09, 0x43, 0x42, 0x8e},
    {0x02, 0x0e, 0x43, 0x02, 0x8e},
    {0xc3, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x3d, 0x44, 0xb5, 0xad},
    {0x01, 0x87, 0x47, 0xf5, 0xff},
    {0x02, 0x3d, 0x44, 0xb5, 0xad},
    {0x06, 0x45, 0x03, 0x02, 0x8e},
    {0x03, 0x04, 0x46, 0x02, 0x6e},
    {0x04, 0x87, 0x47, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0x02, 0x6e},
    {0x07, 0xc2, 0x02, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x02, 0x6e},
    {0x01, 0x06, 0x41, 0x42, 0x7e},
    {0x02, 0x02, 0x46, 0x02, 0x6e},
    {0x05, 0x45, 0x03, 0x02, 0x8e},
    {0x03, 0x07, 0x46, 0x02, 0x6e},
    {0x04, 0x06, 0x41, 0x42, 0x7e},
    {0x02, 0x07, 0x46, 0x02, 0x6e},
    {0xd5, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x2f, 0x44, 0xb5, 0xad},
    {0x01, 0x23, 0x42, 0xf5, 0xbd},
    {0x02, 0x2f, 0x44, 0xb5, 0xad},
    {0x06, 0x68, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x08, 0x6d},
    {0x04, 0x23, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x08, 0x6d},
    {0x09, 0x49, 0x42, 0xb5, 0xbd},
    {0x03, 0x3b, 0x44, 0xb5, 0xad},
    {0x01, 0x82, 0x48, 0x42, 0xdf},
    {0x02, 0x3b, 0x44, 0xb5, 0xad},
    {0x05, 0x68, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x08, 0x6d},
    {0x04, 0x82, 0x48, 0x42, 0xdf},
    {0x02, 0x05, 0x43, 0x08, 0x6d},
    {0x0b, 0x52, 0xf5, 0x40, 0xee},
    {0x03, 0x29, 0x44, 0xb5, 0xad},
    {0x01, 0x33, 0x42, 0xf5, 0xbd},
    {0x02, 0x29, 0x44, 0xb5, 0xad},
    {0x06, 0x50, 0x04, 0xb5, 0xad},
    {0x03, 0x10, 0x43, 0x02, 0x8e},
    {0x04, 0x33, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0x02, 0x8e},
    {0x07, 0x72, 0x02, 0xf5, 0xdf},
    {0x03, 0x8f, 0x47, 0xb5, 0xff},
    {0x01, 0x0f, 0x45, 0xf5, 0x9d},
    {0x02, 0x8f, 0x47, 0xb5, 0xff},
    {0x05, 0x50, 0x04, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x08, 0x6d},
    {0x04, 0x0f, 0x45, 0xf5, 0x9d},
    {0x02, 0x06, 0x43, 0x08, 0x6d},
    {0x5f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x44, 0xb5, 0xad},
    {0x01, 0x3f, 0x42, 0xf5, 0xbd},
    {0x02, 0x1f, 0x44, 0xb5, 0xad},
    {0x06, 0xce, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x02, 0x7e},
    {0x04, 0x3f, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0x02, 0x7e},
    {0x08, 0x49, 0x42, 0xb5, 0xbd},
    {0x03, 0x39, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x41, 0x42, 0x7e},
    {0x02, 0x39, 0x44, 0xb5, 0xad},
    {0x05, 0xce, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0x52, 0xb5, 0xee},
    {0x04, 0x04, 0x41, 0x42, 0x7e},
    {0x02, 0x81, 0x52, 0xb5, 0xee},
    {0x0c, 0x52, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x41, 0x02, 0x7e},
    {0x01, 0x02, 0x41, 0x42, 0x7e},
    {0x02, 0x0a, 0x41, 0x02, 0x7e},
    {0x06, 0x46, 0x03, 0x02, 0x8e},
    {0x03, 0x04, 0x43, 0x08, 0x6d},
    {0x04, 0x02, 0x41, 0x42, 0x7e},
    {0x02, 0x04, 0x43, 0x08, 0x6d},
    {0x07, 0x4e, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x08, 0x6d},
    {0x01, 0x07, 0x41, 0x42, 0x7e},
    {0x02, 0x02, 0x43, 0x08, 0x6d},
    {0x05, 0x46, 0x03, 0x02, 0x8e},
    {0x03, 0x07, 0x43, 0x08, 0x6d},
    {0x04, 0x07, 0x41, 0x42, 0x7e},
    {0x02, 0x07, 0x43, 0x08, 0x6d},
    {0xdd, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x45, 0xb5, 0x9d},
    {0x01, 0x0d, 0x45, 0xf5, 0x9d},
    {0x02, 0x16, 0x45, 0xb5, 0x9d},
    {0x06, 0x53, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x44, 0x0a, 0x6e},
    {0x04, 0x0d, 0x45, 0xf5, 0x9d},
    {0x02, 0x03, 0x44, 0x0a, 0x6e},
    {0x09, 0xca, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x42, 0x0a, 0x7e},
    {0x01, 0x03, 0x42, 0x4a, 0x7e},
    {0x02, 0x0b, 0x42, 0x0a, 0x7e},
    {0x05, 0x53, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x44, 0x0a, 0x6e},
    {0x04, 0x03, 0x42, 0x4a, 0x7e},
    {0x02, 0x05, 0x44, 0x0a, 0x6e},
    {0x0a, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x45, 0xb5, 0x9d},
    {0x01, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x45, 0xb5, 0x9d},
    {0x06, 0x48, 0x05, 0xb5, 0x9d},
    {0x03, 0x09, 0x42, 0x0a, 0x7e},
    {0x04, 0x98, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x0a, 0x7e},
    {0x07, 0x7e, 0x02, 0xf5, 0xdf},
    {0x03, 0x8b, 0x47, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x4a, 0x7e},
    {0x02, 0x8b, 0x47, 0xb5, 0xff},
    {0x05, 0x48, 0x05, 0xb5, 0x9d},
    {0x03, 0x06, 0x44, 0x0a, 0x6e},
    {0x04, 0x05, 0x42, 0x4a, 0x7e},
    {0x02, 0x06, 0x44, 0x0a, 0x6e},
    {0x7a, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x25, 0x44, 0xb5, 0xad},
    {0x01, 0x2b, 0x42, 0xf5, 0xbd},
    {0x02, 0x25, 0x44, 0xb5, 0xad},
    {0x06, 0x78, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x45, 0x02, 0xbd},
    {0x04, 0x2b, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x45, 0x02, 0xbd},
    {0x08, 0xca, 0xf5, 0x00, 0x0e},
    {0x03, 0x19, 0x45, 0xb5, 0x9d},
    {0x01, 0x11, 0x45, 0xf5, 0x9d},
    {0x02, 0x19, 0x45, 0xb5, 0x9d},
    {0x05, 0x78, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0x02, 0x8e},
    {0x04, 0x11, 0x45, 0xf5, 0x9d},
    {0x02, 0x0f, 0x43, 0x02, 0x8e},
    {0x55, 0x07, 0xf5, 0x40, 0xff},
    {0x03, 0x85, 0x42, 0xb5, 0xee},
    {0x01, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x42, 0xb5, 0xee},
    {0x06, 0xc1, 0x0a, 0xb5, 0xee},
    {0x03, 0x04, 0x44, 0x0a, 0x6e},
    {0x04, 0x94, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x0a, 0x6e},
    {0x07, 0x44, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x44, 0x0a, 0x6e},
    {0x01, 0x06, 0x42, 0x4a, 0x7e},
    {0x02, 0x02, 0x44, 0x0a, 0x6e},
    {0x05, 0xc1, 0x0a, 0xb5, 0xee},
    {0x03, 0x07, 0x44, 0x0a, 0x6e},
    {0x04, 0x06, 0x42, 0x4a, 0x7e},
    {0x02, 0x07, 0x44, 0x0a, 0x6e},
    {0xcf, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x43, 0x02, 0x8e},
    {0x01, 0x01, 0x45, 0xf5, 0x9d},
    {0x02, 0x0d, 0x43, 0x02, 0x8e},
    {0x06, 0x4a, 0x05, 0xb5, 0x9d},
    {0x03, 0x03, 0x42, 0x08, 0x6d},
    {0x04, 0x01, 0x45, 0xf5, 0x9d},
    {0x02, 0x03, 0x42, 0x08, 0x6d},
    {0x09, 0x46, 0x44, 0xb5, 0xad},
    {0x03, 0x12, 0x45, 0xb5, 0x9d},
    {0x01, 0x08, 0x43, 0x42, 0x8e},
    {0x02, 0x12, 0x45, 0xb5, 0x9d},
    {0x05, 0x4a, 0x05, 0xb5, 0x9d},
    {0x03, 0x05, 0x42, 0x08, 0x6d},
    {0x04, 0x08, 0x43, 0x42, 0x8e},
    {0x02, 0x05, 0x42, 0x08, 0x6d},
    {0x0b, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x45, 0xb5, 0x9d},
    {0x01, 0x83, 0x4a, 0xf5, 0xee},
    {0x02, 0x15, 0x45, 0xb5, 0x9d},
    {0x06, 0x44, 0x03, 0x02, 0x8e},
    {0x03, 0x11, 0x43, 0x02, 0x8e},
    {0x04, 0x83, 0x4a, 0xf5, 0xee},
    {0x02, 0x11, 0x43, 0x02, 0x8e},
    {0x07, 0x42, 0x05, 0xf5, 0x9d},
    {0x03, 0x84, 0x4a, 0xb5, 0xee},
    {0x01, 0x81, 0x48, 0x42, 0xdf},
    {0x02, 0x84, 0x4a, 0xb5, 0xee},
    {0x05, 0x44, 0x03, 0x02, 0x8e},
    {0x03, 0x06, 0x42, 0x08, 0x6d},
    {0x04, 0x81, 0x48, 0x42, 0xdf},
    {0x02, 0x06, 0x42, 0x08, 0x6d},
    {0x4e, 0x08, 0x02, 0xb5, 0xdf},
    {0x03, 0x01, 0x43, 0x02, 0x8e},
    {0x01, 0x0a, 0x43, 0x42, 0x8e},
    {0x02, 0x01, 0x43, 0x02, 0x8e},
    {0x06, 0x42, 0x03, 0x02, 0x8e},
    {0x03, 0x08, 0x42, 0x0a, 0x7e},
    {0x04, 0x0a, 0x43, 0x42, 0x8e},
    {0x02, 0x08, 0x42, 0x0a, 0x7e},
    {0x08, 0x46, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0x48, 0x02, 0xdf},
    {0x01, 0x04, 0x42, 0x4a, 0x7e},
    {0x02, 0x83, 0x48, 0x02, 0xdf},
    {0x05, 0x42, 0x03, 0x02, 0x8e},
    {0x03, 0x81, 0x45, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0x4a, 0x7e},
    {0x02, 0x81, 0x45, 0x02, 0xbd},
    {0x0c, 0x45, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x0a, 0x7e},
    {0x01, 0x02, 0x42, 0x4a, 0x7e},
    {0x02, 0x0a, 0x42, 0x0a, 0x7e},
    {0x06, 0x47, 0x03, 0x02, 0x8e},
    {0x03, 0x04, 0x42, 0x08, 0x6d},
    {0x04, 0x02, 0x42, 0x4a, 0x7e},
    {0x02, 0x04, 0x42, 0x08, 0x6d},
    {0x07, 0x47, 0x05, 0xf5, 0x9d},
    {0x03, 0x02, 0x42, 0x08, 0x6d},
    {0x01, 0x07, 0x42, 0x4a, 0x7e},
    {0x02, 0x02, 0x42, 0x08, 0x6d},
    {0x05, 0x47, 0x03, 0x02, 0x8e},
    {0x03, 0x07, 0x42, 0x08, 0x6d},
    {0x04, 0x07, 0x42, 0x4a, 0x7e},
    {0x02, 0x07, 0x42, 0x08, 0x6d},
    {0xf4, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0xa4, 0xf5, 0x00, 0x0e},
    {0x01, 0x1d, 0x42, 0xf5, 0xbd},
    {0x02, 0xa4, 0xf5, 0x00, 0x0e},
    {0x06, 0x6e, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x48, 0xb5, 0x6c},
    {0x04, 0x1d, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x48, 0xb5, 0x6c},
    {0x09, 0x66, 0xf5, 0x00, 0xee},
    {0x03, 0x0b, 0x46, 0x07, 0x7f},
    {0x01, 0x03, 0x46, 0x47, 0x7f},
    {0x02, 0x0b, 0x46, 0x07, 0x7f},
    {0x05, 0x6e, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x48, 0xb5, 0x6c},
    {0x04, 0x03, 0x46, 0x47, 0x7f},
    {0x02, 0x05, 0x48, 0xb5, 0x6c},
    {0x0a, 0x55, 0xf5, 0x40, 0xee},
    {0x03, 0x0c, 0x41, 0x07, 0x8f},
    {0x01, 0x0b, 0x41, 0x47, 0x8f},
    {0x02, 0x0c, 0x41, 0x07, 0x8f},
    {0x06, 0x43, 0x01, 0x07, 0x8f},
    {0x03, 0x09, 0x46, 0x07, 0x7f},
    {0x04, 0x0b, 0x41, 0x47, 0x8f},
    {0x02, 0x09, 0x46, 0x07, 0x7f},
    {0x07, 0x70, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0xc3, 0xb5, 0x0e},
    {0x01, 0x05, 0x46, 0x47, 0x7f},
    {0x02, 0x9a, 0xc3, 0xb5, 0x0e},
    {0x05, 0x43, 0x01, 0x07, 0x8f},
    {0x03, 0x06, 0x48, 0xb5, 0x6c},
    {0x04, 0x05, 0x46, 0x47, 0x7f},
    {0x02, 0x06, 0x48, 0xb5, 0x6c},
    {0x4d, 0x83, 0xb5, 0x00, 0x0e},
    {0x03, 0x14, 0x43, 0x07, 0x9f},
    {0x01, 0x0c, 0x43, 0x47, 0x9f},
    {0x02, 0x14, 0x43, 0x07, 0x9f},
    {0x06, 0x4b, 0x03, 0x07, 0x9f},
    {0x03, 0x82, 0x55, 0xb5, 0xee},
    {0x04, 0x0c, 0x43, 0x47, 0x9f},
    {0x02, 0x82, 0x55, 0xb5, 0xee},
    {0x08, 0x66, 0xf5, 0x00, 0xee},
    {0x03, 0x18, 0x43, 0x07, 0x9f},
    {0x01, 0x09, 0x41, 0x47, 0x8f},
    {0x02, 0x18, 0x43, 0x07, 0x9f},
    {0x05, 0x4b, 0x03, 0x07, 0x9f},
    {0x03, 0x0e, 0x41, 0x07, 0x8f},
    {0x04, 0x09, 0x41, 0x47, 0x8f},
    {0x02, 0x0e, 0x41, 0x07, 0x8f},
    {0x4f, 0x04, 0x02, 0xf5, 0xdf},
    {0x03, 0x1c, 0x43, 0x07, 0x9f},
    {0x01, 0x9a, 0x44, 0x42, 0xdf},
    {0x02, 0x1c, 0x43, 0x07, 0x9f},
    {0x06, 0x45, 0x01, 0x07, 0x8f},
    {0x03, 0x04, 0x48, 0xb5, 0x6c},
    {0x04, 0x9a, 0x44, 0x42, 0xdf},
    {0x02, 0x04, 0x48, 0xb5, 0x6c},
    {0x07, 0x43, 0x03, 0x47, 0x9f},
    {0x03, 0x02, 0x48, 0xb5, 0x6c},
    {0x01, 0x06, 0x46, 0x47, 0x7f},
    {0x02, 0x02, 0x48, 0xb5, 0x6c},
    {0x05, 0x45, 0x01, 0x07, 0x8f},
    {0x03, 0x07, 0x48, 0xb5, 0x6c},
    {0x04, 0x06, 0x46, 0x47, 0x7f},
    {0x02, 0x07, 0x48, 0xb5, 0x6c},
    {0xcb, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x17, 0x43, 0x07, 0x9f},
    {0x01, 0x21, 0x42, 0xf5, 0xbd},
    {0x02, 0x17, 0x43, 0x07, 0x9f},
    {0x06, 0x76, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x83, 0x6e},
    {0x04, 0x21, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x83, 0x6e},
    {0x09, 0xc2, 0x47, 0xb5, 0xff},
    {0x03, 0x1b, 0x43, 0x07, 0x9f},
    {0x01, 0x82, 0xc3, 0xf5, 0x0e},
    {0x02, 0x1b, 0x43, 0x07, 0x9f},
    {0x05, 0x76, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x83, 0x6e},
    {0x04, 0x82, 0xc3, 0xf5, 0x0e},
    {0x02, 0x05, 0x43, 0x83, 0x6e},
    {0x0b, 0x55, 0xf5, 0x40, 0xee},
    {0x03, 0x28, 0x44, 0xb5, 0xad},
    {0x01, 0x31, 0x42, 0xf5, 0xbd},
    {0x02, 0x28, 0x44, 0xb5, 0xad},
    {0x06, 0x49, 0x03, 0x07, 0x9f},
    {0x03, 0x10, 0x41, 0x07, 0x8f},
    {0x04, 0x31, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x41, 0x07, 0x8f},
    {0x07, 0x7c, 0x02, 0xf5, 0xdf},
    {0x03, 0x8d, 0x47, 0xb5, 0xff},
    {0x01, 0x0e, 0x43, 0x47, 0x9f},
    {0x02, 0x8d, 0x47, 0xb5, 0xff},
    {0x05, 0x49, 0x03, 0x07, 0x9f},
    {0x03, 0x06, 0x43, 0x83, 0x6e},
    {0x04, 0x0e, 0x43, 0x47, 0x9f},
    {0x02, 0x06, 0x43, 0x83, 0x6e},
    {0x71, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x43, 0x07, 0x9f},
    {0x01, 0x3d, 0x42, 0xf5, 0xbd},
    {0x02, 0x13, 0x43, 0x07, 0x9f},
    {0x06, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x46, 0x07, 0x7f},
    {0x04, 0x3d, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x46, 0x07, 0x7f},
    {0x08, 0xc2, 0x47, 0xb5, 0xff},
    {0x03, 0x38, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x46, 0x47, 0x7f},
    {0x02, 0x38, 0x44, 0xb5, 0xad},
    {0x05, 0xc8, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x55, 0xb5, 0xee},
    {0x04, 0x04, 0x46, 0x47, 0x7f},
    {0x02, 0x81, 0x55, 0xb5, 0xee},
    {0x0c, 0x55, 0xf5, 0x40, 0xee},
    {0x03, 0x0a, 0x46, 0x07, 0x7f},
    {0x01, 0x02, 0x46, 0x47, 0x7f},
    {0x02, 0x0a, 0x46, 0x07, 0x7f},
    {0x06, 0x46, 0x01, 0x07, 0x8f},
    {0x03, 0x04, 0x43, 0x83, 0x6e},
    {0x04, 0x02, 0x46, 0x47, 0x7f},
    {0x02, 0x04, 0x43, 0x83, 0x6e},
    {0x07, 0x45, 0x03, 0x47, 0x9f},
    {0x03, 0x02, 0x43, 0x83, 0x6e},
    {0x01, 0x07, 0x46, 0x47, 0x7f},
    {0x02, 0x02, 0x43, 0x83, 0x6e},
    {0x05, 0x46, 0x01, 0x07, 0x8f},
    {0x03, 0x07, 0x43, 0x83, 0x6e},
    {0x04, 0x07, 0x46, 0x47, 0x7f},
    {0x02, 0x07, 0x43, 0x83, 0x6e},
    {0xe2, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x44, 0xb5, 0xad},
    {0x01, 0x2f, 0x42, 0xf5, 0xbd},
    {0x02, 0x2e, 0x44, 0xb5, 0xad},
    {0x06, 0x64, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x04, 0x6d},
    {0x04, 0x2f, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x04, 0x6d},
    {0x09, 0x59, 0x42, 0xb5, 0xdf},
    {0x03, 0x0b, 0x43, 0x04, 0x7d},
    {0x01, 0x03, 0x43, 0x44, 0x7d},
    {0x02, 0x0b, 0x43, 0x04, 0x7d},
    {0x05, 0x64, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x04, 0x6d},
    {0x04, 0x03, 0x43, 0x44, 0x7d},
    {0x02, 0x05, 0x41, 0x04, 0x6d},
    {0x0a, 0x51, 0x42, 0xf5, 0xdf},
    {0x03, 0x36, 0x44, 0xb5, 0xad},
    {0x01, 0x3b, 0x42, 0xf5, 0xbd},
    {0x02, 0x36, 0x44, 0xb5, 0xad},
    {0x06, 0xc2, 0x04, 0x02, 0xdf},
    {0x03, 0x09, 0x43, 0x04, 0x7d},
    {0x04, 0x3b, 0x42, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x04, 0x7d},
    {0x07, 0x6a, 0x02, 0xf5, 0xdf},
    {0x03, 0x88, 0x42, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x44, 0x7d},
    {0x02, 0x88, 0x42, 0xb5, 0xee},
    {0x05, 0xc2, 0x04, 0x02, 0xdf},
    {0x03, 0x06, 0x41, 0x04, 0x6d},
    {0x04, 0x05, 0x43, 0x44, 0x7d},
    {0x02, 0x06, 0x41, 0x04, 0x6d},
    {0x6d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x44, 0xb5, 0xad},
    {0x01, 0x29, 0x42, 0xf5, 0xbd},
    {0x02, 0x24, 0x44, 0xb5, 0xad},
    {0x06, 0x74, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x51, 0x02, 0xdf},
    {0x04, 0x29, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x51, 0x02, 0xdf},
    {0x08, 0x59, 0x42, 0xb5, 0xdf},
    {0x03, 0x34, 0x44, 0xb5, 0xad},
    {0x01, 0x10, 0x43, 0x47, 0x9f},
    {0x02, 0x34, 0x44, 0xb5, 0xad},
    {0x05, 0x74, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x41, 0x07, 0x8f},
    {0x04, 0x10, 0x43, 0x47, 0x9f},
    {0x02, 0x0f, 0x41, 0x07, 0x8f},
    {0x65, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x44, 0xb5, 0xad},
    {0x01, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x44, 0xb5, 0xad},
    {0x06, 0x4f, 0x04, 0xb5, 0xad},
    {0x03, 0x04, 0x41, 0x04, 0x6d},
    {0x04, 0x90, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x04, 0x6d},
    {0x07, 0x50, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x04, 0x6d},
    {0x01, 0x06, 0x43, 0x44, 0x7d},
    {0x02, 0x02, 0x41, 0x04, 0x6d},
    {0x05, 0x4f, 0x04, 0xb5, 0xad},
    {0x03, 0x07, 0x41, 0x04, 0x6d},
    {0x04, 0x06, 0x43, 0x44, 0x7d},
    {0x02, 0x07, 0x41, 0x04, 0x6d},
    {0xc7, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x41, 0x07, 0x8f},
    {0x01, 0x1f, 0x42, 0xf5, 0xbd},
    {0x02, 0x0d, 0x41, 0x07, 0x8f},
    {0x06, 0x40, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0x83, 0x6e},
    {0x04, 0x1f, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x83, 0x6e},
    {0x09, 0x4f, 0x42, 0xb5, 0xce},
    {0x03, 0x99, 0x47, 0xb5, 0xff},
    {0x01, 0x08, 0x41, 0x47, 0x8f},
    {0x02, 0x99, 0x47, 0xb5, 0xff},
    {0x05, 0x40, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0x83, 0x6e},
    {0x04, 0x08, 0x41, 0x47, 0x8f},
    {0x02, 0x05, 0x42, 0x83, 0x6e},
    {0x0b, 0x51, 0x42, 0xf5, 0xdf},
    {0x03, 0x2c, 0x44, 0xb5, 0xad},
    {0x01, 0x39, 0x42, 0xf5, 0xbd},
    {0x02, 0x2c, 0x44, 0xb5, 0xad},
    {0x06, 0x44, 0x01, 0x07, 0x8f},
    {0x03, 0x11, 0x41, 0x07, 0x8f},
    {0x04, 0x39, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x41, 0x07, 0x8f},
    {0x07, 0xd2, 0xb5, 0x40, 0x0e},
    {0x03, 0x95, 0x47, 0xb5, 0xff},
    {0x01, 0x81, 0xc3, 0xf5, 0x0e},
    {0x02, 0x95, 0x47, 0xb5, 0xff},
    {0x05, 0x44, 0x01, 0x07, 0x8f},
    {0x03, 0x06, 0x42, 0x83, 0x6e},
    {0x04, 0x81, 0xc3, 0xf5, 0x0e},
    {0x02, 0x06, 0x42, 0x83, 0x6e},
    {0x4e, 0x83, 0xb5, 0x00, 0x0e},
    {0x03, 0x01, 0x41, 0x07, 0x8f},
    {0x01, 0x0a, 0x41, 0x47, 0x8f},
    {0x02, 0x01, 0x41, 0x07, 0x8f},
    {0x06, 0x42, 0x01, 0x07, 0x8f},
    {0x03, 0x08, 0x43, 0x04, 0x7d},
    {0x04, 0x0a, 0x41, 0x47, 0x8f},
    {0x02, 0x08, 0x43, 0x04, 0x7d},
    {0x08, 0x4f, 0x42, 0xb5, 0xce},
    {0x03, 0x83, 0xc3, 0xb5, 0x0e},
    {0x01, 0x04, 0x43, 0x44, 0x7d},
    {0x02, 0x83, 0xc3, 0xb5, 0x0e},
    {0x05, 0x42, 0x01, 0x07, 0x8f},
    {0x03, 0x81, 0x51, 0x02, 0xdf},
    {0x04, 0x04, 0x43, 0x44, 0x7d},
    {0x02, 0x81, 0x51, 0x02, 0xdf},
    {0x0c, 0x51, 0x42, 0xf5, 0xdf},
    {0x03, 0x0a, 0x43, 0x04, 0x7d},
    {0x01, 0x02, 0x43, 0x44, 0x7d},
    {0x02, 0x0a, 0x43, 0x04, 0x7d},
    {0x06, 0x47, 0x01, 0x07, 0x8f},
    {0x03, 0x04, 0x42, 0x83, 0x6e},
    {0x04, 0x02, 0x43, 0x44, 0x7d},
    {0x02, 0x04, 0x42, 0x83, 0x6e},
    {0x07, 0x46, 0x03, 0x47, 0x9f},
    {0x03, 0x02, 0x42, 0x83, 0x6e},
    {0x01, 0x07, 0x43, 0x44, 0x7d},
    {0x02, 0x02, 0x42, 0x83, 0x6e},
    {0x05, 0x47, 0x01, 0x07, 0x8f},
    {0x03, 0x07, 0x42, 0x83, 0x6e},
    {0x04, 0x07, 0x43, 0x44, 0x7d},
    {0x02, 0x07, 0x42, 0x83, 0x6e},
    {0xf4, 0x44, 0x02, 0xf5, 0xff},
    {0x03, 0x1e, 0x44, 0xb5, 0xad},
    {0x01, 0x16, 0x44, 0xf5, 0xad},
    {0x02, 0x1e, 0x44, 0xb5, 0xad},
    {0x06, 0x4d, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x45, 0x02, 0x6e},
    {0x04, 0x16, 0x44, 0xf5, 0xad},
    {0x02, 0x03, 0x45, 0x02, 0x6e},
    {0x09, 0xc6, 0xf5, 0x00, 0x0e},
    {0x03, 0x0b, 0x44, 0x02, 0x7e},
    {0x01, 0x03, 0x44, 0x42, 0x7e},
    {0x02, 0x0b, 0x44, 0x02, 0x7e},
    {0x05, 0x4d, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x45, 0x02, 0x6e},
    {0x04, 0x03, 0x44, 0x42, 0x7e},
    {0x02, 0x05, 0x45, 0x02, 0x6e},
    {0x0a, 0xc4, 0xf5, 0x40, 0x0e},
    {0x03, 0x0c, 0x42, 0x02, 0x8e},
    {0x01, 0x0b, 0x42, 0x42, 0x8e},
    {0x02, 0x0c, 0x42, 0x02, 0x8e},
    {0x06, 0x43, 0x02, 0x02, 0x8e},
    {0x03, 0x09, 0x44, 0x02, 0x7e},
    {0x04, 0x0b, 0x42, 0x42, 0x8e},
    {0x02, 0x09, 0x44, 0x02, 0x7e},
    {0x07, 0x60, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0xc1, 0xb5, 0x0d},
    {0x01, 0x05, 0x44, 0x42, 0x7e},
    {0x02, 0x9a, 0xc1, 0xb5, 0x0d},
    {0x05, 0x43, 0x02, 0x02, 0x8e},
    {0x03, 0x06, 0x45, 0x02, 0x6e},
    {0x04, 0x05, 0x44, 0x42, 0x7e},
    {0x02, 0x06, 0x45, 0x02, 0x6e},
    {0x4d, 0x81, 0xb5, 0x00, 0x0d},
    {0x03, 0x22, 0x44, 0xb5, 0xad},
    {0x01, 0x1a, 0x44, 0xf5, 0xad},
    {0x02, 0x22, 0x44, 0xb5, 0xad},
    {0x06, 0xdb, 0xb5, 0x00, 0x0d},
    {0x03, 0x82, 0xc4, 0xb5, 0x0e},
    {0x04, 0x1a, 0x44, 0xf5, 0xad},
    {0x02, 0x82, 0xc4, 0xb5, 0x0e},
    {0x08, 0xc6, 0xf5, 0x00, 0x0e},
    {0x03, 0x32, 0x44, 0xb5, 0xad},
    {0x01, 0x09, 0x42, 0x42, 0x8e},
    {0x02, 0x32, 0x44, 0xb5, 0xad},
    {0x05, 0xdb, 0xb5, 0x00, 0x0d},
    {0x03, 0x0e, 0x42, 0x02, 0x8e},
    {0x04, 0x09, 0x42, 0x42, 0x8e},
    {0x02, 0x0e, 0x42, 0x02, 0x8e},
    {0x5d, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3e, 0x44, 0xb5, 0xad},
    {0x01, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x3e, 0x44, 0xb5, 0xad},
    {0x06, 0x45, 0x02, 0x02, 0x8e},
    {0x03, 0x04, 0x45, 0x02, 0x6e},
    {0x04, 0x8c, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x45, 0x02, 0x6e},
    {0x07, 0x48, 0x04, 0xf5, 0xad},
    {0x03, 0x02, 0x45, 0x02, 0x6e},
    {0x01, 0x06, 0x44, 0x42, 0x7e},
    {0x02, 0x02, 0x45, 0x02, 0x6e},
    {0x05, 0x45, 0x02, 0x02, 0x8e},
    {0x03, 0x07, 0x45, 0x02, 0x6e},
    {0x04, 0x06, 0x44, 0x42, 0x7e},
    {0x02, 0x07, 0x45, 0x02, 0x6e},
    {0xd9, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x30, 0x44, 0xb5, 0xad},
    {0x01, 0x25, 0x42, 0xf5, 0xbd},
    {0x02, 0x30, 0x44, 0xb5, 0xad},
    {0x06, 0x6c, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x81, 0x6d},
    {0x04, 0x25, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x81, 0x6d},
    {0x09, 0x44, 0x44, 0xb5, 0xad},
    {0x03, 0x3c, 0x44, 0xb5, 0xad},
    {0x01, 0x82, 0xc1, 0xf5, 0x0d},
    {0x02, 0x3c, 0x44, 0xb5, 0xad},
    {0x05, 0x6c, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x81, 0x6d},
    {0x04, 0x82, 0xc1, 0xf5, 0x0d},
    {0x02, 0x05, 0x43, 0x81, 0x6d},
    {0x0b, 0xc4, 0xf5, 0x40, 0x0e},
    {0x03, 0x2a, 0x44, 0xb5, 0xad},
    {0x01, 0x19, 0x44, 0xf5, 0xad},
    {0x02, 0x2a, 0x44, 0xb5, 0xad},
    {0x06, 0x51, 0x04, 0xb5, 0xad},
    {0x03, 0x10, 0x42, 0x02, 0x8e},
    {0x04, 0x19, 0x44, 0xf5, 0xad},
    {0x02, 0x10, 0x42, 0x02, 0x8e},
    {0x07, 0x7a, 0x02, 0xf5, 0xdf},
    {0x03, 0x91, 0x47, 0xb5, 0xff},
    {0x01, 0x0f, 0x43, 0x47, 0x9f},
    {0x02, 0x91, 0x47, 0xb5, 0xff},
    {0x05, 0x51, 0x04, 0xb5, 0xad},
    {0x03, 0x06, 0x43, 0x81, 0x6d},
    {0x04, 0x0f, 0x43, 0x47, 0x9f},
    {0x02, 0x06, 0x43, 0x81, 0x6d},
    {0x69, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x20, 0x44, 0xb5, 0xad},
    {0x01, 0x85, 0x47, 0xf5, 0xff},
    {0x02, 0x20, 0x44, 0xb5, 0xad},
    {0x06, 0xd6, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x44, 0x02, 0x7e},
    {0x04, 0x85, 0x47, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0x02, 0x7e},
    {0x08, 0x44, 0x44, 0xb5, 0xad},
    {0x03, 0x3a, 0x44, 0xb5, 0xad},
    {0x01, 0x04, 0x44, 0x42, 0x7e},
    {0x02, 0x3a, 0x44, 0xb5, 0xad},
    {0x05, 0xd6, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc4, 0xb5, 0x0e},
    {0x04, 0x04, 0x44, 0x42, 0x7e},
    {0x02, 0x81, 0xc4, 0xb5, 0x0e},
    {0x0c, 0xc4, 0xf5, 0x40, 0x0e},
    {0x03, 0x0a, 0x44, 0x02, 0x7e},
    {0x01, 0x02, 0x44, 0x42, 0x7e},
    {0x02, 0x0a, 0x44, 0x02, 0x7e},
    {0x06, 0x46, 0x02, 0x02, 0x8e},
    {0x03, 0x04, 0x43, 0x81, 0x6d},
    {0x04, 0x02, 0x44, 0x42, 0x7e},
    {0x02, 0x04, 0x43, 0x81, 0x6d},
    {0x07, 0xc1, 0x02, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x81, 0x6d},
    {0x01, 0x07, 0x44, 0x42, 0x7e},
    {0x02, 0x02, 0x43, 0x81, 0x6d},
    {0x05, 0x46, 0x02, 0x02, 0x8e},
    {0x03, 0x07, 0x43, 0x81, 0x6d},
    {0x04, 0x07, 0x44, 0x42, 0x7e},
    {0x02, 0x07, 0x43, 0x81, 0x6d},
    {0xe6, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x43, 0x07, 0x9f},
    {0x01, 0x0d, 0x43, 0x47, 0x9f},
    {0x02, 0x16, 0x43, 0x07, 0x9f},
    {0x06, 0x41, 0x04, 0xb5, 0xad},
    {0x03, 0x03, 0x44, 0x04, 0x6d},
    {0x04, 0x0d, 0x43, 0x47, 0x9f},
    {0x02, 0x03, 0x44, 0x04, 0x6d},
    {0x09, 0x42, 0x44, 0xb5, 0xad},
    {0x03, 0x0b, 0x42, 0x04, 0x7d},
    {0x01, 0x03, 0x42, 0x44, 0x7d},
    {0x02, 0x0b, 0x42, 0x04, 0x7d},
    {0x05, 0x41, 0x04, 0xb5, 0xad},
    {0x03, 0x05, 0x44, 0x04, 0x6d},
    {0x04, 0x03, 0x42, 0x44, 0x7d},
    {0x02, 0x05, 0x44, 0x04, 0x6d},
    {0x0a, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x43, 0x07, 0x9f},
    {0x01, 0x12, 0x44, 0xf5, 0xad},
    {0x02, 0x1a, 0x43, 0x07, 0x9f},
    {0x06, 0x48, 0x03, 0x07, 0x9f},
    {0x03, 0x09, 0x42, 0x04, 0x7d},
    {0x04, 0x12, 0x44, 0xf5, 0xad},
    {0x02, 0x09, 0x42, 0x04, 0x7d},
    {0x07, 0x4a, 0x04, 0xf5, 0xad},
    {0x03, 0x8a, 0x42, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0x44, 0x7d},
    {0x02, 0x8a, 0x42, 0xb5, 0xee},
    {0x05, 0x48, 0x03, 0x07, 0x9f},
    {0x03, 0x06, 0x44, 0x04, 0x6d},
    {0x04, 0x05, 0x42, 0x44, 0x7d},
    {0x02, 0x06, 0x44, 0x04, 0x6d},
    {0x50, 0x02, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x44, 0xb5, 0xad},
    {0x01, 0x15, 0x44, 0xf5, 0xad},
    {0x02, 0x26, 0x44, 0xb5, 0xad},
    {0x06, 0xc3, 0x02, 0xb5, 0xee},
    {0x03, 0x82, 0x46, 0x02, 0xbd},
    {0x04, 0x15, 0x44, 0xf5, 0xad},
    {0x02, 0x82, 0x46, 0x02, 0xbd},
    {0x08, 0x42, 0x44, 0xb5, 0xad},
    {0x03, 0x19, 0x43, 0x07, 0x9f},
    {0x01, 0x11, 0x43, 0x47, 0x9f},
    {0x02, 0x19, 0x43, 0x07, 0x9f},
    {0x05, 0xc3, 0x02, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x02, 0x8e},
    {0x04, 0x11, 0x43, 0x47, 0x9f},
    {0x02, 0x0f, 0x42, 0x02, 0x8e},
    {0x40, 0x02, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x42, 0xb5, 0xee},
    {0x01, 0x84, 0x42, 0xf5, 0xee},
    {0x02, 0x86, 0x42, 0xb5, 0xee},
    {0x06, 0xc1, 0x04, 0x02, 0xdf},
    {0x03, 0x04, 0x44, 0x04, 0x6d},
    {0x04, 0x84, 0x42, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x04, 0x6d},
    {0x07, 0x44, 0x03, 0x47, 0x9f},
    {0x03, 0x02, 0x44, 0x04, 0x6d},
    {0x01, 0x06, 0x42, 0x44, 0x7d},
    {0x02, 0x02, 0x44, 0x04, 0x6d},
    {0x05, 0xc1, 0x04, 0x02, 0xdf},
    {0x03, 0x07, 0x44, 0x04, 0x6d},
    {0x04, 0x06, 0x42, 0x44, 0x7d},
    {0x02, 0x07, 0x44, 0x04, 0x6d},
    {0xc1, 0x44, 0xb5, 0x40, 0x0d},
    {0x03, 0x0d, 0x42, 0x02, 0x8e},
    {0x01, 0x01, 0x43, 0x47, 0x9f},
    {0x02, 0x0d, 0x42, 0x02, 0x8e},
    {0x06, 0x4a, 0x03, 0x07, 0x9f},
    {0x03, 0x03, 0x42, 0x81, 0x6d},
    {0x04, 0x01, 0x43, 0x47, 0x9f},
    {0x02, 0x03, 0x42, 0x81, 0x6d},
    {0x09, 0x47, 0x44, 0xb5, 0xad},
    {0x03, 0x12, 0x43, 0x07, 0x9f},
    {0x01, 0x08, 0x42, 0x42, 0x8e},
    {0x02, 0x12, 0x43, 0x07, 0x9f},
    {0x05, 0x4a, 0x03, 0x07, 0x9f},
    {0x03, 0x05, 0x42, 0x81, 0x6d},
    {0x04, 0x08, 0x42, 0x42, 0x8e},
    {0x02, 0x05, 0x42, 0x81, 0x6d},
    {0x0b, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x43, 0x07, 0x9f},
    {0x01, 0x83, 0x44, 0x42, 0xdf},
    {0x02, 0x15, 0x43, 0x07, 0x9f},
    {0x06, 0x44, 0x02, 0x02, 0x8e},
    {0x03, 0x11, 0x42, 0x02, 0x8e},
    {0x04, 0x83, 0x44, 0x42, 0xdf},
    {0x02, 0x11, 0x42, 0x02, 0x8e},
    {0x07, 0x42, 0x03, 0x47, 0x9f},
    {0x03, 0x84, 0x44, 0x02, 0xdf},
    {0x01, 0x81, 0xc1, 0xf5, 0x0d},
    {0x02, 0x84, 0x44, 0x02, 0xdf},
    {0x05, 0x44, 0x02, 0x02, 0x8e},
    {0x03, 0x06, 0x42, 0x81, 0x6d},
    {0x04, 0x81, 0xc1, 0xf5, 0x0d},
    {0x02, 0x06, 0x42, 0x81, 0x6d},
    {0x4e, 0x81, 0xb5, 0x00, 0x0d},
    {0x03, 0x01, 0x42, 0x02, 0x8e},
    {0x01, 0x0a, 0x42, 0x42, 0x8e},
    {0x02, 0x01, 0x42, 0x02, 0x8e},
    {0x06, 0x42, 0x02, 0x02, 0x8e},
    {0x03, 0x08, 0x42, 0x04, 0x7d},
    {0x04, 0x0a, 0x42, 0x42, 0x8e},
    {0x02, 0x08, 0x42, 0x04, 0x7d},
    {0x08, 0x47, 0x44, 0xb5, 0xad},
    {0x03, 0x83, 0xc1, 0xb5, 0x0d},
    {0x01, 0x04, 0x42, 0x44, 0x7d},
    {0x02, 0x83, 0xc1, 0xb5, 0x0d},
    {0x05, 0x42, 0x02, 0x02, 0x8e},
    {0x03, 0x81, 0x46, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0x44, 0x7d},
    {0x02, 0x81, 0x46, 0x02, 0xbd},
    {0x0c, 0x46, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x04, 0x7d},
    {0x01, 0x02, 0x42, 0x44, 0x7d},
    {0x02, 0x0a, 0x42, 0x04, 0x7d},
    {0x06, 0x47, 0x02, 0x02, 0x8e},
    {0x03, 0x04, 0x42, 0x81, 0x6d},
    {0x04, 0x02, 0x42, 0x44, 0x7d},
    {0x02, 0x04, 0x42, 0x81, 0x6d},
    {0x07, 0x47, 0x03, 0x47, 0x9f},
    {0x03, 0x02, 0x42, 0x81, 0x6d},
    {0x01, 0x07, 0x42, 0x44, 0x7d},
    {0x02, 0x02, 0x42, 0x81, 0x6d},
    {0x05, 0x47, 0x02, 0x02, 0x8e},
    {0x03, 0x07, 0x42, 0x81, 0x6d},
    {0x04, 0x07, 0x42, 0x44, 0x7d},
    {0x02, 0x07, 0x42, 0x81, 0x6d},
    {0xf4, 0x47, 0xf5, 0x40, 0x0f},
    {0x03, 0xb4, 0x47, 0xb5, 0xff},
    {0x01, 0xa8, 0xf5, 0x40, 0x0f},
    {0x02, 0xb4, 0x47, 0xb5, 0xff},
    {0x06, 0x5e, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x4c, 0xb5, 0x6d},
    {0x04, 0xa8, 0xf5, 0x40, 0x0f},
    {0x02, 0x03, 0x4c, 0xb5, 0x6d},
    {0x09, 0x4d, 0x42, 0xb5, 0xce},
    {0x03, 0x0b, 0x47, 0xb5, 0x7c},
    {0x01, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x0b, 0x47, 0xb5, 0x7c},
    {0x05, 0x5e, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x4c, 0xb5, 0x6d},
    {0x04, 0x03, 0x47, 0xf5, 0x7c},
    {0x02, 0x05, 0x4c, 0xb5, 0x6d},
    {0x0a, 0x41, 0x42, 0xf5, 0xdf},
    {0x03, 0x0c, 0x45, 0xb5, 0x8c},
    {0x01, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x0c, 0x45, 0xb5, 0x8c},
    {0x06, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x09, 0x47, 0xb5, 0x7c},
    {0x04, 0x0b, 0x45, 0xf5, 0x8c},
    {0x02, 0x09, 0x47, 0xb5, 0x7c},
    {0x07, 0x56, 0x02, 0xf5, 0xce},
    {0x03, 0x9a, 0x4a, 0x02, 0xdf},
    {0x01, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x9a, 0x4a, 0x02, 0xdf},
    {0x05, 0x43, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x4c, 0xb5, 0x6d},
    {0x04, 0x05, 0x47, 0xf5, 0x7c},
    {0x02, 0x06, 0x4c, 0xb5, 0x6d},
    {0x4d, 0x0a, 0x02, 0xb5, 0xdf},
    {0x03, 0x14, 0x44, 0xb5, 0x9c},
    {0x01, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x14, 0x44, 0xb5, 0x9c},
    {0x06, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x82, 0x41, 0x02, 0xdf},
    {0x04, 0x0c, 0x44, 0xf5, 0x9c},
    {0x02, 0x82, 0x41, 0x02, 0xdf},
    {0x08, 0x4d, 0x42, 0xb5, 0xce},
    {0x03, 0x18, 0x44, 0xb5, 0x9c},
    {0x01, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x18, 0x44, 0xb5, 0x9c},
    {0x05, 0x4b, 0x04, 0xb5, 0x9c},
    {0x03, 0x0e, 0x45, 0xb5, 0x8c},
    {0x04, 0x09, 0x45, 0xf5, 0x8c},
    {0x02, 0x0e, 0x45, 0xb5, 0x8c},
    {0x4f, 0x02, 0x02, 0xf5, 0xdf},
    {0x03, 0x1c, 0x44, 0xb5, 0x9c},
    {0x01, 0x9a, 0x42, 0x42, 0xdf},
    {0x02, 0x1c, 0x44, 0xb5, 0x9c},
    {0x06, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x4c, 0xb5, 0x6d},
    {0x04, 0x9a, 0x42, 0x42, 0xdf},
    {0x02, 0x04, 0x4c, 0xb5, 0x6d},
    {0x07, 0x43, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x4c, 0xb5, 0x6d},
    {0x01, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x4c, 0xb5, 0x6d},
    {0x05, 0x45, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x4c, 0xb5, 0x6d},
    {0x04, 0x06, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x4c, 0xb5, 0x6d},
    {0x52, 0x07, 0xf5, 0x00, 0xee},
    {0x03, 0x17, 0x44, 0xb5, 0x9c},
    {0x01, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x17, 0x44, 0xb5, 0x9c},
    {0x06, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x43, 0x0a, 0x6d},
    {0x04, 0x14, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x43, 0x0a, 0x6d},
    {0x09, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x1b, 0x44, 0xb5, 0x9c},
    {0x01, 0x82, 0x4a, 0x42, 0xdf},
    {0x02, 0x1b, 0x44, 0xb5, 0x9c},
    {0x05, 0x4c, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x43, 0x0a, 0x6d},
    {0x04, 0x82, 0x4a, 0x42, 0xdf},
    {0x02, 0x05, 0x43, 0x0a, 0x6d},
    {0x0b, 0x41, 0x42, 0xf5, 0xdf},
    {0x03, 0x27, 0x42, 0xb5, 0xac},
    {0x01, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x27, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x10, 0x45, 0xb5, 0x8c},
    {0x04, 0x18, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x45, 0xb5, 0x8c},
    {0x07, 0x4b, 0x02, 0xf5, 0xac},
    {0x03, 0x89, 0x47, 0xb5, 0xee},
    {0x01, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x89, 0x47, 0xb5, 0xee},
    {0x05, 0x49, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x43, 0x0a, 0x6d},
    {0x04, 0x0e, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x0a, 0x6d},
    {0x51, 0x07, 0xf5, 0x00, 0xee},
    {0x03, 0x13, 0x44, 0xb5, 0x9c},
    {0x01, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x13, 0x44, 0xb5, 0x9c},
    {0x06, 0xda, 0x07, 0xb5, 0xee},
    {0x03, 0x08, 0x47, 0xb5, 0x7c},
    {0x04, 0x1c, 0x42, 0xf5, 0xac},
    {0x02, 0x08, 0x47, 0xb5, 0x7c},
    {0x08, 0x43, 0x42, 0xb5, 0xac},
    {0x03, 0x37, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x37, 0x42, 0xb5, 0xac},
    {0x05, 0xda, 0x07, 0xb5, 0xee},
    {0x03, 0x81, 0x41, 0x02, 0xdf},
    {0x04, 0x04, 0x47, 0xf5, 0x7c},
    {0x02, 0x81, 0x41, 0x02, 0xdf},
    {0x0c, 0x41, 0x42, 0xf5, 0xdf},
    {0x03, 0x0a, 0x47, 0xb5, 0x7c},
    {0x01, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x0a, 0x47, 0xb5, 0x7c},
    {0x06, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x43, 0x0a, 0x6d},
    {0x04, 0x02, 0x47, 0xf5, 0x7c},
    {0x02, 0x04, 0x43, 0x0a, 0x6d},
    {0x07, 0x45, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x43, 0x0a, 0x6d},
    {0x01, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x02, 0x43, 0x0a, 0x6d},
    {0x05, 0x46, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x43, 0x0a, 0x6d},
    {0x04, 0x07, 0x47, 0xf5, 0x7c},
    {0x02, 0x07, 0x43, 0x0a, 0x6d},
    {0xe0, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x2d, 0x42, 0xb5, 0xac},
    {0x01, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x2d, 0x42, 0xb5, 0xac},
    {0x06, 0x62, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x02, 0x6d},
    {0x04, 0x17, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x41, 0x02, 0x6d},
    {0x09, 0x52, 0x42, 0xb5, 0xdf},
    {0x03, 0x0b, 0x43, 0x02, 0x7d},
    {0x01, 0x03, 0x43, 0x42, 0x7d},
    {0x02, 0x0b, 0x43, 0x02, 0x7d},
    {0x05, 0x62, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x02, 0x6d},
    {0x04, 0x03, 0x43, 0x42, 0x7d},
    {0x02, 0x05, 0x41, 0x02, 0x6d},
    {0x0a, 0x48, 0x42, 0xf5, 0xce},
    {0x03, 0x35, 0x42, 0xb5, 0xac},
    {0x01, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x35, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x02, 0x02, 0xdf},
    {0x03, 0x09, 0x43, 0x02, 0x7d},
    {0x04, 0x1b, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x43, 0x02, 0x7d},
    {0x07, 0x5a, 0x02, 0xf5, 0xce},
    {0x03, 0x87, 0x47, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x42, 0x7d},
    {0x02, 0x87, 0x47, 0xb5, 0xee},
    {0x05, 0xc2, 0x02, 0x02, 0xdf},
    {0x03, 0x06, 0x41, 0x02, 0x6d},
    {0x04, 0x05, 0x43, 0x42, 0x7d},
    {0x02, 0x06, 0x41, 0x02, 0x6d},
    {0x73, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x23, 0x42, 0xb5, 0xac},
    {0x01, 0x28, 0x42, 0xf5, 0xbd},
    {0x02, 0x23, 0x42, 0xb5, 0xac},
    {0x06, 0x72, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0x48, 0x02, 0xce},
    {0x04, 0x28, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x48, 0x02, 0xce},
    {0x08, 0x52, 0x42, 0xb5, 0xdf},
    {0x03, 0x33, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x33, 0x42, 0xb5, 0xac},
    {0x05, 0x72, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x45, 0xb5, 0x8c},
    {0x04, 0x10, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x45, 0xb5, 0x8c},
    {0x63, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3f, 0x42, 0xb5, 0xac},
    {0x01, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x3f, 0x42, 0xb5, 0xac},
    {0x06, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x02, 0x6d},
    {0x04, 0x8e, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x02, 0x6d},
    {0x07, 0x49, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x41, 0x02, 0x6d},
    {0x01, 0x06, 0x43, 0x42, 0x7d},
    {0x02, 0x02, 0x41, 0x02, 0x6d},
    {0x05, 0x4e, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x02, 0x6d},
    {0x04, 0x06, 0x43, 0x42, 0x7d},
    {0x02, 0x07, 0x41, 0x02, 0x6d},
    {0xc5, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x0d, 0x45, 0xb5, 0x8c},
    {0x01, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x0d, 0x45, 0xb5, 0x8c},
    {0x06, 0x7e, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x42, 0x0a, 0x6d},
    {0x04, 0x13, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x42, 0x0a, 0x6d},
    {0x09, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x98, 0x47, 0xb5, 0xff},
    {0x01, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x98, 0x47, 0xb5, 0xff},
    {0x05, 0x7e, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x42, 0x0a, 0x6d},
    {0x04, 0x08, 0x45, 0xf5, 0x8c},
    {0x02, 0x05, 0x42, 0x0a, 0x6d},
    {0x0b, 0x48, 0x42, 0xf5, 0xce},
    {0x03, 0x2b, 0x42, 0xb5, 0xac},
    {0x01, 0x38, 0x42, 0xf5, 0xbd},
    {0x02, 0x2b, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x11, 0x45, 0xb5, 0x8c},
    {0x04, 0x38, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x45, 0xb5, 0x8c},
    {0x07, 0xca, 0xb5, 0x40, 0x0d},
    {0x03, 0x94, 0x47, 0xb5, 0xff},
    {0x01, 0x81, 0x4a, 0x42, 0xdf},
    {0x02, 0x94, 0x47, 0xb5, 0xff},
    {0x05, 0x44, 0x05, 0xb5, 0x8c},
    {0x03, 0x06, 0x42, 0x0a, 0x6d},
    {0x04, 0x81, 0x4a, 0x42, 0xdf},
    {0x02, 0x06, 0x42, 0x0a, 0x6d},
    {0x4e, 0x0a, 0x02, 0xb5, 0xdf},
    {0x03, 0x01, 0x45, 0xb5, 0x8c},
    {0x01, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x01, 0x45, 0xb5, 0x8c},
    {0x06, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x08, 0x43, 0x02, 0x7d},
    {0x04, 0x0a, 0x45, 0xf5, 0x8c},
    {0x02, 0x08, 0x43, 0x02, 0x7d},
    {0x08, 0x45, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x4a, 0x02, 0xdf},
    {0x01, 0x04, 0x43, 0x42, 0x7d},
    {0x02, 0x83, 0x4a, 0x02, 0xdf},
    {0x05, 0x42, 0x05, 0xb5, 0x8c},
    {0x03, 0x81, 0x48, 0x02, 0xce},
    {0x04, 0x04, 0x43, 0x42, 0x7d},
    {0x02, 0x81, 0x48, 0x02, 0xce},
    {0x0c, 0x48, 0x42, 0xf5, 0xce},
    {0x03, 0x0a, 0x43, 0x02, 0x7d},
    {0x01, 0x02, 0x43, 0x42, 0x7d},
    {0x02, 0x0a, 0x43, 0x02, 0x7d},
    {0x06, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x04, 0x42, 0x0a, 0x6d},
    {0x04, 0x02, 0x43, 0x42, 0x7d},
    {0x02, 0x04, 0x42, 0x0a, 0x6d},
    {0x07, 0x46, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x0a, 0x6d},
    {0x01, 0x07, 0x43, 0x42, 0x7d},
    {0x02, 0x02, 0x42, 0x0a, 0x6d},
    {0x05, 0x47, 0x05, 0xb5, 0x8c},
    {0x03, 0x07, 0x42, 0x0a, 0x6d},
    {0x04, 0x07, 0x43, 0x42, 0x7d},
    {0x02, 0x07, 0x42, 0x0a, 0x6d},
    {0xf4, 0x42, 0x02, 0xf5, 0xff},
    {0x03, 0x1d, 0x42, 0xb5, 0xac},
    {0x01, 0x2e, 0x42, 0xf5, 0xbd},
    {0x02, 0x1d, 0x42, 0xb5, 0xac},
    {0x06, 0x70, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x46, 0x07, 0x6e},
    {0x04, 0x2e, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x46, 0x07, 0x6e},
    {0x09, 0x55, 0x42, 0xb5, 0xdf},
    {0x03, 0x0b, 0x41, 0x07, 0x7e},
    {0x01, 0x03, 0x41, 0x47, 0x7e},
    {0x02, 0x0b, 0x41, 0x07, 0x7e},
    {0x05, 0x70, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x46, 0x07, 0x6e},
    {0x04, 0x03, 0x41, 0x47, 0x7e},
    {0x02, 0x05, 0x46, 0x07, 0x6e},
    {0x0a, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x0c, 0x43, 0x07, 0x8e},
    {0x01, 0x0b, 0x43, 0x47, 0x8e},
    {0x02, 0x0c, 0x43, 0x07, 0x8e},
    {0x06, 0x43, 0x03, 0x07, 0x8e},
    {0x03, 0x09, 0x41, 0x07, 0x7e},
    {0x04, 0x0b, 0x43, 0x47, 0x8e},
    {0x02, 0x09, 0x41, 0x07, 0x7e},
    {0x07, 0x66, 0x02, 0xf5, 0xdf},
    {0x03, 0x9a, 0x44, 0x02, 0xce},
    {0x01, 0x05, 0x41, 0x47, 0x7e},
    {0x02, 0x9a, 0x44, 0x02, 0xce},
    {0x05, 0x43, 0x03, 0x07, 0x8e},
    {0x03, 0x06, 0x46, 0x07, 0x6e},
    {0x04, 0x05, 0x41, 0x47, 0x7e},
    {0x02, 0x06, 0x46, 0x07, 0x6e},
    {0x4d, 0x04, 0x02, 0xb5, 0xce},
    {0x03, 0x21, 0x42, 0xb5, 0xac},
    {0x01, 0x36, 0x42, 0xf5, 0xbd},
    {0x02, 0x21, 0x42, 0xb5, 0xac},
    {0x06, 0x7c, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0xc3, 0xb5, 0x0d},
    {0x04, 0x36, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0xc3, 0xb5, 0x0d},
    {0x08, 0x55, 0x42, 0xb5, 0xdf},
    {0x03, 0x31, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x43, 0x47, 0x8e},
    {0x02, 0x31, 0x42, 0xb5, 0xac},
    {0x05, 0x7c, 0x02, 0xb5, 0xce},
    {0x03, 0x0e, 0x43, 0x07, 0x8e},
    {0x04, 0x09, 0x43, 0x47, 0x8e},
    {0x02, 0x0e, 0x43, 0x07, 0x8e},
    {0x5b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x3d, 0x42, 0xb5, 0xac},
    {0x01, 0x88, 0x47, 0xf5, 0xff},
    {0x02, 0x3d, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x03, 0x07, 0x8e},
    {0x03, 0x04, 0x46, 0x07, 0x6e},
    {0x04, 0x88, 0x47, 0xf5, 0xff},
    {0x02, 0x04, 0x46, 0x07, 0x6e},
    {0x07, 0xc2, 0x07, 0xf5, 0xee},
    {0x03, 0x02, 0x46, 0x07, 0x6e},
    {0x01, 0x06, 0x41, 0x47, 0x7e},
    {0x02, 0x02, 0x46, 0x07, 0x6e},
    {0x05, 0x45, 0x03, 0x07, 0x8e},
    {0x03, 0x07, 0x46, 0x07, 0x6e},
    {0x04, 0x06, 0x41, 0x47, 0x7e},
    {0x02, 0x07, 0x46, 0x07, 0x6e},
    {0x7b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x2f, 0x42, 0xb5, 0xac},
    {0x01, 0x24, 0x42, 0xf5, 0xbd},
    {0x02, 0x2f, 0x42, 0xb5, 0xac},
    {0x06, 0x6a, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x43, 0x04, 0x6c},
    {0x04, 0x24, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x04, 0x6c},
    {0x09, 0x51, 0x42, 0xb5, 0xce},
    {0x03, 0x3b, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x44, 0x42, 0xce},
    {0x02, 0x3b, 0x42, 0xb5, 0xac},
    {0x05, 0x6a, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x43, 0x04, 0x6c},
    {0x04, 0x82, 0x44, 0x42, 0xce},
    {0x02, 0x05, 0x43, 0x04, 0x6c},
    {0x0b, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x29, 0x42, 0xb5, 0xac},
    {0x01, 0x34, 0x42, 0xf5, 0xbd},
    {0x02, 0x29, 0x42, 0xb5, 0xac},
    {0x06, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x43, 0x07, 0x8e},
    {0x04, 0x34, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x43, 0x07, 0x8e},
    {0x07, 0x59, 0x02, 0xf5, 0xce},
    {0x03, 0x90, 0x47, 0xb5, 0xff},
    {0x01, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x90, 0x47, 0xb5, 0xff},
    {0x05, 0x50, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x04, 0x6c},
    {0x04, 0x0f, 0x44, 0xf5, 0x9c},
    {0x02, 0x06, 0x43, 0x04, 0x6c},
    {0x61, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x1f, 0x42, 0xb5, 0xac},
    {0x01, 0x00, 0x42, 0xf5, 0xbd},
    {0x02, 0x1f, 0x42, 0xb5, 0xac},
    {0x06, 0xd2, 0xb5, 0x00, 0x0d},
    {0x03, 0x08, 0x41, 0x07, 0x7e},
    {0x04, 0x00, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x41, 0x07, 0x7e},
    {0x08, 0x51, 0x42, 0xb5, 0xce},
    {0x03, 0x39, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x41, 0x47, 0x7e},
    {0x02, 0x39, 0x42, 0xb5, 0xac},
    {0x05, 0xd2, 0xb5, 0x00, 0x0d},
    {0x03, 0x81, 0xc3, 0xb5, 0x0d},
    {0x04, 0x04, 0x41, 0x47, 0x7e},
    {0x02, 0x81, 0xc3, 0xb5, 0x0d},
    {0x0c, 0xc3, 0xf5, 0x40, 0x0d},
    {0x03, 0x0a, 0x41, 0x07, 0x7e},
    {0x01, 0x02, 0x41, 0x47, 0x7e},
    {0x02, 0x0a, 0x41, 0x07, 0x7e},
    {0x06, 0x46, 0x03, 0x07, 0x8e},
    {0x03, 0x04, 0x43, 0x04, 0x6c},
    {0x04, 0x02, 0x41, 0x47, 0x7e},
    {0x02, 0x04, 0x43, 0x04, 0x6c},
    {0x07, 0x4f, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x43, 0x04, 0x6c},
    {0x01, 0x07, 0x41, 0x47, 0x7e},
    {0x02, 0x02, 0x43, 0x04, 0x6c},
    {0x05, 0x46, 0x03, 0x07, 0x8e},
    {0x03, 0x07, 0x43, 0x04, 0x6c},
    {0x04, 0x07, 0x41, 0x47, 0x7e},
    {0x02, 0x07, 0x43, 0x04, 0x6c},
    {0xde, 0x42, 0xb5, 0x40, 0x0d},
    {0x03, 0x16, 0x44, 0xb5, 0x9c},
    {0x01, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x16, 0x44, 0xb5, 0x9c},
    {0x06, 0x60, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x44, 0x02, 0x6d},
    {0x04, 0x0d, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x44, 0x02, 0x6d},
    {0x09, 0xc4, 0xf5, 0x00, 0x0d},
    {0x03, 0x0b, 0x42, 0x02, 0x7d},
    {0x01, 0x03, 0x42, 0x42, 0x7d},
    {0x02, 0x0b, 0x42, 0x02, 0x7d},
    {0x05, 0x60, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x44, 0x02, 0x6d},
    {0x04, 0x03, 0x42, 0x42, 0x7d},
    {0x02, 0x05, 0x44, 0x02, 0x6d},
    {0x0a, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x1a, 0x44, 0xb5, 0x9c},
    {0x01, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x1a, 0x44, 0xb5, 0x9c},
    {0x06, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x09, 0x42, 0x02, 0x7d},
    {0x04, 0x9b, 0xf5, 0x40, 0x0c},
    {0x02, 0x09, 0x42, 0x02, 0x7d},
    {0x07, 0xc6, 0xb5, 0x40, 0x0d},
    {0x03, 0x8c, 0x47, 0xb5, 0xff},
    {0x01, 0x05, 0x42, 0x42, 0x7d},
    {0x02, 0x8c, 0x47, 0xb5, 0xff},
    {0x05, 0x48, 0x04, 0xb5, 0x9c},
    {0x03, 0x06, 0x44, 0x02, 0x6d},
    {0x04, 0x05, 0x42, 0x42, 0x7d},
    {0x02, 0x06, 0x44, 0x02, 0x6d},
    {0xc4, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x25, 0x42, 0xb5, 0xac},
    {0x01, 0x2c, 0x42, 0xf5, 0xbd},
    {0x02, 0x25, 0x42, 0xb5, 0xac},
    {0x06, 0x7a, 0x02, 0xb5, 0xce},
    {0x03, 0x82, 0xc1, 0xb5, 0x0c},
    {0x04, 0x2c, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0xc1, 0xb5, 0x0c},
    {0x08, 0xc4, 0xf5, 0x00, 0x0d},
    {0x03, 0x19, 0x44, 0xb5, 0x9c},
    {0x01, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x19, 0x44, 0xb5, 0x9c},
    {0x05, 0x7a, 0x02, 0xb5, 0xce},
    {0x03, 0x0f, 0x43, 0x07, 0x8e},
    {0x04, 0x11, 0x44, 0xf5, 0x9c},
    {0x02, 0x0f, 0x43, 0x07, 0x8e},
    {0x6b, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x85, 0x47, 0xb5, 0xee},
    {0x01, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x85, 0x47, 0xb5, 0xee},
    {0x06, 0xc1, 0x02, 0x02, 0xdf},
    {0x03, 0x04, 0x44, 0x02, 0x6d},
    {0x04, 0x96, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x44, 0x02, 0x6d},
    {0x07, 0x44, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x44, 0x02, 0x6d},
    {0x01, 0x06, 0x42, 0x42, 0x7d},
    {0x02, 0x02, 0x44, 0x02, 0x6d},
    {0x05, 0xc1, 0x02, 0x02, 0xdf},
    {0x03, 0x07, 0x44, 0x02, 0x6d},
    {0x04, 0x06, 0x42, 0x42, 0x7d},
    {0x02, 0x07, 0x44, 0x02, 0x6d},
    {0xd3, 0x42, 0xf5, 0x40, 0x0f},
    {0x03, 0x0d, 0x43, 0x07, 0x8e},
    {0x01, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x0d, 0x43, 0x07, 0x8e},
    {0x06, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x03, 0x42, 0x04, 0x6c},
    {0x04, 0x01, 0x44, 0xf5, 0x9c},
    {0x02, 0x03, 0x42, 0x04, 0x6c},
    {0x09, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x44, 0xb5, 0x9c},
    {0x01, 0x08, 0x43, 0x47, 0x8e},
    {0x02, 0x12, 0x44, 0xb5, 0x9c},
    {0x05, 0x4a, 0x04, 0xb5, 0x9c},
    {0x03, 0x05, 0x42, 0x04, 0x6c},
    {0x04, 0x08, 0x43, 0x47, 0x8e},
    {0x02, 0x05, 0x42, 0x04, 0x6c},
    {0x0b, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x15, 0x44, 0xb5, 0x9c},
    {0x01, 0x83, 0x42, 0x42, 0xdf},
    {0x02, 0x15, 0x44, 0xb5, 0x9c},
    {0x06, 0x44, 0x03, 0x07, 0x8e},
    {0x03, 0x11, 0x43, 0x07, 0x8e},
    {0x04, 0x83, 0x42, 0x42, 0xdf},
    {0x02, 0x11, 0x43, 0x07, 0x8e},
    {0x07, 0x42, 0x04, 0xf5, 0x9c},
    {0x03, 0x84, 0x42, 0x02, 0xdf},
    {0x01, 0x81, 0x44, 0x42, 0xce},
    {0x02, 0x84, 0x42, 0x02, 0xdf},
    {0x05, 0x44, 0x03, 0x07, 0x8e},
    {0x03, 0x06, 0x42, 0x04, 0x6c},
    {0x04, 0x81, 0x44, 0x42, 0xce},
    {0x02, 0x06, 0x42, 0x04, 0x6c},
    {0x4e, 0x04, 0x02, 0xb5, 0xce},
    {0x03, 0x01, 0x43, 0x07, 0x8e},
    {0x01, 0x0a, 0x43, 0x47, 0x8e},
    {0x02, 0x01, 0x43, 0x07, 0x8e},
    {0x06, 0x42, 0x03, 0x07, 0x8e},
    {0x03, 0x08, 0x42, 0x02, 0x7d},
    {0x04, 0x0a, 0x43, 0x47, 0x8e},
    {0x02, 0x08, 0x42, 0x02, 0x7d},
    {0x08, 0x46, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x44, 0x02, 0xce},
    {0x01, 0x04, 0x42, 0x42, 0x7d},
    {0x02, 0x83, 0x44, 0x02, 0xce},
    {0x05, 0x42, 0x03, 0x07, 0x8e},
    {0x03, 0x81, 0xc1, 0xb5, 0x0c},
    {0x04, 0x04, 0x42, 0x42, 0x7d},
    {0x02, 0x81, 0xc1, 0xb5, 0x0c},
    {0x0c, 0xc1, 0xf5, 0x40, 0x0c},
    {0x03, 0x0a, 0x42, 0x02, 0x7d},
    {0x01, 0x02, 0x42, 0x42, 0x7d},
    {0x02, 0x0a, 0x42, 0x02, 0x7d},
    {0x06, 0x47, 0x03, 0x07, 0x8e},
    {0x03, 0x04, 0x42, 0x04, 0x6c},
    {0x04, 0x02, 0x42, 0x42, 0x7d},
    {0x02, 0x04, 0x42, 0x04, 0x6c},
    {0x07, 0x47, 0x04, 0xf5, 0x9c},
    {0x03, 0x02, 0x42, 0x04, 0x6c},
    {0x01, 0x07, 0x42, 0x42, 0x7d},
    {0x02, 0x02, 0x42, 0x04, 0x6c},
    {0x05, 0x47, 0x03, 0x07, 0x8e},
    {0x03, 0x07, 0x42, 0x04, 0x6c},
    {0x04, 0x07, 0x42, 0x42, 0x7d},
    {0x02, 0x07, 0x42, 0x04, 0x6c},
    {0xf4, 0x47, 0xf5, 0x00, 0x0e},
    {0x03, 0xa8, 0xf5, 0x00, 0x0e},
    {0x01, 0x1e, 0x42, 0xf5, 0xbd},
    {0x02, 0xa8, 0xf5, 0x00, 0x0e},
    {0x06, 0x56, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x47, 0x07, 0x6f},
    {0x04, 0x1e, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x47, 0x07, 0x6f},
    {0x09, 0x41, 0x42, 0xb5, 0xce},
    {0x03, 0x0b, 0x45, 0x07, 0x7f},
    {0x01, 0x03, 0x45, 0x47, 0x7f},
    {0x02, 0x0b, 0x45, 0x07, 0x7f},
    {0x05, 0x56, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x47, 0x07, 0x6f},
    {0x04, 0x03, 0x45, 0x47, 0x7f},
    {0x02, 0x05, 0x47, 0x07, 0x6f},
    {0x0a, 0x4a, 0x42, 0xf5, 0xce},
    {0x03, 0x0c, 0x44, 0x07, 0x8f},
    {0x01, 0x0b, 0x44, 0x47, 0x8f},
    {0x02, 0x0c, 0x44, 0x07, 0x8f},
    {0x06, 0x43, 0x04, 0x07, 0x8f},
    {0x03, 0x09, 0x45, 0x07, 0x7f},
    {0x04, 0x0b, 0x44, 0x47, 0x8f},
    {0x02, 0x09, 0x45, 0x07, 0x7f},
    {0x07, 0x4d, 0x02, 0xf5, 0xbd},
    {0x03, 0x9a, 0x42, 0x02, 0xce},
    {0x01, 0x05, 0x45, 0x47, 0x7f},
    {0x02, 0x9a, 0x42, 0x02, 0xce},
    {0x05, 0x43, 0x04, 0x07, 0x8f},
    {0x03, 0x06, 0x47, 0x07, 0x6f},
    {0x04, 0x05, 0x45, 0x47, 0x7f},
    {0x02, 0x06, 0x47, 0x07, 0x6f},
    {0x4d, 0x02, 0x02, 0xb5, 0xce},
    {0x03, 0x14, 0x42, 0x07, 0x9f},
    {0x01, 0x0c, 0x42, 0x47, 0x9f},
    {0x02, 0x14, 0x42, 0x07, 0x9f},
    {0x06, 0x4b, 0x02, 0x07, 0x9f},
    {0x03, 0x82, 0x4a, 0x02, 0xce},
    {0x04, 0x0c, 0x42, 0x47, 0x9f},
    {0x02, 0x82, 0x4a, 0x02, 0xce},
    {0x08, 0x41, 0x42, 0xb5, 0xce},
    {0x03, 0x18, 0x42, 0x07, 0x9f},
    {0x01, 0x09, 0x44, 0x47, 0x8f},
    {0x02, 0x18, 0x42, 0x07, 0x9f},
    {0x05, 0x4b, 0x02, 0x07, 0x9f},
    {0x03, 0x0e, 0x44, 0x07, 0x8f},
    {0x04, 0x09, 0x44, 0x47, 0x8f},
    {0x02, 0x0e, 0x44, 0x07, 0x8f},
    {0x4f, 0x07, 0x02, 0xf5, 0xdf},
    {0x03, 0x1c, 0x42, 0x07, 0x9f},
    {0x01, 0x9a, 0x47, 0x42, 0xdf},
    {0x02, 0x1c, 0x42, 0x07, 0x9f},
    {0x06, 0x45, 0x04, 0x07, 0x8f},
    {0x03, 0x04, 0x47, 0x07, 0x6f},
    {0x04, 0x9a, 0x47, 0x42, 0xdf},
    {0x02, 0x04, 0x47, 0x07, 0x6f},
    {0x07, 0x43, 0x02, 0x47, 0x9f},
    {0x03, 0x02, 0x47, 0x07, 0x6f},
    {0x01, 0x06, 0x45, 0x47, 0x7f},
    {0x02, 0x02, 0x47, 0x07, 0x6f},
    {0x05, 0x45, 0x04, 0x07, 0x8f},
    {0x03, 0x07, 0x47, 0x07, 0x6f},
    {0x04, 0x06, 0x45, 0x47, 0x7f},
    {0x02, 0x07, 0x47, 0x07, 0x6f},
    {0x77, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x17, 0x42, 0x07, 0x9f},
    {0x01, 0x22, 0x42, 0xf5, 0xbd},
    {0x02, 0x17, 0x42, 0x07, 0x9f},
    {0x06, 0x5a, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x02, 0x6c},
    {0x04, 0x22, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x02, 0x6c},
    {0x09, 0x48, 0x42, 0xb5, 0xbd},
    {0x03, 0x1b, 0x42, 0x07, 0x9f},
    {0x01, 0x82, 0x42, 0x42, 0xce},
    {0x02, 0x1b, 0x42, 0x07, 0x9f},
    {0x05, 0x5a, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x02, 0x6c},
    {0x04, 0x82, 0x42, 0x42, 0xce},
    {0x02, 0x05, 0x43, 0x02, 0x6c},
    {0x0b, 0x4a, 0x42, 0xf5, 0xce},
    {0x03, 0x28, 0x42, 0xb5, 0xac},
    {0x01, 0x32, 0x42, 0xf5, 0xbd},
    {0x02, 0x28, 0x42, 0xb5, 0xac},
    {0x06, 0x49, 0x02, 0x07, 0x9f},
    {0x03, 0x10, 0x44, 0x07, 0x8f},
    {0x04, 0x32, 0x42, 0xf5, 0xbd},
    {0x02, 0x10, 0x44, 0x07, 0x8f},
    {0x07, 0x52, 0x02, 0xf5, 0xce},
    {0x03, 0x8e, 0x47, 0xb5, 0xff},
    {0x01, 0x0e, 0x42, 0x47, 0x9f},
    {0x02, 0x8e, 0x47, 0xb5, 0xff},
    {0x05, 0x49, 0x02, 0x07, 0x9f},
    {0x03, 0x06, 0x43, 0x02, 0x6c},
    {0x04, 0x0e, 0x42, 0x47, 0x9f},
    {0x02, 0x06, 0x43, 0x02, 0x6c},
    {0x7f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x13, 0x42, 0x07, 0x9f},
    {0x01, 0x3e, 0x42, 0xf5, 0xbd},
    {0x02, 0x13, 0x42, 0x07, 0x9f},
    {0x06, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x08, 0x45, 0x07, 0x7f},
    {0x04, 0x3e, 0x42, 0xf5, 0xbd},
    {0x02, 0x08, 0x45, 0x07, 0x7f},
    {0x08, 0x48, 0x42, 0xb5, 0xbd},
    {0x03, 0x38, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x45, 0x47, 0x7f},
    {0x02, 0x38, 0x42, 0xb5, 0xac},
    {0x05, 0xca, 0xb5, 0x00, 0x0c},
    {0x03, 0x81, 0x4a, 0x02, 0xce},
    {0x04, 0x04, 0x45, 0x47, 0x7f},
    {0x02, 0x81, 0x4a, 0x02, 0xce},
    {0x0c, 0x4a, 0x42, 0xf5, 0xce},
    {0x03, 0x0a, 0x45, 0x07, 0x7f},
    {0x01, 0x02, 0x45, 0x47, 0x7f},
    {0x02, 0x0a, 0x45, 0x07, 0x7f},
    {0x06, 0x46, 0x04, 0x07, 0x8f},
    {0x03, 0x04, 0x43, 0x02, 0x6c},
    {0x04, 0x02, 0x45, 0x47, 0x7f},
    {0x02, 0x04, 0x43, 0x02, 0x6c},
    {0x07, 0x45, 0x02, 0x47, 0x9f},
    {0x03, 0x02, 0x43, 0x02, 0x6c},
    {0x01, 0x07, 0x45, 0x47, 0x7f},
    {0x02, 0x02, 0x43, 0x02, 0x6c},
    {0x05, 0x46, 0x04, 0x07, 0x8f},
    {0x03, 0x07, 0x43, 0x02, 0x6c},
    {0x04, 0x07, 0x45, 0x47, 0x7f},
    {0x02, 0x07, 0x43, 0x02, 0x6c},
    {0xe4, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x2e, 0x42, 0xb5, 0xac},
    {0x01, 0x30, 0x42, 0xf5, 0xbd},
    {0x02, 0x2e, 0x42, 0xb5, 0xac},
    {0x06, 0x66, 0x02, 0xb5, 0xce},
    {0x03, 0x03, 0x41, 0x07, 0x6d},
    {0x04, 0x30, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x41, 0x07, 0x6d},
    {0x09, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x0b, 0x43, 0x07, 0x7d},
    {0x01, 0x03, 0x43, 0x47, 0x7d},
    {0x02, 0x0b, 0x43, 0x07, 0x7d},
    {0x05, 0x66, 0x02, 0xb5, 0xce},
    {0x03, 0x05, 0x41, 0x07, 0x6d},
    {0x04, 0x03, 0x43, 0x47, 0x7d},
    {0x02, 0x05, 0x41, 0x07, 0x6d},
    {0x0a, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x36, 0x42, 0xb5, 0xac},
    {0x01, 0x3c, 0x42, 0xf5, 0xbd},
    {0x02, 0x36, 0x42, 0xb5, 0xac},
    {0x06, 0xc2, 0x07, 0x02, 0xdf},
    {0x03, 0x09, 0x43, 0x07, 0x7d},
    {0x04, 0x3c, 0x42, 0xf5, 0xbd},
    {0x02, 0x09, 0x43, 0x07, 0x7d},
    {0x07, 0x55, 0x02, 0xf5, 0xce},
    {0x03, 0x88, 0x47, 0xb5, 0xee},
    {0x01, 0x05, 0x43, 0x47, 0x7d},
    {0x02, 0x88, 0x47, 0xb5, 0xee},
    {0x05, 0xc2, 0x07, 0x02, 0xdf},
    {0x03, 0x06, 0x41, 0x07, 0x6d},
    {0x04, 0x05, 0x43, 0x47, 0x7d},
    {0x02, 0x06, 0x41, 0x07, 0x6d},
    {0x6f, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x24, 0x42, 0xb5, 0xac},
    {0x01, 0x2a, 0x42, 0xf5, 0xbd},
    {0x02, 0x24, 0x42, 0xb5, 0xac},
    {0x06, 0x59, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x44, 0x02, 0xbd},
    {0x04, 0x2a, 0x42, 0xf5, 0xbd},
    {0x02, 0x82, 0x44, 0x02, 0xbd},
    {0x08, 0xc3, 0xf5, 0x00, 0x0c},
    {0x03, 0x34, 0x42, 0xb5, 0xac},
    {0x01, 0x10, 0x42, 0x47, 0x9f},
    {0x02, 0x34, 0x42, 0xb5, 0xac},
    {0x05, 0x59, 0x02, 0xb5, 0xbd},
    {0x03, 0x0f, 0x44, 0x07, 0x8f},
    {0x04, 0x10, 0x42, 0x47, 0x9f},
    {0x02, 0x0f, 0x44, 0x07, 0x8f},
    {0x67, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x00, 0x42, 0xb5, 0xac},
    {0x01, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x00, 0x42, 0xb5, 0xac},
    {0x06, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x04, 0x41, 0x07, 0x6d},
    {0x04, 0x92, 0xf5, 0x40, 0x0c},
    {0x02, 0x04, 0x41, 0x07, 0x6d},
    {0x07, 0x51, 0x02, 0xf5, 0xbd},
    {0x03, 0x02, 0x41, 0x07, 0x6d},
    {0x01, 0x06, 0x43, 0x47, 0x7d},
    {0x02, 0x02, 0x41, 0x07, 0x6d},
    {0x05, 0x4f, 0x02, 0xb5, 0xac},
    {0x03, 0x07, 0x41, 0x07, 0x6d},
    {0x04, 0x06, 0x43, 0x47, 0x7d},
    {0x02, 0x07, 0x41, 0x07, 0x6d},
    {0x75, 0xf5, 0x00, 0x00, 0x0c},
    {0x03, 0x0d, 0x44, 0x07, 0x8f},
    {0x01, 0x20, 0x42, 0xf5, 0xbd},
    {0x02, 0x0d, 0x44, 0x07, 0x8f},
    {0x06, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x03, 0x42, 0x02, 0x6c},
    {0x04, 0x20, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x42, 0x02, 0x6c},
    {0x09, 0xc1, 0x47, 0xb5, 0xff},
    {0x03, 0x9b, 0x47, 0xb5, 0xff},
    {0x01, 0x08, 0x44, 0x47, 0x8f},
    {0x02, 0x9b, 0x47, 0xb5, 0xff},
    {0x05, 0xc6, 0xb5, 0x00, 0x0c},
    {0x03, 0x05, 0x42, 0x02, 0x6c},
    {0x04, 0x08, 0x44, 0x47, 0x8f},
    {0x02, 0x05, 0x42, 0x02, 0x6c},
    {0x0b, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x2c, 0x42, 0xb5, 0xac},
    {0x01, 0x3a, 0x42, 0xf5, 0xbd},
    {0x02, 0x2c, 0x42, 0xb5, 0xac},
    {0x06, 0x44, 0x04, 0x07, 0x8f},
    {0x03, 0x11, 0x44, 0x07, 0x8f},
    {0x04, 0x3a, 0x42, 0xf5, 0xbd},
    {0x02, 0x11, 0x44, 0x07, 0x8f},
    {0x07, 0xc4, 0xb5, 0x40, 0x0c},
    {0x03, 0x96, 0x47, 0xb5, 0xff},
    {0x01, 0x81, 0x42, 0x42, 0xce},
    {0x02, 0x96, 0x47, 0xb5, 0xff},
    {0x05, 0x44, 0x04, 0x07, 0x8f},
    {0x03, 0x06, 0x42, 0x02, 0x6c},
    {0x04, 0x81, 0x42, 0x42, 0xce},
    {0x02, 0x06, 0x42, 0x02, 0x6c},
    {0x4e, 0x02, 0x02, 0xb5, 0xce},
    {0x03, 0x01, 0x44, 0x07, 0x8f},
    {0x01, 0x0a, 0x44, 0x47, 0x8f},
    {0x02, 0x01, 0x44, 0x07, 0x8f},
    {0x06, 0x42, 0x04, 0x07, 0x8f},
    {0x03, 0x08, 0x43, 0x07, 0x7d},
    {0x04, 0x0a, 0x44, 0x47, 0x8f},
    {0x02, 0x08, 0x43, 0x07, 0x7d},
    {0x08, 0xc1, 0x47, 0xb5, 0xff},
    {0x03, 0x83, 0x42, 0x02, 0xce},
    {0x01, 0x04, 0x43, 0x47, 0x7d},
    {0x02, 0x83, 0x42, 0x02, 0xce},
    {0x05, 0x42, 0x04, 0x07, 0x8f},
    {0x03, 0x81, 0x44, 0x02, 0xbd},
    {0x04, 0x04, 0x43, 0x47, 0x7d},
    {0x02, 0x81, 0x44, 0x02, 0xbd},
    {0x0c, 0x44, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x43, 0x07, 0x7d},
    {0x01, 0x02, 0x43, 0x47, 0x7d},
    {0x02, 0x0a, 0x43, 0x07, 0x7d},
    {0x06, 0x47, 0x04, 0x07, 0x8f},
    {0x03, 0x04, 0x42, 0x02, 0x6c},
    {0x04, 0x02, 0x43, 0x47, 0x7d},
    {0x02, 0x04, 0x42, 0x02, 0x6c},
    {0x07, 0x46, 0x02, 0x47, 0x9f},
    {0x03, 0x02, 0x42, 0x02, 0x6c},
    {0x01, 0x07, 0x43, 0x47, 0x7d},
    {0x02, 0x02, 0x42, 0x02, 0x6c},
    {0x05, 0x47, 0x04, 0x07, 0x8f},
    {0x03, 0x07, 0x42, 0x02, 0x6c},
    {0x04, 0x07, 0x43, 0x47, 0x7d},
    {0x02, 0x07, 0x42, 0x02, 0x6c},
    {0xf4, 0x47, 0x02, 0xf5, 0xff},
    {0x03, 0x1e, 0x42, 0xb5, 0xac},
    {0x01, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x1e, 0x42, 0xb5, 0xac},
    {0x06, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x45, 0x07, 0x6e},
    {0x04, 0x16, 0x42, 0xf5, 0xac},
    {0x02, 0x03, 0x45, 0x07, 0x6e},
    {0x09, 0x4a, 0x42, 0xb5, 0xbd},
    {0x03, 0x0b, 0x44, 0x07, 0x7e},
    {0x01, 0x03, 0x44, 0x47, 0x7e},
    {0x02, 0x0b, 0x44, 0x07, 0x7e},
    {0x05, 0x4d, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x45, 0x07, 0x6e},
    {0x04, 0x03, 0x44, 0x47, 0x7e},
    {0x02, 0x05, 0x45, 0x07, 0x6e},
    {0x0a, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x0c, 0x42, 0x07, 0x8e},
    {0x01, 0x0b, 0x42, 0x47, 0x8e},
    {0x02, 0x0c, 0x42, 0x07, 0x8e},
    {0x06, 0x43, 0x02, 0x07, 0x8e},
    {0x03, 0x09, 0x44, 0x07, 0x7e},
    {0x04, 0x0b, 0x42, 0x47, 0x8e},
    {0x02, 0x09, 0x44, 0x07, 0x7e},
    {0x07, 0x41, 0x02, 0xf5, 0xbd},
    {0x03, 0x9a, 0x47, 0x02, 0xce},
    {0x01, 0x05, 0x44, 0x47, 0x7e},
    {0x02, 0x9a, 0x47, 0x02, 0xce},
    {0x05, 0x43, 0x02, 0x07, 0x8e},
    {0x03, 0x06, 0x45, 0x07, 0x6e},
    {0x04, 0x05, 0x44, 0x47, 0x7e},
    {0x02, 0x06, 0x45, 0x07, 0x6e},
    {0x4d, 0x07, 0x02, 0xb5, 0xce},
    {0x03, 0x22, 0x42, 0xb5, 0xac},
    {0x01, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x22, 0x42, 0xb5, 0xac},
    {0x06, 0x52, 0x02, 0xb5, 0xbd},
    {0x03, 0x82, 0x42, 0x02, 0xbd},
    {0x04, 0x1a, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x42, 0x02, 0xbd},
    {0x08, 0x4a, 0x42, 0xb5, 0xbd},
    {0x03, 0x32, 0x42, 0xb5, 0xac},
    {0x01, 0x09, 0x42, 0x47, 0x8e},
    {0x02, 0x32, 0x42, 0xb5, 0xac},
    {0x05, 0x52, 0x02, 0xb5, 0xbd},
    {0x03, 0x0e, 0x42, 0x07, 0x8e},
    {0x04, 0x09, 0x42, 0x47, 0x8e},
    {0x02, 0x0e, 0x42, 0x07, 0x8e},
    {0x53, 0x07, 0xf5, 0x40, 0xff},
    {0x03, 0x3e, 0x42, 0xb5, 0xac},
    {0x01, 0x8a, 0x47, 0xf5, 0xff},
    {0x02, 0x3e, 0x42, 0xb5, 0xac},
    {0x06, 0x45, 0x02, 0x07, 0x8e},
    {0x03, 0x04, 0x45, 0x07, 0x6e},
    {0x04, 0x8a, 0x47, 0xf5, 0xff},
    {0x02, 0x04, 0x45, 0x07, 0x6e},
    {0x07, 0x48, 0x02, 0xf5, 0xac},
    {0x03, 0x02, 0x45, 0x07, 0x6e},
    {0x01, 0x06, 0x44, 0x47, 0x7e},
    {0x02, 0x02, 0x45, 0x07, 0x6e},
    {0x05, 0x45, 0x02, 0x07, 0x8e},
    {0x03, 0x07, 0x45, 0x07, 0x6e},
    {0x04, 0x06, 0x44, 0x47, 0x7e},
    {0x02, 0x07, 0x45, 0x07, 0x6e},
    {0x58, 0x07, 0xf5, 0x40, 0xff},
    {0x03, 0x30, 0x42, 0xb5, 0xac},
    {0x01, 0x26, 0x42, 0xf5, 0xbd},
    {0x02, 0x30, 0x42, 0xb5, 0xac},
    {0x06, 0x55, 0x02, 0xb5, 0xbd},
    {0x03, 0x03, 0x43, 0x07, 0x6c},
    {0x04, 0x26, 0x42, 0xf5, 0xbd},
    {0x02, 0x03, 0x43, 0x07, 0x6c},
    {0x09, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3c, 0x42, 0xb5, 0xac},
    {0x01, 0x82, 0x47, 0x42, 0xce},
    {0x02, 0x3c, 0x42, 0xb5, 0xac},
    {0x05, 0x55, 0x02, 0xb5, 0xbd},
    {0x03, 0x05, 0x43, 0x07, 0x6c},
    {0x04, 0x82, 0x47, 0x42, 0xce},
    {0x02, 0x05, 0x43, 0x07, 0x6c},
    {0x0b, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x2a, 0x42, 0xb5, 0xac},
    {0x01, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x2a, 0x42, 0xb5, 0xac},
    {0x06, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x10, 0x42, 0x07, 0x8e},
    {0x04, 0x19, 0x42, 0xf5, 0xac},
    {0x02, 0x10, 0x42, 0x07, 0x8e},
    {0x07, 0xc3, 0x07, 0xf5, 0xff},
    {0x03, 0x92, 0x47, 0xb5, 0xff},
    {0x01, 0x0f, 0x42, 0x47, 0x9f},
    {0x02, 0x92, 0x47, 0xb5, 0xff},
    {0x05, 0x51, 0x02, 0xb5, 0xac},
    {0x03, 0x06, 0x43, 0x07, 0x6c},
    {0x04, 0x0f, 0x42, 0x47, 0x9f},
    {0x02, 0x06, 0x43, 0x07, 0x6c},
    {0x56, 0x07, 0xf5, 0x40, 0xff},
    {0x03, 0x20, 0x42, 0xb5, 0xac},
    {0x01, 0x86, 0x47, 0xf5, 0xff},
    {0x02, 0x20, 0x42, 0xb5, 0xac},
    {0x06, 0xc4, 0x07, 0xb5, 0xff},
    {0x03, 0x08, 0x44, 0x07, 0x7e},
    {0x04, 0x86, 0x47, 0xf5, 0xff},
    {0x02, 0x08, 0x44, 0x07, 0x7e},
    {0x08, 0x44, 0x42, 0xb5, 0xac},
    {0x03, 0x3a, 0x42, 0xb5, 0xac},
    {0x01, 0x04, 0x44, 0x47, 0x7e},
    {0x02, 0x3a, 0x42, 0xb5, 0xac},
    {0x05, 0xc4, 0x07, 0xb5, 0xff},
    {0x03, 0x81, 0x42, 0x02, 0xbd},
    {0x04, 0x04, 0x44, 0x47, 0x7e},
    {0x02, 0x81, 0x42, 0x02, 0xbd},
    {0x0c, 0x42, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x44, 0x07, 0x7e},
    {0x01, 0x02, 0x44, 0x47, 0x7e},
    {0x02, 0x0a, 0x44, 0x07, 0x7e},
    {0x06, 0x46, 0x02, 0x07, 0x8e},
    {0x03, 0x04, 0x43, 0x07, 0x6c},
    {0x04, 0x02, 0x44, 0x47, 0x7e},
    {0x02, 0x04, 0x43, 0x07, 0x6c},
    {0x07, 0xc1, 0x07, 0xf5, 0xee},
    {0x03, 0x02, 0x43, 0x07, 0x6c},
    {0x01, 0x07, 0x44, 0x47, 0x7e},
    {0x02, 0x02, 0x43, 0x07, 0x6c},
    {0x05, 0x46, 0x02, 0x07, 0x8e},
    {0x03, 0x07, 0x43, 0x07, 0x6c},
    {0x04, 0x07, 0x44, 0x47, 0x7e},
    {0x02, 0x07, 0x43, 0x07, 0x6c},
    {0xe8, 0x42, 0xf5, 0x00, 0x0e},
    {0x03, 0x16, 0x42, 0x07, 0x9f},
    {0x01, 0x0d, 0x42, 0x47, 0x9f},
    {0x02, 0x16, 0x42, 0x07, 0x9f},
    {0x06, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x03, 0x44, 0x07, 0x6d},
    {0x04, 0x0d, 0x42, 0x47, 0x9f},
    {0x02, 0x03, 0x44, 0x07, 0x6d},
    {0x09, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x0b, 0x42, 0x07, 0x7d},
    {0x01, 0x03, 0x42, 0x47, 0x7d},
    {0x02, 0x0b, 0x42, 0x07, 0x7d},
    {0x05, 0x41, 0x02, 0xb5, 0xac},
    {0x03, 0x05, 0x44, 0x07, 0x6d},
    {0x04, 0x03, 0x42, 0x47, 0x7d},
    {0x02, 0x05, 0x44, 0x07, 0x6d},
    {0x0a, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x1a, 0x42, 0x07, 0x9f},
    {0x01, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x1a, 0x42, 0x07, 0x9f},
    {0x06, 0x48, 0x02, 0x07, 0x9f},
    {0x03, 0x09, 0x42, 0x07, 0x7d},
    {0x04, 0x12, 0x42, 0xf5, 0xac},
    {0x02, 0x09, 0x42, 0x07, 0x7d},
    {0x07, 0x4a, 0x02, 0xf5, 0xac},
    {0x03, 0x8a, 0x47, 0xb5, 0xee},
    {0x01, 0x05, 0x42, 0x47, 0x7d},
    {0x02, 0x8a, 0x47, 0xb5, 0xee},
    {0x05, 0x48, 0x02, 0x07, 0x9f},
    {0x03, 0x06, 0x44, 0x07, 0x6d},
    {0x04, 0x05, 0x42, 0x47, 0x7d},
    {0x02, 0x06, 0x44, 0x07, 0x6d},
    {0x50, 0x07, 0xf5, 0x00, 0xee},
    {0x03, 0x26, 0x42, 0xb5, 0xac},
    {0x01, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x26, 0x42, 0xb5, 0xac},
    {0x06, 0xc3, 0x07, 0xb5, 0xee},
    {0x03, 0x82, 0x47, 0x02, 0xbd},
    {0x04, 0x15, 0x42, 0xf5, 0xac},
    {0x02, 0x82, 0x47, 0x02, 0xbd},
    {0x08, 0x42, 0x42, 0xb5, 0xac},
    {0x03, 0x19, 0x42, 0x07, 0x9f},
    {0x01, 0x11, 0x42, 0x47, 0x9f},
    {0x02, 0x19, 0x42, 0x07, 0x9f},
    {0x05, 0xc3, 0x07, 0xb5, 0xee},
    {0x03, 0x0f, 0x42, 0x07, 0x8e},
    {0x04, 0x11, 0x42, 0x47, 0x9f},
    {0x02, 0x0f, 0x42, 0x07, 0x8e},
    {0x40, 0x07, 0xf5, 0x00, 0xee},
    {0x03, 0x86, 0x47, 0xb5, 0xee},
    {0x01, 0x84, 0x47, 0xf5, 0xee},
    {0x02, 0x86, 0x47, 0xb5, 0xee},
    {0x06, 0xc1, 0x07, 0x02, 0xdf},
    {0x03, 0x04, 0x44, 0x07, 0x6d},
    {0x04, 0x84, 0x47, 0xf5, 0xee},
    {0x02, 0x04, 0x44, 0x07, 0x6d},
    {0x07, 0x44, 0x02, 0x47, 0x9f},
    {0x03, 0x02, 0x44, 0x07, 0x6d},
    {0x01, 0x06, 0x42, 0x47, 0x7d},
    {0x02, 0x02, 0x44, 0x07, 0x6d},
    {0x05, 0xc1, 0x07, 0x02, 0xdf},
    {0x03, 0x07, 0x44, 0x07, 0x6d},
    {0x04, 0x06, 0x42, 0x47, 0x7d},
    {0x02, 0x07, 0x44, 0x07, 0x6d},
    {0xc1, 0x42, 0xb5, 0x00, 0x0c},
    {0x03, 0x0d, 0x42, 0x07, 0x8e},
    {0x01, 0x01, 0x42, 0x47, 0x9f},
    {0x02, 0x0d, 0x42, 0x07, 0x8e},
    {0x06, 0x4a, 0x02, 0x07, 0x9f},
    {0x03, 0x03, 0x42, 0x07, 0x6c},
    {0x04, 0x01, 0x42, 0x47, 0x9f},
    {0x02, 0x03, 0x42, 0x07, 0x6c},
    {0x09, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x12, 0x42, 0x07, 0x9f},
    {0x01, 0x08, 0x42, 0x47, 0x8e},
    {0x02, 0x12, 0x42, 0x07, 0x9f},
    {0x05, 0x4a, 0x02, 0x07, 0x9f},
    {0x03, 0x05, 0x42, 0x07, 0x6c},
    {0x04, 0x08, 0x42, 0x47, 0x8e},
    {0x02, 0x05, 0x42, 0x07, 0x6c},
    {0x0b, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x15, 0x42, 0x07, 0x9f},
    {0x01, 0x83, 0x47, 0x42, 0xdf},
    {0x02, 0x15, 0x42, 0x07, 0x9f},
    {0x06, 0x44, 0x02, 0x07, 0x8e},
    {0x03, 0x11, 0x42, 0x07, 0x8e},
    {0x04, 0x83, 0x47, 0x42, 0xdf},
    {0x02, 0x11, 0x42, 0x07, 0x8e},
    {0x07, 0x42, 0x02, 0x47, 0x9f},
    {0x03, 0x84, 0x47, 0x02, 0xdf},
    {0x01, 0x81, 0x47, 0x42, 0xce},
    {0x02, 0x84, 0x47, 0x02, 0xdf},
    {0x05, 0x44, 0x02, 0x07, 0x8e},
    {0x03, 0x06, 0x42, 0x07, 0x6c},
    {0x04, 0x81, 0x47, 0x42, 0xce},
    {0x02, 0x06, 0x42, 0x07, 0x6c},
    {0x4e, 0x07, 0x02, 0xb5, 0xce},
    {0x03, 0x01, 0x42, 0x07, 0x8e},
    {0x01, 0x0a, 0x42, 0x47, 0x8e},
    {0x02, 0x01, 0x42, 0x07, 0x8e},
    {0x06, 0x42, 0x02, 0x07, 0x8e},
    {0x03, 0x08, 0x42, 0x07, 0x7d},
    {0x04, 0x0a, 0x42, 0x47, 0x8e},
    {0x02, 0x08, 0x42, 0x07, 0x7d},
    {0x08, 0x47, 0x42, 0xb5, 0xac},
    {0x03, 0x83, 0x47, 0x02, 0xce},
    {0x01, 0x04, 0x42, 0x47, 0x7d},
    {0x02, 0x83, 0x47, 0x02, 0xce},
    {0x05, 0x42, 0x02, 0x07, 0x8e},
    {0x03, 0x81, 0x47, 0x02, 0xbd},
    {0x04, 0x04, 0x42, 0x47, 0x7d},
    {0x02, 0x81, 0x47, 0x02, 0xbd},
    {0x0c, 0x47, 0x42, 0xf5, 0xbd},
    {0x03, 0x0a, 0x42, 0x07, 0x7d},
    {0x01, 0x02, 0x42, 0x47, 0x7d},
    {0x02, 0x0a, 0x42, 0x07, 0x7d},
    {0x06, 0x47, 0x02, 0x07, 0x8e},
    {0x03, 0x04, 0x42, 0x07, 0x6c},
    {0x04, 0x02, 0x42, 0x47, 0x7d},
    {0x02, 0x04, 0x42, 0x07, 0x6c},
    {0x07, 0x47, 0x02, 0x47, 0x9f},
    {0x03, 0x02, 0x42, 0x07, 0x6c},
    {0x01, 0x07, 0x42, 0x47, 0x7d},
    {0x02, 0x02, 0x42, 0x07, 0x6c},
    {0x05, 0x47, 0x02, 0x07, 0x8e},
    {0x03, 0x07, 0x42, 0x07, 0x6c},
    {0x04, 0x07, 0x42, 0x47, 0x7d},
    {0x02, 0x07, 0x42, 0x07, 0x6c}
};

CONST BYTE gc_AlignEolTable[32] = 
{   0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x17, 0x17, 0x17, 
    0x17, 0x17, 0x17, 0x17, 0x17, 0x1f, 0x1f, 0x1f,
    0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f
};

CONST PREF_BYTE gc_PrefTable[128] = 
{
    {0, 6}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0}, 
    {4, 5}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0}, 
    {6,-2}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0},
    {4, 5}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0}, 
    {7,-3}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0}, 
    {4, 5}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0},
    {6, 2}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0}, 
    {4, 5}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0}, 
    {0, 7}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0},
    {4, 5}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0}, 
    {6,-2}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0}, 
    {4, 5}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0},
    {7, 3}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0}, 
    {4, 5}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0}, 
    {6, 2}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0},
    {4, 5}, {1, 0}, {3,-1}, {1, 0}, {3, 4}, {1, 0}, {3, 1}, {1, 0}
};

#pragma data_seg()

#endif // _TIFF_TABLES_INC_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\faxmodem.c ===
/*++

Copyright (c) 1997  Microsoft Corporation

Module Name:

    faxmodem.c

Abstract:

    This module contains code to read the adaptive
    answer modem list from the faxsetup.inf file.

Author:

    Wesley Witt (wesw) 22-Sep-1997


Revision History:

--*/

#include <windows.h>
#include <setupapi.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <tapi.h>

#include "faxreg.h"
#include "faxutil.h"

#ifdef __cplusplus
extern "C" {
#endif


VOID 
CALLBACK 
lineCallbackFunc(
  DWORD     hDevice,             
  DWORD     dwMsg,               
  DWORD_PTR dwCallbackInstance,  
  DWORD_PTR dwParam1,            
  DWORD_PTR dwParam2,            
  DWORD_PTR dwParam3             
)
{
    UNREFERENCED_PARAMETER (hDevice);
    UNREFERENCED_PARAMETER (dwMsg);
    UNREFERENCED_PARAMETER (dwCallbackInstance);
    UNREFERENCED_PARAMETER (dwParam1);
    UNREFERENCED_PARAMETER (dwParam2);
    UNREFERENCED_PARAMETER (dwParam3);
}   // lineCallbackFunc


LPLINEDEVCAPS
SmartLineGetDevCaps(
    HLINEAPP hLineApp,
    DWORD    dwDeviceId,
    DWORD    dwAPIVersion
    )
/*++

Routine name : SmartLineGetDevCaps

Routine description:

	Gets the line capabilities for a TAPI line

Author:

	Eran Yariv (EranY),	Jul, 2000

Arguments:

	hLineApp                      [in]     - Handle to TAPI
	dwDeviceId                    [in]     - Line id
	dwAPIVersion                  [in]     - Negotiated TAPI API version

Return Value:

    Pointer to allocated lide device capabilities data

--*/
{
    DWORD dwLineDevCapsSize;
    LPLINEDEVCAPS lpLineDevCaps = NULL;
    DWORD dwRes = ERROR_SUCCESS;
    DEBUG_FUNCTION_NAME(TEXT("SmartLineGetDevCaps"))
    //
    // Allocate the initial linedevcaps structure
    //
    dwLineDevCapsSize = sizeof(LINEDEVCAPS) + 4096;
    lpLineDevCaps = (LPLINEDEVCAPS) MemAlloc( dwLineDevCapsSize );
    if (!lpLineDevCaps) 
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Can't allocate %ld bytes for LINEDEVCAPS"),
            dwLineDevCapsSize);
        return NULL;
    }

    lpLineDevCaps->dwTotalSize = dwLineDevCapsSize;

    dwRes = lineGetDevCaps(
        hLineApp,
        dwDeviceId,
        dwAPIVersion,
        0,  // Always refer to address 0
        lpLineDevCaps
        );

    if ((ERROR_SUCCESS != dwRes) && (LINEERR_STRUCTURETOOSMALL != dwRes)) 
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("lineGetDevCaps failed with 0x%08x"),
            dwRes);
        goto exit;
    }

    if (lpLineDevCaps->dwNeededSize > lpLineDevCaps->dwTotalSize) 
    {
        //
        // Re-allocate the linedevcaps structure
        //
        dwLineDevCapsSize = lpLineDevCaps->dwNeededSize;
        MemFree( lpLineDevCaps );
        lpLineDevCaps = (LPLINEDEVCAPS) MemAlloc( dwLineDevCapsSize );
        if (!lpLineDevCaps) 
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("Can't allocate %ld bytes for LINEDEVCAPS"),
                dwLineDevCapsSize);
            return NULL;
        }
        lpLineDevCaps->dwTotalSize = dwLineDevCapsSize;
        dwRes = lineGetDevCaps(
            hLineApp,
            dwDeviceId,
            dwAPIVersion,
            0,  // Always refer to address 0
            lpLineDevCaps
            );
        if (ERROR_SUCCESS != dwRes) 
        {
            //
            // lineGetDevCaps() can fail with error code 0x8000004b
            // if a device has been deleted and tapi has not been
            // cycled.  this is caused by the fact that tapi leaves
            // a phantom device in it's device list.  the error is
            // benign and the device can safely be ignored.
            //
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("lineGetDevCaps failed with 0x%08x"),
                dwRes);
            goto exit;
        }
    }

exit:
    if (dwRes != ERROR_SUCCESS) 
    {
        MemFree( lpLineDevCaps );
        lpLineDevCaps = NULL;
        SetLastError(dwRes);
    }
    return lpLineDevCaps;
}   // SmartLineGetDevCaps

BOOL
IsDeviceModem (
    LPLINEDEVCAPS lpLineCaps,
    LPCTSTR       lpctstrUnimodemTspName
)
/*++

Routine name : IsDeviceModem

Routine description:

	Is a TAPI line a modem?

Author:

	Eran Yariv (EranY),	Jul, 2000

Arguments:

	lpLineCaps              [in]     - Line capabilities buffer
    lpctstrUnimodemTspName  [in]     - Full name of the Unimodem TSP

Return Value:

    TRUE if a TAPI line is a modem, FALSE otherwise.

--*/
{
    LPTSTR lptstrDeviceClassList;
    BOOL bRes = FALSE;
    DEBUG_FUNCTION_NAME(TEXT("IsDeviceModem"))

    if (lpLineCaps->dwDeviceClassesSize && lpLineCaps->dwDeviceClassesOffset) 
    {
        //
        // Scan multi-string for modem class
        //
        lptstrDeviceClassList = (LPTSTR)((LPBYTE) lpLineCaps + lpLineCaps->dwDeviceClassesOffset);
        while (*lptstrDeviceClassList) 
        {
            if (_tcscmp(lptstrDeviceClassList,TEXT("comm/datamodem")) == 0) 
            {
                bRes = TRUE;
                break;
            }
            lptstrDeviceClassList += (_tcslen(lptstrDeviceClassList) + 1);
        }
    }

    if ((!(lpLineCaps->dwBearerModes & LINEBEARERMODE_VOICE)) ||
        (!(lpLineCaps->dwBearerModes & LINEBEARERMODE_PASSTHROUGH))) 
    {
        //
        // Unacceptable modem device type
        //
        bRes = FALSE;
    }
    if (lpLineCaps->dwProviderInfoSize && lpLineCaps->dwProviderInfoOffset) 
    {
        //
        // Provider (TSP) name is there
        //
        if (_tcscmp((LPTSTR)((LPBYTE) lpLineCaps + lpLineCaps->dwProviderInfoOffset),
                    lpctstrUnimodemTspName) != 0)
        {
            //
            // Our T30 modem FSP only works with Unimodem TSP
            //
            bRes = FALSE;
        }
    }
    return bRes;
}   // IsDeviceModem

DWORD
GetFaxCapableTapiLinesCount (
    LPDWORD lpdwCount,
    LPCTSTR lpctstrUnimodemTspName
    )
/*++

Routine name : GetFaxCapableTapiLinesCount

Routine description:

	Counter the number of Fax-capable TAPI lines in the system

Author:

	Eran Yariv (EranY),	Jul, 2000

Arguments:

	lpdwCount               [out]    - Pointer to count of fax-capable Tapi lines
    lpctstrUnimodemTspName  [in]     - Full name of the Unimodem TSP

Return Value:

    Standard Win32 error code

--*/
{
    DWORD dwRes;
    LINEINITIALIZEEXPARAMS LineInitializeExParams = {sizeof (LINEINITIALIZEEXPARAMS), 0, 0, 0, 0, 0};
    HLINEAPP hLineApp = NULL;
    DWORD    dwTapiDevices;
    DWORD    dwLocalTapiApiVersion = 0x00020000;
    DWORD    dwCount = 0;
    DWORD    dwIndex;
    DEBUG_FUNCTION_NAME(TEXT("GetFaxCapableTapiLinesCount"))

    dwRes = lineInitializeEx(
        &hLineApp,
        GetModuleHandle(NULL),
        lineCallbackFunc,
        FAX_SERVICE_DISPLAY_NAME,
        &dwTapiDevices,
        &dwLocalTapiApiVersion,
        &LineInitializeExParams
        );
    if (ERROR_SUCCESS != dwRes)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("lineInitializeEx failed with %ld"),
            dwRes);
        goto exit;
    }
    for (dwIndex = 0; dwIndex < dwTapiDevices; dwIndex++)
    {
        //
        // For each device, get it's caps
        //
        LPLINEDEVCAPS lpLineCaps = SmartLineGetDevCaps (hLineApp, dwIndex, dwLocalTapiApiVersion);
        if (!lpLineCaps)
        {
            //
            // Couldn't get the device capabilities
            //
            dwRes = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("SmartLineGetDevCaps failed with %ld"),
                dwRes);
            continue;
        }
        if ((
             (lpLineCaps->dwMediaModes & LINEMEDIAMODE_DATAMODEM) && 
             IsDeviceModem(lpLineCaps, lpctstrUnimodemTspName)
            ) 
            ||
            (lpLineCaps->dwMediaModes & LINEMEDIAMODE_G3FAX)
           )
        {
            //
            // This is a fax-capable device
            //
            dwCount++;
        }
        MemFree (lpLineCaps);
    }
    dwRes = ERROR_SUCCESS;

exit:
    if (hLineApp)
    {
        lineShutdown (hLineApp);
    }
    if (ERROR_SUCCESS == dwRes)
    {
        *lpdwCount = dwCount;
    }
    return dwRes;
}   // GetFaxCapableTapiLinesCount

#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\faxevent.c ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    eventlog.c

Abstract:

    This file contains all functions that access the application event log.

Author:

    Wesley Witt (wesw) 19-Mar-1996

Environment:

    User Mode

--*/

#include <windows.h>
#include <tapi.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>

#include "fxsapip.h"
#include "faxutil.h"
#include "faxreg.h"
#include "faxext.h"
#include "..\service\registry\faxsvcrg.h"
#include "faxdev.h"
#include "faxevent.h"
#include "faxevent_messages.h"
#include "CritSec.h"


static DWORD gs_dwWarningEvents;
static DWORD gs_dwErrorEvents;
static DWORD gs_dwInformationEvents;

#define MAX_STRINGS                   64

static HANDLE               gs_hEventSrc;
static DWORD                gs_FaxCategoryCount;
static CFaxCriticalSection     gs_CsEvent;

PFAX_LOG_CATEGORY     gs_pFaxCategory;

#ifdef __cplusplus
extern "C" {
#endif

BOOL
FXSEVENTInitialize(
    VOID
    )
{
    //
    // Becuase the process is not always terminated when the service is stopped,
    // We must not have any staticly initialized global variables.
    // Initialize FXSEVENT global variables before starting the service
    //
    gs_hEventSrc = NULL;
    gs_pFaxCategory = NULL;
    gs_FaxCategoryCount = 0;
    gs_dwWarningEvents = 0;
    gs_dwErrorEvents = 0;
    gs_dwInformationEvents = 0;

    return TRUE;
}

VOID
FXSEVENTFree(
    VOID
    )
{
    DEBUG_FUNCTION_NAME(TEXT("FXSEVENTFree"));

    if (NULL != gs_hEventSrc)
    {
	    if (!DeregisterEventSource(gs_hEventSrc))
	    {
		    DebugPrintEx(
			    DEBUG_ERR,
			    TEXT("DeregisterEventSource() failed (ec: %ld)"),
			    GetLastError());
	    }
	    gs_hEventSrc = NULL;
    }

    gs_CsEvent.SafeDelete();

    for (DWORD i = 0; i < gs_FaxCategoryCount; i++)
    {        	
	    MemFree( (LPVOID)gs_pFaxCategory[i].Name );        
    }
    MemFree (gs_pFaxCategory);
    gs_pFaxCategory = NULL;
    gs_FaxCategoryCount = 0;

    HeapCleanup();
    return;
}


BOOL
InitializeEventLog(OUT PREG_FAX_SERVICE* ppFaxReg)

/*++

Routine Description:

    Initializes the event log for the FAX service to
    record event entries.

Arguments:
    ppFaxReg -

Return Value:

    TRUE for success, FALSE for failure

--*/

{
    DWORD i;
    DWORD ec;

    FAX_LOG_CATEGORY DefaultCategories[] =
    {
        { L"Initialization/Termination", FAXLOG_CATEGORY_INIT,     FAXLOG_LEVEL_MED },
        { L"Outbound",                   FAXLOG_CATEGORY_OUTBOUND, FAXLOG_LEVEL_MED },
        { L"Inbound",                    FAXLOG_CATEGORY_INBOUND,  FAXLOG_LEVEL_MED },
        { L"Unknown",                    FAXLOG_CATEGORY_UNKNOWN,  FAXLOG_LEVEL_MED }
    };    

    DEBUG_FUNCTION_NAME(TEXT("InitializeEventLog"));
	
    if (!gs_CsEvent.InitializeAndSpinCount())
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("CFaxCriticalSection::InitializeAndSpinCount (&gs_CsEvent) failed: err = %d"),
            ec);
        return FALSE;
    }

    *ppFaxReg = NULL;
    ec = GetFaxRegistry(ppFaxReg);
    if (ERROR_SUCCESS != ec)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetFaxRegistry() failed (ec: %ld)"),
            ec);
        return FALSE;
    }

    //
    // create the event source, if it does not already exist
    //
    if (!CreateFaxEventSource( *ppFaxReg,
                               DefaultCategories,
                               ARR_SIZE(DefaultCategories)))
    {
        DebugPrintEx(
                     DEBUG_ERR,
                     TEXT("CreateFaxEventSource() failed"));
        return FALSE;
    }

    Assert( (*ppFaxReg)->Logging );
    //
    // allocate memory for the logging category info
    //
    EnterCriticalSection( &gs_CsEvent );
	gs_pFaxCategory = (PFAX_LOG_CATEGORY) MemAlloc( sizeof(FAX_LOG_CATEGORY) * (*ppFaxReg)->LoggingCount );
    if (!gs_pFaxCategory)
    {
        DebugPrintEx(
                     DEBUG_ERR,
                     TEXT("MemAlloc() failed"));
        LeaveCriticalSection( &gs_CsEvent );
        return FALSE;
    }
	ZeroMemory (gs_pFaxCategory, sizeof(FAX_LOG_CATEGORY) * (*ppFaxReg)->LoggingCount);
	gs_FaxCategoryCount = (*ppFaxReg)->LoggingCount;

    //
    // capture the event categories from the registry
    //
    for (i = 0; i < (*ppFaxReg)->LoggingCount; i++)
    {
		Assert (NULL != (*ppFaxReg)->Logging[i].CategoryName);

        gs_pFaxCategory[i].Name      = StringDup( (*ppFaxReg)->Logging[i].CategoryName );
		if (NULL == gs_pFaxCategory[i].Name)
		{
			//
			// FXSEVENTFree() will free all resources
			//
			LeaveCriticalSection( &gs_CsEvent );
			return FALSE;
		}
        gs_pFaxCategory[i].Category  = (*ppFaxReg)->Logging[i].Number;
        gs_pFaxCategory[i].Level     = (*ppFaxReg)->Logging[i].Level;
    }

   
    LeaveCriticalSection( &gs_CsEvent );

    //
    // get a handle to the event log
    //
    gs_hEventSrc = RegisterEventSource(
        NULL,
        FAX_SVC_EVENT
        );

    if (!gs_hEventSrc)
    {
        return FALSE;
    }

    return TRUE;
}



DWORD
RefreshEventLog(
    PREG_FAX_LOGGING FaxReg
    )

/*++

Routine Description:

    Refreshes the event log for the FAX service to
    record event entries.

Arguments:

    None.

Return Value:

    Win32 error code.

--*/

{
    DWORD i;
	PFAX_LOG_CATEGORY pLoggingCategories = NULL;
	DWORD dwRes = ERROR_SUCCESS;
	DEBUG_FUNCTION_NAME(TEXT("RefreshEventLog"));

    EnterCriticalSection( &gs_CsEvent );    

	pLoggingCategories = (PFAX_LOG_CATEGORY) MemAlloc( sizeof(FAX_LOG_CATEGORY) * FaxReg->LoggingCount);
    if (NULL == pLoggingCategories)
    {
        DebugPrintEx(
                     DEBUG_ERR,
                     TEXT("MemAlloc() failed"));
		dwRes = ERROR_OUTOFMEMORY;
        goto exit;
    }
	ZeroMemory (pLoggingCategories, sizeof(FAX_LOG_CATEGORY) * FaxReg->LoggingCount);

    //
    // Set the new values
    //
    for (i = 0; i < FaxReg->LoggingCount; i++)
    {
        pLoggingCategories[i].Name      = StringDup( FaxReg->Logging[i].CategoryName );
		if (NULL == pLoggingCategories[i].Name)
		{
			dwRes = ERROR_OUTOFMEMORY;
			goto exit;
		}
        pLoggingCategories[i].Category  = FaxReg->Logging[i].Number;
        pLoggingCategories[i].Level     = FaxReg->Logging[i].Level;
    }

	//
    // Free old settings
    //
    for (i = 0; i < gs_FaxCategoryCount; i++)
	{        	
        MemFree( (LPVOID)gs_pFaxCategory[i].Name );        
    }
	MemFree (gs_pFaxCategory);

	//
	// Set the gs_pFaxCategory to point to the new values
	//
	gs_pFaxCategory = pLoggingCategories;
    gs_FaxCategoryCount = FaxReg->LoggingCount;
	pLoggingCategories = NULL; // Do not free at exit
	Assert (ERROR_SUCCESS == dwRes);
exit:
    LeaveCriticalSection( &gs_CsEvent );

	if (NULL != pLoggingCategories)
	{
		for (i = 0; i < FaxReg->LoggingCount; i++)
		{        	
			MemFree( (LPVOID)pLoggingCategories[i].Name );        
		}
		MemFree(pLoggingCategories);
	}
	return dwRes;
}


BOOL
FaxLog(
    DWORD Category,
    DWORD Level,
    DWORD StringCount,
    DWORD FormatId,
    ...
    )

/*++

Routine Description:

    Writes a log file entry to the event log.

Arguments:

    Level       - Severity of the log record
    StringCount - Number of strings included in the varargs
    FormatId    - Message file id

Return Value:

    TRUE for success, FALSE for failure

--*/

{
    LPCTSTR Strings[MAX_STRINGS];
    DWORD i;
    va_list args;
    WORD Type;
    WORD wEventCategory; // The event categoey as it appears in the MC file. The WINFAX.H cateogry values
                           // are mapped to the .MC values before ReportEvent() is called.

    DEBUG_FUNCTION_NAME(TEXT("FaxLog"));

    if(StringCount > MAX_STRINGS)
    {
		DebugPrintEx(DEBUG_ERR, TEXT("Too many parameters."));
        return FALSE;
    }

    if (!gs_hEventSrc)
    {
        //
        // Not yet initialized
        //
        DebugPrintEx(
                DEBUG_WRN,
                TEXT("Event log is not initialized yet."),
                Category);
        return FALSE;
    }
    //
    // look for the category
    //

    EnterCriticalSection( &gs_CsEvent );

    for (i = 0; i < gs_FaxCategoryCount; i++)
	{
        if (gs_pFaxCategory[i].Category == Category)
		{
            if (Level > gs_pFaxCategory[i].Level)
			{
                LeaveCriticalSection( &gs_CsEvent );
                return FALSE;
            }
        }
    }

    va_start( args, FormatId );

    //
    // capture the strings
    //
    for (i=0; i<StringCount; i++)
	{
        Strings[i] = va_arg( args, LPTSTR );
        if(Strings[i] == NULL)
		{
            Strings[i] = TEXT("");
        }
    }

	va_end (args);

    switch (FormatId >> 30)
    {
        case STATUS_SEVERITY_WARNING:

            Type = EVENTLOG_WARNING_TYPE;
            gs_dwWarningEvents++;
            break;

        case STATUS_SEVERITY_ERROR:
            Type = EVENTLOG_ERROR_TYPE;
            gs_dwErrorEvents++;
            break;

        case STATUS_SEVERITY_INFORMATIONAL:
        case STATUS_SEVERITY_SUCCESS:
            Type = EVENTLOG_INFORMATION_TYPE;
            gs_dwInformationEvents++;
			break;

		default:
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("Invalid Type id [%ld]"),
                (FormatId >> 30));			
            ASSERT_FALSE;
			break;
    }

    LeaveCriticalSection( &gs_CsEvent );

    //
    // Map the public category index to the .MC category index
    //
    //

    switch (Category)
    {
        case FAXLOG_CATEGORY_INIT:
                wEventCategory = FAX_LOG_CATEGORY_INIT;
            break;
        case FAXLOG_CATEGORY_OUTBOUND:
                wEventCategory = FAX_LOG_CATEGORY_OUTBOUND;
            break;
        case FAXLOG_CATEGORY_INBOUND:
                wEventCategory = FAX_LOG_CATEGORY_INBOUND;
            break;
        case FAXLOG_CATEGORY_UNKNOWN:
                wEventCategory = FAX_LOG_CATEGORY_UNKNOWN;
            break;
        default:
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("Invalid category id [%ld]"),
                Category);
            ASSERT_FALSE;

    }

    //
    // record the event
    //
    if (!ReportEvent(
        gs_hEventSrc,                       // event log handle
        Type,                            // type
        wEventCategory,                 // category
        FormatId,                        // event id
        NULL,                            // security id
        (WORD) StringCount,              // string count
        0,                               // data buffer size
        Strings,                         // strings
        NULL                             // data buffer
        ))
	{
		DebugPrintEx(
			DEBUG_ERR,
			TEXT("ReportEvent() failed, ec: %ld"),
			GetLastError());
	}

    return TRUE;
}

void
GetEventsCounters(
    OUT LPDWORD lpdwWarningEvents,
    OUT LPDWORD lpdwErrorEvents,
    OUT LPDWORD lpdwInformationEvents
    )
{
    Assert (lpdwWarningEvents && lpdwErrorEvents && lpdwInformationEvents);

    EnterCriticalSection( &gs_CsEvent );

    *lpdwWarningEvents = gs_dwWarningEvents;
    *lpdwErrorEvents = gs_dwErrorEvents;
    *lpdwInformationEvents = gs_dwInformationEvents;

    LeaveCriticalSection( &gs_CsEvent );
    return;
}

DWORD
GetLoggingCategories(
    OUT PFAX_LOG_CATEGORY* lppFaxCategory,
    OUT LPDWORD lpdwFaxCategorySize,
    OUT LPDWORD lpdwNumberCategories
    )
/*++

Routine Description:

    returns the logging categories. The caller should call MemFree to deallocate (lppFaxCategory).
    The returned data is serialized. The caller should call FixupString() on CategoryName to convert offset to address.

Arguments:

    OUT LPBYTE *lppFaxCategory  - Address of a buffer to recieve the fax category. The buffer is allocated by the function.
    OUT LPDWORD lpdwFaxCategorySize - Allocated buffer size.
    OUT LPDWORD lpdwNumberCategories - Number of fax logging categories.

Return Value:

    None.

--*/

{
    DWORD i;
    DWORD dwBufferSize;
    ULONG_PTR ulpOffset;
    DEBUG_FUNCTION_NAME(TEXT("GetLoggingCategories"));

    Assert (lppFaxCategory && lpdwFaxCategorySize && lpdwNumberCategories);
    *lpdwFaxCategorySize = 0;
    *lppFaxCategory = NULL;
    *lpdwNumberCategories = 0;

    EnterCriticalSection( &gs_CsEvent );
    //
    // Calculate buffer size
    //
    dwBufferSize = gs_FaxCategoryCount * sizeof(FAX_LOG_CATEGORY);
    for (i = 0; i < gs_FaxCategoryCount; i++)
    {
        dwBufferSize += StringSize(gs_pFaxCategory[i].Name);
    }

    //
    // Allocate memory
    //
    *lppFaxCategory = (PFAX_LOG_CATEGORY)MemAlloc(dwBufferSize);
    if (NULL == *lppFaxCategory)
    {
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("MemAlloc failed"));
        LeaveCriticalSection( &gs_CsEvent );
        return ERROR_NOT_ENOUGH_MEMORY;
    }
    *lpdwFaxCategorySize = dwBufferSize;
    *lpdwNumberCategories = gs_FaxCategoryCount;

    //
    // Get the fax logging logging
    //
    ulpOffset = gs_FaxCategoryCount * sizeof(FAX_LOG_CATEGORY);
    for (i = 0; i < gs_FaxCategoryCount; i++)
    {
        StoreString(
            gs_pFaxCategory[i].Name,
            (PULONG_PTR)&((*lppFaxCategory)[i].Name),
            (LPBYTE)*lppFaxCategory,
            &ulpOffset,
			dwBufferSize
            );

        (*lppFaxCategory)[i].Category  = gs_pFaxCategory[i].Category;
        (*lppFaxCategory)[i].Level     = gs_pFaxCategory[i].Level;
    }

    LeaveCriticalSection( &gs_CsEvent );

    return ERROR_SUCCESS;
}  // GetLoggingCategories

#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\debug.c ===
/*++

Copyright (c) 1995  Microsoft Corporation

Module Name:

    debug.c

Abstract:

    This file implements the debug code for the
    fax project.  All components that require
    debug prints, asserts, etc.

Author:

    Wesley Witt (wesw) 22-Dec-1995

History:
    1-Sep-1999 yossg  add ArielK additions, activate DebugLogPrint
                      only while Setup g_fIsSetupLogFileMode
.
.

Environment:

    User Mode

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <time.h>

#include "faxreg.h"
#include "faxutil.h"

BOOL        ConsoleDebugOutput    = FALSE;
INT         FaxDebugLevel         = -1;
DWORD       FaxDebugLevelEx       =  -1;
DWORD       FaxFormatLevelEx      =  -1;
DWORD       FaxContextLevelEx     =  -1;

TCHAR       g_szPathToFile[MAX_PATH] = {0};
DWORD       g_dwMaxSize           = -1;       // max log file size, -1 = no max size
FILE *      g_pLogFile            = NULL;
static BOOL g_fIsSetupLogFileMode = FALSE;

HANDLE      g_hLogFile            = INVALID_HANDLE_VALUE;
LONG        g_iLogFileRefCount    = 0;

BOOL debugOutputFileString(LPCTSTR szMsg);
BOOL debugCheckFileSize();

VOID
StartDebugLog(LPTSTR lpszSetupLogFile)
{
   g_fIsSetupLogFileMode = TRUE;
   if (!g_pLogFile)
   {
      g_pLogFile = _tfopen(lpszSetupLogFile, TEXT("w"));
   }
}

VOID
CloseDebugLog()
{
   g_fIsSetupLogFileMode = FALSE;
   if (!g_pLogFile)
   {
      fclose(g_pLogFile);
   }
}


VOID
DebugLogPrint(
    LPCTSTR buf
    )
{
   if (g_pLogFile)
    {
       _fputts(TEXT("FAX Server Setup Log: "), g_pLogFile);
       _fputts( buf, g_pLogFile);
       fflush(g_pLogFile);
    }
}

//*****************************************************************************
//* Name:   debugOpenLogFile
//* Author: Mooly Beery (MoolyB), May, 2000
//*****************************************************************************
//* DESCRIPTION:
//*     Creates a log file which accepts the debug output
//*     FormatLevelEx should be set in the registry to include DBG_PRNT_TO_FILE
//*
//* PARAMETERS:
//*     [IN] LPCTSTR lpctstrFilename:
//*         the filename which will be created in the temporary folder
//*     [IN] DWORD dwMaxSize
//*         Maximum allowed log file size in bytes. -1 means no max size.
//*
//* RETURN VALUE:
//*         FALSE if the operation failed.
//*         TRUE is succeeded.
//* Comments:
//*         this function should be used together with CloseLogFile()
//*****************************************************************************
BOOL debugOpenLogFile(LPCTSTR lpctstrFilename, DWORD dwMaxSize)
{
    TCHAR szFilename[MAX_PATH]      = {0};
    TCHAR szTempFolder[MAX_PATH]    = {0};

    if (g_hLogFile!=INVALID_HANDLE_VALUE)
    {
        InterlockedIncrement(&g_iLogFileRefCount);
        return TRUE;
    }

    if (!lpctstrFilename)
    {
        return FALSE;
    }

     // first expand the filename
    if (ExpandEnvironmentStrings(lpctstrFilename,szFilename,MAX_PATH)==0)
    {
        return FALSE;
    }
    // is this is a file description or a complete path to file
    if (_tcschr(szFilename,_T('\\'))==NULL)
    {
        // this is just the file's name, need to add the temp folder to it.
        if (GetTempPath(MAX_PATH,szTempFolder)==0)
        {
            return FALSE;
        }

        _tcsncpy(g_szPathToFile,szTempFolder,MAX_PATH-1);
        _tcsncat(g_szPathToFile,szFilename,MAX_PATH-_tcslen(g_szPathToFile)-1);
    }
    else
    {
        // this is the full path to the log file, use it.
        _tcsncpy(g_szPathToFile,szFilename,MAX_PATH-1);
    }
    g_dwMaxSize = dwMaxSize;

    g_hLogFile = ::SafeCreateFile(  
                                g_szPathToFile,
                                GENERIC_WRITE,
                                FILE_SHARE_WRITE | FILE_SHARE_READ,
                                NULL,
                                OPEN_ALWAYS,
                                FILE_ATTRIBUTE_NORMAL,
                                NULL);

    if (g_hLogFile==INVALID_HANDLE_VALUE)
    {
        return FALSE;
    }

    DWORD dwFilePointer = ::SetFilePointer(g_hLogFile,0,NULL,FILE_END);
    if (dwFilePointer==INVALID_SET_FILE_POINTER)
    {
        ::CloseHandle(g_hLogFile);
        g_hLogFile = INVALID_HANDLE_VALUE;
        return FALSE;
    }

    InterlockedExchange(&g_iLogFileRefCount,1);
    return TRUE;
}

//*****************************************************************************
//* Name:   CloseLogFile
//* Author: Mooly Beery (MoolyB), May, 2000
//*****************************************************************************
//* DESCRIPTION:
//*     Closes the log file which accepts the debug output
//*
//* PARAMETERS:
//*
//* RETURN VALUE:
//*
//* Comments:
//*         this function should be used together with OpenLogFile()
//*****************************************************************************
void debugCloseLogFile()
{
    InterlockedDecrement(&g_iLogFileRefCount);
    if (g_iLogFileRefCount==0)
    {
        if (g_hLogFile!=INVALID_HANDLE_VALUE)
        {
            ::CloseHandle(g_hLogFile);
            g_hLogFile = INVALID_HANDLE_VALUE;
        }
    }
}

DWORD
GetDebugLevel(
    VOID
    )
{
    DWORD rc;
    DWORD err;
    DWORD size;
    DWORD type;
    HKEY  hkey;

    err = RegOpenKeyEx(HKEY_LOCAL_MACHINE,
                     REGKEY_FAX_CLIENT,
                     0,
                     KEY_READ,
                     &hkey);

    if (err != ERROR_SUCCESS)
        return 0;

    size = sizeof(DWORD);
    err = RegQueryValueEx(hkey,
                          REGVAL_DBGLEVEL,
                          0,
                          &type,
                          (LPBYTE)&rc,
                          &size);

    if (err != ERROR_SUCCESS || type != REG_DWORD)
        rc = 0;

    RegCloseKey(hkey);

    return rc;
}


DWORD
GetDebugLevelEx(
    VOID
    )
{
    DWORD RetVal = 0;
    DWORD err;
    DWORD size;
    DWORD type;
    HKEY  hkey;

    // first let's set the defaults

    FaxDebugLevelEx       =  0;  // Default get no debug output
    FaxFormatLevelEx      =  DBG_PRNT_ALL_TO_STD;
    FaxContextLevelEx     =  DEBUG_CONTEXT_ALL;

    err = RegOpenKeyEx(HKEY_LOCAL_MACHINE,
                     REGKEY_FAX_CLIENT,
                     0,
                     KEY_READ,
                     &hkey);

    if (err != ERROR_SUCCESS)
        return RetVal;

    size = sizeof(DWORD);
    err = RegQueryValueEx(hkey,
                          REGVAL_DBGLEVEL_EX,
                          0,
                          &type,
                          (LPBYTE)&RetVal,
                          &size);

    if (err != ERROR_SUCCESS || type != REG_DWORD)
    {
        RetVal = 0;
    }

    size = sizeof(DWORD);
    err = RegQueryValueEx(hkey,
                          REGVAL_DBGFORMAT_EX,
                          0,
                          &type,
                          (LPBYTE)&FaxFormatLevelEx,
                          &size);

    if (err != ERROR_SUCCESS || type != REG_DWORD)
    {
        FaxFormatLevelEx = DBG_PRNT_ALL_TO_STD;
    }

    err = RegQueryValueEx(hkey,
                          REGVAL_DBGCONTEXT_EX,
                          0,
                          &type,
                          (LPBYTE)&FaxContextLevelEx,
                          &size);

    if (err != ERROR_SUCCESS || type != REG_DWORD)
    {
        FaxContextLevelEx = DEBUG_CONTEXT_ALL;
    }

    RegCloseKey(hkey);
    return RetVal;
}

void dprintfex
(
    DEBUG_MESSAGE_CONTEXT nMessageContext,
    DEBUG_MESSAGE_TYPE nMessageType,
    LPCTSTR lpctstrDbgFunctionName,
    LPCTSTR lpctstrFile,
    DWORD   dwLine,
    LPCTSTR lpctstrFormat,
    ...
)
{
    TCHAR buf[2048] = {0};
    DWORD len;
    va_list arg_ptr;
    TCHAR szExtFormat[2048] = {0};
    LPTSTR lptstrMsgPrefix;
    TCHAR szTimeBuff[10];
    TCHAR szDateBuff[10];
    DWORD dwInd = 0;
    TCHAR bufLocalFile[MAX_PATH] = {0};
    LPTSTR lptstrShortFile = NULL;
    LPTSTR lptstrProject = NULL;

    DWORD dwLastError = GetLastError();

    static BOOL bChecked = FALSE;

    if (!bChecked)
    {
        if (FaxDebugLevelEx==-1)
            FaxDebugLevelEx = GetDebugLevelEx();
        bChecked = TRUE;
    }

    if (FaxDebugLevelEx == 0)
    {
        goto exit;
    }

    if (!(nMessageType & FaxDebugLevelEx))
    {
        goto exit;
    }

    if (!(nMessageContext & FaxContextLevelEx))
    {
        goto exit;
    }

    switch (nMessageType)
    {
        case DEBUG_VER_MSG:
            lptstrMsgPrefix=TEXT("   ");
            break;
        case DEBUG_WRN_MSG:
            lptstrMsgPrefix=TEXT("WRN");
            break;
        case DEBUG_ERR_MSG:
            lptstrMsgPrefix=TEXT("ERR");
            break;
		case DEBUG_FAX_TAPI_MSG:
			lptstrMsgPrefix=TEXT("TAP");
            break;
        default:
            _ASSERT(FALSE);
            lptstrMsgPrefix=TEXT("   ");
            break;
    }

    // Date & Time stamps
    if( FaxFormatLevelEx & DBG_PRNT_TIME_STAMP )
    {
        dwInd += _stprintf(&szExtFormat[dwInd],
                          TEXT("[%-8s %-8s]"),
                          _tstrdate(szDateBuff),
                          _tstrtime(szTimeBuff));
    }
    // Tick Count
    if( FaxFormatLevelEx & DBG_PRNT_TICK_COUNT )
    {
        dwInd += _stprintf(&szExtFormat[dwInd],
                          TEXT("[%09d]"),
                          GetTickCount());
    }
    // Thread ID
    if( FaxFormatLevelEx & DBG_PRNT_THREAD_ID )
    {
        dwInd += _stprintf(&szExtFormat[dwInd],
                          TEXT("[0x%05x]"),
                          GetCurrentThreadId());
    }
    // Message type
    if( FaxFormatLevelEx & DBG_PRNT_MSG_TYPE )
    {
        dwInd += _stprintf(&szExtFormat[dwInd],
                          TEXT("[%s]"),
                          lptstrMsgPrefix);
    }
    // filename & line number
    if( FaxFormatLevelEx & DBG_PRNT_FILE_LINE )
    {
        _tcsncpy(bufLocalFile,lpctstrFile,MAX_PATH-1);
        lptstrShortFile = _tcsrchr(bufLocalFile,_T('\\'));
        if (lptstrShortFile)
        {
            (*lptstrShortFile) = _T('\0');
            lptstrProject = _tcsrchr(bufLocalFile,_T('\\'));
            (*lptstrShortFile) = _T('\\');
            if (lptstrProject)
                lptstrProject = _tcsinc(lptstrProject);
        }

        dwInd += _stprintf( &szExtFormat[dwInd],
                            TEXT("[%-20s][%-4ld]"),
                            lptstrProject,
                            dwLine);
    }
    // Module name
    if( FaxFormatLevelEx & DBG_PRNT_MOD_NAME )
    {
        dwInd += _stprintf(&szExtFormat[dwInd],
                          TEXT("[%-20s]"),
                          lpctstrDbgFunctionName);
    }
    // Now comes the actual message
    va_start(arg_ptr, lpctstrFormat);
    _vsntprintf(buf, ARR_SIZE(buf) - 1, lpctstrFormat, arg_ptr);
    len = _tcslen(buf);
    _tcsncpy (&szExtFormat[dwInd], buf, ARR_SIZE(szExtFormat) - dwInd - 1);
    dwInd += len;
    //
    // Limit index to szExtFormat size
    //
    if (dwInd > ARR_SIZE(szExtFormat)-3)
    {
        dwInd = ARR_SIZE(szExtFormat)-3;
    }

    _stprintf( &szExtFormat[dwInd],TEXT("\r\n"));

    if( FaxFormatLevelEx & DBG_PRNT_TO_STD )
    {
        OutputDebugString( szExtFormat);
    }

    if ( FaxFormatLevelEx & DBG_PRNT_TO_FILE )
    {
        if (g_hLogFile!=INVALID_HANDLE_VALUE)
        {
            debugOutputFileString(szExtFormat);
        }
    }

exit:
    SetLastError (dwLastError);   // dprintfex will not change LastError
    return;
}

BOOL debugOutputFileString(LPCTSTR szMsg)
{
    BOOL bRes = FALSE;
    //
    // Attempt to add the line to a log file
    //
#ifdef UNICODE
    char sFileMsg[2000];

    int Count = WideCharToMultiByte(
        CP_ACP,
        0,
        szMsg,
        -1,
        sFileMsg,
        sizeof(sFileMsg)/sizeof(sFileMsg[0]),
        NULL,
        NULL
        );

    if (Count==0)
    {
        return bRes;
    }
#else
    const char* sFileMsg = szMsg;
#endif

    DWORD dwNumBytesWritten = 0;
    DWORD dwNumOfBytesToWrite = strlen(sFileMsg);
    if (!::WriteFile(g_hLogFile,sFileMsg,dwNumOfBytesToWrite,&dwNumBytesWritten,NULL))
    {
        return bRes;
    }

    if (dwNumBytesWritten!=dwNumOfBytesToWrite)
    {
        return bRes;
    }

    //    ::FlushFileBuffers(g_hLogFile);
    if (g_dwMaxSize != -1)
    {   // There's a file size limitation, let's see if we exceeded it
        debugCheckFileSize();
        // Ignore return value - there's nothing we can do about it anyway
    }
    bRes = TRUE;
    return bRes;
}

//*****************************************************************************
//* Name:   debugCheckFileSize
//* Author: Jonathan Barner (t-jonb), August 2001
//*****************************************************************************
//* DESCRIPTION:
//*     Checks whether the log file exceeded the maximum size specified
//*     in debugOpenLogFile. If so, renames the file (overwriting the last
//*     renamed file, if exists), and creates a new log file.
//*
//* PARAMETERS: none
//* RETURN VALUE: TRUE - success, FALSE - failure
//*
//*****************************************************************************
BOOL debugCheckFileSize()
{
    DWORD dwSizeHigh=0, dwSizeLow=0;

    dwSizeLow = GetFileSize(g_hLogFile, &dwSizeHigh);

    if (dwSizeLow==INVALID_FILE_SIZE && (GetLastError()!=NO_ERROR))
    {   
        return FALSE;
    }
    if (dwSizeHigh>0 || dwSizeLow>g_dwMaxSize)
    {
        TCHAR szPathToFileOld[MAX_PATH]      = {0};
        PTCHAR lpszDot = NULL;

        _tcsncpy(szPathToFileOld, g_szPathToFile, MAX_PATH - 1);

        // Change File.txt into FileOld.txt
        lpszDot = _tcsrchr(szPathToFileOld, _T('.'));
        if (lpszDot != NULL)
        {   
            *lpszDot = _T('\0');
        }
        if (_tcslen(szPathToFileOld)+7 > MAX_PATH)  // strlen("Old.txt") = 7
        {
            return FALSE;
        }
        _tcscat(szPathToFileOld, _T("Old.txt"));

        if (! ::CloseHandle(g_hLogFile))
        {
            return FALSE;
        }
        g_hLogFile = INVALID_HANDLE_VALUE;

        ::MoveFileEx(g_szPathToFile, szPathToFileOld, MOVEFILE_REPLACE_EXISTING);
        // MoveFileEx could fail if the old file is open. In this case, do nothing

        g_hLogFile = ::SafeCreateFile(  
                                    g_szPathToFile,
                                    GENERIC_WRITE,
                                    FILE_SHARE_WRITE | FILE_SHARE_READ,
                                    NULL,
                                    CREATE_ALWAYS,  // overwrite old file
                                    FILE_ATTRIBUTE_NORMAL,
                                    NULL);
        if (g_hLogFile==INVALID_HANDLE_VALUE)
        {
            // We closed the file and never opened it again - so we
            // need to decrement reference count
            InterlockedDecrement(&g_iLogFileRefCount);
            return FALSE;
        }
    }
    return TRUE;
}


void
fax_dprintf(
    LPCTSTR Format,
    ...
    )

/*++

Routine Description:

    Prints a debug string

Arguments:

    format      - printf() format string
    ...         - Variable data

Return Value:

    None.

--*/

{
    TCHAR buf[1024] = {0};
    DWORD len;
    va_list arg_ptr;
    static BOOL bChecked = FALSE;

    if (!bChecked) {
        FaxDebugLevel = (INT) GetDebugLevel();
        bChecked = TRUE;
    }

    if (!g_fIsSetupLogFileMode)
    {
        if (FaxDebugLevel <= 0)
        {
            return;
        }
    }

    va_start(arg_ptr, Format);

    _vsntprintf(buf, ARR_SIZE(buf) - 1, Format, arg_ptr);
    len = min(_tcslen( buf ), ARR_SIZE(buf)-3);
    if (buf[len-1] != TEXT('\n')) 
    {
        buf[len]   =  TEXT('\r');
        buf[len+1] =  TEXT('\n');
        buf[len+2] =  0;
    }
    OutputDebugString( buf );
    if (g_fIsSetupLogFileMode)
    {
        DebugLogPrint(buf);
    }
}   // fax_dprintf


VOID
AssertError(
    LPCTSTR Expression,
    LPCTSTR File,
    ULONG  LineNumber
    )

/*++

Routine Description:

    Thie function is use together with the Assert MACRO.
    It checks to see if an expression is FALSE.  if the
    expression is FALSE, then you end up here.

Arguments:

    Expression  - The text of the 'C' expression
    File        - The file that caused the assertion
    LineNumber  - The line number in the file.

Return Value:

    None.

--*/

{
    fax_dprintf(
        TEXT("Assertion error: [%s]  %s @ %d\n"),
        Expression,
        File,
        LineNumber
        );

#ifdef DEBUG
    __try {
        DebugBreak();
    } __except (UnhandledExceptionFilter(GetExceptionInformation())) {
        // Nothing to do in here.
    }
#endif // DEBUG
}

void debugSetProperties(DWORD dwLevel,DWORD dwFormat,DWORD dwContext)
{
    FaxDebugLevelEx       =  dwLevel;
    FaxFormatLevelEx      =  dwFormat;
    FaxContextLevelEx     =  dwContext;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\faxres.cpp ===
#include <faxres.h>
#include <faxreg.h>
#include "faxutil.h"
#include <tchar.h>
#include <stdio.h>
#include <stdlib.h>
#include "..\admin\faxres\resource.h"

extern "C" {

static HINSTANCE g_hResInst = NULL;

HINSTANCE 
WINAPI 
GetResInstance(HINSTANCE hModule)
///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  GetResInstance
//
//  Purpose:        
//                  Load FxsRes.dll
//                  FxsRes.dll should be freed with FreeResInstance
//
//  Params:
//                  hModule     [in] module handle
//
//  Return Value:
//                  handle of FxsRes.dll or NULL
///////////////////////////////////////////////////////////////////////////////////////
{
    return GetResInst(FAX_RES_FILE, hModule);
} // GetResInstance

HINSTANCE 
WINAPI 
GetResInst(
    LPCTSTR pResFile, 
    HINSTANCE hModule
)
///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  GetResInstance
//
//  Purpose:        
//                  Load file and store the handle in the global g_hResInst
//                  The file should be freed with FreeResInstance
//
//  Params:
//                  pResFile    [in] resource DLL file name
//                  hModule     [in] module handle
//  Return Value:
//                  handle to the loaded file or NULL
///////////////////////////////////////////////////////////////////////////////////////
{
    DEBUG_FUNCTION_NAME(TEXT("GetResInst"));

    if(!pResFile)
    {
        return NULL;
    }

    if(!g_hResInst)
    { 
		g_hResInst = LoadLibraryFromLocalFolder(pResFile,hModule);
        if(!g_hResInst)
        {
            DebugPrintEx(DEBUG_ERR,TEXT("LoadLibrary(%s) failed with %d"), pResFile, GetLastError());

            //
            // Try to load with the standard search algorithm
            //
            g_hResInst = LoadLibrary(pResFile);
            if(!g_hResInst)
            {
                DebugPrintEx(DEBUG_ERR,TEXT("LoadLibrary(%s) failed with %d"), pResFile, GetLastError());
            }
        }
    }
    return g_hResInst;
} // GetResInst

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  LoadLibraryFromLocalFolder
//
//  Purpose:        
//                  Loads a library from the local folder as the calling process.
//
//  Params:
//                  LPCTSTR lpctstrModuleName   [in] DLL to load file name (with extension e.g FXSAPI.DLL)
//                  HINSTANCE hModule			[in] module handle
//  Return Value:
//                  handle to the loaded file or NULL
///////////////////////////////////////////////////////////////////////////////////////
HINSTANCE WINAPI LoadLibraryFromLocalFolder(LPCTSTR lpctstrModuleName,HINSTANCE hModule)
{
    DWORD	dwRes					= 0;
    TCHAR	szLibraryName[MAX_PATH] = {0};
    TCHAR	szModuleName[MAX_PATH]	= {0};
    TCHAR	szDrive[_MAX_DRIVE]		= {0};
    TCHAR	szDir[MAX_PATH]			= {0};
	HMODULE hRetModule				= NULL;

	DEBUG_FUNCTION_NAME(TEXT("LoadLibraryFromLocalFolder"));

    if(!lpctstrModuleName)
    {
        return NULL;
    }

    dwRes = GetModuleFileName(hModule,szModuleName,ARR_SIZE(szModuleName)-1);
    if(0 == dwRes)
    {
        DebugPrintEx(DEBUG_ERR,TEXT("GetModuleFileName failed with %d"), GetLastError());
        return NULL;
    }

    _tsplitpath(szModuleName, szDrive, szDir, NULL, NULL);
    _sntprintf(szLibraryName, ARR_SIZE(szLibraryName)-1, TEXT("%s%s%s"), szDrive, szDir, lpctstrModuleName);

    hRetModule = LoadLibrary(szLibraryName);
    if(!hRetModule)
    {
        DebugPrintEx(DEBUG_ERR,TEXT("LoadLibrary(%s) failed with %d"), szLibraryName, GetLastError());
		return NULL;
    }

	return hRetModule;
}

void
WINAPI 
FreeResInstance(void)
{
    if(g_hResInst)
    {
        FreeLibrary(g_hResInst);
        g_hResInst = NULL;
    }
}

UINT 
WINAPI 
GetErrorStringId(DWORD ec)
{
    DWORD uMsgId;

    switch (ec)
    {
        case RPC_S_INVALID_BINDING:
        case EPT_S_CANT_PERFORM_OP:
        case RPC_S_ADDRESS_ERROR:
        case RPC_S_CALL_CANCELLED:
        case RPC_S_CALL_FAILED:
        case RPC_S_CALL_FAILED_DNE:
        case RPC_S_COMM_FAILURE:
        case RPC_S_NO_BINDINGS:
        case RPC_S_SERVER_TOO_BUSY:
        case RPC_S_SERVER_UNAVAILABLE:
            uMsgId = IDS_ERR_CONNECTION_FAILED;
            break;
        case FAX_ERR_DIRECTORY_IN_USE:
            uMsgId = IDS_ERR_DIRECTORY_IN_USE;
            break;
        case ERROR_NOT_ENOUGH_MEMORY:
            uMsgId = IDS_ERR_NO_MEMORY;           
            break;
        case ERROR_ACCESS_DENIED:
            uMsgId = IDS_ERR_ACCESS_DENIED;            
            break;
        case ERROR_PATH_NOT_FOUND:
            uMsgId = IDS_ERR_FOLDER_NOT_FOUND;
            break;
        case FAXUI_ERROR_DEVICE_LIMIT:
        case FAX_ERR_DEVICE_NUM_LIMIT_EXCEEDED:
            uMsgId = IDS_ERR_DEVICE_LIMIT;
            break;
        case FAXUI_ERROR_INVALID_RING_COUNT:
            uMsgId = IDS_ERR_INVALID_RING_COUNT;
            break;
        case FAXUI_ERROR_SELECT_PRINTER:
            uMsgId = IDS_ERR_SELECT_PRINTER;
            break;
        case FAXUI_ERROR_NAME_IS_TOO_LONG:
            uMsgId = IDS_ERR_NAME_IS_TOO_LONG;
            break;
        case FAXUI_ERROR_INVALID_RETRIES:
            uMsgId = IDS_ERR_INVALID_RETRIES;
            break;
        case FAXUI_ERROR_INVALID_RETRY_DELAY:
            uMsgId = IDS_ERR_INVALID_RETRY_DELAY;
            break;
        case FAXUI_ERROR_INVALID_DIRTY_DAYS:
            uMsgId = IDS_ERR_INVALID_DIRTY_DAYS;
            break;
        case FAXUI_ERROR_INVALID_TSID:
            uMsgId = IDS_ERR_INVALID_TSID;
            break;
        case FAXUI_ERROR_INVALID_CSID:
            uMsgId = IDS_ERR_INVALID_CSID;
            break;
        default:
            uMsgId = IDS_ERR_OPERATION_FAILED;
            break;
	}
    return uMsgId;

} // GetErrorStringId

}   //  extern "C"
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\mail.cpp ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    mail.cpp

Abstract:

    Implementation of mail related utility functions

Author:

    Eran Yariv (EranY)  Feb, 2000

Revision History:

--*/

#include <faxutil.h>

#pragma warning (disable:4146)  // unary minus operator applied to unsigned type, result still unsigned
#include "msado15.tlh"
#include "cdosys.tlh"
#include <cdosysstr.h>  // String constants in this file
#include <cdosyserr.h>  // Error constants in this file
#pragma warning (default:4146)  // unary minus operator applied to unsigned type, result still unsigned

#define SMTP_CONN_TIMEOUT   (long)10        // Time out (sec) of SMTP connection

HRESULT
SendMail (
    LPCTSTR         lpctstrFrom,
    LPCTSTR         lpctstrTo,
    LPCTSTR         lpctstrSubject,
    LPCTSTR         lpctstrBody,
	LPCTSTR			lpctstrHTMLBody,
    LPCTSTR         lpctstrAttachmentPath,
    LPCTSTR         lpctstrAttachmentMailFileName,
    LPCTSTR         lpctstrServer,
    DWORD           dwPort,             // = 25
    CDO_AUTH_TYPE   AuthType,           // = CDO_AUTH_ANONYMOUS
    LPCTSTR         lpctstrUser,        // = NULL
    LPCTSTR         lpctstrPassword,    // = NULL
    HANDLE          hLoggedOnUserToken  // = NULL
)
/*++

Routine name : SendMail

Routine description:

    Sends a mail message using SMTP over CDO2.

Author:

    Eran Yariv (EranY), Feb, 2000

Arguments:

    lpctstrFrom                     [in] - From address (mandatory)
                                           e.g: erany@microsoft.com
    lpctstrTo                       [in] - To address (mandatory)
                                           e.g: erany@microsoft.com
    lpctstrSubject                  [in] - Subject (optional)
    lpctstrBody                     [in] - Body text of message (optional).
                                           If NULL, the message will not have a body.
	lpctstrHTMLBody					[in] - HTML Body text of message (optional).
                                           If NULL, the message will not have a HTML body.
    lpctstrAttachmentPath           [in] - Full path to file to attach (optional)
                                           If NULL, the message will not include attachments.
    lpctstrAttachmentMailFileName   [in] - The file name of the attachment as is will appear in the mail message.
    lpctstrServer                   [in] - SMTP server to connect to (mandatory)
                                           e.g: hai-msg-01
    dwPort                          [in] - SMTP port (optional, default = 25)
    AuthType                        [in] - Type of SMTP authentication.
                                           Valid values are CDO_AUTH_ANONYMOUS, CDO_AUTH_BASIC,
                                           and CDO_AUTH_NTLM.
    lpctstrUser                     [in] - User to authenticate
                                           In use only if AuthType is CDO_AUTH_BASIC or CDO_AUTH_NTLM.
    lpctstrPassword                 [in] - Password to authenticate
                                           In use only if AuthType is CDO_AUTH_BASIC or CDO_AUTH_NTLM.
    hLoggedOnUserToken              [in] - Handle to  alogged on user token.
                                           In use only if AuthType is CDO_AUTH_NTLM.

Return Value:

    Standard HRESULT code

--*/
{
    DEBUG_FUNCTION_NAME(TEXT("SendMail"))

    Assert (lpctstrFrom && lpctstrTo && lpctstrServer);
    HRESULT hr = NOERROR;
    Assert ((CDO_AUTH_ANONYMOUS == AuthType) ||
            (CDO_AUTH_BASIC     == AuthType) ||
            (CDO_AUTH_NTLM      == AuthType));
    BOOL bImpersonated = FALSE;


    hr = CoInitialize(NULL);
    if (S_FALSE == hr)
    {
        //
        // Thread's COM already initialized.
        // This is not an error and we still have to call CoUninitialize at the end.
        //
        hr = NOERROR;
    }
    if (FAILED(hr))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("CoInitialize failed. (hr: 0x%08x)"),
            hr);
        return hr;
    }
    try
    {
        //
        // The following code is in a seperate block so that the auto pointers dtors
        // get called before CoUninitialize
        //

        //
        // Create a new message instance (can throw exception)
        //
        IMessagePtr iMsg(__uuidof(Message));
        //
        // Create a new CDO2 configuration instance (can throw exception)
        IConfigurationPtr iConf(__uuidof(Configuration));
        //
        // Access configuration fields collection
        //
        FieldsPtr Flds;
        Flds = iConf->Fields;
        //
        // Send the message using the network. (SMTP protocol over the network)
        //
        Flds->Item[cdoSendUsingMethod]->Value       = _variant_t((long)cdoSendUsingPort);
        //
        // Define SMTP server
        //
        Flds->Item[cdoSMTPServer]->Value            = _variant_t(lpctstrServer);
        //
        // Define SMTP port
        //
        Flds->Item[cdoSMTPServerPort]->Value        = _variant_t((long)dwPort);
        //
        // Define SMTP connection timeout (in seconds)
        //
        Flds->Item[cdoSMTPConnectionTimeout]->Value = _variant_t(SMTP_CONN_TIMEOUT);
        //
        // Make sure we don't used cached info for attachments
        //
        Flds->Item[cdoURLGetLatestVersion]->Value   = _variant_t(VARIANT_TRUE);
        //
        // Choose authentication method
        //
        switch (AuthType)
        {
            case CDO_AUTH_ANONYMOUS:
                Flds->Item[cdoSMTPAuthenticate]->Value      = _variant_t((long)cdoAnonymous);
                break;

            case CDO_AUTH_BASIC:
                Flds->Item[cdoSMTPAuthenticate]->Value      = _variant_t((long)cdoBasic);
                Flds->Item[cdoSendUserName]->Value          = _variant_t(lpctstrUser);
                Flds->Item[cdoSendPassword]->Value          = _variant_t(lpctstrPassword);
                break;

            case CDO_AUTH_NTLM:
                //
                // NTLM authentication required the calling client (that's us)
                // to impersonate the user
                //
                Flds->Item[cdoSMTPAuthenticate]->Value = _variant_t((long)cdoNTLM);
                break;

            default:
                ASSERT_FALSE;
        }
        //
        // Update configuration from the fields
        //
        Flds->Update();
        //
        // Store configuration in the message
        //
        iMsg->Configuration = iConf;
        //
        // Set recipient
        //
        iMsg->To        = lpctstrTo;
        //
        // Set sender
        //
        iMsg->From      = lpctstrFrom;
        //
        // Set subject
        //
        iMsg->Subject   = lpctstrSubject;
        //
        // Set message format to MIME
        //
        iMsg->MimeFormatted = _variant_t(VARIANT_TRUE);
        //
        // Set charset to Unicode (UTF-8)
        //     
		iMsg->BodyPart->Charset = "utf-8";
        iMsg->BodyPart->ContentTransferEncoding = "base64";

        IBodyPartPtr iBp;
        //
        // Get message body root
        //
        iBp = iMsg;
        //
		// Set content type fo mixed to support both body and attachment
		//
		iBp->ContentMediaType = "multipart/mixed; charset=""utf-8""";

		if (lpctstrBody)
        {
			//
			// Add body text
            //
            IBodyPartPtr iBp2;
            _StreamPtr   Stm;
            //
            // Add text body under root
            //
            iBp2 = iBp->AddBodyPart(-1);
            //
            // Use text format
            //
            iBp2->ContentMediaType        = "text/plain";
            //
            // Set charset to Unicode (UTF-8)
            //
            iBp2->Charset = "utf-8";
            iBp2->ContentTransferEncoding = "base64";
            //
            // Get body text stream
            //
            Stm = iBp2->GetDecodedContentStream();
            //
            // Write stream text
            //
            Stm->WriteText(lpctstrBody, adWriteChar);
            Stm->Flush();


        }
		if (lpctstrHTMLBody)
		{
			//
			// Set content type to alternative to support both plain text body and HTML body 
			// If an attachment is added afterwards, the ContentMediaType is automatically set 
			// to mixed and the multipart/alternative is moved to new sub-BodyPart.
			//
			iBp->ContentMediaType = "multipart/alternative; charset=""utf-8""";
			
            IBodyPartPtr iBp2;
            _StreamPtr   Stm;
            
			//
            // Add html body under root
            //
			iBp2 = iBp->AddBodyPart(-1);
            //
            // Use html format
            //
            iBp2->ContentMediaType        = "text/html";
            //
            // Set charset to Unicode (UTF-8)
            //
            iBp2->Charset = "utf-8";
            iBp2->ContentTransferEncoding = "base64";
            //
            // Get body html stream
            //
            Stm = iBp2->GetDecodedContentStream();
            //
            // Write stream html
            //
            Stm->WriteText(lpctstrHTMLBody, adWriteChar);
            Stm->Flush();

		}
        if (lpctstrAttachmentPath)
        {
            //
            // Add attachment
            //
            IBodyPartPtr iBpAttachment;
            iBpAttachment = iMsg->AddAttachment(lpctstrAttachmentPath, TEXT(""), TEXT(""));
			iBpAttachment->ContentMediaType = "image/tif";

			if (lpctstrHTMLBody)
			{	// The multipart/alternative section was moved to sub-bodypart and 
				// the main ContentMediaType was moved with it so now we restore it.
				iBp->ContentMediaType = "multipart/mixed; charset=""utf-8""";
			}

            if (lpctstrAttachmentMailFileName)
            {
                //
                // User wishes to rename attachment in the mail message
                //
                FieldsPtr Flds = iBpAttachment->Fields;
                _bstr_t bstrContentType = iBpAttachment->ContentMediaType       +
                                          TEXT("; name=\"")                     +
                                          lpctstrAttachmentMailFileName         +
                                          TEXT("\"");
                Flds->Item[cdoContentType]->Value = _variant_t(bstrContentType);
                Flds->Update();
                Flds->Resync(adResyncAllValues);
            }
        }
        if (CDO_AUTH_NTLM == AuthType)
        {
            //
            // We impersonate the user in the NTLM authentication mode.
            // This is the last thing we do just before sending the message.
            //
            Assert (hLoggedOnUserToken);

            if (!ImpersonateLoggedOnUser (hLoggedOnUserToken))
            {
                hr = HRESULT_FROM_WIN32(GetLastError());
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("ImpersonateLoggedOnUser failed. (hr: 0x%08x)"),
                    hr);
                goto exit;
            }

            bImpersonated = TRUE;
        }
        //
        // Finally - send the message
        //
        iMsg->Send();
    }
    catch (_com_error &er)
    {
        //
        // Error in CDO2
        //
        hr = er.Error ();
        DebugPrintEx(
             DEBUG_ERR,
             TEXT("CDO2 Error 0x%08x: to:%s, subject:%s")
#ifdef UNICODE
             TEXT(" Description:%s")
#endif
             ,hr,
             lpctstrTo,
             lpctstrSubject
#ifdef UNICODE
             ,(LPCTSTR)er.Description()
#endif
        );
    }

exit:
    CoUninitialize();
    if (bImpersonated)
    {
        if (!RevertToSelf ())
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("RevertToSelf failed. (hr: 0x%08x)"),
                hr);
        }
    }
    return hr;
}   // SendMail
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\file.c ===
/*++

Copyright (c) 1995  Microsoft Corporation

Module Name:

    string.c

Abstract:

    This file implements file functions for fax.

Author:

    Wesley Witt (wesw) 23-Jan-1995

Environment:

    User Mode

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <Accctrl.h>
#include <Aclapi.h>
#include <Shellapi.h>
#include <strsafe.h>

#include "faxutil.h"
#include "faxreg.h"
#include "FaxUIConstants.h"


VOID
DeleteTempPreviewFiles (
    LPTSTR lptstrDirectory,
    BOOL   bConsole
)
/*++

Routine name : DeleteTempPreviewFiles

Routine description:

    Deletes all the temporary fax preview TIFF files from a given folder.

    Deletes files: "<lptstrDirectory>\<PREVIEW_TIFF_PREFIX>*.<FAX_TIF_FILE_EXT>".

Author:

    Eran Yariv (EranY), Apr, 2001

Arguments:

    lptstrDirectory     [in] - Folder.
                               Optional - if NULL, the current user's temp dir is used.

    bConsole            [in] - If TRUE, called from the client console. Otherwise, from the Fax Send Wizard.

Return Value:

    None.

--*/
{
    TCHAR szTempPath[MAX_PATH * 2];
    TCHAR szSearch  [MAX_PATH * 3];
    WIN32_FIND_DATA W32FindData;
    HANDLE hFind = INVALID_HANDLE_VALUE;
    TCHAR* pLast = NULL;

    HRESULT  hRes;

    DEBUG_FUNCTION_NAME(TEXT("DeleteTempPreviewFiles"));

    if (!lptstrDirectory)
    {
        if (!GetTempPath( ARR_SIZE(szTempPath), szTempPath ))
        {
            DebugPrintEx(DEBUG_ERR, 
                         TEXT("GetTempPath() failed. (ec = %lu)"),
                         GetLastError());
            return;
        }
        lptstrDirectory = szTempPath;
    }

    //
    // find last \ in path
    //
    pLast = _tcsrchr(lptstrDirectory,TEXT('\\'));
    if(pLast && (*_tcsinc(pLast)) == '\0')
    {
        //
        // the last character is a backslash, truncate it...
        //
        _tcsnset(pLast,'\0',1);
    }

    hRes = StringCchPrintf(
            szSearch,
            ARR_SIZE(szSearch),
            TEXT("%s\\%s%08x*.%s"),
            lptstrDirectory,
            bConsole ? CONSOLE_PREVIEW_TIFF_PREFIX : WIZARD_PREVIEW_TIFF_PREFIX,
            GetCurrentProcessId(),
            FAX_TIF_FILE_EXT
            );
    if (FAILED(hRes))
    {
        DebugPrintEx(DEBUG_ERR,
                     TEXT("StringCchPrintf failed (ec=%lu)"),
                     HRESULT_CODE(hRes));
        return;
    }

    hFind = FindFirstFile (szSearch, &W32FindData);
    if (INVALID_HANDLE_VALUE == hFind)
    {
        DebugPrintEx(DEBUG_ERR, TEXT("FindFirstFile failed with %ld"), GetLastError ());
        return;
    }

    //
    //  Loop and delete all preview files
    //
    for (;;)
    {
        TCHAR szFile[MAX_PATH * 3];

        //
        // Compose full path to file
        //
        hRes = StringCchPrintf(
                    szFile,
                    ARR_SIZE(szFile),
                    TEXT("%s\\%s"),
                    lptstrDirectory,
                    W32FindData.cFileName
                    );
        if ( SUCCEEDED(hRes) )
        {
            //
            // Delete the currently found file
            //
            if (!DeleteFile (szFile))
            {
                DebugPrintEx(DEBUG_ERR, TEXT("DeleteFile(%s) failed with %ld"), szFile, GetLastError ());
            }
            else
            {
                DebugPrintEx(DEBUG_MSG, TEXT("%s deleted"), szFile);
            }
        }
        //
        // Find next file
        //
        if(!FindNextFile(hFind, &W32FindData))
        {
            if(ERROR_NO_MORE_FILES != GetLastError ())
            {
                DebugPrintEx(DEBUG_ERR, TEXT("FindNextFile failed with %ld"), GetLastError ());
            }
            else
            {
                //
                // End of files - no error
                //
            }
            break;
        }
    }
    FindClose (hFind);
}   // DeleteTempPreviewFiles

DWORDLONG
GenerateUniqueFileNameWithPrefix(
    BOOL   bUseProcessId,
    LPTSTR lptstrDirectory,
    LPTSTR lptstrPrefix,
    LPTSTR lptstrExtension,
    LPTSTR lptstrFileName,
    DWORD  dwFileNameSize
    )
/*++

Routine name : GenerateUniqueFileNameWithPrefix

Routine description:

    Generates a unique file name

Author:

    Eran Yariv (EranY), Apr, 2001

Arguments:

    bUseProcessId       [in]     - If TRUE, the process id is appended after the prefix

    lptstrDirectory     [in]     - Directory where file should be created.
                                   Optional - if NULL, the current user's temp dir is used.

    lptstrPrefix        [in]     - File prefix.
                                   Optional - if NULL, no prefix is used.

    lptstrExtension     [in]     - File extension.
                                   Optional - if NULL, FAX_TIF_FILE_EXT is used.

    lptstrFileName      [out]    - File name.

    dwFileNameSize      [in]     - Size of file name (in characters)

Return Value:

    Unique file identifier.
    Returns 0 in case of error (sets last error).

--*/
{
    DWORD i;
    TCHAR szTempPath[MAX_PATH * 2];
    TCHAR szProcessId[20] = {0};
    DWORDLONG dwlUniqueId = 0;

    HRESULT  hRes;

    DEBUG_FUNCTION_NAME(TEXT("GenerateUniqueFileNameWithPrefix"));

    if (!lptstrDirectory)
    {
        if (!GetTempPath( ARR_SIZE(szTempPath), szTempPath ))
        {
           DebugPrintEx(DEBUG_ERR, 
                         TEXT("GetTempPath() failed. (ec = %lu)"),
                         GetLastError());
           return 0;
        }
        lptstrDirectory = szTempPath;
    }

    TCHAR* pLast = NULL;
    pLast = _tcsrchr(lptstrDirectory,TEXT('\\'));
    if(pLast && (*_tcsinc(pLast)) == '\0')
    {
        //
        // the last character is a backslash, truncate it...
        //
        _tcsnset(pLast,'\0',1);
    }

    if (!lptstrExtension)
    {
        lptstrExtension = FAX_TIF_FILE_EXT;
    }
    if (!lptstrPrefix)
    {
        lptstrPrefix = TEXT("");
    }
    if (bUseProcessId)
    {
        hRes = StringCchPrintf (szProcessId, ARR_SIZE(szProcessId), TEXT("%08x"), GetCurrentProcessId());
        if (FAILED(hRes))
        {
            DebugPrintEx(DEBUG_ERR,
                         TEXT("StringCchPrintf failed (ec=%lu)"),
                         HRESULT_CODE(hRes));
            SetLastError(HRESULT_CODE(hRes));
            return 0;
        }
    }

    for (i=0; i<256; i++)
    {
        HANDLE hFile = INVALID_HANDLE_VALUE;
        FILETIME FileTime;
        SYSTEMTIME SystemTime;

        GetSystemTime( &SystemTime ); // returns VOID
        if (!SystemTimeToFileTime( &SystemTime, &FileTime ))
        {
            DebugPrintEx(DEBUG_ERR, TEXT("SystemTimeToFileTime() failed (ec: %ld)"), GetLastError());
            return 0;
        }

        dwlUniqueId = MAKELONGLONG(FileTime.dwLowDateTime, FileTime.dwHighDateTime);
        //
        // dwlUniqueId holds the number of 100 nanosecond units since 1.1.1601.
        // This occuipies most of the 64 bits.We we need some space to add extra
        // information (job type for example) to the job id.
        // Thus we give up the precision (1/10000000 of a second is too much for us anyhow)
        // to free up 8 MSB bits.
        // We shift right the time 8 bits to the right. This divides it by 256 which gives
        // us time resolution better than 1/10000 of a sec which is more than enough.
        //
        dwlUniqueId = dwlUniqueId >> 8;

        hRes = StringCchPrintf(
                lptstrFileName,
                dwFileNameSize,
                TEXT("%s\\%s%s%I64X.%s"),
                lptstrDirectory,
                lptstrPrefix,
                szProcessId,
                dwlUniqueId,
                lptstrExtension );
        if (FAILED(hRes))
        {
            DebugPrintEx(DEBUG_ERR,
                         TEXT("StringCchPrintf failed (ec=%lu)"),
                         HRESULT_CODE(hRes));

            SetLastError(HRESULT_CODE(hRes));
            return 0;
        }

        hFile = SafeCreateFile(
            lptstrFileName,
            GENERIC_WRITE,
            0,
            NULL,
            CREATE_NEW,
            FILE_ATTRIBUTE_NORMAL,
            NULL);

        if (hFile == INVALID_HANDLE_VALUE)
        {
            DWORD dwError = GetLastError();

            if (dwError == ERROR_ALREADY_EXISTS || dwError == ERROR_FILE_EXISTS)
            {
                continue;
            }
            else
            {
                //
                // Real error
                //
                DebugPrintEx(DEBUG_ERR,
                             TEXT("CreateFile() for [%s] failed. (ec: %ld)"),
                             lptstrFileName,
                             GetLastError());
                return 0;
            }
        }
        else
        {
            //
            // Success
            //
            CloseHandle (hFile);
            break;
        }
    }

    if (i == 256)
    {
        DebugPrintEx(   DEBUG_ERR,
                        TEXT("Failed to generate a unique file name after %d attempts. \n")
                        TEXT("Last attempted UniqueIdValue value is: 0x%I64X \n")
                        TEXT("Last attempted file name is : [%s]"),
                        i,
                        dwlUniqueId,
                        lptstrFileName);
        SetLastError( ERROR_TOO_MANY_OPEN_FILES );
        return 0;
    }
    return dwlUniqueId;
}   // GenerateUniqueFileNameWithPrefix


//*********************************************************************************
//* Name:   GenerateUniqueFileName()
//* Author:
//* Date:
//*********************************************************************************
//* DESCRIPTION:
//*     Generates a unique file in the queue directory.
//*     returns a UNIQUE id for the file.
//* PARAMETERS:
//*     [IN]    LPTSTR Directory
//*         The path where the file is to be created.
//*     [OUT]   LPTSTR Extension
//*         The file extension that the generated file should have.
//*     [IN]    LPTSTR FileName
//*         The buffer where the resulting file name (including path) will be
//*         placed, must be MAX_PATH.
//*     [IN]    DWORD  FileNameSize
//*         The size of the file name buffer.
//* RETURN VALUE:
//*      If successful the function returns A DWORDLONG with the unique id for the file.
//*      On failure it returns 0.
//* REMARKS:
//*     The generated unique id the 64 bit value of the system time.
//*     The generated file name is a string containing the hex representation of
//*     the 64 bit system time value.
//*********************************************************************************
DWORDLONG
GenerateUniqueFileName(
    LPTSTR Directory,
    LPTSTR Extension,
    LPTSTR FileName,
    DWORD  FileNameSize
    )
{
    return GenerateUniqueFileNameWithPrefix (FALSE, Directory, NULL, Extension, FileName, FileNameSize);
}   // GenerateUniqueFileName



BOOL
MapFileOpen(
    LPCTSTR FileName,
    BOOL ReadOnly,
    DWORD ExtendBytes,
    PFILE_MAPPING FileMapping
    )
{
    FileMapping->hFile = NULL;
    FileMapping->hMap = NULL;
    FileMapping->fPtr = NULL;

    FileMapping->hFile = SafeCreateFile(
        FileName,
        ReadOnly ? GENERIC_READ : GENERIC_READ | GENERIC_WRITE,
        ReadOnly ? FILE_SHARE_READ : 0,
        NULL,
        OPEN_EXISTING,
        0,
        NULL);
    if (FileMapping->hFile == INVALID_HANDLE_VALUE) 
    {
        return FALSE;
    }

    FileMapping->fSize = GetFileSize( FileMapping->hFile, NULL );

    FileMapping->hMap = CreateFileMapping(
        FileMapping->hFile,
        NULL,
        ReadOnly ? PAGE_READONLY : PAGE_READWRITE,
        0,
        FileMapping->fSize + ExtendBytes,
        NULL
        );
    if (FileMapping->hMap == NULL) 
    {
        CloseHandle( FileMapping->hFile );
        return FALSE;
    }

    FileMapping->fPtr = (LPBYTE)MapViewOfFileEx(
        FileMapping->hMap,
        ReadOnly ? FILE_MAP_READ : FILE_MAP_WRITE,
        0,
        0,
        0,
        NULL
        );
    if (FileMapping->fPtr == NULL) 
    {
        CloseHandle( FileMapping->hFile );
        CloseHandle( FileMapping->hMap );
        return FALSE;
    }
    return TRUE;
}


VOID
MapFileClose(
    PFILE_MAPPING FileMapping,
    DWORD TrimOffset
    )
{
    UnmapViewOfFile( FileMapping->fPtr );
    CloseHandle( FileMapping->hMap );
    if (TrimOffset) {
        SetFilePointer( FileMapping->hFile, TrimOffset, NULL, FILE_BEGIN );
        SetEndOfFile( FileMapping->hFile );
    }
    CloseHandle( FileMapping->hFile );
}



//
// Function:    MultiFileCopy
// Description: Copies multiple files from one directory to another.
//              In case of failure, return FALSE without any clean-up.
//              Validate that the path names and file names are not sum to be larger than MAX_PATH
// Args:
//
//              dwNumberOfFiles     : Number of file names to copy
//              fileList            : Array of strings: file names
//              lpctstrSrcDirectory : Source directory (with or without '\' at the end
//              lpctstrDestDirectory: Destination directory (with or without '\' at the end
//
// Author:      AsafS



BOOL
MultiFileCopy(
    DWORD    dwNumberOfFiles,
    LPCTSTR* fileList,
    LPCTSTR  lpctstrSrcDirectory,
    LPCTSTR  lpctstrDestDirerctory
    )
{
    DEBUG_FUNCTION_NAME(TEXT("MultiFileCopy"))
    TCHAR szSrcPath [MAX_PATH];
    TCHAR szDestPath[MAX_PATH];

    HRESULT  hRes;

    DWORD dwLengthOfDestDirectory = _tcslen(lpctstrDestDirerctory);
    DWORD dwLengthOfSrcDirectory  = _tcslen(lpctstrSrcDirectory);

    // Make sure that all the file name lengths are not too big

    DWORD dwMaxPathLen = 1 + max((dwLengthOfDestDirectory),(dwLengthOfSrcDirectory));
    DWORD dwBufferLen  = (sizeof(szSrcPath)/sizeof(TCHAR)) - 1;

    DWORD i=0;
    Assert (dwNumberOfFiles);
    for (i=0 ; i < dwNumberOfFiles ; i++)
    {
        if ( (_tcslen(fileList[i]) + dwMaxPathLen) > dwBufferLen )
        {
            DebugPrintEx(
                 DEBUG_ERR,
                 TEXT("The file/path names are too long")
                 );
            SetLastError( ERROR_BUFFER_OVERFLOW );
            return (FALSE);
        }
    }

    hRes = StringCchCopy(   szSrcPath,
                            ARR_SIZE(szSrcPath),
                            lpctstrSrcDirectory);
    if (FAILED(hRes))
    {
        DebugPrintEx(DEBUG_ERR,
                     TEXT("StringCchCopy failed (ec=%lu)"),
                     HRESULT_CODE(hRes));
        
        SetLastError( HRESULT_CODE(hRes) );
        return (FALSE);
    }

    hRes = StringCchCopy(   szDestPath,
                            ARR_SIZE(szDestPath),
                            lpctstrDestDirerctory);
    if (FAILED(hRes))
    {
        DebugPrintEx(DEBUG_ERR,
                     TEXT("StringCchCopy failed (ec=%lu)"),
                     HRESULT_CODE(hRes));
        
        SetLastError( HRESULT_CODE(hRes) );
        return (FALSE);
    }

    

    //
    // Verify that directories end with '\\'.
    //
    TCHAR* pLast = NULL;
    pLast = _tcsrchr(szSrcPath,TEXT('\\'));
    if( !( pLast && (*_tcsinc(pLast)) == '\0' ) )
    {
        // the last character is not a backslash, add one...
        hRes = StringCchCat(szSrcPath, ARR_SIZE(szSrcPath), TEXT("\\"));
        if (FAILED(hRes))
        {
            DebugPrintEx(DEBUG_ERR,
                        TEXT("StringCchCat failed (ec=%lu)"),
                        HRESULT_CODE(hRes));
            
            SetLastError( HRESULT_CODE(hRes) );
            return (FALSE);
        }
    }

    pLast = _tcsrchr(szDestPath,TEXT('\\'));
    if( !( pLast && (*_tcsinc(pLast)) == '\0' ) )
    {
        // the last character is not a backslash, add one...
        hRes = StringCchCat(szDestPath, ARR_SIZE(szDestPath), TEXT("\\"));
        if (FAILED(hRes))
        {
            DebugPrintEx(DEBUG_ERR,
                        TEXT("StringCchCat failed (ec=%lu)"),
                        HRESULT_CODE(hRes));
            
            SetLastError( HRESULT_CODE(hRes) );
            return (FALSE);
        }
    }

    // Do the copy now

    for (i=0 ; i < dwNumberOfFiles ; i++)
    {
        TCHAR szSrcFile[MAX_PATH];
        TCHAR szDestFile[MAX_PATH];

        hRes = StringCchPrintf(
                szSrcFile,
                ARR_SIZE(szSrcFile),
                TEXT("%s%s"),
                szSrcPath,
                fileList[i]
                );
        if (FAILED(hRes))
        {
            DebugPrintEx(DEBUG_ERR,
                         TEXT("StringCchPrintf failed (ec=%lu)"),
                         HRESULT_CODE(hRes));

            SetLastError(HRESULT_CODE(hRes));
            return FALSE;
        }

        hRes = StringCchPrintf(
                szDestFile,
                ARR_SIZE(szDestFile),
                TEXT("%s%s"),
                szDestPath,
                fileList[i]
                );
        if (FAILED(hRes))
        {
            DebugPrintEx(DEBUG_ERR,
                         TEXT("StringCchPrintf failed (ec=%lu)"),
                         HRESULT_CODE(hRes));

            SetLastError(HRESULT_CODE(hRes));
            return FALSE;
        }
        
        if (!CopyFile(szSrcFile, szDestFile, FALSE))
        {
            DebugPrintEx(
                 DEBUG_ERR,
                 TEXT("CopyFile(%s, %s) failed: %d."),
                 szSrcFile,
                 szDestFile,
                 GetLastError()
                 );
            return(FALSE);
        }

        DebugPrintEx(
                 DEBUG_MSG,
                 TEXT("CopyFile(%s, %s) succeeded."),
                 szSrcFile,
                 szDestFile
                 );
    }

    return TRUE;
}





//
// Function:    MultiFileDelete
// Description: Deletes multiple files from given directory.
//              In case of failure, continue with the rest of the files and returns FALSE. Call to
//              GetLastError() to get the reason for the last failure that occured
//              If all DeleteFile calls were successful - return TRUE
//              Validate that the path name and file names are not sum to be larger than MAX_PATH
// Args:
//
//              dwNumberOfFiles         : Number of file names to copy
//              fileList                : Array of strings: file names
//              lpctstrFilesDirectory   : Directory of the files (with or without '\' at the end
//
// Author:      AsafS



BOOL
MultiFileDelete(
    DWORD    dwNumberOfFiles,
    LPCTSTR* fileList,
    LPCTSTR  lpctstrFilesDirectory
    )
{
    DEBUG_FUNCTION_NAME(TEXT("MultiFileDelete"))
    BOOL  retVal = TRUE;
    DWORD dwLastError = 0;
    TCHAR szFullPath[MAX_PATH];


    HRESULT  hRes;

    DWORD dwLengthOfDirectoryName = _tcslen(lpctstrFilesDirectory);

    // Make sure that all the file name lengths are not too big
    DWORD dwBufferLen  = (sizeof(szFullPath)/sizeof(TCHAR)) - 1;
    DWORD i;
    Assert (dwNumberOfFiles);
    for (i=0 ; i < dwNumberOfFiles ; i++)
    {
        if ( (_tcslen(fileList[i]) + dwLengthOfDirectoryName + 1) > dwBufferLen )
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("The file/path names are too long")
                );
            SetLastError( ERROR_BUFFER_OVERFLOW );
            return (FALSE);
        }
    }



    hRes = StringCchCopy(szFullPath ,ARR_SIZE(szFullPath), lpctstrFilesDirectory);
    if (FAILED(hRes))
    {
        DebugPrintEx(DEBUG_ERR,
                     TEXT("StringCchCopy failed (ec=%lu)"),
                     HRESULT_CODE(hRes));
        
        SetLastError( HRESULT_CODE(hRes) );
        return (FALSE);
    }


    dwLengthOfDirectoryName = _tcslen(lpctstrFilesDirectory);

    //
    // Verify that directory end with '\\' to the end of the path.
    //
    TCHAR* pLast = NULL;
    pLast = _tcsrchr(szFullPath,TEXT('\\'));
    if( !( pLast && (*_tcsinc(pLast)) == '\0' ) )
    {
        // the last character is not a backslash, add one...
        hRes = StringCchCat(szFullPath, ARR_SIZE(szFullPath), TEXT("\\"));
        if (FAILED(hRes))
        {
            DebugPrintEx(DEBUG_ERR,
                        TEXT("StringCchCat failed (ec=%lu)"),
                        HRESULT_CODE(hRes));
            
            SetLastError( HRESULT_CODE(hRes) );
            return (FALSE);
        }
    }

    for(i=0 ; i < dwNumberOfFiles ; i++)
    {
        TCHAR szFileName[MAX_PATH];

        hRes = StringCchPrintf(
                szFileName,
                ARR_SIZE(szFileName),
                TEXT("%s%s"),
                szFullPath,
                fileList[i]
                );
        if (FAILED(hRes))
        {
            DebugPrintEx(DEBUG_ERR,
                         TEXT("StringCchPrintf failed (ec=%lu)"),
                         HRESULT_CODE(hRes));

            SetLastError(HRESULT_CODE(hRes));
            return FALSE;
        }

        if (!DeleteFile(szFileName))
        {
            dwLastError = GetLastError();
            DebugPrintEx(
                 DEBUG_ERR,
                 TEXT("Delete (%s) failed: %d."),
                 szFileName,
                 dwLastError
                 );
            retVal = FALSE; // Continue with the list
        }
        else
        {
            DebugPrintEx(
                 DEBUG_MSG,
                 TEXT("Delete (%s) succeeded."),
                 szFileName
                 );
        }
    }

    if (!retVal) // In case there was a failure to delete any file
    {
        SetLastError(dwLastError);
        DebugPrintEx(
                 DEBUG_ERR,
                 TEXT("Delete files from (%s) failed: %d."),
                 szFullPath,
                 dwLastError
                 );

    }

    return retVal;
}


BOOL
ValidateCoverpage(
    IN  LPCTSTR  CoverPageName,
    IN  LPCTSTR  ServerName,
    IN  BOOL     ServerCoverpage,
    OUT LPTSTR   ResolvedName,
    IN  DWORD    dwResolvedNameSize
    )
/*++

Routine Description:

    This routine tries to validate that that coverpage specified by the user actually exists where
    they say it does, and that it is indeed a coverpage (or a resolvable link to one)

    Please see the SDK for documentation on the rules for how server coverpages work, etc.
Arguments:

    CoverpageName   - contains name of coverpage
    ServerName      - name of the server, if any (can be null)
    ServerCoverpage - indicates if this coverpage is on the server, or in the server location for
                      coverpages locally
    ResolvedName    - a pointer to buffer (should be MAX_PATH large at least) to receive the
                      resolved coverpage name. 
    dwResolvedNameSize - holds the size of ResolvedName buffer in TCAHRs


Return Value:

    TRUE if coverpage can be used.
    FALSE if the coverpage is invalid or cannot be used.

--*/

{
    LPTSTR p;
    DWORD ec = ERROR_SUCCESS;
    TCHAR CpDir [MAX_PATH];
    TCHAR tszExt[_MAX_EXT];
	TCHAR tszFileName[_MAX_FNAME];

    HRESULT  hRes;

    DEBUG_FUNCTION_NAME(TEXT("ValidateCoverpage"));
    Assert (ResolvedName);

    if (!CoverPageName)
    {
        ec = ERROR_INVALID_PARAMETER;
        goto exit;
    }

    hRes = StringCchCopy(CpDir, ARR_SIZE(CpDir), CoverPageName);
    if (FAILED(hRes))
    {
        DebugPrintEx(DEBUG_ERR,
                    TEXT("StringCchCopy failed (ec=%lu)"),
                    HRESULT_CODE(hRes));
        
        ec = HRESULT_CODE(hRes);
        goto exit;
    }

	if (TRUE == ServerCoverpage)
	{
		//
		// If this is a server cover page, make sure we only have the file name
		//
		TCHAR tszFullFileName[MAX_PATH];

		_tsplitpath(CpDir, NULL, NULL, tszFileName, tszExt);
		hRes = StringCchCopy(tszFullFileName, ARR_SIZE(tszFullFileName), tszFileName);
		if (FAILED(hRes))
		{
			//
			// Can not happen. CpDir is MAX_PATH
			//
			Assert (FALSE);
		}

		hRes = StringCchCat(tszFullFileName, ARR_SIZE(tszFullFileName), tszExt);
		if (FAILED(hRes))
		{
			//
			// Can not happen. CpDir is MAX_PATH
			//
			Assert (FALSE);
		}

		if (0 != _tcsicmp(tszFullFileName, CpDir))
		{
			DebugPrintEx(
				DEBUG_ERR,
				TEXT("server coverpage does not contain file name only. cover page name: %s "),
				CpDir);
			ec = ERROR_INVALID_PARAMETER;
			goto exit;
		}		

		if (0 == _tcsicmp(tszExt, CP_SHORTCUT_EXT) )
        {
            DebugPrintEx(DEBUG_ERR,
                _T("Server Based Cover Page File Name should not be a link : %s"),
                CpDir);
            ec = ERROR_INVALID_PARAMETER;
            goto exit;
        }
	}

    p = _tcschr(CpDir, FAX_PATH_SEPARATOR_CHR );
    if (p)
    {
        //
        // the coverpage file name contains a path so just use it.
        //
        if (GetFileAttributes( CpDir ) == 0xffffffff)
        {
            ec = ERROR_FILE_NOT_FOUND;
            DebugPrintEx(DEBUG_ERR,
                _T("GetFileAttributes failed for %ws. ec = %ld"),
                CpDir,
                ec);
            goto exit;
        }

    }
    else
    {
        //
        // the coverpage file name does not contain
        // a path so we must construct a full path name
        //
        if (ServerCoverpage)
        {
            if (!ServerName || ServerName[0] == 0)
            {
                if (!GetServerCpDir( NULL, CpDir, sizeof(CpDir) / sizeof(CpDir[0]) ))
                {
                    ec = GetLastError ();
                    DebugPrintEx(DEBUG_ERR,
                                 _T("GetServerCpDir failed . ec = %ld"),
                                 GetLastError());
                }
            }
            else
            {
                if (!GetServerCpDir( ServerName, CpDir, sizeof(CpDir) / sizeof(CpDir[0]) ))
                {
                    ec = GetLastError ();
                    DebugPrintEx(DEBUG_ERR,
                                 _T("GetServerCpDir failed . ec = %ld"),
                                 GetLastError());
                }
            }
        }
        else
        {
            if (!GetClientCpDir( CpDir, sizeof(CpDir) / sizeof(CpDir[0])))
            {
                ec = GetLastError ();
                DebugPrintEx(DEBUG_ERR,
                             _T("GetClientCpDir failed . ec = %ld"),
                             GetLastError());
            }
        }

        if (ERROR_SUCCESS != ec)
        {
            ec = ERROR_FILE_NOT_FOUND;
            goto exit;
        }

        hRes = StringCchCat( CpDir, ARR_SIZE(CpDir), TEXT("\\") );
        if (FAILED(hRes))
        {
            DebugPrintEx(DEBUG_ERR,
                        TEXT("StringCchCat failed (ec=%lu)"),
                        HRESULT_CODE(hRes));
            
            ec =  HRESULT_CODE(hRes);
            goto exit;
        }

        hRes = StringCchCat( CpDir, ARR_SIZE(CpDir), CoverPageName );
        if (FAILED(hRes))
        {
            DebugPrintEx(DEBUG_ERR,
                        TEXT("StringCchCat failed (ec=%lu)"),
                        HRESULT_CODE(hRes));
            
            ec =  HRESULT_CODE(hRes);
            goto exit;
        }

        _tsplitpath(CpDir, NULL, NULL, NULL, tszExt);
        if (!_tcslen(tszExt))
        {
            hRes = StringCchCat( CpDir, ARR_SIZE(CpDir), FAX_COVER_PAGE_FILENAME_EXT );
            if (FAILED(hRes))
            {
                DebugPrintEx(DEBUG_ERR,
                            TEXT("StringCchCat failed (ec=%lu)"),
                            HRESULT_CODE(hRes));
                
                ec =  HRESULT_CODE(hRes);
                goto exit;
            }
        }

        if (GetFileAttributes( CpDir ) == 0xffffffff)
        {
            ec = ERROR_FILE_NOT_FOUND;
            goto exit;
        }
    }

    hRes = StringCchCopy( ResolvedName, dwResolvedNameSize, CpDir );
    if (FAILED(hRes))
    {
        DebugPrintEx(DEBUG_ERR,
                    TEXT("StringCchCopy failed (ec=%lu)"),
                    HRESULT_CODE(hRes));
        
        ec = HRESULT_CODE(hRes);
        goto exit;
    }

    //
    // Make sure it is not a device
    // Try to open file
    //
    HANDLE hFile = SafeCreateFile (
        ResolvedName,
        GENERIC_READ,
        FILE_SHARE_READ,
        NULL,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        NULL);
    if ( INVALID_HANDLE_VALUE == hFile )
    {
        ec = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Opening %s for read failed (ec: %ld)"),
            ResolvedName,
            ec);
        goto exit;
    }

    if (!CloseHandle (hFile))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("CloseHandle failed (ec: %ld)"),
            GetLastError());
    }

    Assert (ERROR_SUCCESS == ec);

exit:
    if (ERROR_SUCCESS != ec)
    {
        SetLastError(ec);
        return FALSE;
    }
    return TRUE;
} // ValidateCoverpage


DWORD 
ViewFile (
    LPCTSTR lpctstrFile
)
/*++

Routine Description:

    Launches the application associated with a given file to view it.
    We first attempt to use the "open" verb.
    If that fails, we try the NULL (default) verb.
    
Arguments:

    lpctstrFile [in]  - File name

Return Value:

    Standard Win32 error code
    
--*/
{
    DWORD dwRes = ERROR_SUCCESS;
    SHELLEXECUTEINFO executeInfo = {0};

    DEBUG_FUNCTION_NAME(TEXT("ViewFile"));

    executeInfo.cbSize = sizeof(executeInfo);
    executeInfo.fMask  = SEE_MASK_FLAG_NO_UI | SEE_MASK_FLAG_DDEWAIT;
    executeInfo.lpVerb = TEXT("open");
    executeInfo.lpFile = lpctstrFile;
    executeInfo.nShow  = SW_SHOWNORMAL;
    //
    // Execute the associated application with the "open" verb
    //
    if(!ShellExecuteEx(&executeInfo))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("ShellExecuteEx(open) failed (ec: %ld)"),
            GetLastError());
        //
        // "open" verb is not supported. Try the NULL (default) verb.
        //
        executeInfo.lpVerb = NULL;
        if(!ShellExecuteEx(&executeInfo))
        {
            dwRes = GetLastError();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("ShellExecuteEx(NULL) failed (ec: %ld)"),
                dwRes);
        }
    }
    return dwRes;
}   // ViewFile    

#ifdef UNICODE

DWORD
CheckToSeeIfSameDir(
    LPWSTR lpwstrDir1,
    LPWSTR lpwstrDir2,
    BOOL*  pIsSameDir
    )
{
/*++

Routine name : IsDiffrentDir

Routine description:

    Checks if both paths point to the same directory. Note that the directory pointed by lpwstrDir1 must exist.

Author:

    Oded Sacher (OdedS), Aug, 2000

Arguments:

    lpwstrDir1      [in]  - First path - the directory must exist.
    lpwstrDir2      [in]  - Second path - the directory does not have to exist
    pIsSameDir      [out] - Receives the answer to "IsSameDir?" Valid only if the function succeeds.

Return Value:
    Win32 Erorr code

--*/
    Assert (lpwstrDir1 && lpwstrDir2 && pIsSameDir);
    DWORD ec = ERROR_SUCCESS;
    WCHAR wszTestFile1[MAX_PATH];
    WCHAR wszTestFile2[MAX_PATH * 2];
    BOOL fFileCreated = FALSE;
    HANDLE hFile1 = INVALID_HANDLE_VALUE;
    HANDLE hFile2 = INVALID_HANDLE_VALUE;
    LPWSTR lpwstrFileName = NULL;
    DEBUG_FUNCTION_NAME(TEXT("CheckToSeeIfSameDir)"));

    HRESULT hRes;

    if (0 == _wcsicmp(lpwstrDir1, lpwstrDir2))
    {
        *pIsSameDir = TRUE;
        return ERROR_SUCCESS;
    }

    //
    // Create temporary files
    //
    if (!GetTempFileName (lpwstrDir1, L"TST", 0, wszTestFile1))
    {
        //
        // Either the folder doesn't exist or we don't have access
        //
        ec = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetTempFileName failed with %ld"), ec);
        goto exit;
    }
    
    //
    //  GetTempFileName created 0 bytes file, that we need to delete before exiting
    //
    fFileCreated = TRUE;

    hFile1 = SafeCreateFile(
                       wszTestFile1,
                       0,
                       FILE_SHARE_READ|FILE_SHARE_WRITE,
                       NULL,
                       OPEN_EXISTING,
                       0,
                       NULL);
    if (INVALID_HANDLE_VALUE == hFile1)
    {
        ec = GetLastError();
        DebugPrintEx(DEBUG_ERR,
                     TEXT("CreateFile failed (ec: %ld)"),
                     ec);
        goto exit;
    }

    lpwstrFileName = wcsrchr(wszTestFile1, L'\\');
    Assert (lpwstrFileName);
    
    hRes = StringCchCopy (wszTestFile2, ARR_SIZE(wszTestFile2), lpwstrDir2);
    if (FAILED(hRes))
    {
        DebugPrintEx(DEBUG_ERR,
                    TEXT("StringCchCopy failed (ec=%lu)"),
                    HRESULT_CODE(hRes));
        
        ec = HRESULT_CODE(hRes);
        goto exit;
    }

    hRes = StringCchCat (wszTestFile2, ARR_SIZE(wszTestFile2), lpwstrFileName);
    if (FAILED(hRes))
    {
        DebugPrintEx(DEBUG_ERR,
                    TEXT("StringCchCat failed (ec=%lu)"),
                    HRESULT_CODE(hRes));
        
        ec = HRESULT_CODE(hRes);
        goto exit;
    }

    hFile2 = SafeCreateFile(
                       wszTestFile2,
                       0,
                       FILE_SHARE_READ|FILE_SHARE_WRITE,
                       NULL,
                       OPEN_EXISTING,
                       0,
                       NULL);
    if (INVALID_HANDLE_VALUE == hFile2)
    {
        //
        //  Check if failure is *NOT* because of access or availability 
        //
        ec = GetLastError ();
        if (ERROR_NOT_ENOUGH_MEMORY  == ec ||
            ERROR_OUTOFMEMORY        == ec      )
        {
            DebugPrintEx(DEBUG_ERR,
                     TEXT("CreateFile failed (ec: %ld)"),
                     ec);
            goto exit;
        }

        //
        //  On any other failure we asssume that the paths are diffrent
        //
        *pIsSameDir = FALSE;    
        ec = ERROR_SUCCESS; 

        goto exit;
    }

    BY_HANDLE_FILE_INFORMATION  hfi1;
    BY_HANDLE_FILE_INFORMATION  hfi2;

    if (!GetFileInformationByHandle(hFile1, &hfi1))
    {
        ec = GetLastError();
        DebugPrintEx(DEBUG_ERR,
                     TEXT("GetFileInformationByHandle failed (ec: %ld)"),
                     ec);
        goto exit;
    }

    if (!GetFileInformationByHandle(hFile2, &hfi2))
    {
        ec = GetLastError();
        DebugPrintEx(DEBUG_ERR,
                     TEXT("GetFileInformationByHandle failed (ec: %ld)"),
                     ec);
        goto exit;
    }

    if ((hfi1.nFileIndexHigh == hfi2.nFileIndexHigh) &&
        (hfi1.nFileIndexLow == hfi2.nFileIndexLow) &&
        (hfi1.dwVolumeSerialNumber == hfi2.dwVolumeSerialNumber))
    {
        *pIsSameDir = TRUE;
    }
    else
    {
        *pIsSameDir = FALSE;
    }

    Assert (ERROR_SUCCESS == ec);

exit:

    if (INVALID_HANDLE_VALUE != hFile1)
    {
        if (!CloseHandle(hFile1))
        {
            DebugPrintEx(DEBUG_ERR,
                         TEXT("CloseHandle failed (ec: %ld)"),
                         GetLastError());
        }
    }

    if (INVALID_HANDLE_VALUE != hFile2)
    {
        if (!CloseHandle(hFile2))
        {
            DebugPrintEx(DEBUG_ERR,
                         TEXT("CloseHandle failed (ec: %ld)"),
                         GetLastError());
        }
    }

    if (TRUE == fFileCreated)
    {
        if (!DeleteFile(wszTestFile1))
        {
            DebugPrintEx(DEBUG_ERR,
                         TEXT("DeleteFile failed. File: %s,  (ec: %ld)"),
                         wszTestFile1,
                         GetLastError());
        }
    }

    return ec;
}
#endif //UNICODE


typedef enum
{
    SAFE_METAFILE_SEMANTICS_NONE                     = 0x00000000,
    SAFE_METAFILE_SEMANTICS_TEMP                     = 0x00000001,   // File is temporary. Should be deleted on close / reboot
    SAFE_METAFILE_SEMANTICS_SENSITIVE                = 0x00000002    // File contains sensitive information. Should not be indexed
} SAFE_METAFILE_SEMANTICS;    

static
HANDLE 
InternalSafeCreateFile(
  LPCTSTR                   IN lpFileName,             // File name
  DWORD                     IN dwDesiredAccess,        // Access mode
  DWORD                     IN dwShareMode,            // Share mode
  LPSECURITY_ATTRIBUTES     IN lpSecurityAttributes,   // SD
  DWORD                     IN dwCreationDisposition,  // How to create
  DWORD                     IN dwFlagsAndAttributes,   // File attributes
  HANDLE                    IN hTemplateFile,          // Handle to template file
  DWORD                     IN dwMetaFileSemantics     // Meta file semantics
)
/*++

Routine name : InternalSafeCreateFile

Routine description:

    This is a safe wrapper around the Win32 CreateFile API.
    It only supports creating real files (as opposed to COM ports, named pipes, etc.).
    
    It uses some widely-discussed mitigation techniques to guard agaist some well known security
    issues in CreateFile().
    
Author:

    Eran Yariv (EranY), Mar, 2002

Arguments:

    lpFileName              [in] - Refer to the CreateFile() documentation for parameter description.
    dwDesiredAccess         [in] - Refer to the CreateFile() documentation for parameter description.
    dwShareMode             [in] - Refer to the CreateFile() documentation for parameter description.
    lpSecurityAttributes    [in] - Refer to the CreateFile() documentation for parameter description.
    dwCreationDisposition   [in] - Refer to the CreateFile() documentation for parameter description.
    dwFlagsAndAttributes    [in] - Refer to the CreateFile() documentation for parameter description.
    hTemplateFile           [in] - Refer to the CreateFile() documentation for parameter description.
    dwMetaFileSemantics     [in] - Meta file semantics. 
                                   This parameter can be a combination of the following values:
                                   
                                    SAFE_METAFILE_SEMANTICS_TEMP
                                        The file is a temporary file. 
                                        The file will be created / opened using the FILE_FLAG_DELETE_ON_CLOSE flag.
                                        When the last file handle is closed, the file will be automatically deleted.
                                        
                                        In addition, the file is marked for deletion after reboot (Unicode-version only).
                                        This will only work if the calling thread's user is a member of the local admins group.
                                        If marking for deletion-post-reboot fails, the InternalSafeCreateFile function call still succeeds.
    
                                    SAFE_METAFILE_SEMANTICS_SENSITIVE
                                        The file contains sensitive information.
                                        The current implementation of this function will mark the file with the 
                                        FILE_ATTRIBUTE_NOT_CONTENT_INDEXED flag.
                                        
Return Value:

    If the function succeeds, the return value is an open handle to the specified file. 
    If the specified file exists before the function call and dwCreationDisposition is CREATE_ALWAYS or OPEN_ALWAYS, 
    a call to GetLastError returns ERROR_ALREADY_EXISTS (even though the function has succeeded). 
    If the file does not exist before the call, GetLastError returns zero. 

    If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call GetLastError. 
    
    For more information see the "Return value" section in the CreateFile() documentation.
    
Remarks:

    Please refer to the CreateFile() documentation.    

--*/
{
    HANDLE hFile;
    DWORD  dwFaxFlagsAndAttributes = SECURITY_SQOS_PRESENT | SECURITY_ANONYMOUS;
    DWORD  dwFaxShareMode = 0;
    DEBUG_FUNCTION_NAME(TEXT("InternalSafeCreateFile"));
    //
    // Always use SECURITY_SQOS_PRESENT | SECURITY_ANONYMOUS in file flags and attributes.
    // This prevents us from opening a user-supplied named pipe and allowing the other side
    // of that pipe to impersonate the caller.
    //
    if (SAFE_METAFILE_SEMANTICS_SENSITIVE & dwMetaFileSemantics)
    {
        //
        // File contains sensitive data. It should not be indexed.
        //
        dwFaxFlagsAndAttributes |= FILE_ATTRIBUTE_NOT_CONTENT_INDEXED;
    }
    if (SAFE_METAFILE_SEMANTICS_TEMP & dwMetaFileSemantics)
    {
        //
        // File is temporary.
        //
        dwFaxFlagsAndAttributes |= FILE_ATTRIBUTE_TEMPORARY | FILE_FLAG_DELETE_ON_CLOSE;
#ifdef UNICODE
        dwFaxShareMode = FILE_SHARE_DELETE;
#endif // UNICODE        
    }
    
    hFile = CreateFile (lpFileName,
                        dwDesiredAccess,
                        dwShareMode | dwFaxShareMode,
                        lpSecurityAttributes,
                        dwCreationDisposition,
                        dwFlagsAndAttributes | dwFaxFlagsAndAttributes,
                        hTemplateFile);
    if (INVALID_HANDLE_VALUE == hFile)
    {
        return hFile;
    }
    //
    // Never allow using non-disk file (e.g. COM ports)
    //
    if (FILE_TYPE_DISK != GetFileType (hFile))
    {
        CloseHandle (hFile);
        SetLastError (ERROR_UNSUPPORTED_TYPE);
        return INVALID_HANDLE_VALUE;
    }
#ifdef UNICODE    
    if (SAFE_METAFILE_SEMANTICS_TEMP & dwMetaFileSemantics)
    {
        //
        // File is temporary.
        // Mark it for delete after reboot.
        // This can fail if we're not admins. That's why we're not checking return value from MoveFileEx.
        //
        MoveFileEx (lpFileName, NULL, MOVEFILE_DELAY_UNTIL_REBOOT);
    }
#endif // UNICODE        
    return hFile;
}   // InternalSafeCreateFile

HANDLE 
SafeCreateFile(
  LPCTSTR                   IN lpFileName,             // File name
  DWORD                     IN dwDesiredAccess,        // Access mode
  DWORD                     IN dwShareMode,            // Share mode
  LPSECURITY_ATTRIBUTES     IN lpSecurityAttributes,   // SD
  DWORD                     IN dwCreationDisposition,  // How to create
  DWORD                     IN dwFlagsAndAttributes,   // File attributes
  HANDLE                    IN hTemplateFile           // Handle to template file
)
{
    return InternalSafeCreateFile (lpFileName,
                                   dwDesiredAccess,
                                   dwShareMode,
                                   lpSecurityAttributes,
                                   dwCreationDisposition,
                                   dwFlagsAndAttributes,
                                   hTemplateFile,
                                   SAFE_METAFILE_SEMANTICS_SENSITIVE);
} // SafeCreateFile                                  

HANDLE 
SafeCreateTempFile(
  LPCTSTR                   IN lpFileName,             // File name
  DWORD                     IN dwDesiredAccess,        // Access mode
  DWORD                     IN dwShareMode,            // Share mode
  LPSECURITY_ATTRIBUTES     IN lpSecurityAttributes,   // SD
  DWORD                     IN dwCreationDisposition,  // How to create
  DWORD                     IN dwFlagsAndAttributes,   // File attributes
  HANDLE                    IN hTemplateFile           // Handle to template file
)
{
    return InternalSafeCreateFile (lpFileName,
                                   dwDesiredAccess,
                                   dwShareMode,
                                   lpSecurityAttributes,
                                   dwCreationDisposition,
                                   dwFlagsAndAttributes,
                                   hTemplateFile,
                                   SAFE_METAFILE_SEMANTICS_SENSITIVE | 
                                   SAFE_METAFILE_SEMANTICS_TEMP);
} // SafeCreateTempFile                                  
                                   
DWORD
IsValidFaxFolder(
    LPCTSTR szFolder
)
/*++

Routine name : IsValidFaxFolder

Routine description:

    Check if fax service has access right to a given folder.
    The routine checks for these rights:
        o   Create file/Write file
        o   Enumerate files
        o   Delete file

Author:

    Caliv Nir   (t-nicali)  Mar, 2002

Arguments:
    
    lpwstrFolder [in] - the folder name.


Return Value:

    Win32 error code. ERROR_SUCCESS if the folder can be used by fax service.
    Otherwise, the Win32 error code to return to the caller.
    
--*/
{
    TCHAR   szTestFile[MAX_PATH]={0};
    DWORD   dwFileAtt;
    LPTSTR  szExpandedFolder = NULL;

    HANDLE          hFind = INVALID_HANDLE_VALUE;
    WIN32_FIND_DATA FindFileData = {0};

    BOOL    bFileCreated = FALSE;

    DWORD   ec = ERROR_SUCCESS;

    DEBUG_FUNCTION_NAME(TEXT("IsValidFaxFolder"));
    
    szExpandedFolder = ExpandEnvironmentString( szFolder );
    if (!szExpandedFolder)
    {
        ec = GetLastError();
        DebugPrintEx(  DEBUG_ERR,
                       TEXT("ExpandEnvironmentString failed (ec=%lu)."),
                       ec);
        return ec;
    }

    //
    //  Check to see if the directory exist
    //
    dwFileAtt = GetFileAttributes( szExpandedFolder );
    if (INVALID_FILE_ATTRIBUTES == dwFileAtt || !(dwFileAtt & FILE_ATTRIBUTE_DIRECTORY))
    {
        //
        // The directory does not exists
        //
        ec = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetFileAttributes failed with %lu"), ec);
        goto exit;
    }


    //
    // Verify that we have access to this folder - Create a temporary file
    //
    if (!GetTempFileName (szExpandedFolder, TEXT("TST"), 0, szTestFile))
    {
        //
        // Either the folder doesn't exist or we don't have access
        //
        ec = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetTempFileName failed with %ld"), ec);
        goto exit;
    }

    bFileCreated = TRUE;

    //
    //  Try to enumarate files in this folder
    //
    hFind = FindFirstFile(szTestFile, &FindFileData);
    if (hFind == INVALID_HANDLE_VALUE)
    {
        //
        // Couldn't enumerate folder
        //
        ec = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("FindFirstFile failed with %ld"), ec);
        goto exit;
    }

    Assert(ec == ERROR_SUCCESS);

exit:
    //
    //  Close find handle
    //
    if (hFind != INVALID_HANDLE_VALUE)
    {
        if(!FindClose(hFind))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("FindClose failed with %ld"), GetLastError ());
        }
    }
    
    if (bFileCreated)
    {
        //
        //  Delete the file
        //
        if (!DeleteFile(szTestFile))
        {
            /***********************************************************
            /* Although it's a clean up code we propagate the error code
            /* It may say that we lack the permission to delete this
            /* file.
            /***********************************************************/
            ec = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("DeleteFile() failed with %ld"),ec);
        }
    }
    MemFree(szExpandedFolder);
    return ec;
}   // IsValidFaxFolder
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\language.c ===
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>

#include "faxutil.h"

DWORD SetLTRWindowLayout(HWND hWnd);
DWORD SetLTREditBox(HWND hEdit);

typedef LANGID (*GETUSERDEFAULTUILANGUAGE)(void);
typedef BOOL (*ISVALIDLANGUAGEGROUP)(LGRPID LanguageGroup,DWORD dwFlags);

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  MyGetUserDefaultUILanguage
//
//  Purpose:        
//                  enable calling the API without creating a dependency on the API
//                  being exported by kernel32.dll, to enable our binaries that use util.lib
//                  to load on NT4 (which does not support this API)
//                  we keep an open handle to the module which will be cleaned up
//                  only upon the process termination.
//
//  Params:
//                  None
//
//  Return Value:
//                  LANGID - result of GetUserDefaultUILanguage
//                  -1     - in case the API is not exported by KERNEL32.DLL
//
//  Author:
//                  Mooly Beery (MoolyB) 30-Jul-2001
///////////////////////////////////////////////////////////////////////////////////////
LANGID MyGetUserDefaultUILanguage()
{
    LANGID                      LangId                      = 0;
    static HMODULE              hModule                     = NULL;
    GETUSERDEFAULTUILANGUAGE    pfGetUserDefaultUiLanguage  = NULL;

    DEBUG_FUNCTION_NAME(TEXT("MyGetUserDefaultUILanguage"));

    if (hModule==NULL)
    {
        hModule = LoadLibrary(_T("Kernel32.dll"));
        if (hModule==NULL)
        {
            DebugPrintEx(DEBUG_ERR,TEXT("LoadLibrary(Kernel32.dll) failed (ec=%d)"),GetLastError());
            goto exit;
        }
    }

    pfGetUserDefaultUiLanguage = (GETUSERDEFAULTUILANGUAGE)GetProcAddress(hModule,"GetUserDefaultUILanguage");
    if (pfGetUserDefaultUiLanguage==NULL)
    {
        DebugPrintEx(DEBUG_ERR,TEXT("GetProcAddress(GetUserDefaultUILanguage) failed (ec=%d)"),GetLastError());
        LangId = -1;
        goto exit;
    }

    LangId = (*pfGetUserDefaultUiLanguage)();

exit:

    return LangId;
}

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  MyIsValidLanguageGroup
//
//  Purpose:        
//                  enable calling the API without creating a dependency on the API
//                  being exported by kernel32.dll, to enable our binaries that use util.lib
//                  to load on NT4 (which does not support this API)
//                  we keep an open handle to the module which will be cleaned up
//                  only upon the process termination.
//
//  Params:
//                  None
//
//  Return Value:
//                  the result of IsValidLanguageGroup
//                  FALSE - in case of failure
//
//  Author:
//                  Mooly Beery (MoolyB) 30-Jul-2001
///////////////////////////////////////////////////////////////////////////////////////
BOOL MyIsValidLanguageGroup(LGRPID LanguageGroup,DWORD dwFlags)
{
    BOOL                        bRet                        = TRUE;
    static HMODULE              hModule                     = NULL;
    ISVALIDLANGUAGEGROUP        pfIsValidLanguageGroup      = NULL;

    DEBUG_FUNCTION_NAME(TEXT("MyIsValidLanguageGroup"));

    if (hModule==NULL)
    {
        hModule = LoadLibrary(_T("Kernel32.dll"));
        if (hModule==NULL)
        {
            DebugPrintEx(DEBUG_ERR,TEXT("LoadLibrary(Kernel32.dll) failed (ec=%d)"),GetLastError());
            bRet = FALSE;
            goto exit;
        }
    }

    pfIsValidLanguageGroup = (ISVALIDLANGUAGEGROUP)GetProcAddress(hModule,"IsValidLanguageGroup");
    if (pfIsValidLanguageGroup==NULL)
    {
        DebugPrintEx(DEBUG_ERR,TEXT("GetProcAddress(IsValidLanguageGroup) failed (ec=%d)"),GetLastError());
        bRet = FALSE;
        goto exit;
    }

    bRet = (*pfIsValidLanguageGroup)(LanguageGroup,dwFlags);

exit:

    return bRet;
}

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  IsRTLUILanguage
//
//  Purpose:        
//                  Determine User Default UI Language layout
//
//  Return Value:
//                  TRUE if the User Default UI Language has Right-to-Left layout
//                  FALSE otherwise 
///////////////////////////////////////////////////////////////////////////////////////
BOOL
IsRTLUILanguage()
{

#if(WINVER >= 0x0500)

    LANGID langID;      // language identifier for the current user language
    WORD    primLangID; // primary language identifier 

    DEBUG_FUNCTION_NAME(TEXT("IsRTLUILanguage"));

    langID = MyGetUserDefaultUILanguage();
    if(langID == 0)
    {
        DebugPrintEx(DEBUG_ERR,TEXT("GetUserDefaultUILanguage failed."));
        return TRUE;
    }

    primLangID = PRIMARYLANGID(langID);

    if(LANG_ARABIC == primLangID || 
       LANG_HEBREW == primLangID)
    {
        //
        // If the UI Language is Arabic or Hebrew the layout is Right-to-Left
        //
        return TRUE;
    }

#endif /* WINVER >= 0x0500 */

    return FALSE;
}


///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  IsWindowRTL
//
//  Purpose:        
//                  Determine if the window has RTL layout
//
//  Params:
//                  hWnd      - window handle
//  Return Value:
//                  TRUE if the window has RTL layout
//                  FALSE otherwise 
///////////////////////////////////////////////////////////////////////////////////////
BOOL
IsWindowRTL(
    HWND    hWnd
)
{
    BOOL bRes = FALSE;

#if(WINVER >= 0x0500)

    LONG_PTR style;

    style = GetWindowLongPtr(hWnd, GWL_EXSTYLE);

    if(WS_EX_LAYOUTRTL == (style & WS_EX_LAYOUTRTL))
    {
        bRes = TRUE;
    }

#endif /* WINVER >= 0x0500 */

    return bRes;
}


///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  SetLTRControlLayout
//
//  Purpose:        
//                  Set left-to-right layout for a dialog control
//                  if the user default UI has RTL layout
//
//  Params:
//                  hDlg      - Dialog handle
//                  dwCtrlID  - control ID
//
//  Return Value:
//                  standard error code
///////////////////////////////////////////////////////////////////////////////////////
DWORD
SetLTRControlLayout(
    HWND    hDlg,
    DWORD   dwCtrlID
)
{
    DWORD    dwRes = ERROR_SUCCESS;

#if(WINVER >= 0x0500)

    HWND     hCtrl;

    DEBUG_FUNCTION_NAME(TEXT("SetLTRControlLayout"));

    if(!hDlg || !dwCtrlID)
    {
        Assert(FALSE);
        return ERROR_INVALID_PARAMETER;
    }

    if(!IsWindowRTL(hDlg))
    {
        //
        // The dialog is not RTL
        // So, no need to revert control
        //
        return dwRes;
    }

    //
    // Get Control box handle
    //
    hCtrl = GetDlgItem(hDlg, dwCtrlID);
    if(!hCtrl)
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR,TEXT("GetDlgItem failed with %ld."),dwRes);
        return dwRes;
    }

    dwRes = SetLTRWindowLayout(hCtrl);
    if(ERROR_SUCCESS != dwRes)
    {
        DebugPrintEx(DEBUG_ERR,TEXT("SetLTRWindowLayout failed with %ld."),dwRes);
    }

#endif /* WINVER >= 0x0500 */

    return dwRes;

} // SetLTRControlLayout

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  SetLTREditDirection
//
//  Purpose:        
//                  Set left aligment for an dialog edit box 
//                  if the user default UI has RTL layout
//
//  Params:
//                  hDlg      - Dialog handle
//                  dwEditID  - Edit box control ID
//
//  Return Value:
//                  standard error code
///////////////////////////////////////////////////////////////////////////////////////
DWORD
SetLTREditDirection(
    HWND    hDlg,
    DWORD   dwEditID
)
{
    DWORD    dwRes = ERROR_SUCCESS;

#if(WINVER >= 0x0500)

    HWND     hCtrl;

    DEBUG_FUNCTION_NAME(TEXT("SetLtrEditDirection"));

    if(!hDlg || !dwEditID)
    {
        Assert(FALSE);
        return ERROR_INVALID_PARAMETER;
    }

    if(!IsWindowRTL(hDlg))
    {
        //
        // The dialog is not RTL
        // So, no need to revert control
        //
        return dwRes;
    }

    //
    // Get Edit box handle
    //
    hCtrl = GetDlgItem(hDlg, dwEditID);
    if(!hCtrl)
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR,TEXT("GetDlgItem failed with %ld."),dwRes);
        return dwRes;
    }

    dwRes = SetLTREditBox(hCtrl);
    if(ERROR_SUCCESS != dwRes)
    {
        DebugPrintEx(DEBUG_ERR,TEXT("SetLTREditBox failed with %ld."),dwRes);
    }

#endif /* WINVER >= 0x0500 */

    return dwRes;

} // SetLTREditDirection

//////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  SetLTRWindowLayout
//
//  Purpose:        
//                  Set left-to-right layout for a window
//                  if the user default UI has RTL layout
//
//  Params:
//                  hWnd    - Window handle
//
//  Return Value:
//                  standard error code
//////////////////////////////////////////////////////////////////////////////////////
DWORD
SetLTRWindowLayout(
    HWND    hWnd
)
{
    DWORD    dwRes = ERROR_SUCCESS;

#if(WINVER >= 0x0500)

    LONG_PTR style;

    DEBUG_FUNCTION_NAME(TEXT("SetLTRWindowLayout"));

    if(!hWnd)
    {
        Assert(FALSE);
        return ERROR_INVALID_PARAMETER;
    }

    //
    // Remove RTL and add LTR to ExStyle
    //
    style = GetWindowLongPtr(hWnd, GWL_EXSTYLE);

    style &= ~(WS_EX_LAYOUTRTL | WS_EX_RIGHT | WS_EX_RTLREADING);
    style |= WS_EX_LEFT | WS_EX_LTRREADING;

    SetWindowLongPtr(hWnd, GWL_EXSTYLE, style);

    //
    // Refresh the window
    //
    if(!SetWindowPos(hWnd, 0, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED))
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR,TEXT("SetWindowPos failed with %ld."),dwRes);
    }

#endif /* WINVER >= 0x0500 */

    return dwRes;

} // SetLTRWindowLayout


//////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  SetLTREditBox
//
//  Purpose:        
//                  Set left aligment for an dialog edit box 
//                  if the user default UI has RTL layout
//
//  Params:
//                  hEdit      - edit box handle
//
//  Return Value:
//                  standard error code
//////////////////////////////////////////////////////////////////////////////////////
DWORD
SetLTREditBox(
    HWND    hEdit
)
{
    DWORD    dwRes = ERROR_SUCCESS;

#if(WINVER >= 0x0500)

    LONG_PTR style;

    DEBUG_FUNCTION_NAME(TEXT("SetLTREditBox"));

    if(!hEdit)
    {
        Assert(FALSE);
        return ERROR_INVALID_PARAMETER;
    }

    //
    // Remove RTL and add LTR to Style
    //
    style = GetWindowLongPtr(hEdit, GWL_STYLE);

    style &= ~ES_RIGHT;
    style |= ES_LEFT;

    SetWindowLongPtr(hEdit, GWL_STYLE, style);

    dwRes = SetLTRWindowLayout(hEdit);
    if(ERROR_SUCCESS != dwRes)
    {
        DebugPrintEx(DEBUG_ERR,TEXT("SetLTRWindowLayout failed with %ld."),dwRes);
    }

#endif /* WINVER >= 0x0500 */

    return dwRes;

} // SetLTREditBox

//////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  SetLTRComboBox
//
//  Purpose:        
//                  Set left aligment for an dialog combo box 
//                  if the user default UI has RTL layout
//
//  Params:
//                  hDlg      - Dialog handle
//                  dwCtrlID  - combo box control ID
//
//  Return Value:
//                  standard error code
//////////////////////////////////////////////////////////////////////////////////////
DWORD
SetLTRComboBox(
    HWND    hDlg,
    DWORD   dwCtrlID
)
{
    DWORD    dwRes = ERROR_SUCCESS;

#if(WINVER >= 0x0500)

    HWND            hCtrl;
    COMBOBOXINFO    comboBoxInfo = {0};

    HMODULE hUser32 = NULL;
    BOOL (*pfGetComboBoxInfo)(HWND, PCOMBOBOXINFO) = NULL;


    DEBUG_FUNCTION_NAME(TEXT("SetLTRComboBox"));

    if((LOBYTE(LOWORD(GetVersion()))) < 5)
    {
        //
        // OS version less then Windows 2000
        // WS_EX_LAYOUTRTL extended windows style requires Windows 2000 or later
        //
        return ERROR_CALL_NOT_IMPLEMENTED;
    }

    if(!hDlg || !dwCtrlID)
    {
        Assert(FALSE);
        return ERROR_INVALID_PARAMETER;
    }

    if(!IsWindowRTL(hDlg))
    {
        //
        // The dialog is not RTL
        // So, no need to revert control
        //
        return dwRes;
    }

    //
    // Get combo box handle
    //
    hCtrl = GetDlgItem(hDlg, dwCtrlID);
    if(!hCtrl)
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR,TEXT("GetDlgItem failed with %ld."),dwRes);
        return dwRes;
    }

    //
    // GetComboBoxInfo() requires Windows NT 4.0 SP6 or later
    // so we connect dynamically to it
    //
    hUser32 = LoadLibrary(TEXT("user32.dll"));
    if(!hUser32)
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR,TEXT("LoadLibrary(user32.dll) failed with %ld."),dwRes);
        goto exit;
    }
    
    (FARPROC&)pfGetComboBoxInfo = GetProcAddress(hUser32, "GetComboBoxInfo");
    if(!pfGetComboBoxInfo)
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR,TEXT("GetProcAddress(GetComboBoxInfo) failed with %ld."),dwRes);
        goto exit;
    }

    comboBoxInfo.cbSize = sizeof(comboBoxInfo);
    if(pfGetComboBoxInfo(hCtrl, &comboBoxInfo))
    {
        SetLTREditBox(comboBoxInfo.hwndItem);
        SetLTRWindowLayout(comboBoxInfo.hwndCombo);
        SetLTRWindowLayout(comboBoxInfo.hwndList);
    }
    else
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR,TEXT("GetComboBoxInfo failed with %ld."),dwRes);
        goto exit;
    }

exit:
    if(hUser32)
    {
        FreeLibrary(hUser32);
    }

#endif /* WINVER >= 0x0500 */

    return dwRes;

} // SetLTRComboBox


///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  StrHasRTLChar
//
//  Purpose:        
//                  Determine if the string has RTL characters
//                  
//  Params:
//                  pStr - string to analize
//                  
//  Return Value:
//                  TRUE if the string has RTL characters
//                  FALSE otherwise
///////////////////////////////////////////////////////////////////////////////////////
BOOL
StrHasRTLChar(
    LCID    Locale,
    LPCTSTR pStr 
)
{
    BOOL  bRTL = FALSE;
    DWORD dw;
    WORD* pwStrData = NULL;
    DWORD dwStrLen = 0; 

    DEBUG_FUNCTION_NAME(TEXT("StrHasRTLChar"));

    if(!pStr)
    {
        DebugPrintEx(DEBUG_ERR, TEXT("pStr is NULL"));
        return bRTL;
    }

    dwStrLen = _tcslen(pStr);

    pwStrData = (WORD*)MemAlloc(sizeof(WORD) * dwStrLen);
    if(!pwStrData)
    {
        DebugPrintEx(DEBUG_ERR, TEXT("MemAlloc"));
        return bRTL;
    }

    if (!GetStringTypeEx(Locale,
                         CT_CTYPE2,
                         pStr,
                         dwStrLen,
                         pwStrData))
    {
        DebugPrintEx(DEBUG_ERR, TEXT("GetStringTypeEx() failed : %ld"), GetLastError());
        goto exit;
    }

    //
    //  Looking for a character with RIGHT_TO_LEFT orientation
    //
    for (dw=0; dw < dwStrLen; ++dw)
    {
        if (C2_RIGHTTOLEFT == pwStrData[dw])
        {
            bRTL = TRUE;
            break;
        }
    }

exit:

    MemFree(pwStrData);

    return bRTL;

} // StrHasRTLChar


///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  AlignedMessageBox
//
//  Purpose:        
//                  Display message box with correct reading order and alignment
//                  
//  Params:
//                  pStr - string to analize
//                  
//  Return Value:
//                  MessageBox() return value
//                  
///////////////////////////////////////////////////////////////////////////////////////
int 
AlignedMessageBox(
  HWND    hWnd,       // handle to owner window
  LPCTSTR lpText,     // text in message box
  LPCTSTR lpCaption,  // message box title
  UINT    uType       // message box style
)
{
    int nRes = 0;

    if(IsRTLUILanguage())
    {
        uType |= MB_RTLREADING | MB_RIGHT;
    }

    nRes = MessageBox(hWnd, lpText, lpCaption, uType);

    return nRes;
}

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  FaxTimeFormat
//
//  Purpose:        
//                  Format time string with correct reading order
//                  
//  Params:
//                  see GetTimeFormat() parameters
//                  
//  Return Value:
//                  GetTimeFormat() return value
//                  
///////////////////////////////////////////////////////////////////////////////////////
int 
FaxTimeFormat(
  LCID    Locale,             // locale
  DWORD   dwFlags,            // options
  CONST   SYSTEMTIME *lpTime, // time
  LPCTSTR lpFormat,           // time format string
  LPTSTR  lpTimeStr,          // formatted string buffer
  int     cchTime             // size of string buffer
)
{
    int nRes = 0;
    TCHAR szTime[MAX_PATH];

    nRes = GetTimeFormat(Locale, dwFlags, lpTime, lpFormat, szTime, min(cchTime, MAX_PATH));
    if(0 == nRes)
    {
        return nRes;
    }

    if(0 == cchTime)
    {
        return ++nRes;
    }

    if(IsRTLLanguageInstalled())
    {
        if(StrHasRTLChar(Locale, szTime))
        {
            _sntprintf(lpTimeStr, cchTime -1, TEXT("%c%s"), UNICODE_RLM, szTime);
        }
        else
        {
            _sntprintf(lpTimeStr, cchTime -1, TEXT("%c%s"), UNICODE_LRM, szTime);
        }
		lpTimeStr[cchTime -1] = _T('\0');
    }
    else
    {
        _tcsncpy(lpTimeStr, szTime, cchTime);
    }

    return nRes;

} // FaxTimeFormat


///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  IsRTLLanguageInstalled
//
//  Purpose:        
//                  Determine if RTL Language Group is Installed
//
//  Return Value:
//                  TRUE if RTL Language Group is Installed
//                  FALSE otherwise 
///////////////////////////////////////////////////////////////////////////////////////
BOOL
IsRTLLanguageInstalled()
{

#if(WINVER >= 0x0500)

    if(MyIsValidLanguageGroup(LGRPID_ARABIC, LGRPID_INSTALLED) ||
       MyIsValidLanguageGroup(LGRPID_HEBREW, LGRPID_INSTALLED))
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }	

#endif /* WINVER >= 0x0500 */

    return FALSE;
} // IsRTLLanguageInstalled


///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  SetRTLProcessLayout
//
//  Purpose:        
//                  Set the default process layout to right-to-left
//
//  Return Value:
//                  Error code
///////////////////////////////////////////////////////////////////////////////////////
DWORD 
SetRTLProcessLayout()
{
    DWORD dwRes = ERROR_SUCCESS;

#if(WINVER >= 0x0500)

    HMODULE hUser32 = NULL;
    BOOL (*pfSetProcessDefaultLayout)(DWORD);

    DEBUG_FUNCTION_NAME(TEXT("SetRTLProcessLayout"));

    if((LOBYTE(LOWORD(GetVersion()))) < 5)
    {
        //
        // OS version less then Windows 2000
        // SetProcessDefaultLayout() requires Windows 2000 or later
        //
        return ERROR_CALL_NOT_IMPLEMENTED;
    }

    hUser32 = LoadLibrary(TEXT("user32.dll"));
    if(!hUser32)
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR,TEXT("LoadLibrary(user32.dll) failed with %ld."),dwRes);
        goto exit;
    }
    
    (FARPROC&)pfSetProcessDefaultLayout = GetProcAddress(hUser32, "SetProcessDefaultLayout");
    if(!pfSetProcessDefaultLayout)
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR,TEXT("GetProcAddress(SetProcessDefaultLayout) failed with %ld."),dwRes);
        goto exit;
    }

    if(!pfSetProcessDefaultLayout(LAYOUT_RTL))
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR,TEXT("SetProcessDefaultLayout failed with %ld."),dwRes);
        goto exit;
    }

exit:
    if(hUser32)
    {
        FreeLibrary(hUser32);
    }

#endif /* WINVER >= 0x0500 */

    return dwRes;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\routemapi.cpp ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    routemapi.cpp

Abstract:

    This module provides the implemantation of registry manipulations to 
    route MAPI calls to the Microsoft Outlook mail client

Author:

    Mooly Beery (moolyb) 5-Nov-2000


Revision History:

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <debugex.h>
// cause the module to export its methods   
//#define EXPORT_MAPI_ROUTE_CALLS
#include <routemapi.h>

#include "winfax.h"
#include "faxreg.h"
#include "faxutil.h"

#define MS_OUTLOOK              _T("Microsoft Outlook")

#define REG_KEY_POP_UP          _T("PreFirstRun")
#define REG_KEY_POP_UP_OLD      _T("{F779C4BF-4C94-4442-8844-633F0298ED0B}")
#define REG_KEY_MAPI_APPS_OLD   _T("{A5159994-A7F8-4C11-8F86-B9877CE02303}")
#define REG_KEY_CLIENTS_MAIL    _T("SOFTWARE\\Clients\\Mail")
#define REG_KEY_MAPI_APPS       _T("SOFTWARE\\Microsoft\\Windows Messaging Subsystem\\MSMapiApps")

CRouteMAPICalls::CRouteMAPICalls()
:   m_ptProcessName(NULL),
    m_bMSOutlookInstalled(false),
    m_bMSOutlookIsDefault(false),
    m_bProcessIsRouted(false),
    m_bProcessIsRoutedToMsOutlook(false)

{
}

// Function:    CRouteMAPICalls::~CRouteMAPICalls
// 
// Description: restores the registry to its initial state after 
//              SetRegistryForSetupMAPICalls was called
//              if Microsoft Outlook is installed
//              if it's not restore pop-ups which might result from MAPI calls
//              if it is check if Microsoft Outlook is the default mail client
//              if it is do nothing
//              if it's not remove current process from routing all MAPI calls to Micosoft Outlook
//
// author:  
//          MoolyB (05-NOV-00)
//
CRouteMAPICalls::~CRouteMAPICalls()
{
    DWORD   rc                  = ERROR_SUCCESS;
    TCHAR*  ptPreFirstRun       = NULL;
    TCHAR*  ptPreRouteProcess   = NULL;
    HKEY    hMailKey            = NULL;
    HKEY    hMapiApps           = NULL;

    DBG_ENTER(_T("CRouteMAPICalls::~CRouteMAPICalls"));

    rc = RegOpenKeyEx(  HKEY_LOCAL_MACHINE,
                        REG_KEY_CLIENTS_MAIL,
                        0,
                        KEY_ALL_ACCESS,
                        &hMailKey);
    if (rc!=ERROR_SUCCESS)
    {
        // no mail clients instlled on this machine? this is strange
        // anyway, no work needs to be done, since no one will pop-up
        // any message and our transport provider is not added anywhere.
        CALL_FAIL (GENERAL_ERR, TEXT("RegOpenKeyEx HKLM\\SOFTWARE\\Clients\\Mail"), rc);
        rc = ERROR_SUCCESS;
        goto exit;
    }
    
    if (m_bMSOutlookInstalled)
    {
        VERBOSE(DBG_MSG,_T("Microsoft Outlook Client was installed"));
        // Microsoft Outlook was installed, check if we did some changes
        if (m_bMSOutlookIsDefault)
        {
            VERBOSE(DBG_MSG,_T("Microsoft Outlook Client was the default mail client, nothing to resotre"));
            goto exit;
        }
        else
        {
            VERBOSE(DBG_MSG,_T("Microsoft Outlook Client was not the default mail client"));
            rc = RegOpenKeyEx(  HKEY_LOCAL_MACHINE,
                                REG_KEY_MAPI_APPS,
                                0,
                                KEY_ALL_ACCESS,
                                &hMapiApps);
            if (rc!=ERROR_SUCCESS)
            {
                CALL_FAIL (GENERAL_ERR, TEXT("RegOpenKeyEx SOFTWARE\\Microsoft\\Windows Messaging Subsystem\\MSMapiApps"), rc);
                goto exit;
            }
            if (m_bProcessIsRouted)
            {
                if (m_bProcessIsRoutedToMsOutlook)
                {
                    VERBOSE(DBG_MSG,_T("The process was routed before to MS Outlook, do nothing"));
                    goto exit;
                }
                else
                {
                    VERBOSE(DBG_MSG,_T("The process was routed before, restore key..."));

                    // get old one
                    ptPreRouteProcess = GetRegistryString(hMapiApps,REG_KEY_MAPI_APPS_OLD,NULL);
                    if (ptPreRouteProcess==NULL)
                    {
                        // we failed to read the previously stored _szProcessName
                        // fail the recovery attemp, but delete ourselves anyhow.
                        CALL_FAIL (GENERAL_ERR, TEXT("GetRegistryString"), rc);
                        rc = RegDeleteValue(hMapiApps,m_ptProcessName);
                        if (rc!=ERROR_SUCCESS)
                        {
                            CALL_FAIL (GENERAL_ERR, TEXT("RegDeleteValue m_ptProcessName"), rc);
                        }
                        goto exit;
                    }

                    // delete backup
                    rc = RegDeleteValue(hMapiApps,REG_KEY_MAPI_APPS_OLD);
                    if (rc!=ERROR_SUCCESS)
                    {
                        CALL_FAIL (GENERAL_ERR, TEXT("RegDeleteValue m_ptProcessName"), rc);
                    }

                    // set the old registry back
                    if (!SetRegistryString(hMapiApps,m_ptProcessName,ptPreRouteProcess))
                    {
                        rc = GetLastError();
                        CALL_FAIL (GENERAL_ERR, TEXT("SetRegistryString"), rc);
                        goto exit;
                    }

                    goto exit;
                }
            }
            else
            {
                VERBOSE(DBG_MSG,_T("The process was not routed before, delete key..."));
                rc = RegDeleteValue(hMapiApps,m_ptProcessName);
                if (rc!=ERROR_SUCCESS)
                {
                    CALL_FAIL (GENERAL_ERR, TEXT("RegDeleteValue REG_KEY_MAPI_APPS_OLD"), rc);
                    goto exit;
                }
            }
        }
    }
    else
    {
        // Microsoft Outlook was not installed, so we suppressed the pop-up
        // need to restore the pop-up to its original state
        VERBOSE(DBG_MSG,_T("Microsoft Mail Client was not installed - restore pop-up"));
        // I restore the pop-up by renaming the REG_SZ _PreFirstRun
        // under HKLM\\SOFTWARE\\Clients\\Mail
        // to PreFirstRun,
        ptPreFirstRun = GetRegistryString(hMailKey,REG_KEY_POP_UP_OLD,NULL);
        if (ptPreFirstRun==NULL)
        {
            rc = GetLastError();
            CALL_FAIL (GENERAL_ERR, TEXT("GetRegistryString _PreFirstRun"), rc);
            goto exit;
        }
        
        rc = RegDeleteValue(hMailKey,REG_KEY_POP_UP_OLD);
        if (rc!=ERROR_SUCCESS)
        {
            CALL_FAIL (GENERAL_ERR, TEXT("SetRegistryString _PreFirstRun"), rc);
        }

        if (!SetRegistryString(hMailKey,REG_KEY_POP_UP,ptPreFirstRun))
        {
            rc = GetLastError();
            CALL_FAIL (GENERAL_ERR, TEXT("SetRegistryString PreFirstRun"), rc);
            goto exit;
        }
    }

exit:
    if (hMailKey)
    {
        RegCloseKey(hMailKey);
    }
    if (hMapiApps)
    {
        RegCloseKey(hMapiApps);
    }
    if (ptPreFirstRun)
    {
        MemFree(ptPreFirstRun);
    }
    if (ptPreRouteProcess)
    {
        MemFree(ptPreRouteProcess);
    }
    if (m_ptProcessName)
    {
        MemFree(m_ptProcessName);
    }

    if (rc!=ERROR_SUCCESS)
    {
        CALL_FAIL (GENERAL_ERR, TEXT("CRouteMAPICalls::~CRouteMAPICalls"), rc);
    }
}

// Function:    CRouteMAPICalls::Init
// 
// Description: check if Microsoft Outlook is installed
//              if it's not supress any pop-ups which might result from MAPI calls
//              if it is check if Microsoft Outlook is the default mail client
//              if it is do nothing
//              if it's not set current process to route all MAPI calls to Micosoft Outlook
//
// author:  
//          MoolyB (05-NOV-00)
//
DWORD CRouteMAPICalls::Init(LPCTSTR lpctstrProcessName)
{
    DWORD   rc                  = ERROR_SUCCESS;
    HKEY    hMailKey            = NULL;
    HKEY    hMsOutlookKey       = NULL;
    HKEY    hMapiApps           = NULL;
    TCHAR*  ptPreFirstRun       = NULL;
    TCHAR*  ptPreRouteProcess   = NULL;
    TCHAR*  ptDefaultMailClient = NULL;
    TCHAR*  ptProcessName       = NULL;

    DBG_ENTER(_T("CRouteMAPICalls::Init"), rc);

    int iSize = _tcslen(lpctstrProcessName);
    if (iSize==0)
    {
        VERBOSE(GENERAL_ERR,_T("invalid process name"));
        goto exit;
    }
    m_ptProcessName = (TCHAR*)MemAlloc((iSize+1)*sizeof(TCHAR));
    if (m_ptProcessName==NULL)
    {
        VERBOSE(GENERAL_ERR,_T("failure to allocate memory"));
        goto exit;
    }

    _tcscpy(m_ptProcessName,lpctstrProcessName);

    rc = RegOpenKeyEx(  HKEY_LOCAL_MACHINE,
                        REG_KEY_CLIENTS_MAIL,
                        0,
                        KEY_ALL_ACCESS,
                        &hMailKey);
    if (rc!=ERROR_SUCCESS)
    {
        // no mail clients instlled on this machine? this is strange
        // anyway, no work needs to be done, since no one will pop-up
        // any message and our transport provider is not added anywhere.
        CALL_FAIL (GENERAL_ERR, TEXT("RegOpenKeyEx HKLM\\SOFTWARE\\Clients\\Mail"), rc);
        rc = ERROR_SUCCESS;
        goto exit;
    }
    else
    {
        // there are a few mail clients
        // check if a key called 'Microsoft Outlook' exists.
        rc = RegOpenKeyEx(  hMailKey,
                            MS_OUTLOOK,
                            0,
                            KEY_READ,
                            &hMsOutlookKey);
        if (rc!=ERROR_SUCCESS)
        {
            // Microsoft Outlook is not installed
            CALL_FAIL(GENERAL_ERR,_T("RegOpenKeyEx HKLM\\SOFTWARE\\Clients\\Mail\\Microsoft Outlook"),rc);
            if (rc==ERROR_FILE_NOT_FOUND)
            {
                // suppress pop-up message
                VERBOSE(DBG_MSG,_T("Microsoft Mail Client is not installed - suppress pop-up"));
                // I suppress the pop-up by renaming the REG_SZ PreFirstRun
                // under HKLM\\SOFTWARE\\Clients\\Mail
                // to _PreFirstRun, later, we'll restore this
                ptPreFirstRun = GetRegistryString(hMailKey,REG_KEY_POP_UP,NULL);
                if (ptPreFirstRun==NULL)
                {
                    rc = GetLastError();
                    CALL_FAIL (GENERAL_ERR, TEXT("GetRegistryString PreFirstRun"), rc);
                    goto exit;
                }
                
                if (!SetRegistryString(hMailKey,REG_KEY_POP_UP_OLD,ptPreFirstRun))
                {
                    rc = GetLastError();
                    CALL_FAIL (GENERAL_ERR, TEXT("SetRegistryString _PreFirstRun"), rc);
                    goto exit;
                }

                rc = RegDeleteValue(hMailKey,REG_KEY_POP_UP);
                if (rc!=ERROR_SUCCESS)
                {
                    CALL_FAIL (GENERAL_ERR, TEXT("SetRegistryString PreFirstRun"), rc);
                    // try to cleanup, even though this is bad
                    RegDeleteValue(hMailKey,REG_KEY_POP_UP_OLD);
                    goto exit;
                }
            }
            else
            {
                // this is a true error in trying to open the key
                // HKLM\\SOFTWARE\\Clients\\Mail\\Microsoft Outlook
                goto exit;
            }
        }
        else
        {
            // Microsoft Outlook is installed
            m_bMSOutlookInstalled = true;
            // check if it is the deafult mail client
            ptDefaultMailClient = GetRegistryString(hMailKey,NULL,NULL);
            if ((ptDefaultMailClient==NULL) || (_tcscmp(ptDefaultMailClient,MS_OUTLOOK)))
            {
                // either there's no default mail client or GetRegistryString failed
                // or there is a default mail client and it's not Microsoft Outlook
                // in both cases I treat as Microsoft Outlook is not the default mail client

                // open HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Messaging Subsystem\MSMapiApps
                // and add a REG_SZ called according to szProcessName, set it to "Microsoft Outlook"
                rc = RegOpenKeyEx(  HKEY_LOCAL_MACHINE,
                                    REG_KEY_MAPI_APPS,
                                    0,
                                    KEY_ALL_ACCESS,
                                    &hMapiApps);
                if (rc!=ERROR_SUCCESS)
                {
                    CALL_FAIL (GENERAL_ERR, TEXT("RegOpenKeyEx SOFTWARE\\Microsoft\\Windows Messaging Subsystem\\MSMapiApps"), rc);
                    goto exit;
                }

                ptProcessName = GetRegistryString(hMapiApps,m_ptProcessName,NULL);
                if (ptProcessName==NULL)
                {
                    // this is the 'good' case, no one wants to route MAPI calls from a process with
                    // the same name as our own
                    if (!SetRegistryString(hMapiApps,m_ptProcessName,MS_OUTLOOK))
                    {
                        rc = GetLastError();
                        CALL_FAIL (GENERAL_ERR, TEXT("SetRegistryString"), rc);
                        goto exit;
                    }
                }
                else
                {
                    m_bProcessIsRouted = true;
                    // this it bad, someone is routing MAPI calls from a process with the same name to 
                    // another app
                    // check if it's routed to Microsoft Outlook, and if not, rename it and add ourselves
                    if (_tcscmp(ptProcessName,MS_OUTLOOK)==0)
                    {
                        m_bProcessIsRoutedToMsOutlook = true;
                        VERBOSE(DBG_MSG,_T("MAPI calls are already routed to Microsoft Outlook"));
                        goto exit;
                    }
                    else
                    {
                        // set old one to _ prefix
                        ptPreRouteProcess = GetRegistryString(hMapiApps,m_ptProcessName,NULL);
                        if (ptPreRouteProcess==NULL)
                        {
                            // we failed to read the previously stored _szProcessName
                            // fail the recovery attemp, but delete ourselves anyhow.
                            CALL_FAIL (GENERAL_ERR, TEXT("GetRegistryString"), rc);
                            goto exit;
                        }
                        if (!SetRegistryString(hMapiApps,REG_KEY_MAPI_APPS_OLD,ptPreRouteProcess))
                        {
                            rc = GetLastError();
                            CALL_FAIL (GENERAL_ERR, TEXT("SetRegistryString"), rc);
                            goto exit;
                        }

                        // set ourselves
                        if (!SetRegistryString(hMapiApps,m_ptProcessName,MS_OUTLOOK))
                        {
                            rc = GetLastError();
                            CALL_FAIL (GENERAL_ERR, TEXT("SetRegistryString"), rc);
                            goto exit;
                        }
                    }
                }
            }
            else
            {
                // Microsoft Outlook is the default mail client
                m_bMSOutlookIsDefault = true;
                goto exit;
            }
        }
    }

exit:
    if (hMailKey)
    {
        RegCloseKey(hMailKey);
    }
    if (hMsOutlookKey)
    {
        RegCloseKey(hMsOutlookKey);
    }
    if (hMapiApps)
    {
        RegCloseKey(hMapiApps);
    }
    if (ptPreFirstRun)
    {
        MemFree(ptPreFirstRun);
    }
    if (ptDefaultMailClient)
    {
        MemFree(ptDefaultMailClient);
    }
    if (ptProcessName)
    {
        MemFree(ptProcessName);
    }
    if (ptPreRouteProcess)
    {
        MemFree(ptPreFirstRun);
    }
    return rc;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\net.c ===
#include <windows.h>
#include <lm.h>         // for NetGetJoinInformation
#include <Lmjoin.h>
#include <safeboot.h>   // SAFEBOOT_* flags

#include "faxutil.h"

// Copy from: shell\shlwapi\apithk.c
//
// checks to see if this machine is a member of a domain or not 
// NOTE: this will always return FALSE for older that win XP!
BOOL 
IsMachineDomainMember()
{
    static BOOL s_bIsDomainMember = FALSE;
    static BOOL s_bDomainCached = FALSE;

    if (IsWinXPOS() && !s_bDomainCached)
    {
        LPWSTR pwszDomain;
        NETSETUP_JOIN_STATUS njs;
        NET_API_STATUS nas;

        HMODULE hNetapi32 = NULL;
        NET_API_STATUS (*pfNetGetJoinInformation)(LPCWSTR, LPWSTR*, PNETSETUP_JOIN_STATUS) = NULL;

        DEBUG_FUNCTION_NAME(TEXT("IsMachineDomainMember"));

        //
        // NetGetJoinInformation() requires Windows 2000 or later
        //
        hNetapi32 = LoadLibrary(TEXT("netapi32.dll"));
        if(!hNetapi32)
        {
            DebugPrintEx(DEBUG_ERR,TEXT("LoadLibrary(netapi32.dll) failed with %ld."),GetLastError());
            goto exit;
        }

        (FARPROC&)pfNetGetJoinInformation = GetProcAddress(hNetapi32, "NetGetJoinInformation");
        if(!pfNetGetJoinInformation)
        {
            DebugPrintEx(DEBUG_ERR,TEXT("GetProcAddress(NetGetJoinInformation) failed with %ld."),GetLastError());
            goto exit;
        }

        nas = pfNetGetJoinInformation(NULL, &pwszDomain, &njs);
        if (nas == NERR_Success)
        {
            if (pwszDomain)
            {
                NetApiBufferFree(pwszDomain);
            }

            if (njs == NetSetupDomainName)
            {
                // we are joined to a domain!
                s_bIsDomainMember = TRUE;
            }
        }
exit:
        if(hNetapi32)
        {
            FreeLibrary(hNetapi32);
        }
        
        s_bDomainCached = TRUE;
    }
    
    return s_bIsDomainMember;
}


//+---------------------------------------------------------------------------
//
//  Function:   IsSafeMode
//
//  Synopsis:   Checks the registry to see if the system is in safe mode.
//
//  History:    06-Oct-00 JeffreyS  Created
//
//  Copy from:  shell\osshell\security\rshx32\util.cpp
//----------------------------------------------------------------------------

BOOL
IsSafeMode(void)
{
    BOOL    fIsSafeMode = FALSE;
    LONG    ec;
    HKEY    hkey;

    ec = RegOpenKeyEx(
                HKEY_LOCAL_MACHINE,
                TEXT("SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Option"),
                0,
                KEY_QUERY_VALUE,
                &hkey
                );

    if (ec == NO_ERROR)
    {
        DWORD dwValue;
        DWORD dwValueSize = sizeof(dwValue);

        ec = RegQueryValueEx(hkey,
                             TEXT("OptionValue"),
                             NULL,
                             NULL,
                             (LPBYTE)&dwValue,
                             &dwValueSize);

        if (ec == NO_ERROR)
        {
            fIsSafeMode = (dwValue == SAFEBOOT_MINIMAL || dwValue == SAFEBOOT_NETWORK);
        }

        RegCloseKey(hkey);
    }

    return fIsSafeMode;
}


//+---------------------------------------------------------------------------
//
//  Function:   IsGuestAccessMode
//
//  Synopsis:   Checks the registry to see if the system is using the
//              Guest-only network access mode.
//
//  History:    06-Oct-00 JeffreyS  Created
//
//  Copy from:  shell\osshell\security\rshx32\util.cpp
//----------------------------------------------------------------------------

BOOL
IsGuestAccessMode(void)
{
    BOOL fIsGuestAccessMode = FALSE;
	PRODUCT_SKU_TYPE skuType = GetProductSKU();

    if (PRODUCT_SKU_PERSONAL == skuType)
    {
        // Guest mode is always on for Personal
        fIsGuestAccessMode = TRUE;
    }
    else if (
		((PRODUCT_SKU_PROFESSIONAL == skuType) || (PRODUCT_SKU_DESKTOP_EMBEDDED == skuType)) && 
		!IsMachineDomainMember()
		)
    {
        LONG    ec;
        HKEY    hkey;

        // Professional, not in a domain. Check the ForceGuest value.

        ec = RegOpenKeyEx(
                    HKEY_LOCAL_MACHINE,
                    TEXT("SYSTEM\\CurrentControlSet\\Control\\LSA"),
                    0,
                    KEY_QUERY_VALUE,
                    &hkey
                    );

        if (ec == NO_ERROR)
        {
            DWORD dwValue;
            DWORD dwValueSize = sizeof(dwValue);

            ec = RegQueryValueEx(hkey,
                                 TEXT("ForceGuest"),
                                 NULL,
                                 NULL,
                                 (LPBYTE)&dwValue,
                                 &dwValueSize);

            if (ec == NO_ERROR && 1 == dwValue)
            {
                fIsGuestAccessMode = TRUE;
            }

            RegCloseKey(hkey);
        }
    }

    return fIsGuestAccessMode;
}


//+---------------------------------------------------------------------------
//
//  Function:   IsSimpleUI
//
//  Synopsis:   Checks whether to show the simple version of the UI.
//
//  History:    06-Oct-00 JeffreyS  Created
//              19-Apr-00 GPease    Removed CTRL key check
//
//  Copy from:  shell\osshell\security\rshx32\util.cpp
//----------------------------------------------------------------------------

BOOL
IsSimpleUI()
{
    // Show old UI in safe mode and anytime network access involves
    // true user identity (server, pro with GuestMode off).
    
    // Show simple UI anytime network access is done using the Guest
    // account (personal, pro with GuestMode on) except in safe mode.

    return (!IsSafeMode() && IsGuestAccessMode());
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\print.c ===
/*++

Copyright (c) 1999  Microsoft Corporation

Module Name:

    print.c

Abstract:

    This file implements basic printer functionality

Author:

    Asaf Shaar (asafs) 28-Nov-1999

Environment:

    User Mode

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <WinSpool.h>

#include <faxutil.h>
#include <faxreg.h>
#include <shlobj.h>
/*++

Routine Description:

    Wrapper function for EnumPrinters API

Arguments:

    pServerName - Server name (NULL for current server)
    dwLevel       - Specifies PRINTER_INFO level to be returned
    pcPrinters  - Returns the number of printers found
    dwFlags       - Specifies the type of printer objects to be enumerated

    level -
    pCount -

Return Value:

    Pointer to an array of PRINTER_INFO_x structures
    NULL if there is an error

--*/

PVOID
MyEnumPrinters(
    LPTSTR  pServerName,
    DWORD   dwLevel,
    PDWORD  pcPrinters,
    DWORD   dwFlags
    )
{
    PBYTE   pPrinterInfo = NULL;
    DWORD   cb = 0;
    DWORD   Error = ERROR_SUCCESS;

    if (!dwFlags)
    {
        dwFlags = PRINTER_ENUM_LOCAL | PRINTER_ENUM_CONNECTIONS;
    }

    if (!EnumPrinters(dwFlags, pServerName, dwLevel, NULL, 0, &cb, pcPrinters))
    {
        Error = GetLastError();

        if ( Error == ERROR_INSUFFICIENT_BUFFER && (pPrinterInfo = (PBYTE) MemAlloc(cb)) != NULL)
        {
            if (EnumPrinters(dwFlags, pServerName, dwLevel, pPrinterInfo, cb, &cb, pcPrinters))
            {
                return pPrinterInfo;
            }
            Error = GetLastError();
        }
    }

    MemFree(pPrinterInfo);
    SetLastError(Error);
    return NULL;
}

/*++

Routine Description:

    Returns the name of the first Fax printer on the local machine:
	for LOCAL fax printer use GetFirstLocalFaxPrinterName.
	for REMOTE fax printer use GetFirstRemoteFaxPrinterName.

Arguments:

    OUT lptstrPrinterName - A buffer to hold the returned printer name.
    IN dwPrintNameInChars - The size of the buffer in characters (including the space for terminating null)
Return Value:
    TRUE if the function succeeded and found a fax printer.
    FALSE if the function failed or did not find a fax printer.
    If a printer was not found then GetLastError() will report ERROR_PRINTER_NOT_FOUND.

--*/
BOOL
GetFirstFaxPrinterName(
    OUT LPTSTR lptstrPrinterName,
    IN DWORD dwMaxLenInChars,
	IN DWORD dwFlag)
{
    PPRINTER_INFO_2 pPrinterInfo = NULL;
    DWORD dwNumPrinters;
    DWORD dwPrinter;
    DWORD ec = ERROR_SUCCESS;

    DEBUG_FUNCTION_NAME(TEXT("GetFirstFaxPrinterName"));

    SetLastError (ERROR_SUCCESS);
    pPrinterInfo = (PPRINTER_INFO_2) MyEnumPrinters(NULL,
                                                    2,
                                                    &dwNumPrinters,
                                                    dwFlag
                                                    );
    if (!pPrinterInfo)
    {
        //
        // Either error on no printers
        //
        ec = GetLastError();
        if (ERROR_SUCCESS == ec)
        {
            //
            // Not an error - no printers
            //
            SetLastError (ERROR_PRINTER_NOT_FOUND);
            return FALSE;
        }
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("MyEnumPrinters() failed (ec: %ld)"),
            ec);
        goto Error;
    }

    for (dwPrinter=0; dwPrinter < dwNumPrinters; dwPrinter++)
    {
        if (!_tcscmp(pPrinterInfo[dwPrinter].pDriverName,FAX_DRIVER_NAME))
        {
            memset(lptstrPrinterName,0,dwMaxLenInChars*sizeof(TCHAR));
            _tcsncpy(lptstrPrinterName,pPrinterInfo[dwPrinter].pPrinterName,dwMaxLenInChars-1);
            goto Exit;
        }
    }

    ec = ERROR_PRINTER_NOT_FOUND;
    goto Error;


Error:
    Assert (ERROR_SUCCESS != ec);
Exit:
    MemFree(pPrinterInfo);
    pPrinterInfo = NULL;
    if (ERROR_SUCCESS != ec)
    {
        SetLastError(ec);
        return FALSE;
    }
   return (ERROR_SUCCESS == ec);

}

BOOL
GetFirstLocalFaxPrinterName(
    OUT LPTSTR lptstrPrinterName,
    IN DWORD dwMaxLenInChars)
{
	return GetFirstFaxPrinterName(lptstrPrinterName,dwMaxLenInChars,PRINTER_ENUM_LOCAL);
}

BOOL
GetFirstRemoteFaxPrinterName(
    OUT LPTSTR lptstrPrinterName,
    IN DWORD dwMaxLenInChars)
{
	return GetFirstFaxPrinterName(lptstrPrinterName,dwMaxLenInChars,PRINTER_ENUM_CONNECTIONS);
}


//
//
// Function:    GetPrinterInfo
// Description: Returns a pointer to PRINTER_INFO_2 of the specified printer name.
//              If the printer was not found or there was an error than the function
//              return NULL. To get extended error information, call GetLastError().
//
// Remarks:     The caller must release the allocated memory with MemFree()
//
// Args:        LPTSTR lptstrPrinterName : The name of the printer.
//
// Author:      AsafS



PPRINTER_INFO_2
GetFaxPrinterInfo(
    LPCTSTR lptstrPrinterName
    )
{
    DEBUG_FUNCTION_NAME(TEXT("GetPrinterInfo"))
    DWORD ec = ERROR_SUCCESS;

    PPRINTER_INFO_2 pPrinterInfo = NULL;
    DWORD dwNeededSize = 0;
    BOOL result = FALSE;

    HANDLE hPrinter = NULL;

    if (!OpenPrinter(
        (LPTSTR) lptstrPrinterName,
        &hPrinter,
        NULL))
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("A printer with %s name was not found (ec: %ld)."),
            lptstrPrinterName,
            GetLastError()
            );
        goto Exit;
    }


    result = GetPrinter(
        hPrinter,
        2,
        NULL,
        0,
        &dwNeededSize
        );

    if (!result)
    {
        if ( (ec = GetLastError()) != ERROR_INSUFFICIENT_BUFFER )
        {
            DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetPrinter return an unexpected result or error (ec: %ld)."),
            ec
            );
            goto Exit;
        }
    }

    pPrinterInfo = (PPRINTER_INFO_2) MemAlloc(dwNeededSize);
    if (!pPrinterInfo)
    {
        ec = ERROR_NOT_ENOUGH_MEMORY;
        goto Exit;
    }

    result = GetPrinter(
        hPrinter,
        2,
        (LPBYTE) pPrinterInfo,
        dwNeededSize,
        &dwNeededSize
    );

    if (!result)
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetPrinter failed in second call (ec: %ld)."),
            ec
            );
        MemFree(pPrinterInfo);
        pPrinterInfo = NULL;
            goto Exit;
    }

Exit:
    SetLastError(ec);

    if (hPrinter)
    {
        if (!ClosePrinter(hPrinter))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("ClosePrinter failed with %ld"),
                GetLastError ()
                );
        }
    }
    return pPrinterInfo;
}   // GetFaxPrinterInfo


///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  IsPrinterFaxPrinter
//
//  Purpose:        determines whether the input printer name is a valid
//                  fax printer by checking the driver name
//
//  Params:
//                  LPTSTR PrinterName - printer name to evaluate
//
//  Return Value:
//                  TRUE - printer is a valid fax printer
//                  FALSE - otherwise
//
//  Author:
//                  Mooly Beery (MoolyB) 21-Aug-2001
///////////////////////////////////////////////////////////////////////////////////////
BOOL IsPrinterFaxPrinter(LPTSTR PrinterName)
{
    DWORD Rval = FALSE;
    LPPRINTER_INFO_2 lpPrinterInfo = NULL;

    DEBUG_FUNCTION_NAME(TEXT("IsPrinterFaxPrinter"))

    lpPrinterInfo = GetFaxPrinterInfo(PrinterName);
    if (lpPrinterInfo==NULL)
    {
        DebugPrintEx(DEBUG_ERR,_T("GetFaxPrinterInfo failed with %ld."),GetLastError());
        return FALSE;
    }

    if (_tcscmp( lpPrinterInfo->pDriverName, FAX_DRIVER_NAME ) == 0) 
    {
        Rval = TRUE;
    } 
    else 
    {
        Rval = FALSE;
    }

    MemFree( lpPrinterInfo );
    return Rval;
}


DWORD
IsLocalFaxPrinterInstalled(
    LPBOOL lpbLocalFaxPrinterInstalled
    )
/*++

Routine name : IsLocalFaxPrinterInstalled

Routine description:

    Checks if a local fax printer is installed and not marked for deletion.

Author:

    Eran Yariv (EranY), Jul, 2000

Arguments:

    lpbLocalFaxPrinterInstalled   [out]    - Result flag

Return Value:

    Standard Win32 error code

--*/
{
    TCHAR tszPrinterName[MAX_PATH * 3] = TEXT("\0");
    DWORD dwErr;
    PPRINTER_INFO_2 pi2 = NULL;
    DEBUG_FUNCTION_NAME(TEXT("IsLocalFaxPrinterInstalled"))

    if (!GetFirstLocalFaxPrinterName (tszPrinterName, sizeof (tszPrinterName) / sizeof (tszPrinterName[0])))
    {
        dwErr = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetFirstLocalFaxPrinterName failed with %ld."),
            dwErr);
        if (ERROR_PRINTER_NOT_FOUND == dwErr)
        {
            //
            // Local fax printer is not installed
            //
            *lpbLocalFaxPrinterInstalled = FALSE;
            return ERROR_SUCCESS;
        }
        Assert (ERROR_SUCCESS != dwErr);
        return dwErr;
    }
    //
    // Local fax printer is installed
    // Let's see if it is PRINTER_STATUS_PENDING_DELETION.
    // If so, let's return FALSE because the printer will be gone soon.
    // If someone will call AddPrinter because we return FALSE, it's OK. See AddPrinter() remarks.
    //
    Assert (lstrlen (tszPrinterName));
    pi2 = GetFaxPrinterInfo (tszPrinterName);
    if (!pi2)
    {
        dwErr = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetFaxPrinterInfo failed with %ld."),
            dwErr);
        //
        // Printer is installed but somehow I can't get it's info - weird
        //
        Assert (ERROR_SUCCESS != dwErr);
        return dwErr;
    }
    if ((pi2->Status) & PRINTER_STATUS_PENDING_DELETION)
    {
        //
        // Printer is there but is marked for deletion
        //
        DebugPrintEx(
            DEBUG_MSG,
            TEXT("Printer %s is installed but marked for deletion. Reported as non-existant"),
            tszPrinterName);
        *lpbLocalFaxPrinterInstalled = FALSE;
    }
    else
    {
        *lpbLocalFaxPrinterInstalled = TRUE;
    }
    MemFree (pi2);
    return ERROR_SUCCESS;
}   // IsLocalFaxPrinterInstalled


DWORD
IsLocalFaxPrinterShared (
    LPBOOL lpbShared
    )
/*++

Routine name : IsLocalFaxPrinterShared

Routine description:

    Detects if the local fax printer is shared

Author:

    Eran Yariv (EranY), Jul, 2000

Arguments:

    lpbShared      [out]    - Sharing flag

Return Value:

    Standard Win32 error code

--*/
{
    TCHAR tszPrinterName[MAX_PATH * 3];
    DWORD dwErr;
    PPRINTER_INFO_2 pInfo2;
    DEBUG_FUNCTION_NAME(TEXT("IsLocalFaxPrinterShared"))

    if (!GetFirstLocalFaxPrinterName (tszPrinterName, sizeof (tszPrinterName) / sizeof (tszPrinterName[0])))
    {
        dwErr = GetLastError ();
        if (ERROR_PRINTER_NOT_FOUND == dwErr)
        {
            //
            // Local fax printer is not installed
            //
            *lpbShared = FALSE;
            return ERROR_SUCCESS;
        }
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetFirstLocalFaxPrinterName failed with %ld."),
            dwErr);
        return dwErr;
    }
    pInfo2 = GetFaxPrinterInfo (tszPrinterName);
    if (!pInfo2)
    {
        dwErr = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetFaxPrinterInfo failed with %ld."),
            dwErr);
        return dwErr;
    }
    *lpbShared = ((pInfo2->Attributes) & PRINTER_ATTRIBUTE_SHARED) ? TRUE : FALSE;
    MemFree (pInfo2);
    return ERROR_SUCCESS;
}   // IsLocalFaxPrinterShared

DWORD
AddLocalFaxPrinter (
    LPCTSTR lpctstrPrinterName,
    LPCTSTR lpctstrPrinterDescription
)
/*++

Routine name : AddLocalFaxPrinter

Routine description:

    Adds a local fax printer

Author:

    Eran Yariv (EranY), Jul, 2000

Arguments:

    lpctstrPrinterName            [in]     - Printer name
    lpctstrPrinterDescription     [in]     - Printer comments (description)

Return Value:

    Standard Win32 error code

Remarks:

    This function should not be called if a local fax printer is installed.

--*/
{
    DWORD           ec = ERROR_SUCCESS;
    HANDLE          hPrinter = NULL;
    PRINTER_INFO_2  PrinterInfo2 = {0};
    BOOL            bLocalPrinterInstalled;
	BOOL            bIsFaxPrinterShared = FALSE;
    DWORD           dwAttributes = PRINTER_ATTRIBUTE_LOCAL | PRINTER_ATTRIBUTE_FAX;
    LPCTSTR         lpctstrShareName = NULL;

    DEBUG_FUNCTION_NAME(TEXT("AddLocalFaxPrinter"))

    ec = IsLocalFaxPrinterInstalled (&bLocalPrinterInstalled);
    if (ERROR_SUCCESS == ec && bLocalPrinterInstalled)
    {
        //
        // Local fax printer already installed
        //
        return ec;
    }
    //
    // Check if this is SKU supports fax sharing.
    // If it does not - do not share printer.
    //
    if (IsFaxShared())
    {
		// We can share the printer on this SKU. Let's check if Fax is 
		// installed in Sharing enabled mode.
		HKEY hFaxKey = OpenRegistryKey(HKEY_LOCAL_MACHINE,REGKEY_FAX_SETUP,FALSE,KEY_READ);
		if (hFaxKey)
		{
			if (GetRegistryDword(hFaxKey,REGVAL_IS_SHARED_FAX_PRINTER))
			{
				DebugPrintEx(DEBUG_MSG, TEXT("Fax is installed in a mode that enables sharing"));
				bIsFaxPrinterShared = TRUE;
			}
			else
			{
				DebugPrintEx(DEBUG_MSG, TEXT("Fax is installed in a mode that does not enable sharing"));
			}
			RegCloseKey(hFaxKey);
		}
		else
		{
			DebugPrintEx(DEBUG_WRN, TEXT("Failed to open REGKEY_FAX_SETUP, printer won't be shared (ec=%d)"),GetLastError());
		}
    }

	if (bIsFaxPrinterShared)
	{
		dwAttributes |= PRINTER_ATTRIBUTE_SHARED;
		lpctstrShareName = lpctstrPrinterName;
	}

    PrinterInfo2.pServerName        = NULL;
    PrinterInfo2.pPrinterName       = (LPTSTR) lpctstrPrinterName;
    PrinterInfo2.pPortName          = FAX_MONITOR_PORT_NAME;
    PrinterInfo2.pDriverName        = FAX_DRIVER_NAME;
    PrinterInfo2.pPrintProcessor    = TEXT("WinPrint");
    PrinterInfo2.pDatatype          = TEXT("RAW");
    PrinterInfo2.Attributes         = dwAttributes;
    PrinterInfo2.pShareName         = (LPTSTR) lpctstrShareName;
    PrinterInfo2.pComment           = (LPTSTR) lpctstrPrinterDescription;

    hPrinter = AddPrinter(NULL,
                          2,
                          (LPBYTE)&PrinterInfo2);

    if (hPrinter == NULL)
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("AddPrinter failed with %ld."),
            ec);
    }
    else
    {
        if (IsFaxShared() && bIsFaxPrinterShared)
        {
            //
            // Publish the printer in the DS
            //
            PRINTER_INFO_7 pi7;
            pi7.pszObjectGUID = NULL;
            pi7.dwAction = DSPRINT_PUBLISH;

            if (!SetPrinter(hPrinter,       // handle to printer object
                            7,              // information level
                            (LPBYTE)&pi7,   // printer data buffer
                            0               // printer-state command
                            ))
            {
                DebugPrintEx(DEBUG_ERR,TEXT("SetPrinter failed with %ld."),GetLastError());
                //
                // In any case we do not want to fail the whole setup just because we were
                // unable to publish the printer on the DS.
                // common error codes are:
                //
                // ERROR_IO_PENDING means SetPrinter is trying to publish the printer in the 
                // background, we do not wait for it to succeed/fail.
                //
                // ERROR_DS_UNAVAILABLE means the DS is not accesible.
                //
            }
        }
        if (!ClosePrinter(hPrinter))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("ClosePrinter failed with %ld."),
                GetLastError ());
        }
        hPrinter = NULL;
        RefreshPrintersAndFaxesFolder();
    }
    return ec;
}   // AddLocalFaxPrinter


//*********************************************************************************
//* Name:   ParamTagsToString()
//* Author: Ronen Barenboim
//* Date:   March 23, 1999
//*********************************************************************************
//* DESCRIPTION:
//*     Writes a collection of tag parameters and values in the format of a parameter
//*     string into a caller provided buffer.
//      Reports the size of the tagged string.
//* PARAMETERS:
//*     lpTagMap
//*         A pointer to an array of FAX_TAG_MAP_ENTRY structures that contain the
//*         tag names and values.
//*     dwTagCount
//*         The number of entries in the tag map array.
//*     lpTargetBuf
//*         A pointer to a buffer where the tag value string will be placed.
//*         The size of this buffer must be big enough to hold the resulting string
//          including a terminating NULL char.
//*         If this parameter is NULL the function will not generate the tag value
//*         string and only report its size in *lpdwSize;
//*     lpdwSize
//*         A pointer to a DWORD that will accept the size of the resulting
//*         tagged string in BYTES. The size DOES NOT INCLUDE the terminating NULL char.
//* RETURN VALUE:
//*     NONE
//* REMARKS:
//*     The format of the resulting string is:
//*         Tag1Value1Tag2Value2....TagNValueN'\0'
//*********************************************************************************
void
ParamTagsToString(
    FAX_TAG_MAP_ENTRY * lpTagMap,
    DWORD dwTagCount,
    LPTSTR lpTargetBuf,
    LPDWORD lpdwSize)
{
    DWORD index;
    LPTSTR p;

    DWORD   dwSize = 0;

    //
    // Calculate string size WITHOUT termianting NULL
    //
    for (index=0; index <dwTagCount; index++)
    {
         if (lpTagMap[index].lptstrValue && !IsEmptyString(lpTagMap[index].lptstrValue))
         {
            dwSize += _tcslen(lpTagMap[index].lptstrTagName)*sizeof(TCHAR) + _tcslen(lpTagMap[index].lptstrValue)*sizeof(TCHAR);
        }
    }

    if  (lpTargetBuf)
    {
        //
        //  Check that size of the Target Buffer is not smaller then the calculated size
        //
        Assert(dwSize <= *lpdwSize);
        //
        // Assemble fax job parameters into a single tagged string at the target buffer
        // there is a terminating NULL at the end of the string !!!
        //
        p=lpTargetBuf;

        for (index=0; index < dwTagCount; index++)
        {
            if (lpTagMap[index].lptstrValue && !IsEmptyString(lpTagMap[index].lptstrValue))
            {
                _tcscpy(p, lpTagMap[index].lptstrTagName);
                p += _tcslen(p); // The value string runs over the NULL char of the tag string
                _tcscpy(p, lpTagMap[index].lptstrValue);
                p += _tcslen(p);
            }
        }
    }
    //
    //  Return the size of the string
    //
    *lpdwSize = dwSize;
}

HRESULT
RefreshPrintersAndFaxesFolder ()
/*++

Routine name : RefreshPrintersAndFaxesFolder

Routine description:

    Notifies the 'Printers and Faxes' shell folder to refresh itself

Author:

    Eran Yariv (EranY), Mar, 2001

Arguments:


Return Value:

    Standard HRESULT

--*/
{
    HRESULT hr = E_FAIL;
    LPITEMIDLIST pidlPF = NULL;
    LPMALLOC pShellMalloc = NULL;
    DEBUG_FUNCTION_NAME(TEXT("RefreshPrintersAndFaxesFolder"));

    //
    // First obtail the shell alloctaor
    //
    hr = SHGetMalloc (&pShellMalloc);
    if (SUCCEEDED(hr))
    {
        //
        // Get the printer's folder PIDL
        //
        hr = SHGetSpecialFolderLocation(NULL, CSIDL_PRINTERS, &pidlPF);

        if (SUCCEEDED(hr))
        {
            //
            // Requets refresh
            //
            SHChangeNotify(SHCNE_UPDATEITEM, SHCNF_IDLIST | SHCNF_FLUSH | SHCNF_FLUSHNOWAIT, pidlPF, NULL);
            //
            // Release the returned PIDL by using the shell allocator
            //
            pShellMalloc->Free(pidlPF);
        }
        //
        // Release the shell allocator
        //
        pShellMalloc->Release();
    }
    return hr;
}   // RefreshPrintersAndFaxesFolder

#ifdef UNICODE

PPRINTER_NAMES
CollectPrinterNames (
    LPDWORD lpdwNumPrinters,
    BOOL    bFilterOutFaxPrinters
)
/*++

Routine name : CollectPrinterNames

Routine description:

    Creates a list of printer names for all visible local and remote printers

Author:

    Eran Yariv (EranY), Apr, 2001

Arguments:

    lpdwNumPrinters       [out]    - Number of elements in the list
    bFilterOutFaxPrinters [in]     - If TRUE, fax printers are not returned in the list

Return Value:

    Allocated list of printers names. If NULL, an error has occurred - check LastError.
    Use ReleasePrinterNames() to release allocated value.

--*/
{
    DWORD dwPrinter;
    DWORD dwNumPrinters;
    DWORD dwIndex = 0;
    BOOL  bSuccess = FALSE;
    PPRINTER_INFO_2 pPrinterInfo = NULL;
    PPRINTER_NAMES pRes = NULL;
    DEBUG_FUNCTION_NAME(TEXT("ReleasePrinterNames"));

    SetLastError (ERROR_SUCCESS);
    pPrinterInfo = (PPRINTER_INFO_2) MyEnumPrinters(NULL,               // Local machine
                                                    2,                  // Level 2
                                                    &dwNumPrinters,     // [out] Number of printers found
                                                    0                   // Both local and remote
                                                    );
    if (!pPrinterInfo)
    {
        //
        // Either error on no printers
        //
        DWORD ec = GetLastError();
        if (ERROR_SUCCESS == ec)
        {
            //
            // Not an error - no printers
            //
            SetLastError (ERROR_PRINTER_NOT_FOUND);
            return NULL;
        }
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("MyEnumPrinters() failed (ec: %ld)"),
            ec);
        return NULL;
    }

    Assert (dwNumPrinters > 0);

    if (bFilterOutFaxPrinters)
    {
        //
        // Counter number of printers w/out the fax printer(s)
        //
        DWORD dwNewPrintersCount = 0;
        for (dwPrinter = 0; dwPrinter < dwNumPrinters; dwPrinter++)
        {
            if (_tcscmp(pPrinterInfo[dwPrinter].pDriverName,FAX_DRIVER_NAME))
            {
                //
                // Not a fax printer
                //
                dwNewPrintersCount++;
            }
        }
        if (!dwNewPrintersCount)
        {
            //
            // Only fax printers - return NULL
            //
            SetLastError (ERROR_PRINTER_NOT_FOUND);
            goto exit;
        }
        *lpdwNumPrinters = dwNewPrintersCount;
    }
    else
    {
        *lpdwNumPrinters = dwNumPrinters;
    }
    pRes = (PPRINTER_NAMES)MemAlloc (sizeof (PRINTER_NAMES) * (*lpdwNumPrinters));
    if (!pRes)
    {
        goto exit;
    }
    memset (pRes, 0, sizeof (PRINTER_NAMES) * (*lpdwNumPrinters));

    for (dwPrinter = 0; dwPrinter < dwNumPrinters; dwPrinter++)
    {
        if (bFilterOutFaxPrinters && !_tcscmp(pPrinterInfo[dwPrinter].pDriverName,FAX_DRIVER_NAME))
        {
            //
            // This is a fax printer and filtering is on - skip it
            //
            continue;
        }

        pRes[dwIndex].lpcwstrDisplayName = StringDup (pPrinterInfo[dwPrinter].pPrinterName);
        if (!pRes[dwIndex].lpcwstrDisplayName)
        {
            goto exit;
        }
        if (pPrinterInfo[dwPrinter].pServerName)
        {
            //
            // Remote printer
            //
			WCHAR wszShare[MAX_PATH] = {0};
            //
            // Server name must begin with '\\'
            //
            Assert (lstrlen (pPrinterInfo[dwPrinter].pServerName) > 2)
            Assert ((TEXT('\\') == pPrinterInfo[dwPrinter].pServerName[0]) &&
                    (TEXT('\\') == pPrinterInfo[dwPrinter].pServerName[1]));
            //
            // Share name cannot be NULL or empty string
            //
            Assert (pPrinterInfo[dwPrinter].pShareName && lstrlen(pPrinterInfo[dwPrinter].pShareName));
            //
            // Compose UNC path to print share
            //
            if (0 > _snwprintf (wszShare,
                                ARR_SIZE(wszShare) -1,
                                TEXT("%s\\%s"),
                                pPrinterInfo[dwPrinter].pServerName,
                                pPrinterInfo[dwPrinter].pShareName))
            {
                //
                // Buffer too small
                //
                SetLastError (ERROR_GEN_FAILURE);
                goto exit;
            }
            pRes[dwIndex].lpcwstrPath = StringDup (wszShare);
        }
        else
        {
            //
            // Local printer
            //
            pRes[dwIndex].lpcwstrPath = StringDup (pPrinterInfo[dwPrinter].pPrinterName);
        }
        if (!pRes[dwIndex].lpcwstrPath)
        {
            goto exit;
        }
        dwIndex++;
    }
    Assert (dwIndex == *lpdwNumPrinters);
    bSuccess = TRUE;

exit:
    MemFree (pPrinterInfo);
    if (!bSuccess)
    {
        //
        // Free data and return NULL
        //
        if (pRes)
        {
            ReleasePrinterNames (pRes, *lpdwNumPrinters);
            pRes = NULL;
        }
    }
    return pRes;
}   // CollectPrinterNames

VOID
ReleasePrinterNames (
    PPRINTER_NAMES pNames,
    DWORD          dwNumPrinters
)
/*++

Routine name : ReleasePrinterNames

Routine description:

    Releases the list of printer names returned by CollectPrinterNames().

Author:

    Eran Yariv (EranY), Apr, 2001

Arguments:

    pNames         [in]     - List of printer names
    dwNumPrinters  [in]     - Number of elements in the list

Return Value:

    None.

--*/
{
    DWORD dw;
    DEBUG_FUNCTION_NAME(TEXT("ReleasePrinterNames"));

    if (!dwNumPrinters)
    {
        return;
    }
    Assert (pNames);
    for (dw = 0; dw < dwNumPrinters; dw++)
    {
        MemFree ((PVOID)(pNames[dw].lpcwstrDisplayName));
        pNames[dw].lpcwstrDisplayName = NULL;
        MemFree ((PVOID)(pNames[dw].lpcwstrPath));
        pNames[dw].lpcwstrPath = NULL;
    }
    MemFree ((PVOID)pNames);
}   // ReleasePrinterNames

LPCWSTR
FindPrinterNameFromPath (
    PPRINTER_NAMES pNames,
    DWORD          dwNumPrinters,
    LPCWSTR        lpcwstrPath
)
{
    DWORD dw;
    DEBUG_FUNCTION_NAME(TEXT("FindPrinterNameFromPath"));

    if (!pNames || !dwNumPrinters)
    {
        return NULL;
    }
    if (!lpcwstrPath)
    {
        return NULL;
    }
    for (dw = 0; dw < dwNumPrinters; dw++)
    {
        if (!lstrcmpi (pNames[dw].lpcwstrPath, lpcwstrPath))
        {
            return pNames[dw].lpcwstrDisplayName;
        }
    }
    return NULL;
}   // FindPrinterNameFromPath

LPCWSTR
FindPrinterPathFromName (
    PPRINTER_NAMES pNames,
    DWORD          dwNumPrinters,
    LPCWSTR        lpcwstrName
)
{
    DWORD dw;
    DEBUG_FUNCTION_NAME(TEXT("FindPrinterPathFromName"));

    if (!pNames || !dwNumPrinters)
    {
        return NULL;
    }
    if (!lpcwstrName)
    {
        return NULL;
    }
    for (dw = 0; dw < dwNumPrinters; dw++)
    {
        if (!lstrcmpi (pNames[dw].lpcwstrDisplayName, lpcwstrName))
        {
            return pNames[dw].lpcwstrPath;
        }
    }
    return NULL;
}   // FindPrinterPathFromName

#endif // UNICODE

BOOL
VerifyPrinterIsOnline (
    LPCTSTR lpctstrPrinterName
)
/*++

Routine name : VerifyPrinterIsOnline

Routine description:

    Verifies a printer is online and shared

Author:

    Eran Yariv (EranY), Apr, 2001

Arguments:

    lpctstrPrinterName   [in]     - Printer name

Return Value:

    TRUE if printer is online and shared, FALSE otherwise.

--*/
{
    HANDLE hPrinter = NULL;
    PRINTER_DEFAULTS pd = {0};
    DEBUG_FUNCTION_NAME(TEXT("VerifyPrinterIsOnline"));

    Assert (lpctstrPrinterName);
    //
    // According to Mark Lawrence (NT PRINT), only by opening the printer in admistrator mode, we actually hit the wire.
    //
    pd.DesiredAccess = PRINTER_ACCESS_ADMINISTER;
    if (!OpenPrinter ((LPTSTR)lpctstrPrinterName, 
                      &hPrinter,
                      &pd))
    {
        DWORD dwRes = GetLastError ();
        if (ERROR_ACCESS_DENIED == dwRes)
        {
            //
            // Printer is there - we just can't admin it.
            //
            DebugPrintEx(
                DEBUG_MSG,
                TEXT("OpenPrinter(%s) failed with ERROR_ACCESS_DENIED - Printer is there - we just can't admin it"),
                lpctstrPrinterName);
            return TRUE;
        }
        if (ERROR_INVALID_PRINTER_NAME  == dwRes)
        {
            //
            // Printer is deleted
            //
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("OpenPrinter(%s) failed with ERROR_INVALID_PRINTER_NAME - Printer is deleted"),
                lpctstrPrinterName);
            return FALSE;
        }
        if (RPC_S_SERVER_UNAVAILABLE == dwRes)
        {
            //
            // Printer is not shared / server is unreachable
            //
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("OpenPrinter(%s) failed with RPC_SERVER_UNAVAILABLE - Printer is not shared / server is unreachable"),
                lpctstrPrinterName);
            return FALSE;
        }
        else
        {
            //
            // Any other error - assume printer is not valid
            //
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("OpenPrinter(%s) failed with %ld - assuming printer is not valid"),
                lpctstrPrinterName,
                dwRes);
            return FALSE;
        }
    }
    //
    // Printer succesfully opened - it's online
    //
    DebugPrintEx(
        DEBUG_MSG,
        TEXT("OpenPrinter(%s) succeeded - Printer is there"),
        lpctstrPrinterName);
    ClosePrinter (hPrinter);
    return TRUE;
}   // VerifyPrinterIsOnline


VOID
FaxPrinterProperty(DWORD dwPage)
/*++

Routine name : FaxPrinterProperty

Routine description:

    Opens fax printer properties sheet

Arguments:

    dwPage   [in] - Initial page number

Return Value:

    none

--*/
{
    HWND hWndFaxMon = NULL;
    DEBUG_FUNCTION_NAME(TEXT("FaxPrinterProperty"));

    hWndFaxMon = FindWindow(FAXSTAT_WINCLASS, NULL);
    if (hWndFaxMon) 
    {
        SetForegroundWindow(hWndFaxMon);
        SendMessage(hWndFaxMon, WM_FAXSTAT_PRINTER_PROPERTY, dwPage, 0);
    }
    else
    {
        DebugPrintEx(DEBUG_ERR, TEXT("FindWindow(FAXSTAT_WINCLASS) failed with %d"), GetLastError());
    }
} // FaxPrinterProperty

DWORD
SetLocalFaxPrinterSharing (
    BOOL bShared
    )
/*++

Routine name : SetLocalFaxPrinterSharing

Routine description:

    Shares or un-shares the local fax printer

Author:

    Eran Yariv (EranY), Jul, 2001

Arguments:

    bShared      [in]     - Share the printer?

Return Value:

    Standard Win32 error code

--*/
{
    TCHAR tszFaxPrinterName[MAX_PATH *3];
    HANDLE hPrinter = NULL;
    BYTE  aBuf[4096];
    PRINTER_INFO_2 *pInfo = (PRINTER_INFO_2 *)aBuf;
    PRINTER_DEFAULTS pd = {0};
    DWORD dwRequiredSize;
    DWORD dwRes = ERROR_SUCCESS;

    DEBUG_FUNCTION_NAME(TEXT("SetLocalFaxPrinterSharing"));

    if (!GetFirstLocalFaxPrinterName (tszFaxPrinterName, ARR_SIZE(tszFaxPrinterName)))
    {
        dwRes = GetLastError ();
        DebugPrintEx(DEBUG_ERR, TEXT("GetFirstLocalFaxPrinterName failed with %d"), dwRes);
        return dwRes;
    }
    pd.DesiredAccess = PRINTER_ALL_ACCESS;
    if (!OpenPrinter (tszFaxPrinterName, &hPrinter, &pd))
    {
        dwRes = GetLastError ();
        DebugPrintEx(DEBUG_ERR, TEXT("OpenPrinter failed with %d"), dwRes);
        return dwRes;
    }
    if (!GetPrinter (hPrinter,
                     2,
                     (LPBYTE)pInfo,
                     sizeof (aBuf),
                     &dwRequiredSize))
    {
        dwRes = GetLastError ();
        if (ERROR_INSUFFICIENT_BUFFER != dwRes)
        {
            //
            // Real error
            //
            DebugPrintEx(DEBUG_ERR, TEXT("GetPrinter failed with %d"), dwRes);
            goto exit;
        }
        pInfo = (PRINTER_INFO_2 *)MemAlloc (dwRequiredSize);
        if (!pInfo)
        {
            dwRes = GetLastError ();
            DebugPrintEx(DEBUG_ERR, TEXT("Failed to allocate %d bytes"), dwRequiredSize);
            goto exit;
        }
        if (!GetPrinter (hPrinter,
                         2,
                         (LPBYTE)pInfo,
                         dwRequiredSize,
                         &dwRequiredSize))
        {
            dwRes = GetLastError ();
            DebugPrintEx(DEBUG_ERR, TEXT("GetPrinter failed with %d"), dwRes);
            goto exit;
        }
    }
    dwRes = ERROR_SUCCESS;
    if (bShared)
    {
        if (pInfo->Attributes & PRINTER_ATTRIBUTE_SHARED)
        {
            //
            // Printer already shared
            //
            goto exit;
        }
        //
        // Set the sharing bit
        //
        pInfo->Attributes |= PRINTER_ATTRIBUTE_SHARED;
    }
    else
    {
        if (!(pInfo->Attributes & PRINTER_ATTRIBUTE_SHARED))
        {
            //
            // Printer already un-shared
            //
            goto exit;
        }
        //
        // Clear the sharing bit
        //
        pInfo->Attributes &= ~PRINTER_ATTRIBUTE_SHARED;
    }
    if (!SetPrinter (hPrinter,
                     2,
                     (LPBYTE)pInfo,
                     0))
    {
        dwRes = GetLastError ();
        DebugPrintEx(DEBUG_ERR, TEXT("SetPrinter failed with %d"), dwRes);
        goto exit;
    }

    Assert (ERROR_SUCCESS == dwRes);

exit:

    if (hPrinter)
    {
        ClosePrinter (hPrinter);
    }
    if ((LPBYTE)pInfo != aBuf)
    {
        MemFree (pInfo);
    }
    return dwRes;
}   // SetLocalFaxPrinterSharing

 
DWORD
AddOrVerifyLocalFaxPrinter ()
/*++

Routine name : AddOrVerifyLocalFaxPrinter

Routine description:

    This function verifies a local fax printer is installed.
    If not installed, this function installs one.

Author:

    Eran Yariv (EranY), June, 2002

Arguments:

    None.

Return Value:

    Standard Win32 error code

--*/
{
    DWORD dwRes;
    BOOL  bLocalFaxPrinterInstalled;
    BOOL  bFaxInstalled;
    DEBUG_FUNCTION_NAME(TEXT("AddOrVerifyLocalFaxPrinter"));
    
    dwRes = IsFaxInstalled (&bFaxInstalled);
    if (ERROR_SUCCESS != dwRes)
    {
        return dwRes;
    }    
    if (!bFaxInstalled)
    {
        //
        // The fax product (optional component) is not installed on the system.
        // Bail out here
        //
        return ERROR_SUCCESS;
    }
    dwRes = IsLocalFaxPrinterInstalled(&bLocalFaxPrinterInstalled);
    if (ERROR_SUCCESS != dwRes)
    {
        //
        // Can't really tell if local fax printer is installed.
        // Better install anyway, just to be on the safe side.
        //
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("IsLocalFaxPrinterInstalled failed with %ld"),
            dwRes);
        bLocalFaxPrinterInstalled = FALSE;
    }
    if (bLocalFaxPrinterInstalled)
    {
        //
        // Nothing more to do here
        //
        return ERROR_SUCCESS;
    }
    dwRes = AddLocalFaxPrinter (FAX_PRINTER_NAME, NULL);
    if (ERROR_SUCCESS != dwRes)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("AddLocalFaxPrinter failed with %ld"),
            dwRes);
    }
    return dwRes;
}   // AddOrVerifyLocalFaxPrinter
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\rpcdbg.cpp ===
#include <windows.h>
#include <rpc.h>
#include <tchar.h>

#include "faxutil.h"

#ifdef DEBUG
VOID
DumpRPCExtendedStatus ()
/*++

Routine Description:

    Dumps the extended RPC error status list to the debug console.
    This function only works in debug builds.
    To enable RPC extended status on the machine do the following:
        1.  run mmc.exe
        2.  Goto File | Add/Remove Snap-in...
        3.  Press "Add..." button
        4.  Select "Group Policy" and Press "Add"
        5.  Select "Local Computer" and press "Finish"
        6.  Press "Close"
        7.  Press "Ok"
        8.  Expand Local Computer Policy | Computer Configuration | Administrative Templates | System | 
                                        Remote Procedure Call
        9.  Select the properties of "Propagation of Extended Error Information"
        10. Select "Enabled"
        11. In the "Propagation of Extended Error Information" combo-box, select "On".
        12. In the "...Exceptions" edit-box, leave the text empty.
        13. Press "Ok".
        14. Close MMC (no need to save anything).

Arguments:

    None.

Return Value:

    None.
    
Remarks:

    This function should be called as soon as an error / exception 
    is returned from calling an RPC function.    

--*/
{
    DEBUG_FUNCTION_NAME(TEXT("DumpRPCExtendedStatus"));


typedef RPC_STATUS (RPC_ENTRY *PRPCERRORSTARTENUMERATION) (RPC_ERROR_ENUM_HANDLE *);
typedef RPC_STATUS (RPC_ENTRY *PRPCERRORGETNEXTRECORD)    (RPC_ERROR_ENUM_HANDLE *, BOOL, RPC_EXTENDED_ERROR_INFO *);
typedef RPC_STATUS (RPC_ENTRY *PRPCERRORENDENUMERATION)   (RPC_ERROR_ENUM_HANDLE *);

    PRPCERRORSTARTENUMERATION pfRpcErrorStartEnumeration = NULL;
    PRPCERRORGETNEXTRECORD    pfRpcErrorGetNextRecord = NULL;
    PRPCERRORENDENUMERATION   pfRpcErrorEndEnumeration = NULL;
    HMODULE hMod = NULL;
    

    if (!IsWinXPOS())
    {
        //
        // RPC Extended errors are not supported in down-level clients
        //
        return;
    }
    
    hMod = LoadLibrary (TEXT("rpcrt4.dll"));
    if (!hMod)
    {
        DebugPrintEx(DEBUG_ERR, _T("LoadLibrary(rpcrt4.dll) failed with %ld"), GetLastError ());
        return;
    }
    pfRpcErrorStartEnumeration = (PRPCERRORSTARTENUMERATION)GetProcAddress (hMod, "RpcErrorStartEnumeration");
    pfRpcErrorGetNextRecord    = (PRPCERRORGETNEXTRECORD)   GetProcAddress (hMod, "RpcErrorGetNextRecord");
    pfRpcErrorEndEnumeration   = (PRPCERRORENDENUMERATION)  GetProcAddress (hMod, "RpcErrorEndEnumeration");
    if (!pfRpcErrorStartEnumeration ||
        !pfRpcErrorGetNextRecord    ||
        !pfRpcErrorEndEnumeration)
    {        
        DebugPrintEx(DEBUG_ERR, _T("Can't link with rpcrt4.dll - failed with %ld"), GetLastError ());
        FreeLibrary (hMod);
        return;
    }
 
    RPC_STATUS Status2;
    RPC_ERROR_ENUM_HANDLE EnumHandle;

    Status2 = pfRpcErrorStartEnumeration(&EnumHandle);
    if (Status2 == RPC_S_ENTRY_NOT_FOUND)
    {
        DebugPrintEx(DEBUG_ERR, _T("RPC_S_ENTRY_NOT_FOUND returned from RpcErrorStartEnumeration."));
        FreeLibrary (hMod);
        return;
    }
    else if (Status2 != RPC_S_OK)
    {
        DebugPrintEx(DEBUG_ERR, _T("Couldn't get EEInfo: %d"), Status2);
        FreeLibrary (hMod);
        return;
    }
    else
    {
        RPC_EXTENDED_ERROR_INFO ErrorInfo;
        BOOL Result;
        BOOL CopyStrings = TRUE;
        BOOL fUseFileTime = TRUE;
        SYSTEMTIME *SystemTimeToUse;
        SYSTEMTIME SystemTimeBuffer;

        while (Status2 == RPC_S_OK)
        {
            ErrorInfo.Version = RPC_EEINFO_VERSION;
            ErrorInfo.Flags = 0;
            ErrorInfo.NumberOfParameters = 4;
            if (fUseFileTime)
            {
                ErrorInfo.Flags |= EEInfoUseFileTime;
            }

            Status2 = pfRpcErrorGetNextRecord(&EnumHandle, CopyStrings, &ErrorInfo);
            if (Status2 == RPC_S_ENTRY_NOT_FOUND)
            {
                break;
            }
            else if (Status2 != RPC_S_OK)
            {
                DebugPrintEx(DEBUG_ERR, _T("Couldn't finish enumeration: %d"), Status2);
                break;
            }
            else
            {
                int i;

                if (ErrorInfo.ComputerName)
                {
                    DebugPrintEx(DEBUG_MSG, _T("ComputerName is %s"), ErrorInfo.ComputerName);
                    if (CopyStrings)
                    {
                        Result = HeapFree(GetProcessHeap(), 0, ErrorInfo.ComputerName);
                        Assert(Result);
                    }
                }
                DebugPrintEx(DEBUG_MSG, _T("ProcessID is %d"), ErrorInfo.ProcessID);                    
                if (fUseFileTime)
                {
                    Result = FileTimeToSystemTime(&ErrorInfo.u.FileTime, 
                        &SystemTimeBuffer);
                    Assert(Result);
                    SystemTimeToUse = &SystemTimeBuffer;
                }
                else
                {
                    SystemTimeToUse = &ErrorInfo.u.SystemTime;
                }
                DebugPrintEx(DEBUG_MSG, _T("System Time is: %d/%d/%d %d:%d:%d:%d"),
                    SystemTimeToUse->wMonth,
                    SystemTimeToUse->wDay,
                    SystemTimeToUse->wYear,
                    SystemTimeToUse->wHour,
                    SystemTimeToUse->wMinute,
                    SystemTimeToUse->wSecond,
                    SystemTimeToUse->wMilliseconds);
                DebugPrintEx(DEBUG_MSG, _T("Generating component is %d"), ErrorInfo.GeneratingComponent);                                        
                DebugPrintEx(DEBUG_MSG, _T("Status is %d"), ErrorInfo.Status);                                        
                DebugPrintEx(DEBUG_MSG, _T("Detection location is %d"), (int)ErrorInfo.DetectionLocation);                                        
                DebugPrintEx(DEBUG_MSG, _T("Flags is %d"), ErrorInfo.Flags);                                        
                DebugPrintEx(DEBUG_MSG, _T("NumberOfParameters is %d"), ErrorInfo.NumberOfParameters);                                        
                for (i = 0; i < ErrorInfo.NumberOfParameters; i ++)
                {
                    switch(ErrorInfo.Parameters[i].ParameterType)
                    {
                        case eeptAnsiString:
                            DebugPrintEx(DEBUG_MSG, _T("Ansi string: %S"), ErrorInfo.Parameters[i].u.AnsiString);
                            if (CopyStrings)
                            {
                                Result = HeapFree(GetProcessHeap(), 0, 
                                    ErrorInfo.Parameters[i].u.AnsiString);
                                Assert(Result);
                            }
                            break;

                        case eeptUnicodeString:
                            DebugPrintEx(DEBUG_MSG, _T("Unicode string: %s"), ErrorInfo.Parameters[i].u.UnicodeString);
                            if (CopyStrings)
                            {
                                Result = HeapFree(GetProcessHeap(), 0, 
                                    ErrorInfo.Parameters[i].u.UnicodeString);
                                Assert(Result);
                            }
                            break;

                        case eeptLongVal:
                            DebugPrintEx(DEBUG_MSG, _T("Long val: %d"), ErrorInfo.Parameters[i].u.LVal);
                            break;

                        case eeptShortVal:
                            DebugPrintEx(DEBUG_MSG, _T("Short val: %d"), (int)ErrorInfo.Parameters[i].u.SVal);
                            break;

                        case eeptPointerVal:
                            DebugPrintEx(DEBUG_MSG, _T("Pointer val: %d"), ErrorInfo.Parameters[i].u.PVal);
                            break;

                        case eeptNone:
                            DebugPrintEx(DEBUG_MSG, _T("Truncated"));
                            break;

                        default:
                            DebugPrintEx(DEBUG_MSG, _T("Invalid type: %d"), ErrorInfo.Parameters[i].ParameterType);
                        }
                    }
                }
            }
        pfRpcErrorEndEnumeration(&EnumHandle);
    }
    FreeLibrary (hMod);
}   // DumpRPCExtendedStatus
#else // ifdef DEUBG
VOID
DumpRPCExtendedStatus ()
{
}
#endif // ifdef DEBUG
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\registry.c ===
/*++

Copyright (c) 1996  Microsoft Corporation

Module Name:

    registry.c

Abstract:

    This module provides a generic table driven access
    to the registry.

Author:

    Wesley Witt (wesw) 9-June-1996


Revision History:

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>

#include "fxsapip.h"
#include "faxutil.h"
#include "faxreg.h"

HKEY
OpenRegistryKey(
    HKEY hKey,
    LPCTSTR KeyName,
    BOOL CreateNewKey,
    REGSAM SamDesired
    )
{
    LONG    Rslt;
    HKEY    hKeyNew = NULL;
    DWORD   Disposition;


    if (CreateNewKey) {
        Rslt = RegCreateKeyEx(
            hKey,
            KeyName,
            0,
            NULL,
            REG_OPTION_NON_VOLATILE,
            SamDesired == 0 ? (KEY_READ | KEY_WRITE) : SamDesired,
            NULL,
            &hKeyNew,
            &Disposition
            );
        if (Rslt != ERROR_SUCCESS) {
            //
            // could not open the registry key
            //
            DebugPrint(( TEXT("RegCreateKeyEx() failed, ec=%d"), Rslt ));
            SetLastError (Rslt);
            return NULL;
        }

        if (Disposition == REG_CREATED_NEW_KEY) {
            DebugPrint(( TEXT("Created new fax registry key, ec=%d"), Rslt ));
        }
    } else {
        Rslt = RegOpenKeyEx(
            hKey,
            KeyName,
            0,
            SamDesired == 0 ? (KEY_READ | KEY_WRITE) : SamDesired,
            &hKeyNew
            );
        if (Rslt != ERROR_SUCCESS) {
            //
            // could not open the registry key
            //
            DebugPrint(( TEXT("RegOpenKeyEx() failed, ec=%d"), Rslt ));
            SetLastError (Rslt);
            return NULL;
        }
    }

    Assert (hKeyNew);
    SetLastError (ERROR_SUCCESS);
    return hKeyNew;
}

LPTSTR
GetRegistryStringValue(
    HKEY hKey,
    DWORD RegType,
    LPCTSTR ValueName,
    LPCTSTR DefaultValue,
    LPDWORD StringSize
    )
{
    BOOL    Success = FALSE;
    DWORD   Size;
    LONG    Rslt;
    DWORD   Type;
    LPBYTE  Buffer = NULL;
    LPBYTE  ExpandBuffer = NULL;
    LPTSTR  ReturnBuff = NULL;


    Rslt = RegQueryValueEx(
        hKey,
        ValueName,
        NULL,
        &Type,
        NULL,
        &Size
        );
    if (Rslt != ERROR_SUCCESS)
    {
        if (Rslt == ERROR_FILE_NOT_FOUND)
        {
            if (DefaultValue)
            {
                Size = (RegType==REG_MULTI_SZ) ? MultiStringSize(DefaultValue) : StringSize( DefaultValue );
            }
            else
            {
                DebugPrint(( TEXT("RegQueryValueEx() failed, ec=%d - and no default value was specified"), Rslt ));
                goto exit;
            }
        }
        else
        {
            DebugPrint(( TEXT("RegQueryValueEx() failed, ec=%d"), Rslt ));
            goto exit;
        }
    }
    else
    {
        if (Type != RegType)
        {
            return NULL;
        }
    }

    if (Size == 0)
    {
        Size = 32;
    }

    Buffer = (LPBYTE) MemAlloc( Size );
    if (!Buffer)
    {
        goto exit;
    }

    Rslt = RegQueryValueEx(
        hKey,
        ValueName,
        NULL,
        &Type,
        Buffer,
        &Size
        );
    if (Rslt != ERROR_SUCCESS)
    {
        if (Rslt != ERROR_FILE_NOT_FOUND)
        {
            DebugPrint(( TEXT("RegQueryValueEx() failed, ec=%d"), Rslt ));
            goto exit;
        }
        //
        // create the value since it doesn't exist
        //
        if (DefaultValue)
        {
            if ( RegType == REG_MULTI_SZ )
            {
                Assert(Size>=MultiStringSize(DefaultValue));             
                memcpy ( (LPVOID) Buffer, (LPVOID)DefaultValue, MultiStringSize(DefaultValue) );
            }
            else
            {
                _tcscpy( (LPTSTR) Buffer, DefaultValue );
            }
        }
        else
        {
            DebugPrint((TEXT("Can't create DefaultValue since it's NULL")));
            goto exit;
        }

        Rslt = RegSetValueEx(
            hKey,
            ValueName,
            0,
            RegType,
            Buffer,
            Size
            );
        if (Rslt != ERROR_SUCCESS)
        {
            //
            // could not set the registry value
            //
            DebugPrint(( TEXT("RegSetValueEx() failed[%s], ec=%d"), ValueName, Rslt ));
            goto exit;
        }
    }
    if (RegType == REG_EXPAND_SZ)
    {
        Rslt = ExpandEnvironmentStrings( (LPTSTR) Buffer, NULL, 0 );
        if (!Rslt)
        {
            goto exit;
        }

        Size = (Rslt + 1) * sizeof(WCHAR);
        ExpandBuffer = (LPBYTE) MemAlloc( Size );
        if (!ExpandBuffer) {
            goto exit;
        }

        Rslt = ExpandEnvironmentStrings( (LPTSTR) Buffer, (LPTSTR) ExpandBuffer, Rslt );
        if (Rslt == 0) {
            MemFree( ExpandBuffer );
            ExpandBuffer = NULL;
            DebugPrint(( TEXT("ExpandEnvironmentStrings() failed, ec=%d"), GetLastError() ));
            goto exit;
        }
        MemFree( Buffer );
        Buffer = ExpandBuffer;
    }

    Success = TRUE;
    if (StringSize)
    {
        *StringSize = Size;
    }

exit:
    if (!Success)
    {
        MemFree( Buffer );

        if (StringSize)
        {
            *StringSize = 0;
        }

        if (DefaultValue)
        {
            Size = (RegType==REG_MULTI_SZ) ? MultiStringSize(DefaultValue) : StringSize( DefaultValue );
            
            ReturnBuff = (LPTSTR) MemAlloc( Size );
            
            if ( !ReturnBuff )
                return NULL;

            if ( RegType == REG_MULTI_SZ )
                memcpy ( (LPVOID)ReturnBuff, (LPVOID)DefaultValue, Size );
            else
                _tcscpy( ReturnBuff, DefaultValue );

            
            if (StringSize)
            {
                *StringSize = Size;
            }
            
            return ReturnBuff;
        }
        else
        {
            return NULL;
        }
    }
    
    return (LPTSTR) Buffer;
}



LPTSTR
GetRegistryString(
    HKEY hKey,
    LPCTSTR ValueName,
    LPCTSTR DefaultValue
    )
{
    return GetRegistryStringValue( hKey, REG_SZ, ValueName, DefaultValue, NULL );
}


LPTSTR
GetRegistryStringExpand(
    HKEY hKey,
    LPCTSTR ValueName,
    LPCTSTR DefaultValue
    )
{
    return GetRegistryStringValue( hKey, REG_EXPAND_SZ, ValueName, DefaultValue, NULL );
}

LPTSTR
GetRegistryStringMultiSz(
    HKEY hKey,
    LPCTSTR ValueName,
    LPCTSTR DefaultValue,
    LPDWORD StringSize
    )
{
    return GetRegistryStringValue( hKey, REG_MULTI_SZ, ValueName, DefaultValue, StringSize );
}



/*++
Routine Description:
    Reads a REG_DWORD value from the registry. If the value doesn't exist, creates the
    value with the default value provided.

Arguments:
    hKey          [in]  - Handle to an open registry key
    lpszValueName [in]  - Registry value name
    lpdwDest      [out] - Pointer to DWORD that will accept the value
    dwDefault     [in]  - Default value to use if value doesn't exist

Return Value:
    TRUE if success
    FALSE if failed to read/create the value, error in LastError
--*/
BOOL GetRegistryDwordDefault(HKEY hKey, LPCTSTR lpszValueName, LPDWORD lpdwDest, DWORD dwDefault)
{
    LONG  lError;
    DWORD dwSize = sizeof(DWORD);
    DWORD dwType;

    if (!lpdwDest)
    {
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }
    lError = RegQueryValueEx( hKey,
                              lpszValueName,
                              0,
                              &dwType,
                              (LPBYTE)lpdwDest,
                              &dwSize);
    if (lError==ERROR_FILE_NOT_FOUND)
    {
        // Not found - create with default value
        *lpdwDest = dwDefault;
        lError = RegSetValueEx( hKey,
                                lpszValueName,
                                0,
                                REG_DWORD,
                                (LPBYTE)lpdwDest,
                                sizeof(DWORD));
        if (lError != ERROR_SUCCESS)
        {
            DebugPrint(( TEXT("RegSetValueEx() failed[%s], ec=%d"), lpszValueName, lError ));
            SetLastError(lError);
            return FALSE;
        }
        return TRUE;
    }

    if ((lError!=ERROR_SUCCESS) || (dwType!=REG_DWORD))
    {
        DebugPrint(( TEXT("RegQueryValueEx() failed[%s], ec=%d"), lpszValueName, lError ));
        SetLastError(lError);
        return FALSE;
    }
    return TRUE;
}


DWORD
GetRegistryDword(
    HKEY hKey,
    LPCTSTR ValueName
    )
{
    DWORD Value=0;
    if (!GetRegistryDwordDefault(hKey, ValueName, &Value, 0))
    {
        return 0;
    }
    return Value;
}


LPBYTE
GetRegistryBinary(
    HKEY hKey,
    LPCTSTR ValueName,
    LPDWORD DataSize
    )
{
    BOOL    Success = FALSE;
    DWORD   Size = 0;
    LONG    Rslt;
    DWORD   Type = REG_BINARY;
    LPBYTE  Buffer = NULL;


    Rslt = RegQueryValueEx(
        hKey,
        ValueName,
        NULL,
        &Type,
        NULL,
        &Size
        );
    if (Rslt != ERROR_SUCCESS) {
        if (Rslt == ERROR_FILE_NOT_FOUND) {
            Size = 1;
        } else {
            DebugPrint(( TEXT("RegQueryValueEx() failed, ec=%d"), Rslt ));
            goto exit;
        }
    } else {
        if (Type != REG_BINARY) {
            return NULL;
        }
    }

    if (Size == 0) {
        Size = 1;
    }

    Buffer = (LPBYTE) MemAlloc( Size );
    if (!Buffer) {
        goto exit;
    }

    Rslt = RegQueryValueEx(
        hKey,
        ValueName,
        NULL,
        &Type,
        Buffer,
        &Size
        );
    if (Rslt != ERROR_SUCCESS) {
        if (Rslt != ERROR_FILE_NOT_FOUND) {
            DebugPrint(( TEXT("RegQueryValueEx() failed, ec=%d"), Rslt ));
            goto exit;
        }
        //
        // create the value since it doesn't exist
        //
        Rslt = RegSetValueEx(
            hKey,
            ValueName,
            0,
            REG_BINARY,
            Buffer,
            Size
            );
        if (Rslt != ERROR_SUCCESS) {
            //
            // could not set the registry value
            //
            DebugPrint(( TEXT("RegSetValueEx() failed[%s], ec=%d"), ValueName, Rslt ));
            goto exit;
        }
    }
    Success = TRUE;
    if (DataSize) {
        *DataSize = Size;
    }

exit:
    if (!Success) {
        MemFree( Buffer );
        return NULL;
    }

    return Buffer;
}


DWORD
GetSubKeyCount(
    HKEY hKey
    )
{
    DWORD KeyCount = 0;
    LONG Rval;


    Rval = RegQueryInfoKey( hKey, NULL, NULL, NULL, &KeyCount, NULL, NULL, NULL, NULL, NULL, NULL, NULL );
    if (Rval != ERROR_SUCCESS) {
        return 0;
    }

    return KeyCount;
}


DWORD
GetMaxSubKeyLen(
    HKEY hKey
    )
{
    DWORD MaxSubKeyLen = 0;
    LONG Rval;


    Rval = RegQueryInfoKey( hKey, NULL, NULL, NULL, NULL, &MaxSubKeyLen, NULL, NULL, NULL, NULL, NULL, NULL );
    if (Rval != ERROR_SUCCESS) {
        return 0;
    }

    return MaxSubKeyLen;
}


BOOL
SetRegistryDword(
    HKEY hKey,
    LPCTSTR ValueName,
    DWORD Value
    )
{
    LONG    Rslt;


    Rslt = RegSetValueEx(
        hKey,
        ValueName,
        0,
        REG_DWORD,
        (LPBYTE) &Value,
        sizeof(DWORD)
        );
    if (Rslt != ERROR_SUCCESS)
    {
        DebugPrint(( TEXT("RegSetValueEx() failed[%s], ec=%d"), ValueName, Rslt ));
        SetLastError (Rslt);
        return FALSE;
    }

    return TRUE;
}


BOOL
SetRegistryBinary(
    HKEY hKey,
    LPCTSTR ValueName,
    const LPBYTE Value,
    LONG Length
    )
{
    LONG    Rslt;


    Rslt = RegSetValueEx(
        hKey,
        ValueName,
        0,
        REG_BINARY,
        (LPBYTE) Value,
        Length
        );
    if (Rslt != ERROR_SUCCESS) {
        DebugPrint(( TEXT("RegSetValueEx() failed[%s], ec=%d"), ValueName, Rslt ));
        return FALSE;
    }

    return TRUE;
}


BOOL
SetRegistryStringValue(
    HKEY hKey,
    DWORD RegType,
    LPCTSTR ValueName,
    LPCTSTR Value,
    LONG Length
    )
{
    LONG    Rslt;


    Rslt = RegSetValueEx(
        hKey,
        ValueName,
        0,
        RegType,
        (LPBYTE) Value,
        Length == -1 ? StringSize( Value ) : Length
        );
    if (Rslt != ERROR_SUCCESS) {
        DebugPrint(( TEXT("RegSetValueEx() failed[%s], ec=%d"), ValueName, Rslt ));
        return FALSE;
    }

    return TRUE;
}


BOOL
SetRegistryString(
    HKEY hKey,
    LPCTSTR ValueName,
    LPCTSTR Value
    )
{
    return SetRegistryStringValue( hKey, REG_SZ, ValueName, Value, -1 );
}


BOOL
SetRegistryStringExpand(
    HKEY hKey,
    LPCTSTR ValueName,
    LPCTSTR Value
    )
{
    return SetRegistryStringValue( hKey, REG_EXPAND_SZ, ValueName, Value, -1 );
}


BOOL
SetRegistryStringMultiSz(
    HKEY hKey,
    LPCTSTR ValueName,
    LPCTSTR Value,
    DWORD Length
    )
{
    return SetRegistryStringValue( hKey, REG_MULTI_SZ, ValueName, Value, Length );
}


DWORD
EnumerateRegistryKeys(
    HKEY hKey,
    LPCTSTR KeyName,
    BOOL ChangeValues,
    PREGENUMCALLBACK EnumCallback,
    LPVOID ContextData
    )
{
    LONG    Rslt;
    HKEY    hSubKey = NULL;
    HKEY    hKeyEnum = NULL;
    DWORD   Index = 0;
    DWORD   MaxSubKeyLen;
    DWORD   SubKeyCount;
    LPTSTR  SubKeyName = NULL;



    hSubKey = OpenRegistryKey( hKey, KeyName, ChangeValues, ChangeValues ? (KEY_READ | KEY_WRITE) : KEY_READ );
    if (!hSubKey) {
        goto exit;
    }

    Rslt = RegQueryInfoKey(
        hSubKey,
        NULL,
        NULL,
        NULL,
        &SubKeyCount,
        &MaxSubKeyLen,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL
        );
    if (Rslt != ERROR_SUCCESS) {
        //
        // could not open the registry key
        //
        DebugPrint(( TEXT("RegQueryInfoKey() failed, ec=%d"), Rslt ));
        goto exit;
    }

    if (!EnumCallback( hSubKey, NULL, SubKeyCount, ContextData )) {
        goto exit;
    }

    MaxSubKeyLen += 4;

    SubKeyName = (LPTSTR) MemAlloc( (MaxSubKeyLen+1) * sizeof(WCHAR) );
    if (!SubKeyName) {
        goto exit;
    }

    while( TRUE ) {
        Rslt = RegEnumKey(
            hSubKey,
            Index,
            (LPTSTR) SubKeyName,
            MaxSubKeyLen
            );
        if (Rslt != ERROR_SUCCESS) {
            if (Rslt == ERROR_NO_MORE_ITEMS) {
                break;
            }
            DebugPrint(( TEXT("RegEnumKey() failed, ec=%d"), Rslt ));
            goto exit;
        }

        hKeyEnum = OpenRegistryKey( hSubKey, SubKeyName, ChangeValues, ChangeValues ? (KEY_READ | KEY_WRITE) : KEY_READ );
        if (!hKeyEnum) {
            continue;
        }

        if (!EnumCallback( hKeyEnum, SubKeyName, Index, ContextData )) {
            RegCloseKey( hKeyEnum );
            break;
        }

        RegCloseKey( hKeyEnum );
        Index += 1;
    }

exit:
    if (hSubKey) {
        RegCloseKey( hSubKey );
    }
    MemFree( SubKeyName );

    return Index;
}

BOOL
DeleteRegistryKey(
    HKEY hKey,
    LPCTSTR SubKey
    )
{
    HKEY  hKeyCurrent=NULL;
    TCHAR szName[MAX_PATH];
    DWORD dwName;
    long lResult;
    DEBUG_FUNCTION_NAME(TEXT("DeleteRegistryKey"));

    lResult = RegOpenKeyEx(hKey,SubKey,0,KEY_READ | KEY_WRITE | DELETE, &hKeyCurrent);
    if (lResult != ERROR_SUCCESS)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("RegOpenKeyEx failed with %ld"),
            lResult);
        SetLastError (lResult);
        return FALSE;
    }

    

    for (;;)
    {
        dwName = sizeof(szName)/sizeof(TCHAR);

        lResult = RegEnumKeyEx(hKeyCurrent, 0, szName, &dwName, NULL, NULL, NULL, NULL);

        if (lResult == ERROR_SUCCESS)
        {
            if (!DeleteRegistryKey(hKeyCurrent,szName))
            {
                //
                // Some sons a NOT deleted. You can stop trying to remove stuff now.
                //
                return FALSE;
            }
        }
        else if (lResult == ERROR_NO_MORE_ITEMS)
        {
            //
            // No more sons, can delete father key
            //
            break;
        }
        else
        {
            //
            // other error
            //
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("RegEnumKeyExKey failed with %ld"),
                lResult);
            RegCloseKey(hKeyCurrent);
            SetLastError (lResult);
            return FALSE;
        }
    }

    RegCloseKey(hKeyCurrent);
    lResult = RegDeleteKey(hKey, SubKey);
    if (ERROR_SUCCESS != lResult)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("RegDeleteKey failed with %ld"),
            lResult);
        SetLastError (lResult);
        return FALSE;
    }
    return TRUE;
}


DWORD
GetRegistryDwordEx(
    HKEY hKey,
    LPCTSTR ValueName,
    LPDWORD lpdwValue
    )
/*++

Routine name : GetRegistryDwordEx

Routine description:

    Retrieves a dword from the registry.

Author:

    Oded Sacher (OdedS),    Dec, 1999

Arguments:

    hKey            [in    ] - Handle to the open key
    ValueName           [in    ] - The value name
    lpdwValue           [out   ] - Pointer to a DWORD to recieve the value

Return Value:

    Standard win 32 error code

--*/
{
    DWORD dwRes = ERROR_SUCCESS;
    DWORD dwType= REG_DWORD;
    DWORD dwSize=0;
    DEBUG_FUNCTION_NAME(TEXT("GetRegistryDwordEx"));
    Assert (ValueName && lpdwValue);

    dwRes = RegQueryValueEx(
        hKey,
        ValueName,
        NULL,
        &dwType,
        NULL,
        &dwSize
        );
    if (ERROR_SUCCESS != dwRes)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("RegQueryValueEx failed with %ld"),
            dwRes);
        goto exit;
    }

    if (REG_DWORD != dwType)
    {
        // We expect only DWORD data here
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Error not a DWORD type"));
        dwRes = ERROR_BADDB;    // The configuration registry database is corrupt.
        goto exit;
    }

    dwRes = RegQueryValueEx(
        hKey,
        ValueName,
        NULL,
        &dwType,
        (LPBYTE)lpdwValue,
        &dwSize
        );
    if (ERROR_SUCCESS != dwRes)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("RegQueryValueEx failed with %ld"),
            dwRes);
        goto exit;
    }
    Assert (ERROR_SUCCESS == dwRes);

exit:
    return dwRes;
}


/*++

Routine name : DeleteDeviceEntry

Routine description:

    Delete service device entry from devices.

Author:

    Caliv Nir (t-nicali),    Apr, 2001

Arguments:

    serverPermanentID   [in] -  service device ID to be deleted

Return Value:
    
    Win32 error code
--*/
DWORD
DeleteDeviceEntry(DWORD serverPermanentID)
{
    DWORD   ec = ERROR_SUCCESS; // LastError for this function.
    HKEY    hKeyDevices;
    TCHAR   DevicesKeyName[MAX_PATH];
    
    DEBUG_FUNCTION_NAME(TEXT("DeleteDeviceEntry"));
    //
    //  open - "fax\Devices\serverPermanentID" Registry Key
    //
    _stprintf( DevicesKeyName, TEXT("%s\\%010lu"), REGKEY_FAX_DEVICES, serverPermanentID );
    hKeyDevices = OpenRegistryKey( HKEY_LOCAL_MACHINE, DevicesKeyName, FALSE, KEY_READ | KEY_WRITE );
    if (!hKeyDevices)
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_WRN,
            TEXT("OpenRegistryKey failed with [%ld] the device entry might be missing."),
            ec
            );  
        return  ec;
    }

    //
    //  delete our servers data (under GUID and "Permanent Lineid" value)
    //
    if (!DeleteRegistryKey( hKeyDevices, REGKEY_FAXSVC_DEVICE_GUID))
    {
        DebugPrintEx(
            DEBUG_WRN,
            TEXT("DeleteRegistryKey failed, the device GUID might be missing.")
            );  
    }
    if (ERROR_SUCCESS != RegDeleteValue( hKeyDevices, REGVAL_PERMANENT_LINEID))
    {
        DebugPrintEx(
            DEBUG_WRN,
            TEXT("RegDeleteValue failed, the device \"PermanentLineID\" might be missing.")
            );  
    }

    //
    // check to see wheter the key is now empty
    //
    DWORD dwcSubKeys = 0;
    DWORD dwcValues = 0;

    ec=RegQueryInfoKey(
         hKeyDevices,            // handle to key
         NULL,
         NULL,
         NULL,
         &dwcSubKeys,            // number of subkeys
         NULL,
         NULL,
         &dwcValues,             // number of value entries
         NULL,
         NULL,
         NULL,
         NULL
    );

    if ( ERROR_SUCCESS != ec )
    {
        DebugPrintEx(
            DEBUG_WRN,
            TEXT("RegQueryInfoKey Abort deleteion.")
            );  
        RegCloseKey(hKeyDevices);
        return ec;
    }
    
    RegCloseKey(hKeyDevices);
    
    if ( (0 == dwcSubKeys) && (0 == dwcValues) )
    {
        //
        // key is empty delete it
        //
        hKeyDevices = OpenRegistryKey( HKEY_LOCAL_MACHINE, REGKEY_FAX_DEVICES, FALSE, KEY_WRITE | DELETE);
        if (!hKeyDevices)
        {
            ec = GetLastError();
            DebugPrintEx(
            DEBUG_ERR,
            TEXT("OpenRegistryKey failed with [%lu], Can't delete key."),
            ec
            );  
                    
            return ec;
        }
        
        DWORD dwLen = _tcslen( REGKEY_FAX_DEVICES ) + 1;
        
        Assert((DevicesKeyName + dwLen));
        Assert(*(DevicesKeyName + dwLen));
        DebugPrintEx(
            DEBUG_WRN,
            TEXT("Deleting Device entry %s"),
            (DevicesKeyName + dwLen)
            );  

        ec = RegDeleteKey( hKeyDevices, (DevicesKeyName + dwLen));
        if ( ERROR_SUCCESS != ec )
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("RegDeleteKey failed, Can't delete key.")
            );
        }

        RegCloseKey(hKeyDevices);

    }
    
    return ec;
}



/*++

Routine name : DeleteCacheEntry

Routine description:

    Delete cache entry for a given Tapi ID

Author:

    Caliv Nir (t-nicali),    Apr, 2001

Arguments:

    dwTapiPermanentLineID       [in]    -   device Tapi permament ID

    
Return Value:

    Win32 Error code (ERROR_SUCCESS on success)

--*/
DWORD
DeleteCacheEntry(DWORD dwTapiPermanentLineID)
{
    DWORD   ec = ERROR_SUCCESS; // LastError for this function.
    HKEY    hKey;
    TCHAR   strTapiPermanentLineID[10];
        
    DEBUG_FUNCTION_NAME(TEXT("DeleteCacheEntry"));

    //
    //  open - "fax\Device Cache" Registry Key
    //
    
    hKey = OpenRegistryKey( HKEY_LOCAL_MACHINE, REGKEY_FAX_DEVICES_CACHE, FALSE, KEY_READ | KEY_WRITE );
    if (!hKey)
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("OpenRegistryKey failed, Can't delete key.")
            );  
        
        return ec;
    }

    _stprintf( strTapiPermanentLineID, TEXT("%08lx"),dwTapiPermanentLineID );
    
    if (!DeleteRegistryKey(hKey, strTapiPermanentLineID))
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("DeleteRegistryKey failed with (%ld), Can't delete key."),
            ec);    
    }
    
    RegCloseKey(hKey);

    return ec;
}


/*++

Routine name : DeleteTapiEntry

Routine description:

    Delete Tapi entry when caching from TapiDevices, for a give Tapi ID

Author:

    Caliv Nir (t-nicali),    Apr, 2001

Arguments:

    dwTapiPermanentLineID       [in]    -   device Tapi permament ID

    
Return Value:

    Win32 Error code (ERROR_SUCCESS on success)

--*/
DWORD
DeleteTapiEntry(DWORD dwTapiPermanentLineID)
{
    DWORD   ec = ERROR_SUCCESS; // LastError for this function.
    HKEY    hKey;
    TCHAR   strTapiPermanentLineID[10];
        
    DEBUG_FUNCTION_NAME(TEXT("DeleteTapiEntry"));

    //
    //  open - "fax\TAPIDevices" Registry Key
    //
    
    hKey = OpenRegistryKey( HKEY_LOCAL_MACHINE, REGKEY_TAPIDEVICES, FALSE, KEY_READ | KEY_WRITE );
    if (!hKey)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("OpenRegistryKey failed, Can't delete key.")
            );  
        
        return ERROR_OPEN_FAILED;
    }

    _stprintf( strTapiPermanentLineID, TEXT("%08lx"),dwTapiPermanentLineID );
    
    if (!DeleteRegistryKey(hKey, strTapiPermanentLineID))
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("DeleteRegistryKey failed with (%ld), Can't delete key."),
            ec);    
    }
    
    RegCloseKey(hKey);

    return ec;
}



/*++

Routine name : CopyRegistrySubkeysByHandle

Routine description:

    Copy a content of one registry key into another

Author:

    Caliv Nir (t-nicali),    Apr, 2001

Arguments:

    hkeyDest    [in]    - handle for destination registry key
    hkeySrc     [in]    - handle for source registry key
    fForceRestore [in]  - do we force restore of this hive?

Return Value:

    Win32 Error code

--*/
DWORD
CopyRegistrySubkeysByHandle(
    HKEY    hkeyDest,
    HKEY    hkeySrc,
    BOOL    fForceRestore
    )
{

    LPTSTR  TempPath = NULL;
    DWORD   dwTempPathLength = 0;
    LPCTSTR strFileName = TEXT("tempCacheFile");
    DWORD   ec = ERROR_SUCCESS; // LastError for this function.
    DEBUG_FUNCTION_NAME(TEXT("CopyRegistrySubkeysByHandle"));

    dwTempPathLength = GetTempPath(0,NULL) + 1;     // find out temp path size
    dwTempPathLength += _tcslen( strFileName ) + 1;     // add the length of file name
    dwTempPathLength += 2;                              // just to be sure

    TempPath = (LPTSTR) MemAlloc( dwTempPathLength * sizeof(TCHAR) );
    if (!TempPath )
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("MemAlloc failed. Can't continue")
            );
        ec = ERROR_NOT_ENOUGH_MEMORY;
        goto Exit;
    }

    if (!GetTempPath( dwTempPathLength, TempPath ))
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetTempPath failed with [%ld]. Can't continue"),
            ec);
        goto Exit;
    }

    _tcscat(TempPath,strFileName);

    //
    //  store hKeySrc in a file
    //
    HANDLE hOldPrivilege = EnablePrivilege(SE_BACKUP_NAME);
    if (INVALID_HANDLE_VALUE != hOldPrivilege)  // set proper previlege 
    {
        ec = RegSaveKey(
            hkeySrc,        // handle to key
            TempPath,       // data file
            NULL);
        if (ec != ERROR_SUCCESS)
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("RegSaveKey failed with [%lu]. Can't continue"),
                ec
                );
            
            ReleasePrivilege(hOldPrivilege);
            
            goto Exit;
        }
        ReleasePrivilege(hOldPrivilege);


    }
    else
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("EnablePrivilege(SE_BACKUP_NAME) failed with [%lu]. Can't continue"),
            ec
            );
        goto Exit;
    }

    //
    //  restore the registry values from the file into hkeyDest
    //
    hOldPrivilege = EnablePrivilege(SE_RESTORE_NAME);
    if (INVALID_HANDLE_VALUE != hOldPrivilege)  // set proper previlege
    {
        ec = RegRestoreKey(
            hkeyDest,                               // handle to key where restore begins
            TempPath,                               // registry file
            fForceRestore ? REG_FORCE_RESTORE : 0);     // options
        if ( ec != ERROR_SUCCESS)
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("RegRestoreKey failed. Can't continue")
                );
            ReleasePrivilege(hOldPrivilege);
            goto Exit;
        }
        ReleasePrivilege(hOldPrivilege);
       
    }
    else
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("EnablePrivilege(SE_RESTORE_NAME) failed with [%lu]. Can't continue")
            );
        goto Exit;
    }



Exit:
    if (TempPath)
    {
        if (!DeleteFile(TempPath))
        {
            DebugPrintEx( DEBUG_ERR,
                          TEXT("DeleteFile failed. file: %s. (ec=%ld)"),
                          TempPath,
                          GetLastError());
        }
        MemFree(TempPath);
    }
    return ec;
}


/*++

Routine name : CopyRegistrySubkeys

Routine description:

    Copy a content of one registry key into another

Author:

    Caliv Nir (t-nicali),    Apr, 2001

Arguments:

    strDest     [in]    -   string of destination registry key name
    strSrc      [in]    -   string of source registry key name
    fForceRestore [in]  -   do we force restore of the hive?

Return Value:

  Win32 Error Code

--*/
DWORD
CopyRegistrySubkeys(
    LPCTSTR strDest,
    LPCTSTR strSrc,
    BOOL    fForceRestore
    )
{
    DWORD   ec = ERROR_SUCCESS; // LastError for this function. 
    
    HKEY hKeyDest;
    HKEY hKeySrc;
    
    DEBUG_FUNCTION_NAME(TEXT("CopyRegistrySubkeys"));
    
    //
    //  open source Key
    //
    hKeySrc = OpenRegistryKey( HKEY_LOCAL_MACHINE, strSrc, FALSE, KEY_READ );
    if (!hKeySrc)
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("OpenRegistryKey failed with [%lu], Can't copy keys."),
            ec
            );  
        return  ec;
    }

    //
    //  open destination Key
    //
    hKeyDest = OpenRegistryKey( HKEY_LOCAL_MACHINE, strDest, TRUE, KEY_READ | KEY_WRITE);
    if (!hKeyDest)
    {
        ec = GetLastError();
        RegCloseKey (hKeySrc);
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("OpenRegistryKey failed [%lu], Can't copy keys."),
            ec
            );  
        return  ec;
    }

    //
    //  copy the keys using the registry Keys
    //
    ec = CopyRegistrySubkeysByHandle(hKeyDest,hKeySrc,fForceRestore);
    if ( ERROR_SUCCESS != ec )
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("CopyRegistrySubkeysHkey failed with [%lu], Can't copy keys."),
            ec
            );  
    }

    RegCloseKey (hKeyDest); 
    RegCloseKey (hKeySrc);
    
    return ec;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\mem.c ===
/*++

Copyright (c) 1995  Microsoft Corporation

Module Name:

    mem.c

Abstract:

    This file implements memory allocation functions for fax.

Author:

    Wesley Witt (wesw) 23-Jan-1995

Environment:

    User Mode

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>

#include <faxutil.h>

static HANDLE gs_hHeap = NULL;  // this should be done in an intialization function that every module should call once we move to svchost

PMEMALLOC pMemAllocUser;
PMEMREALLOC pMemReAllocUser;
PMEMFREE pMemFreeUser;

#ifdef FAX_HEAP_DEBUG
LIST_ENTRY HeapHeader;
SIZE_T TotalMemory;
SIZE_T MaxTotalMemory;
ULONG MaxTotalAllocs;
VOID PrintAllocations(VOID);
ULONG TotalAllocs;
static CRITICAL_SECTION gs_CsHeap;
static BOOL				gs_fCsHeapInit;
#endif

#if _CHICAGO_ == 200
    // The code is supposed to run on win9x and win2k
    #define WIN9X
#endif

long
StatusNoMemoryExceptionFilter (DWORD dwExceptionCode)
{
    return (STATUS_NO_MEMORY == dwExceptionCode) ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
}

HRESULT
SafeInitializeCriticalSection (LPCRITICAL_SECTION lpCriticalSection)
{
	DWORD dwExCode = 0;
	__try
	{
		InitializeCriticalSection(lpCriticalSection);
	}
	__except (StatusNoMemoryExceptionFilter(dwExCode = GetExceptionCode()))
	{
		SetLastError(dwExCode);
		return HRESULT_FROM_NT(dwExCode);
	}
	return S_OK;
}



BOOL
HeapExistingInitialize(
    HANDLE hExistHeap
    )
{
    Assert (NULL == gs_hHeap);
	pMemAllocUser = NULL;
	pMemReAllocUser = NULL;
	pMemFreeUser = NULL;	

#ifdef FAX_HEAP_DEBUG
	gs_fCsHeapInit = FALSE;
    InitializeListHead( &HeapHeader );
    MaxTotalMemory = 0;
    MaxTotalAllocs = 0;
    __try
    {
        InitializeCriticalSection (&gs_CsHeap);
		gs_fCsHeapInit = TRUE;
    }
    __except (StatusNoMemoryExceptionFilter(GetExceptionCode()))
    {
        return FALSE;
    }
#endif

    if (!hExistHeap)
    {
        return FALSE;
    }
    else
    {
        gs_hHeap = hExistHeap;
        return TRUE;
    }

}


HANDLE
HeapInitialize(
    HANDLE hHeapUser,
    PMEMALLOC pMemAlloc,
    PMEMFREE pMemFree,
	PMEMREALLOC pMemReAlloc
    )
{
    Assert (NULL == gs_hHeap);
	pMemAllocUser = NULL;
	pMemReAllocUser = NULL;
	pMemFreeUser = NULL;	

#ifdef FAX_HEAP_DEBUG
	gs_fCsHeapInit = FALSE;
    InitializeListHead( &HeapHeader );
    MaxTotalMemory = 0;
    MaxTotalAllocs = 0;
    __try
    {
        InitializeCriticalSection (&gs_CsHeap);
		gs_fCsHeapInit = TRUE;
    }
    __except (StatusNoMemoryExceptionFilter(GetExceptionCode()))
    {
        return NULL;
    }
    fax_dprintf(TEXT("in HeapInitialize()"));
#endif    

    if (pMemAlloc && pMemFree && pMemReAlloc)
    {
        pMemAllocUser = pMemAlloc;
        pMemFreeUser = pMemFree;
		pMemReAllocUser = pMemReAlloc;
        gs_hHeap = NULL;
    }
    else
    {
        if (hHeapUser)
        {
            gs_hHeap = hHeapUser;
        }
        else
        {
            gs_hHeap = HeapCreate( 0, HEAP_SIZE, 0 );
        }
        if (!gs_hHeap)
        {
            return NULL;
        }
    }

    return gs_hHeap;
}

BOOL
HeapCleanup(
    VOID
    )
{
#ifdef FAX_HEAP_DEBUG
    PrintAllocations();
#endif
    if (gs_hHeap)
    {
        if (gs_hHeap != GetProcessHeap())
		{
			HeapDestroy( gs_hHeap );
		}
        gs_hHeap = NULL;
    }
#ifdef FAX_HEAP_DEBUG
	if (TRUE == gs_fCsHeapInit)
	{
		DeleteCriticalSection(&gs_CsHeap);
		gs_fCsHeapInit = FALSE;
	}
#endif
    return TRUE;
}

#ifdef FAX_HEAP_DEBUG
BOOL
pCheckHeap(
    PVOID MemPtr,
    ULONG Line,
    LPSTR File
    )
{
#ifndef WIN9X
    return HeapValidate( gs_hHeap, 0, MemPtr );
#else
    return TRUE;
#endif
}
#endif

PVOID
pMemAlloc(
    SIZE_T AllocSize
#ifdef FAX_HEAP_DEBUG
    , ULONG Line,
    LPSTR File
#endif
    )
{
    PVOID MemPtr;
#ifdef FAX_HEAP_DEBUG
    PHEAP_BLOCK hb;
#ifdef UNICODE
    TCHAR fname[MAX_PATH];
#endif
    LPTSTR p = NULL;
    if (pMemAllocUser)
    {
        hb = (PHEAP_BLOCK) pMemAllocUser( AllocSize + sizeof(HEAP_BLOCK) );
    }
    else
    {
        if (gs_hHeap == NULL)
        {
            if (!HeapExistingInitialize(GetProcessHeap()))
            {
                return NULL;
            }
        }

        // In win9X this call will return TRUE
        if (!CheckHeap(NULL))
        {
            fax_dprintf((TEXT("HeapValidate() failed")));
            DebugBreak();
        }

        hb = (PHEAP_BLOCK) HeapAlloc( gs_hHeap, HEAP_ZERO_MEMORY, AllocSize + sizeof(HEAP_BLOCK) );
    }
    if (hb)
    {
        TotalAllocs += 1;
        TotalMemory += AllocSize;
        if (TotalMemory > MaxTotalMemory)
        {
            MaxTotalMemory = TotalMemory;
        }
        if (TotalAllocs > MaxTotalAllocs)
        {
            MaxTotalAllocs = TotalAllocs;
        }
        EnterCriticalSection( &gs_CsHeap );
        InsertTailList( &HeapHeader, &hb->ListEntry );
        hb->Signature = HEAP_SIG;
        hb->Size = AllocSize;
        hb->Line = Line;
#ifdef UNICODE
        MultiByteToWideChar(
            CP_ACP,
            MB_PRECOMPOSED,
            File,
            -1,
            fname,
            sizeof(fname)/sizeof(WCHAR)
            );
        p = wcsrchr( fname, L'\\' );
        if (p)
        {
            wcscpy( hb->File, p+1 );
        }
#else
        p = _tcsrchr( File, TEXT('\\') );
        if (p)
        {
            _tcscpy( hb->File, _tcsinc(p) );
        }
#endif
        MemPtr = (PVOID) ((PUCHAR)hb + sizeof(HEAP_BLOCK));
        LeaveCriticalSection( &gs_CsHeap );
    }
    else
    {
        MemPtr = NULL;
    }
#else
    if (pMemAllocUser)
    {
        MemPtr = (PVOID) pMemAllocUser( AllocSize );
    }
    else
    {
        if (gs_hHeap == NULL)
        {
            if (!HeapExistingInitialize(GetProcessHeap()))
            {
                return NULL;
            }
        }
        MemPtr = (PVOID) HeapAlloc( gs_hHeap, HEAP_ZERO_MEMORY, AllocSize );
    }
#endif

    if (!MemPtr)
    {
        DebugPrint(( TEXT("MemAlloc() failed, size=%d"), AllocSize ));
        SetLastError( ERROR_NOT_ENOUGH_MEMORY );
    }

    return MemPtr;
}

PVOID
pMemReAlloc(
    PVOID Src,
    ULONG AllocSize
#ifdef FAX_HEAP_DEBUG
    , ULONG Line,
    LPSTR File
#endif
    )
{
    PVOID MemPtr;
#ifdef FAX_HEAP_DEBUG
    PHEAP_BLOCK hb;
#ifdef UNICODE
    TCHAR fname[MAX_PATH];
#endif
    LPTSTR p = NULL;

    EnterCriticalSection( &gs_CsHeap );
    hb = (PHEAP_BLOCK) ((LPBYTE)Src-(ULONG_PTR)sizeof(HEAP_BLOCK));
    RemoveEntryList( &hb->ListEntry );
    TotalMemory -= hb->Size;
    LeaveCriticalSection( &gs_CsHeap );

    if (pMemReAllocUser)
    {
        hb = (PHEAP_BLOCK) pMemReAllocUser( (LPBYTE)Src-(ULONG_PTR)sizeof(HEAP_BLOCK),
                                            AllocSize + sizeof(HEAP_BLOCK) );
    }
    else
    {
        if (gs_hHeap == NULL)
        {
            if (!HeapExistingInitialize(GetProcessHeap()))
            {
                return NULL;
            }

        }

        //
        // we have to back up a bit since the actual pointer passed in points to the data after the heap block.
        //
        hb = (PHEAP_BLOCK) HeapReAlloc( gs_hHeap,
                                        HEAP_ZERO_MEMORY,
                                        (LPBYTE)Src-(ULONG_PTR)sizeof(HEAP_BLOCK),
                                        AllocSize + sizeof(HEAP_BLOCK)
                                       );
    }
    if (hb)
    {
        TotalMemory += AllocSize;
        if (TotalMemory > MaxTotalMemory)
        {
            MaxTotalMemory = TotalMemory;
        }

        EnterCriticalSection( &gs_CsHeap );
        InsertTailList( &HeapHeader, &hb->ListEntry );
        hb->Signature = HEAP_SIG;
        hb->Size = AllocSize;
        hb->Line = Line;

#ifdef UNICODE
        MultiByteToWideChar(
            CP_ACP,
            MB_PRECOMPOSED,
            File,
            -1,
            fname,
            sizeof(fname)/sizeof(WCHAR)
            );
        p = wcsrchr( fname, L'\\' );
        if (p)
        {
            wcscpy( hb->File, p+1 );
        }
#else
        p = _tcsrchr( File, TEXT('\\') );
        if (p)
        {
            _tcscpy( hb->File, _tcsinc(p) );
        }
#endif
        MemPtr = (PVOID) ((PUCHAR)hb + sizeof(HEAP_BLOCK));
        LeaveCriticalSection( &gs_CsHeap );
    }
    else
    {
        MemPtr = NULL;
    }
#else
    if (pMemReAllocUser)
    {
        MemPtr = (PVOID) pMemReAllocUser( Src, AllocSize );
    }
    else
    {
        if (gs_hHeap == NULL)
        {
            if (!HeapExistingInitialize(GetProcessHeap()))
            {
                return NULL;
            }
        }
        MemPtr = (PVOID) HeapReAlloc( gs_hHeap, HEAP_ZERO_MEMORY, Src, AllocSize );
    }
#endif

    if (!MemPtr)
    {
        DebugPrint(( TEXT("MemReAlloc() failed, src=%x, size=%d"), (ULONG_PTR)Src, AllocSize ));
        SetLastError( ERROR_NOT_ENOUGH_MEMORY );
    }

    return MemPtr;
}

VOID
pMemFreeForHeap(
    HANDLE gs_hHeap,
    PVOID MemPtr
#ifdef FAX_HEAP_DEBUG
    , ULONG Line,
    LPSTR File
#endif
    )
{
#ifdef FAX_HEAP_DEBUG
    PHEAP_BLOCK hb;
    if (!MemPtr)
    {
        return;
    }

    hb = (PHEAP_BLOCK) ((PUCHAR)MemPtr - sizeof(HEAP_BLOCK));

    if (hb->Signature == HEAP_SIG)
    {
        EnterCriticalSection( &gs_CsHeap );
        RemoveEntryList( &hb->ListEntry );
        TotalMemory -= hb->Size;
        TotalAllocs -= 1;
        LeaveCriticalSection( &gs_CsHeap );
    }
    else
    {
        fax_dprintf( TEXT("MemFree(): Corrupt heap block") );
        PrintAllocations();
        __try
        {
            DebugBreak();
        }
        __except (UnhandledExceptionFilter(GetExceptionInformation()))
        {
            // Nothing to do in here.
        }        
    }

    if (pMemFreeUser)
    {
        pMemFreeUser( (PVOID) hb );
    } else
    {
        HeapFree( gs_hHeap, 0, (PVOID) hb );
    }

#else
    if (!MemPtr)
    {
        return;
    }
    if (pMemFreeUser)
    {
        pMemFreeUser( (PVOID) MemPtr );
    }
    else
    {
        HeapFree( gs_hHeap, 0, (PVOID) MemPtr );
    }
#endif
}

VOID
pMemFree(
    PVOID MemPtr
#ifdef FAX_HEAP_DEBUG
    , ULONG Line,
    LPSTR File
#endif
    )
{
#ifdef FAX_HEAP_DEBUG
    pMemFreeForHeap( gs_hHeap, MemPtr, Line, File );
#else
    pMemFreeForHeap( gs_hHeap, MemPtr );
#endif
}


#ifdef FAX_HEAP_DEBUG
VOID
PrintAllocations()
/*++

Routine name : PrintAllocations

Routine description:

    Prints the current list of allocations for a given heap

Author:

    Eran Yariv (EranY), Nov, 2000

Arguments:

Return Value:

    None.

--*/
{
    PLIST_ENTRY                 Next;
    PHEAP_BLOCK                 hb;
    LPTSTR                      s;

    DEBUG_FUNCTION_NAME(TEXT("PrintAllocations"));

	if (FALSE == gs_fCsHeapInit)
	{
		//
		// The module was not initialized
		//
		return;
	}

    DebugPrintEx(
            DEBUG_MSG,
            TEXT("-------------------------------------------------------------------------------------------------------") );
    DebugPrintEx(
            DEBUG_MSG,
            TEXT("Memory Allocations for Heap 0x%08x, Allocs=%d, MaxAllocs=%d, TotalMem=%d, MaxTotalMem=%d"),
            gs_hHeap,
            TotalAllocs,
            MaxTotalAllocs,
            TotalMemory,
            MaxTotalMemory );
    DebugPrintEx(
            DEBUG_MSG,
            TEXT("-------------------------------------------------------------------------------------------------------") );

	
    EnterCriticalSection( &gs_CsHeap );

    Next = HeapHeader.Flink;
    if (Next == NULL)
    {
        DebugPrintEx(
                DEBUG_ERR,
                TEXT("Memory allocation list is corrupted !!!"));
        LeaveCriticalSection( &gs_CsHeap );
        return;
    }
    if ((ULONG_PTR)Next == (ULONG_PTR)&HeapHeader)
    {
        DebugPrintEx(
                DEBUG_MSG,
                TEXT("All allocated memory blocks are now free. Good work."));
        LeaveCriticalSection( &gs_CsHeap );
        return;
    }
    while ((ULONG_PTR)Next != (ULONG_PTR)&HeapHeader)
    {
        hb = CONTAINING_RECORD( Next, HEAP_BLOCK, ListEntry );
        Next = hb->ListEntry.Flink;
        s = (LPTSTR) ((PUCHAR)hb + sizeof(HEAP_BLOCK));
        DebugPrintEx(
                DEBUG_MSG,
                TEXT("%8d %16s @ %5d    0x%08x"),
                hb->Size,
                hb->File,
                hb->Line,
                s );        
    }

    LeaveCriticalSection( &gs_CsHeap );
}   // PrintAllocations

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\product.c ===
/*++

Copyright (c) 1997  Microsoft Corporation

Module Name:

    product.c

Abstract:

    This file implements product type api for fax.

Author:

    Wesley Witt (wesw) 12-Feb-1997

Environment:

    User Mode

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <Commdlg.h>

#include "faxreg.h"
#include "faxutil.h"


BOOL
IsWinXPOS()
{
    DWORD dwVersion, dwMajorWinVer, dwMinorWinVer;

    dwVersion = GetVersion();
    dwMajorWinVer = (DWORD)(LOBYTE(LOWORD(dwVersion)));
    dwMinorWinVer = (DWORD)(HIBYTE(LOWORD(dwVersion)));
    
    return (dwMajorWinVer == 5 && dwMinorWinVer >= 1);
}

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  GetProductSKU
//
//  Purpose:        
//                  Checks what's the product SKU we're running on
//
//  Params:
//                  None
//
//  Return Value:
//                  one of PRODUCT_SKU_TYPE - declared in faxreg.h
//                  PRODUCT_SKU_UNKNOWN - in case of failure
//
//  Author:
//                  Mooly Beery (MoolyB) 02-JAN-2000
///////////////////////////////////////////////////////////////////////////////////////
PRODUCT_SKU_TYPE GetProductSKU()
{
#ifdef DEBUG
    HKEY  hKey;
    DWORD dwRes;
    DWORD dwDebugSKU = 0;
#endif

    OSVERSIONINFOEX osv = {0};

    DEBUG_FUNCTION_NAME(TEXT("GetProductSKU"))

#ifdef DEBUG

    //
    // For DEBUG version try to read SKU type from the registry
    //
    dwRes = RegOpenKeyEx(HKEY_LOCAL_MACHINE, REGKEY_FAX_CLIENT, 0, KEY_READ, &hKey);
    if (dwRes == ERROR_SUCCESS) 
    {
        GetRegistryDwordEx(hKey, REGVAL_DBG_SKU, &dwDebugSKU);
        RegCloseKey(hKey);

        if(PRODUCT_SKU_PERSONAL         == dwDebugSKU ||
           PRODUCT_SKU_PROFESSIONAL     == dwDebugSKU ||
           PRODUCT_SKU_SERVER           == dwDebugSKU ||
           PRODUCT_SKU_ADVANCED_SERVER  == dwDebugSKU ||
           PRODUCT_SKU_DATA_CENTER      == dwDebugSKU ||
           PRODUCT_SKU_DESKTOP_EMBEDDED == dwDebugSKU ||
           PRODUCT_SKU_WEB_SERVER       == dwDebugSKU ||
           PRODUCT_SKU_SERVER_EMBEDDED  == dwDebugSKU)
        {
            return (PRODUCT_SKU_TYPE)dwDebugSKU;
        }
    }
    else
    {
        DebugPrintEx(DEBUG_ERR,TEXT("RegOpenKeyEx(REGKEY_FAXSERVER) failed with %ld."),dwRes);
    }

#endif

    osv.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);
    if (!GetVersionEx(((OSVERSIONINFO*)&osv)))
    {
        DebugPrintEx(DEBUG_ERR,TEXT("GetVersionEx failed with %ld."),GetLastError());
        ASSERT_FALSE;
        return PRODUCT_SKU_UNKNOWN;
    }

    if (osv.dwPlatformId != VER_PLATFORM_WIN32_NT)
    {
        DebugPrintEx(DEBUG_WRN, TEXT("Can't tell SKU for W9X Platforms"));
        return PRODUCT_SKU_UNKNOWN;
    }

    if (osv.dwMajorVersion < 5)
    {
        DebugPrintEx(DEBUG_WRN, TEXT("Can't tell SKU for NT4 Platform"));
        return PRODUCT_SKU_UNKNOWN;
    }

    // This is the matching between the different SKUs and the constants returned by GetVersionEx
    // Personal                 VER_SUITE_PERSONAL
    // Professional             VER_NT_WORKSTATION
    // Server                   VER_NT_SERVER
    // Advanced Server          VER_SUITE_ENTERPRISE
    // DataCanter               VER_SUITE_DATACENTER
    // Embedded NT              VER_SUITE_EMBEDDEDNT
    // Web server (AKA Blade)   VER_SUITE_BLADE

    // First, lets see if this is embedded system
    if (osv.wSuiteMask & VER_SUITE_EMBEDDEDNT)
    {
        if (VER_NT_WORKSTATION == osv.wProductType) 
        {
            return PRODUCT_SKU_DESKTOP_EMBEDDED;
        }   
        else
        {
            return PRODUCT_SKU_SERVER_EMBEDDED;
        }
    }

    if (osv.wSuiteMask & VER_SUITE_PERSONAL)
    {
        return PRODUCT_SKU_PERSONAL;
    }
    if (osv.wSuiteMask & VER_SUITE_ENTERPRISE)
    {
        return PRODUCT_SKU_ADVANCED_SERVER;
    }
    if (osv.wSuiteMask & VER_SUITE_DATACENTER)
    {
        return PRODUCT_SKU_DATA_CENTER;
    }
    if (osv.wSuiteMask & VER_SUITE_BLADE)
    {
        return PRODUCT_SKU_WEB_SERVER;
    }
    if (osv.wProductType == VER_NT_WORKSTATION)
    {
        return PRODUCT_SKU_PROFESSIONAL;
    }
    if ((osv.wProductType == VER_NT_SERVER) || (osv.wProductType == VER_NT_DOMAIN_CONTROLLER))
    {
        return PRODUCT_SKU_SERVER;
    }
    ASSERT_FALSE;
    return PRODUCT_SKU_UNKNOWN;
}   // GetProductSKU

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  IsDesktopSKU
//
//  Purpose:        
//                  Checks if we're running on PERSONAL or PROFESSIONAL SKUs
//
//  Params:
//                  None
//
//  Return Value:
//                  TRUE - current SKU is PER/PRO
//                  FALSE - different SKU
//
//  Author:
//                  Mooly Beery (MoolyB) 07-JAN-2000
///////////////////////////////////////////////////////////////////////////////////////
BOOL IsDesktopSKU()
{
    PRODUCT_SKU_TYPE pst = GetProductSKU();
    return (IsDesktopSKUFromSKU(pst));
}

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  IsFaxShared
//
//  Purpose:        
//                  Checks if this is a SKU which supports fax sharing over the network
//
//  Params:
//                  None
//
//  Return Value:
//                  TRUE - current SKU supports network fax sharing
//                  FALSE - otherwise
//
//  Author:
//                  Eran Yariv (EranY) 31-DEC-2001
///////////////////////////////////////////////////////////////////////////////////////
BOOL IsFaxShared()
{
    if (IsDesktopSKU())
    {
        //
        // Desktop SKUs (Home edition, Professional, Embedded desktop) don't support fax sharing
        //
        return FALSE;
    }
    
    if (PRODUCT_SKU_WEB_SERVER == GetProductSKU())
    {
        //
        // Blade (AKA Web Server) doesn't support fax sharing
        //
        return FALSE;
    }
    return TRUE;
}   // IsFaxShared

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  GetDeviceLimit
//
//  Purpose:        
//                  Get maximum number of the fax devices for the current Windows version
//
//  Params:
//                  None
//
//  Return Value:
//                  maximum number of the fax devices
///////////////////////////////////////////////////////////////////////////////////////
DWORD
GetDeviceLimit()
{
    DWORD            dwDeviceLimit = 0;
    PRODUCT_SKU_TYPE typeSKU = GetProductSKU();

    switch(typeSKU)
    {
        case PRODUCT_SKU_PERSONAL:              // Windows XP Personal
        case PRODUCT_SKU_DESKTOP_EMBEDDED:      // Windows XP embedded 
        case PRODUCT_SKU_PROFESSIONAL:          // Windows XP Professional
        case PRODUCT_SKU_WEB_SERVER:            // Blade - Windows Server 2003 Web Server
            dwDeviceLimit = 1;
            break;
        case PRODUCT_SKU_SERVER_EMBEDDED:       // Windows Server 2003 embedded
        case PRODUCT_SKU_SERVER:                // Windows Server 2003 Server
            dwDeviceLimit = 4;
            break;
        case PRODUCT_SKU_ADVANCED_SERVER:       // Windows Server 2003 Enterprise Server 
        case PRODUCT_SKU_DATA_CENTER:           // Windows Server 2003 Data Center Server
            dwDeviceLimit = INFINITE;
            break;
        default:
            ASSERT_FALSE;
            break;                        
    }
    return dwDeviceLimit;
}


///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  IsFaxComponentInstalled
//
//  Purpose:        
//                  Check if specific fax component is installed
//
//  Params:
//                  Fax component ID
//
//  Return Value:
//                  TRUE if the fax component is installed
//                  FALSE otherwize 
///////////////////////////////////////////////////////////////////////////////////////
BOOL
IsFaxComponentInstalled(
    FAX_COMPONENT_TYPE component
)
{
    HKEY  hKey;
    DWORD dwRes;
    DWORD dwComponent = 0;
    BOOL  bComponentInstalled = FALSE;

    DEBUG_FUNCTION_NAME(TEXT("IsFaxComponentInstalled"))

    PRODUCT_SKU_TYPE skuType = GetProductSKU();
    if (
        (skuType == PRODUCT_SKU_DESKTOP_EMBEDDED) ||
        (skuType == PRODUCT_SKU_SERVER_EMBEDDED)
        )
    {
        // In case this is an embedded system we have to check in the registry
        // what are the installed components
        dwRes = RegOpenKeyEx(HKEY_LOCAL_MACHINE, REGKEY_FAX_SETUP, 0, KEY_READ, &hKey);
        if (dwRes == ERROR_SUCCESS) 
        {
            dwRes = GetRegistryDwordEx(hKey, REGVAL_INSTALLED_COMPONENTS, &dwComponent);
            if (dwRes != ERROR_SUCCESS) 
            {
                DebugPrintEx(DEBUG_ERR,TEXT("GetRegistryDwordEx failed with %ld."), dwRes);
            }
            RegCloseKey(hKey);
        }
        else
        {
            DebugPrintEx(DEBUG_ERR,TEXT("RegOpenKeyEx failed with %ld."), dwRes);
        }
        bComponentInstalled = (dwComponent & component);
    }
    else
    {
        // the system is not embedded
        // 
        if (IsDesktopSKU())
        {
            // DESKTOP skus -> Admin and Admin help is not installed
            if (
                (component != FAX_COMPONENT_ADMIN) &&
                (component != FAX_COMPONENT_HELP_ADMIN_HLP) &&
                (component != FAX_COMPONENT_HELP_ADMIN_CHM)
                )
            {
                bComponentInstalled  = TRUE;
            }
        }
        else
        {
            // SERVER skus -> all components are installed
            bComponentInstalled  = TRUE;
        }
    }
    
    return bComponentInstalled;     
} // IsFaxComponentInstalled


///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  GetOpenFileNameStructSize
//
//  Purpose:        
//                  return correct size of OPENFILENAME passed to GetOpenFileName() and GetSaveFileName()
//                  according to current OS version
//
//  Return Value:
//                  Size of OPENFILENAME struct
///////////////////////////////////////////////////////////////////////////////////////
DWORD
GetOpenFileNameStructSize()
{
    DWORD dwVersion = GetVersion();

    if(LOBYTE(LOWORD(dwVersion)) >= 5)
    {
        //
        // W2K or above
        //
        return sizeof(OPENFILENAME);
    }

    return sizeof(OPENFILENAME_NT4);

} // GetOpenFileNameStructSize

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  IsDesktopSKUFromSKU
//
//  Purpose:        
//                  Checks if we're accessing a desktop sku
//
//  Params:
//                  pst - the product sku
//
//  Return Value:
//                  TRUE - current SKU is desktop
//                  FALSE - different SKU
//
//  Author:
//                  Oded Sacher (OdedS) 01-JAN-2001
///////////////////////////////////////////////////////////////////////////////////////
BOOL IsDesktopSKUFromSKU(
	PRODUCT_SKU_TYPE pst
	)
{    
    return (
        (pst==PRODUCT_SKU_PERSONAL)     || 
        (pst==PRODUCT_SKU_PROFESSIONAL) ||
        (pst==PRODUCT_SKU_DESKTOP_EMBEDDED)
        );
}

const TCHAR gszPRODUCT_SKU_UNKNOWN[]		  = _T("Unknown");
const TCHAR gszPRODUCT_SKU_PERSONAL[]		  = _T("Personal");
const TCHAR gszPRODUCT_SKU_PROFESSIONAL[]     = _T("Professional");
const TCHAR gszPRODUCT_SKU_SERVER[]           = _T("Standard Server");
const TCHAR gszPRODUCT_SKU_ADVANCED_SERVER[]  = _T("Advanced Server");
const TCHAR gszPRODUCT_SKU_DATA_CENTER[]      = _T("Data Center");
const TCHAR gszPRODUCT_SKU_DESKTOP_EMBEDDED[] = _T("Embedded Desktop");
const TCHAR gszPRODUCT_SKU_SERVER_EMBEDDED[]  = _T("Embedded Server");
const TCHAR gszPRODUCT_SKU_WEB_SERVER[]       = _T("Web Server");

///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  StringFromSKU
//
//  Purpose:        
//                  Get the product SKU as a string
//
//  Params:
//                  None
//
//  Author:
//                  Mooly Beeri (MoolyB) 06-JAN-2001
///////////////////////////////////////////////////////////////////////////////////////
LPCTSTR StringFromSKU(PRODUCT_SKU_TYPE pst)
{
	switch (pst)
	{
    case PRODUCT_SKU_PERSONAL:			return gszPRODUCT_SKU_PERSONAL;
    case PRODUCT_SKU_PROFESSIONAL:		return gszPRODUCT_SKU_PROFESSIONAL;
    case PRODUCT_SKU_SERVER:			return gszPRODUCT_SKU_SERVER;
    case PRODUCT_SKU_ADVANCED_SERVER:	return gszPRODUCT_SKU_ADVANCED_SERVER;
    case PRODUCT_SKU_DATA_CENTER:		return gszPRODUCT_SKU_DATA_CENTER;
    case PRODUCT_SKU_DESKTOP_EMBEDDED:	return gszPRODUCT_SKU_DESKTOP_EMBEDDED;
    case PRODUCT_SKU_SERVER_EMBEDDED:	return gszPRODUCT_SKU_SERVER_EMBEDDED;
    case PRODUCT_SKU_WEB_SERVER:		return gszPRODUCT_SKU_WEB_SERVER;
	default:							return gszPRODUCT_SKU_UNKNOWN;
	}
}
///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  GetProductBuild
//
//  Purpose:        
//                  Get the product's build number. retreives the file version of FXSOCM.DLL
//					that resides under %system32%\setup
//					This function should be called on XP/Server 2003 platforms only
//
//  Params:
//                  None
//
//  Return Value:
//                  Product major build - in case of success
//                  0 - otherwise
//
//  Author:
//                  Mooly Beeri (MoolyB) 06-JAN-2001
///////////////////////////////////////////////////////////////////////////////////////
DWORD GetProductBuild()
{
	TCHAR		szBuffer[MAX_PATH]	= {0};
	FAX_VERSION Version				= {0};
	DWORD		dwRet				= ERROR_SUCCESS;

    DEBUG_FUNCTION_NAME(TEXT("GetProductBuild"))

	// get the system directory
	if (!GetSystemDirectory(szBuffer,MAX_PATH-_tcslen(FAX_SETUP_DLL_PATH)-1))
	{
		DebugPrintEx(DEBUG_ERR,TEXT("GetSystemDirectory failed with %ld."),GetLastError());
		return 0;
	}

	// append \\setup\\fxsocm.dll to the system directory
	_tcscat(szBuffer,FAX_SETUP_DLL_PATH);

	DebugPrintEx(DEBUG_MSG,TEXT("Getting file version for %s."),szBuffer);

	Version.dwSizeOfStruct = sizeof(FAX_VERSION);
	dwRet = GetFileVersion(szBuffer,&Version);
	if (dwRet!=ERROR_SUCCESS)
	{
		DebugPrintEx(DEBUG_ERR,TEXT("GetFileVersion failed with %ld."),dwRet);
		return 0;
	}

	DebugPrintEx(DEBUG_MSG,TEXT("Fax product build is %d."),Version.wMajorBuildNumber);
	return Version.wMajorBuildNumber;
}   // GetProductBuild

DWORD
IsFaxInstalled (
    LPBOOL lpbInstalled
    )
/*++

Routine name : IsFaxInstalled

Routine description:

    Determines if the fax service is installed by looking into the OCM registry

Author:

    Eran Yariv (EranY), Jul, 2000

Arguments:

    lpbInstalled                  [out]    - Result flag

Return Value:

    Standard Win32 error code

--*/
{
    DWORD dwRes = ERROR_SUCCESS;
    DWORD dwVal;
    HKEY  hKey;
    
    DEBUG_FUNCTION_NAME(TEXT("IsFaxInstalled"))
    
    hKey = OpenRegistryKey (HKEY_LOCAL_MACHINE,
                            REGKEY_FAX_SETUP,
                            FALSE,
                            KEY_READ);
    if (!hKey)
    {
        dwRes = GetLastError ();
		DebugPrintEx(DEBUG_ERR,
		             TEXT("OpenRegistryKey failed with %ld."),
		             dwRes);
        //
        // Key couldn't be opened => Fax isn't installed
        //
        *lpbInstalled = FALSE;
        dwRes = ERROR_SUCCESS;
        return dwRes;
    }
    dwVal = GetRegistryDword (hKey, REGVAL_FAXINSTALLED);
    RegCloseKey (hKey);
	DebugPrintEx(DEBUG_MSG,
		            TEXT("Fax is%s installed on the system"), 
		            dwVal ? L"" : L" not");
    *lpbInstalled = dwVal ? TRUE : FALSE;
    return dwRes;
}   // IsFaxInstalled
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\rpcutil.cpp ===
#include "faxutil.h"
#include <tchar.h>

RPC_STATUS
GetRpcStringBindingInfo (
    IN          handle_t    hBinding,
    OUT         LPTSTR*     pptszNetworkAddress,
    OUT         LPTSTR*     pptszProtSeq
)
/*++

Routine name : GetRpcStringBindingInfo

Routine description:

    A utility function to retrieve the machine name and\or protSeq of the RPC client from the 
    server binding handle.

Arguments:
    hBinding       - Server binding handle

Return Value:

    Returns RPC_S_OK if successfully allocated strings of the client machine name and protSeq.
    The caller should free these strings with MemFree().

    otherwise RPC_STATUS error code.

--*/
{
    RPC_STATUS ec = RPC_S_OK;
    
    LPTSTR lptstrNetworkAddressRetVal = NULL;
    LPTSTR lptstrProtSeqRetVal = NULL;

#ifdef UNICODE
    unsigned short* tszStringBinding = NULL;
    unsigned short* tszNetworkAddress = NULL;
    unsigned short* tszProtSeq = NULL;
#else
	unsigned char* tszStringBinding = NULL;
    unsigned char* tszNetworkAddress = NULL;
    unsigned char* tszProtSeq = NULL;
#endif

    RPC_BINDING_HANDLE hServer = INVALID_HANDLE_VALUE;
    
    DEBUG_FUNCTION_NAME(TEXT("GetRpcStringBindingInfo"));
    
    Assert (pptszNetworkAddress || pptszProtSeq);
    //
    // Get server partially-bound handle from client binding handle
    //
    ec = RpcBindingServerFromClient (hBinding, &hServer);
    if (RPC_S_OK != ec)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("RpcBindingServerFromClient failed with %ld"),
            ec);
        goto exit;            
    }
    //
    // Convert binding handle to string represntation
    //
    ec = RpcBindingToStringBinding (hServer, &tszStringBinding);
    if (RPC_S_OK != ec)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("RpcBindingToStringBinding failed with %ld"),
            ec);
        goto exit;
    }
    //
    // Parse the returned string, looking for the NetworkAddress
    //
    ec = RpcStringBindingParse (tszStringBinding, NULL, &tszProtSeq, &tszNetworkAddress, NULL, NULL);
    if (RPC_S_OK != ec)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("RpcStringBindingParse failed with %ld"),
            ec);
        goto exit;
    }

    //
    // Now, just copy the results to the return buffer
    //

    if (pptszNetworkAddress)
    {
        //
        //  The user asked for NetworkAddress
        //
        if (!tszNetworkAddress)
        {
            //
            // Unacceptable client machine name
            //
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("Client machine name is invalid"));
            ec = ERROR_GEN_FAILURE;
            goto exit;
        }        
        lptstrNetworkAddressRetVal = StringDup ((LPCTSTR)tszNetworkAddress);
        if (!lptstrNetworkAddressRetVal)
        {
            ec = GetLastError();
            goto exit;
        }
    }

    if (pptszProtSeq)
    {
        //
        //  The user asked for NetworkAddress
        //
        if (!tszProtSeq)
        {
            //
            // Unacceptable client machine name
            //
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("Client ProtSeq name is invalid"));
            ec = ERROR_GEN_FAILURE;
            goto exit;
        }        
        lptstrProtSeqRetVal = StringDup ((LPCTSTR)tszProtSeq);
        if (!lptstrProtSeqRetVal)
        {
            ec = GetLastError();
            goto exit;
        }
    }

    if (pptszNetworkAddress)
    {
        *pptszNetworkAddress = lptstrNetworkAddressRetVal;
    }

    if (pptszProtSeq)
    {
        *pptszProtSeq = lptstrProtSeqRetVal;
    }
    
    Assert(RPC_S_OK == ec);

exit:

    if (INVALID_HANDLE_VALUE != hServer)
    {
        RpcBindingFree (&hServer);
    }
    if (tszStringBinding)
    {
        RpcStringFree (&tszStringBinding);
    }   
    if (tszNetworkAddress)
    {
        RpcStringFree (&tszNetworkAddress);
    }
    if (RPC_S_OK != ec)
    {
        MemFree(lptstrNetworkAddressRetVal);
        MemFree(lptstrProtSeqRetVal);
    }
    return ec;
}   // GetRpcStringBindingInfo


RPC_STATUS
IsLocalRPCConnectionNP( PBOOL pbIsLocal)
{
/*++

Routine name : IsLocalRPCConnectionNP

Routine description:

    Checks whether the RPC call on named pipe ProtSeq to the calling procedure is local

Author:

    Caliv Nir (t-nicali),    Oct, 2001

Arguments:

    [OUT]   pbIsLocal   - returns TRUE if the connection is local 

Return Value:

    RPC_STATUS Error code

        RPC_S_OK        -   The call succeeded. 
        anything else   -   The call failed.

--*/
        
        RPC_STATUS  rc;
        UINT        LocalFlag;

        DEBUG_FUNCTION_NAME(TEXT("IsLocalRPCConnectionNP"));
        
        Assert(pbIsLocal);

        //
        // Inquire if local RPC call
        //
        rc = I_RpcBindingIsClientLocal( 0,    // Active RPC call we are servicing
                                        &LocalFlag);
        if( RPC_S_OK != rc)
        {
            DebugPrintEx(DEBUG_ERR,
                    TEXT("I_RpcBindingIsClientLocal failed. (ec: %ld)"),
                    rc);
            goto Exit;
        }

        Assert (RPC_S_OK == rc);

        if( !LocalFlag )
        {
            //  Not a local connection

            *pbIsLocal = FALSE;
        }
        else
        {
            *pbIsLocal = TRUE;
        }

Exit:
        return rc;

}   // IsLocalRPCConnectionNP

RPC_STATUS
IsLocalRPCConnectionIpTcp( 
	handle_t	hBinding,
	PBOOL		pbIsLocal)
{
/*++
Routine name : IsLocalRPCConnectionIpTcp

Routine description:
    Checks whether the RPC call to the calling procedure is local.
	Works for ncacn_ip_tcp protocol only.    

Author:
    Oded Sacher (OdedS),    April, 2002

Arguments:
	[IN]	hBinding	- Server binding handle
    [OUT]   pbIsLocal   - returns TRUE if the connection is local 

Return Value:
    Win32 Error code        
--*/
	RPC_STATUS  ec;
	LPTSTR lptstrMachineName = NULL;
	DEBUG_FUNCTION_NAME(TEXT("IsLocalRPCConnectionIpTcp"));

	Assert (pbIsLocal);

	ec = GetRpcStringBindingInfo(hBinding,
                                 &lptstrMachineName,
                                 NULL);
	if (RPC_S_OK != ec)
	{
		DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetClientMachineName failed %ld"),
			ec);
		return ec;
	}
	
	if (0 == _tcscmp(lptstrMachineName, LOCAL_HOST_ADDRESS))
	{
		*pbIsLocal = TRUE;
	}
	else
	{
		*pbIsLocal = FALSE;
	}	

	MemFree(lptstrMachineName);
	return ec;
}   // IsLocalRPCConnectionIpTcp
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\service.cpp ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

	Service.cpp

Abstract:

	General fax server service utility functions

Author:

	Eran Yariv (EranY)	Dec, 2000

Revision History:

--*/


#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <Accctrl.h>
#include <Aclapi.h>

#include "faxutil.h"
#include "faxreg.h"
#include "FaxUIConstants.h"

DWORD 
FaxOpenService (
    LPCTSTR    lpctstrMachine,
    LPCTSTR    lpctstrService,
    SC_HANDLE *phSCM,
    SC_HANDLE *phSvc,
    DWORD      dwSCMDesiredAccess,
    DWORD      dwSvcDesiredAccess,
    LPDWORD    lpdwStatus
);

DWORD
FaxCloseService (
    SC_HANDLE hScm,
    SC_HANDLE hSvc
);    

DWORD 
WaitForServiceStopOrStart (
    SC_HANDLE hSvc,
    BOOL      bStop,
    DWORD     dwMaxWait
);


DWORD 
FaxOpenService (
    LPCTSTR    lpctstrMachine,
    LPCTSTR    lpctstrService,
    SC_HANDLE *phSCM,
    SC_HANDLE *phSvc,
    DWORD      dwSCMDesiredAccess,
    DWORD      dwSvcDesiredAccess,
    LPDWORD    lpdwStatus
)
/*++

Routine name : FaxOpenService

Routine description:

	Opens a handle to a service and optionally queries its status

Author:

	Eran Yariv (EranY),	Oct, 2001

Arguments:

    lpctstrMachine     [in]  - Machine on which the service handle should be obtained
    
    lpctstrService     [in]  - Service name
    
	phSCM              [out] - Handle to the service control manager.
	                            
	phSvc              [out] - Handle to the service

    dwSCMDesiredAccess [in]  - Specifies the access to the service control manager
    
    dwSvcDesiredAccess [in]  - Specifies the access to the service

    lpdwStatus         [out] - Optional. If not NULL, point to a DWORD which we receive the current
                               status of the service.
                            
Return Value:

    Standard Win32 error code
    
Remarks:

    If the function succeeds, the caller should call FaxCloseService to free resources.

--*/
{
    SC_HANDLE hSvcMgr = NULL;
    SC_HANDLE hService = NULL;
    DWORD dwRes = ERROR_SUCCESS;
    DEBUG_FUNCTION_NAME(TEXT("FaxOpenService"))

    hSvcMgr = OpenSCManager(
        lpctstrMachine,
        NULL,
        dwSCMDesiredAccess
        );
    if (!hSvcMgr) 
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("OpenSCManager failed with %ld"),
            dwRes);
        goto exit;
    }

    hService = OpenService(
        hSvcMgr,
        lpctstrService,
        dwSvcDesiredAccess
        );
    if (!hService) 
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("OpenService failed with %ld"),
            dwRes);
        goto exit;
    }
    if (lpdwStatus)
    {
        SERVICE_STATUS Status;
        //
        // Caller wants to know the service status
        //
        if (!QueryServiceStatus( hService, &Status )) 
        {
            dwRes = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("QueryServiceStatus failed with %ld"),
                dwRes);
            goto exit;
        }
        *lpdwStatus = Status.dwCurrentState;
    }        

    *phSCM = hSvcMgr;
    *phSvc = hService;
    
    Assert (ERROR_SUCCESS == dwRes);
    
exit:
    
    if (ERROR_SUCCESS != dwRes)
    {
        FaxCloseService (hSvcMgr, hService);
    }
    return dwRes;
}   // FaxOpenService

DWORD
FaxCloseService (
    SC_HANDLE hScm,
    SC_HANDLE hSvc
)
/*++

Routine name : FaxCloseService

Routine description:

	Closes all handles to the service obtained by a call to FaxOpenService

Author:

	Eran Yariv (EranY),	Oct, 2001

Arguments:

	hScm              [in] - Handle to the service control manager
	                            
	hSvc              [in] - Handle to the service
                            
Return Value:

    Standard Win32 error code
    
--*/
{
    DWORD dwRes = ERROR_SUCCESS;
    DEBUG_FUNCTION_NAME(TEXT("FaxCloseService"))

    if (hSvc) 
    {
        if (!CloseServiceHandle(hSvc))
        {
            dwRes = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("CloseServiceHandle failed with %ld"),
                dwRes);
        }
    }
    if (hScm) 
    {
        if (!CloseServiceHandle(hScm))
        {
            dwRes = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("CloseServiceHandle failed with %ld"),
                dwRes);
        }
    }
    return dwRes;
}   // FaxCloseService

HANDLE 
CreateSvcStartEventWithGlobalNamedEvent()
/*++

Routine name : CreateSvcStartEventWithGlobalNamedEvent

Routine description:

	Opens (or creates) the global named-event which signals a fax server service startup.
	This function is here so the client side modules can talk to a WinXP RTM fax service.
	This function is called by CreateSvcStartEvent if a WinXP RTM fax service is detected locally.
	For why and how see extensive remarks in CreateSvcStartEvent.

Author:

	Eran Yariv (EranY),	Dec, 2000

Arguments:


Return Value:

    Handle to the event or NULL on error (sets last error).

--*/
{
    DEBUG_FUNCTION_NAME(TEXT("CreateSvcStartEventWithGlobalNamedEvent"));

    HANDLE hEvent = NULL;

#define FAX_SERVER_EVENT_NAME   TEXT("Global\\FaxSvcRPCStarted-1ed23866-f90b-4ec5-b77e-36e8709422b6")   // Name of event that notifies service RPC is on (WinXP RTM only).

    //
    // First, try to open the event, asking for synchronization only.
    //
    hEvent = OpenEvent(SYNCHRONIZE, FALSE, FAX_SERVER_EVENT_NAME);
    if (hEvent)
    {
        //
        // Good! return now.
        //
        return hEvent;
    }
    //
    // Houston, we've got a problem...
    //
    if (ERROR_FILE_NOT_FOUND != GetLastError())
    {
        //
        // The event is there, we just can't open it
        //
        DebugPrintEx(DEBUG_ERR, 
                     TEXT("OpenEvent(FAX_SERVER_EVENT_NAME) failed (ec: %ld)"), 
                     GetLastError());
        return NULL;
    }
    //
    // The event does not exist yet.
    //
    SECURITY_ATTRIBUTES* pSA = NULL;
    //
    // We create the event, giving everyone SYNCHRONIZE access only.
    // Notice that network service account (underwhich the service is running)
    // get full access.
    //
    pSA = CreateSecurityAttributesWithThreadAsOwner (SYNCHRONIZE, SYNCHRONIZE, EVENT_ALL_ACCESS);
    if(!pSA)
    {
        DebugPrintEx(DEBUG_ERR, 
                     TEXT("CreateSecurityAttributesWithThreadAsOwner failed (ec: %ld)"), 
                     GetLastError());
        return NULL;
    }
    hEvent = CreateEvent(pSA, TRUE, FALSE, FAX_SERVER_EVENT_NAME);
    DWORD dwRes = ERROR_SUCCESS;
    if (!hEvent) 
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR, 
                     TEXT("CreateEvent(FAX_SERVER_EVENT_NAME) failed (ec: %ld)"), 
                     dwRes);
    }
    DestroySecurityAttributes (pSA);
    if (!hEvent)
    {
        SetLastError (dwRes);
    }
    return hEvent;
}   // CreateSvcStartEventWithGlobalNamedEvent

DWORD
CreateSvcStartEvent(
    HANDLE *lphEvent,
    HKEY   *lphKey
)
/*++

Routine name : CreateSvcStartEvent

Routine description:

	Creates a local event which signals a fax server service startup

Author:

	Eran Yariv (EranY),	Dec, 2000

Arguments:

	lphEvent          [out] - Handle to newly created event. 
	                          This event is signaled when the service is up and running.
	                          The event is manual-reset. 
                              	                          
	                          The caller should CloseHandle on this parameter.
	                            
	lphKey            [out] - Handle to registry key.
	                          The caller should RegCloseKey this handle ONLY AFTER it no longer
	                          needs the event. Otherwise, the event will be signaled.
	                          This value may return NULL, in which case the caller should not call RegCloseKey.

Return Value:

    Standard Win32 error code
    
Remarks:

    The event returned from this function is a single-shot event.
    After a call to WaitForSingleObject (or multiple objects) on it, the caller
    should close the event and obtain a new one.    

--*/
{
    DWORD  ec = ERROR_SUCCESS;
    HANDLE hEvent = NULL;
    HKEY   hKey = NULL;
    SC_HANDLE hScm = NULL;
    SC_HANDLE hFax = NULL;
    DWORD dwSvcStatus;
    DEBUG_FUNCTION_NAME(TEXT("CreateSvcStartEvent"));

    if (IsWinXPOS() && IsDesktopSKU())
    {
        //
        // In WinXP desktop SKU (PER/PRO) RTM, the service used to signal a global named event.
        // This has changed since Win .NET Server and WinXP SP1.
        // When a network printer connection is added, the new version of the client side dll (fxsapi.dll)
        // gets copied as the printer driver. It will be used by any application which prints, event to the
        // local fax server. In the local fax server case, it is crucial we find what is the event mechanism
        // the service uses to signal it is ready for RPC calls.
        //
        // Q: Why no check the OS version?
        // A: Because of the following scenario:
        //      - User installs WinXP RTM
        //      - User installs WinXP SP1
        //      - User installs fax (from the RTM CD)
        //    In that case, the service will be running using the WinXP RTM bits but the system
        //    will report it is WinXP SP1. The only way to know for sure is by getting the file 
        //    version of fxssvc.exe
        //
        FAX_VERSION FaxVer;
        TCHAR tszSysDir[MAX_PATH + 1] = {0};
        TCHAR tszFxsSvc[MAX_PATH * 2] = {0};
        
        if (!GetSystemDirectory (tszSysDir, ARR_SIZE(tszSysDir)))
        {
            ec = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("GetSystemDirectory failed with %ld"),
                ec);
            return ec;
        }
        if (0 > _sntprintf (tszFxsSvc, ARR_SIZE (tszFxsSvc) - 1, TEXT("%s\\") FAX_SERVICE_EXE_NAME, tszSysDir))
        {
            ec = ERROR_DIRECTORY;
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("building the full path to fxssvc.exe failed with %ld"),
                ec);
            return ec;
        }
        FaxVer.dwSizeOfStruct = sizeof (FaxVer);
        ec = GetFileVersion (tszFxsSvc, &FaxVer);
        if (ERROR_SUCCESS != ec)
        {                    
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("GetFileVersion failed with %ld"),
                ec);
            return ec;
        }
        if ((5 == FaxVer.wMajorVersion) &&
            (2 == FaxVer.wMinorVersion) &&
            (1776 == FaxVer.wMajorBuildNumber))
        {
            //
            // Build 5.2.1776 was the WinXP RTM Fax version.
            // The service is of that version and is using a global named event to signal
            // it is ready for RPC connections.
            //
            hEvent = CreateSvcStartEventWithGlobalNamedEvent ();
            if (NULL == hEvent)
            {
                ec = GetLastError ();
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("CreateSvcStartEventWithGlobalNamedEvent failed with %ld"),
                    ec);
                return ec;
            }
            //
            // Succeeded, return new event handle.
            //
            *lphKey = NULL;
            *lphEvent = hEvent;
            return ERROR_SUCCESS;
        }
        //
        // Else, fall through to the current implementation (listening on registry change event).
        //
    } 
    ec = RegOpenKeyEx (HKEY_LOCAL_MACHINE, 
                       REGKEY_FAX_SERVICESTARTUP, 
                       0,
                       KEY_QUERY_VALUE | KEY_NOTIFY,
                       &hKey);
    if (ERROR_SUCCESS != ec)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("RegOpenKeyEx failed with %ld"),
            ec);
        return ec;
    }
    //
    // First, register for events
    //
    hEvent = CreateEvent (NULL,      // Default security
                          TRUE,      // Manual reset
                          FALSE,     // Start non-signaled
                          NULL);     // Unnamed
    if (!hEvent)
    {
        ec = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("CreateEvent failed with %ld"),
            ec);
        goto Exit;
    }               
    ec = RegNotifyChangeKeyValue (hKey,                         // Watch for changes in key
                                  FALSE,                        // Don't care about subtrees
                                  REG_NOTIFY_CHANGE_LAST_SET,   // Tell me when data changes there
                                  hEvent,                       // Event used
                                  TRUE);                        // Asynchronous
    if (ERROR_SUCCESS != ec)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("RegNotifyChangeKeyValue failed with %ld"),
            ec);
        goto Exit;
    }   
    //
    // Now, read and see if the service is up
    // NOTICE: Order matters!!!! We must first register for events and only later read
    //
    //
    // Let's see if the service is running...
    //
    
    ec = FaxOpenService (NULL,
                         FAX_SERVICE_NAME,
                         &hScm,
                         &hFax,
                         SC_MANAGER_CONNECT,
                         SERVICE_QUERY_STATUS,
                         &dwSvcStatus);
    if (ERROR_SUCCESS != ec)
    {                             
        goto Exit;
    }
    FaxCloseService (hScm, hFax);
    if (SERVICE_RUNNING == dwSvcStatus) 
    {
        //
        // The service is up and running. Signal the event.
        //
        if (!SetEvent (hEvent))
        {
            ec = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("SetEvent failed with %ld"),
                ec);
            goto Exit;
        }   
    }            
                        
Exit:
    if (ERROR_SUCCESS != ec)
    {
        //
        // Failure
        //
        if (hEvent)
        {
            CloseHandle (hEvent);
        }
        if (hKey)
        {
            RegCloseKey (hKey);
        }
        return ec;
    }
    else
    {
        //
        // Success
        //
        *lphEvent = hEvent;
        *lphKey = hKey;
        return ERROR_SUCCESS;
    }
}   // CreateSvcStartEvent

BOOL
EnsureFaxServiceIsStarted(
    LPCTSTR lpctstrMachineName
    )
/*++

Routine name : EnsureFaxServiceIsStarted

Routine description:

	If the fax service is not running, attempts to start the service and waits for it to run

Author:

	Eran Yariv (EranY),	Jul, 2000

Arguments:

	lpctstrMachineName            [in]     - Machine name (NULL for local)

Return Value:

    TRUE if service is successfully runnig, FALSE otherwise.
    Use GetLastError() to retrieve errors.

--*/
{
    LPCTSTR lpctstrDelaySuicide = SERVICE_DELAY_SUICIDE;  // Service command line parameter
    DWORD dwRes;
    DEBUG_FUNCTION_NAME(TEXT("EnsureFaxServiceIsStarted"))

    dwRes = StartServiceEx (lpctstrMachineName,
                            FAX_SERVICE_NAME,
                            1,
                            &lpctstrDelaySuicide,
                            10 * 60 * 1000);	// Give up after ten minutes
    if (ERROR_SUCCESS != dwRes)
    {
        SetLastError (dwRes);
        return FALSE;
    }
    return TRUE;
}   // EnsureFaxServiceIsStarted

BOOL
StopService (
    LPCTSTR lpctstrMachineName,
    LPCTSTR lpctstrServiceName,
    BOOL    bStopDependents,
    DWORD   dwMaxWait
    )
/*++

Routine name : StopService

Routine description:

	Stops a service

Author:

	Eran Yariv (EranY),	Aug, 2000

Arguments:

    lpctstrMachineName    [in]     - The machine name when the service should stop. NULL for local machine
    lpctstrServiceName    [in]     - The service name
    bStopDependents       [in]     - Stop dependent services too?
    dwMaxWait             [in]     - Max time (millisecs) to wait for service to stop. 0 = Don't wait.

Return Value:

    TRUE if successful, FALSE otherwise.
    Sets thread last error in case of failure.

--*/
{
    BOOL                    bRes = FALSE;
    SC_HANDLE               hScm = NULL;
    SC_HANDLE               hSvc = NULL;
    DWORD                   dwCnt;
    SERVICE_STATUS          serviceStatus = {0};
    LPENUM_SERVICE_STATUS   lpEnumSS = NULL;
    DWORD                   dwRes;

	DEBUG_FUNCTION_NAME(TEXT("StopService"));

    dwRes = FaxOpenService (lpctstrMachineName,
                            lpctstrServiceName,
                            &hScm,
                            &hSvc,
                            SC_MANAGER_CONNECT,
                            SERVICE_QUERY_STATUS | SERVICE_STOP | SERVICE_ENUMERATE_DEPENDENTS,
                            &(serviceStatus.dwCurrentState));

    if (ERROR_SUCCESS != dwRes)
    {
        goto exit;
    }

	if(SERVICE_STOPPED == serviceStatus.dwCurrentState)
	{
        //
        // Service already stopped
        //
		DebugPrintEx(DEBUG_MSG, TEXT("Service is already stopped."));
        bRes = TRUE;
		goto exit;
	}
    if (bStopDependents)
    {
        //
        // Look for dependent services first
        //
        DWORD dwNumDependents = 0;
        DWORD dwBufSize = 0;

        if (!EnumDependentServices (hSvc,
                                    SERVICE_ACTIVE,
                                    NULL,
                                    0,
                                    &dwBufSize,
                                    &dwNumDependents))
        {
            dwRes = GetLastError ();
            if (ERROR_MORE_DATA != dwRes)
            {
                //
                // Real error
                //
        		DebugPrintEx(DEBUG_MSG, TEXT("EnumDependentServices failed with %ld"), dwRes);
                goto exit;
            }
            //
            // Allocate buffer
            //
            if (!dwBufSize)
            {
                //
                // No services
                //
                goto StopOurService;
            }
            lpEnumSS = (LPENUM_SERVICE_STATUS)MemAlloc (dwBufSize);
            if (!lpEnumSS)
            {
        		DebugPrintEx(DEBUG_MSG, TEXT("MemAlloc(%ld) failed with %ld"), dwBufSize, dwRes);
                goto exit;
            }
        }
        //
        // 2nd call
        //
        if (!EnumDependentServices (hSvc,
                                    SERVICE_ACTIVE,
                                    lpEnumSS,
                                    dwBufSize,
                                    &dwBufSize,
                                    &dwNumDependents))
        {
      		DebugPrintEx(DEBUG_MSG, TEXT("EnumDependentServices failed with %ld"), GetLastError());
            goto exit;
        }
        //
        // Walk the services and stop each one
        //
        for (dwCnt = 0; dwCnt < dwNumDependents; dwCnt++)
        {
            if (!StopService (lpctstrMachineName, lpEnumSS[dwCnt].lpServiceName, FALSE))
            {
                goto exit;
            }
        }
    }

StopOurService:
	//
	// Stop the service
	//
	if(!ControlService(hSvc, SERVICE_CONTROL_STOP, &serviceStatus))
	{
		DebugPrintEx(DEBUG_ERR, TEXT("ControlService(STOP) failed: error=%d"), GetLastError());
		goto exit;
	}
	if (0 == dwMaxWait)
	{
	    //
	    // Don't wait.
	    //
	    bRes = TRUE;
	    goto exit;
	}
    //
    // Wait till the service is really stopped
    //
    dwRes = WaitForServiceStopOrStart (hSvc, TRUE, dwMaxWait);
    if (ERROR_SUCCESS == dwRes)
    {
        //
        // Service is really stopped now
        //
        bRes = TRUE;
    }

exit:

    MemFree (lpEnumSS);
    FaxCloseService (hScm, hSvc);
	return bRes;
}   // StopService

BOOL
WaitForServiceRPCServer (
    DWORD dwTimeOut
)
/*++

Routine name : WaitForServiceRPCServer

Routine description:

	Waits until the service RPC server is up and running (or timeouts)

Author:

	Eran Yariv (EranY),	Jul, 2000

Arguments:

	dwTimeOut    [in]     - Wait timeout (in millisecs). Can be INFINITE.

Return Value:

    TRUE if the service RPC server is up and running, FALSE otherwise.

--*/
{
    DWORD dwRes;
    LONG  lRes;
    HANDLE  hFaxServerEvent = NULL;
    HKEY    hKey = NULL;
    DEBUG_FUNCTION_NAME(TEXT("WaitForServiceRPCServer"))

    dwRes = CreateSvcStartEvent (&hFaxServerEvent, &hKey);
    if (ERROR_SUCCESS != dwRes)
    {
        SetLastError (dwRes);
        return FALSE;
    }
    //
    // Wait for the fax service to complete its initialization
    //
    dwRes = WaitForSingleObject(hFaxServerEvent, dwTimeOut);
    switch (dwRes)
    {
        case WAIT_FAILED:
            dwRes = GetLastError();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("WaitForSingleObject failed with %ld"),
                dwRes);
            break;

        case WAIT_OBJECT_0:
            dwRes = ERROR_SUCCESS;
            break;

        case WAIT_TIMEOUT:
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("Service did not signal the event - timeout"));
            break;
            
        default:
            ASSERT_FALSE;
            break;
    }
    if (!CloseHandle (hFaxServerEvent))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("CloseHandle failed with %ld"),
            GetLastError ());
    }
    if (hKey)
    {
        lRes = RegCloseKey (hKey);
        if (ERROR_SUCCESS != lRes)
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("RegCloseKey failed with %ld"),
                lRes);
        }
    }        
    if (ERROR_SUCCESS != dwRes)
    {
        SetLastError (dwRes);
        return FALSE;
    }
    return TRUE;                            
}   // WaitForServiceRPCServer

DWORD
IsFaxServiceRunningUnderLocalSystemAccount (
    LPCTSTR lpctstrMachineName,
    LPBOOL lbpResultFlag
    )
/*++

Routine name : IsFaxServiceRunningUnderLocalSystemAccount

Routine description:

	Checks if the fax service is running under the local system account

Author:

	Eran Yariv (EranY),	Jul, 2000

Arguments:

	lpctstrMachineName            [in]     - Machine name of the fax service
	lbpResultFlag                 [out]    - Result buffer

Return Value:

    Standard Win32 error code

--*/
{
    SC_HANDLE hScm = NULL;
    SC_HANDLE hFax = NULL;
    DWORD dwRes;
    DWORD dwNeededSize;
    QUERY_SERVICE_CONFIG qsc = {0};
    LPQUERY_SERVICE_CONFIG lpSvcCfg = &qsc;
    DEBUG_FUNCTION_NAME(TEXT("IsFaxServiceRunningUnderLocalSystemAccount"))

    dwRes = FaxOpenService (lpctstrMachineName,
                            FAX_SERVICE_NAME,
                            &hScm,
                            &hFax,
                            SC_MANAGER_CONNECT,
                            SERVICE_QUERY_CONFIG,
                            NULL);
    if (ERROR_SUCCESS != dwRes)
    {
        goto exit;
    }                            

    if (!QueryServiceConfig(hFax, lpSvcCfg, sizeof (qsc), &dwNeededSize))
    {
        dwRes = GetLastError ();
        if (ERROR_INSUFFICIENT_BUFFER != dwRes)
        {
            //
            // Real error here
            //
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("QueryServiceStatus failed with %ld"),
                dwRes);
            goto exit;
        }
        //
        // Allocate buffer
        //
        lpSvcCfg = (LPQUERY_SERVICE_CONFIG) MemAlloc (dwNeededSize);
        if (!lpSvcCfg)
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("Can't allocate %ld bytes for QUERY_SERVICE_CONFIG structure"),
                dwNeededSize);
            goto exit;
        }
        //
        // Call with good buffer size now
        //
        if (!QueryServiceConfig(hFax, lpSvcCfg, dwNeededSize, &dwNeededSize))
        {
            dwRes = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("QueryServiceStatus failed with %ld"),
                dwRes);
            goto exit;
        }
    }
    if (!lpSvcCfg->lpServiceStartName ||
        !lstrcmp (TEXT("LocalSystem"), lpSvcCfg->lpServiceStartName))
    {
        *lbpResultFlag = TRUE;
    }
    else
    {
        *lbpResultFlag = FALSE;
    }           
    dwRes = ERROR_SUCCESS;

exit:
    FaxCloseService (hScm, hFax);
    if (lpSvcCfg != &qsc)
    {
        //
        // We allocated a buffer becuase the buffer on the stack was too small
        //
        MemFree (lpSvcCfg);
    }
    return dwRes;
}   // IsFaxServiceRunningUnderLocalSystemAccount


PSID 
GetCurrentThreadSID ()
/*++

Routine name : GetCurrentThreadSID

Routine description:

	Returns the SID of the user running the current thread.
    Supports impersonated threads.

Author:

	Eran Yariv (EranY),	Aug, 2000

Arguments:


Return Value:

    PSID or NULL on error (call GetLastError()).
    Call MemFree() on return value.

--*/
{
    HANDLE hToken = NULL;
    PSID pSid = NULL;
    DWORD dwSidSize;
    PSID pUserSid;
    DWORD dwReqSize;
    LPBYTE lpbTokenUser = NULL;
    DWORD ec = ERROR_SUCCESS;

    DEBUG_FUNCTION_NAME(TEXT("GetCurrentThreadSID"));

    //
    // Open the thread token.
    //
    if (!OpenThreadToken(GetCurrentThread(), TOKEN_QUERY, TRUE, &hToken))
    {
        ec = GetLastError();
        if (ERROR_NO_TOKEN == ec)
        {
            //
            // This thread is not impersonated and has no SID.
            // Try to open process token instead
            //
            if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY, &hToken))
            {
                ec = GetLastError();
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("OpenProcessToken failed. (ec: %ld)"),
                    ec);
                goto exit;
            }
        }
        else
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("OpenThreadToken failed. (ec: %ld)"),
                ec);
            goto exit;
        }
    }
    //
    // Get the user's SID.
    //
    if (!GetTokenInformation(hToken,
                             TokenUser,
                             NULL,
                             0,
                             &dwReqSize))
    {
        ec = GetLastError();
        if( ec != ERROR_INSUFFICIENT_BUFFER )
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("GetTokenInformation failed. (ec: %ld)"),
                ec);
            goto exit;
        }
        ec = ERROR_SUCCESS;
    }
    lpbTokenUser = (LPBYTE) MemAlloc( dwReqSize );
    if (lpbTokenUser == NULL)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Failed to allocate SID buffer (%ld bytes)"),
            dwReqSize
            );
        ec = GetLastError();
        goto exit;
    }
    if (!GetTokenInformation(hToken,
                             TokenUser,
                             (LPVOID)lpbTokenUser,
                             dwReqSize,
                             &dwReqSize))
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetTokenInformation failed. (ec: %ld)"),
            ec);
        goto exit;
    }

    pUserSid = ((TOKEN_USER *)lpbTokenUser)->User.Sid;
    Assert (pUserSid);

    if (!IsValidSid(pUserSid))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Not a valid SID")
            );
        ec = ERROR_INVALID_SID;
        goto exit;
    }
    dwSidSize = GetLengthSid( pUserSid );
    //
    // Allocate return buffer
    //
    pSid = (PSID) MemAlloc( dwSidSize );
    if (pSid == NULL)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Failed to allocate SID buffer (%ld bytes)"),
            dwSidSize
            );
        ec = ERROR_OUTOFMEMORY;
        goto exit;
    }
    //
    // Copy thread's SID to return buffer
    //
    if (!CopySid(dwSidSize, pSid, pUserSid))
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("CopySid Failed, Error : %ld"),
            ec
            );
        goto exit;
    }

    Assert (ec == ERROR_SUCCESS);

exit:
    MemFree (lpbTokenUser);
    if (hToken)
    {
        CloseHandle(hToken);
    }

    if (ec != ERROR_SUCCESS)
    {
        MemFree (pSid);
        pSid = NULL;
        SetLastError (ec);
    }
    return pSid;
}   // GetCurrentThreadSID      

SECURITY_ATTRIBUTES *
CreateSecurityAttributesWithThreadAsOwner (
	DWORD dwCurrentThreadRights,
    DWORD dwAuthUsersAccessRights,
	DWORD dwNetworkServiceRights
)
/*++

Routine name : CreateSecurityAttributesWithThreadAsOwner

Routine description:

    Create a security attribute structure with current thread's SID as owner.
    Gives dwCurrentThreadRights access rights to current thread sid.
    Can also grant specific rights to authenticated users.
	Can also grant specific rights to network service account.

Author:

    Eran Yariv (EranY), Aug, 2000

Arguments:
	dwCurrentThreadRights    [in] - Access rights to grant to current thread.
                                    If zero, current thread is denied access.

    dwAuthUsersAccessRights  [in] - Access rights to grant to authenticated users.
                                    If zero, authenticated users are denied access.

	dwNetworkServiceRights   [in] - Access rights to grant to network service.
                                    If zero, network service is denied access.

Return Value:

    Allocated security attributes or NULL on failure.
    Call DestroySecurityAttributes to free returned buffer.

--*/
{
    DEBUG_FUNCTION_NAME(TEXT("CreateSecurityAttributesWithThreadAsOwner"))

//
// SetEntriesInAcl() Requires Windows NT 4.0 or later 
//
#ifdef UNICODE

    SECURITY_ATTRIBUTES *pSA = NULL;
    SECURITY_DESCRIPTOR *pSD = NULL;
    PSID                 pSidCurThread = NULL;
    PSID                 pSidAuthUsers = NULL;
    PSID                 pSidNetworkService = NULL;
    PACL                 pACL = NULL;
    EXPLICIT_ACCESS      ea[3] = {0};
                            // Entry 0 - give dwCurrentThreadRights to current thread's SID.
                            // Entry 1 (optional) - give dwNetworkServiceRights to NetworkService account.
                            // Entry 2 (optional) - give dwAuthUsersAccessRights to authenticated users group.
    DWORD                rc;
	DWORD				 dwIndex = 0;
    SID_IDENTIFIER_AUTHORITY NtAuthority = SECURITY_NT_AUTHORITY;

    //
    // Allocate return SECURITY_ATTRIBUTES buffer
    //
    pSA = (SECURITY_ATTRIBUTES *)MemAlloc (sizeof (SECURITY_ATTRIBUTES));
    if (!pSA)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Could not allocate %ld bytes for SECURITY_ATTRIBUTES"),
            sizeof (SECURITY_ATTRIBUTES));
        return NULL;
    }
    //
    // Allocate SECURITY_DESCRIPTOR for the return SECURITY_ATTRIBUTES buffer
    //
    pSD = (SECURITY_DESCRIPTOR *)MemAlloc (sizeof (SECURITY_DESCRIPTOR));
    if (!pSD)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Could not allocate %ld bytes for SECURITY_DESCRIPTOR"),
            sizeof (SECURITY_DESCRIPTOR));
        goto err_exit;
    }
    pSA->nLength = sizeof(SECURITY_ATTRIBUTES);
    pSA->bInheritHandle = TRUE;
    pSA->lpSecurityDescriptor = pSD;
    //
    // Init the security descriptor
    //
    if (!InitializeSecurityDescriptor (pSD, SECURITY_DESCRIPTOR_REVISION))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("InitializeSecurityDescriptor failed with %ld"),
            GetLastError());
        goto err_exit;
    }
    //
    // Get SID of current thread
    //
    pSidCurThread = GetCurrentThreadSID ();
    if (!pSidCurThread)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetCurrentThreadSID failed with %ld"),
            GetLastError());
        goto err_exit;
    }
    //
    // Set the current thread's SID as SD owner (giving full access to the object)
    //
    if (!SetSecurityDescriptorOwner (pSD, pSidCurThread, FALSE))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("SetSecurityDescriptorOwner failed with %ld"),
            GetLastError());
        goto err_exit;
    }
    //
    // Set the current thread's SID as SD group (giving full access to the object)
    //
    if (!SetSecurityDescriptorGroup (pSD, pSidCurThread, FALSE))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("SetSecurityDescriptorGroup failed with %ld"),
            GetLastError());
        goto err_exit;
    }

	if (dwNetworkServiceRights)
	{
		//
		// Get the network service account sid
		//
		if (!AllocateAndInitializeSid(&NtAuthority,
									1,            // 1 sub-authority
									SECURITY_NETWORK_SERVICE_RID,
									0,0,0,0,0,0,0,
									&pSidNetworkService))
		{
			DebugPrintEx(
				DEBUG_ERR,
				TEXT("AllocateAndInitializeSid(SECURITY_NETWORK_SERVICE_RID) failed with %ld"),
				GetLastError());
			goto err_exit;
		}
		Assert (pSidNetworkService);
	}

    if (dwAuthUsersAccessRights)
    {
        //
        // We should also grant some rights to authenticated users
        // Get 'Authenticated users' SID
        //
        if (!AllocateAndInitializeSid(&NtAuthority,
                                      1,            // 1 sub-authority
                                      SECURITY_AUTHENTICATED_USER_RID,
                                      0,0,0,0,0,0,0,
                                      &pSidAuthUsers))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("AllocateAndInitializeSid(SECURITY_AUTHENTICATED_USER_RID) failed with %ld"),
                GetLastError());
            goto err_exit;
        }
        Assert (pSidAuthUsers);        
    }

    ea[0].grfAccessPermissions = dwCurrentThreadRights;
    ea[0].grfAccessMode = SET_ACCESS;
    ea[0].grfInheritance= NO_INHERITANCE;
    ea[0].Trustee.TrusteeForm = TRUSTEE_IS_SID;
    ea[0].Trustee.TrusteeType = TRUSTEE_IS_GROUP;
    ea[0].Trustee.ptstrName  = (LPTSTR) pSidCurThread;

	if (dwNetworkServiceRights)
	{
		dwIndex++;
		ea[dwIndex].grfAccessPermissions = dwNetworkServiceRights;
		ea[dwIndex].grfAccessMode = SET_ACCESS;
		ea[dwIndex].grfInheritance= NO_INHERITANCE;
		ea[dwIndex].Trustee.TrusteeForm = TRUSTEE_IS_SID;
		ea[dwIndex].Trustee.TrusteeType = TRUSTEE_IS_GROUP;    
		ea[dwIndex].Trustee.ptstrName  = (LPTSTR) pSidNetworkService;
	}

	if (dwAuthUsersAccessRights)
	{
		dwIndex++;
		ea[dwIndex].grfAccessPermissions = dwAuthUsersAccessRights;
        ea[dwIndex].grfAccessMode = SET_ACCESS;
        ea[dwIndex].grfInheritance= NO_INHERITANCE;
        ea[dwIndex].Trustee.TrusteeForm = TRUSTEE_IS_SID;
        ea[dwIndex].Trustee.TrusteeType = TRUSTEE_IS_GROUP;
        ea[dwIndex].Trustee.ptstrName  = (LPTSTR) pSidAuthUsers;
	}
	dwIndex++;

    //
    // Create a new ACL that contains the new ACE.
    //
    rc = SetEntriesInAcl(dwIndex,
                         ea,
                         NULL,
                         &pACL);
    if (ERROR_SUCCESS != rc)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("SetEntriesInAcl() failed (ec: %ld)"),
            rc);
        SetLastError (rc);
        goto err_exit;
    }
    Assert (pACL);
    //
    // The ACL we just got contains a copy of the pSidAuthUsers, so we can discard pSidAuthUsers and pSidLocalSystem
    //
    if (pSidAuthUsers)
    {
        FreeSid (pSidAuthUsers);
        pSidAuthUsers = NULL;
    }

    if (pSidNetworkService)
    {
        FreeSid (pSidNetworkService);
        pSidNetworkService = NULL;
    }

    //
    // Add the ACL to the security descriptor.
    //
    if (!SetSecurityDescriptorDacl(pSD, TRUE, pACL, FALSE))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("SetSecurityDescriptorDacl() failed (ec: %ld)"),
            GetLastError());
        goto err_exit;
    }
    //
    // All is fine, return the SA.
    //
    return pSA;

err_exit:

    MemFree (pSA);
    MemFree (pSD);
    MemFree (pSidCurThread);
    if (pSidAuthUsers)
    {
        FreeSid (pSidAuthUsers);
    }
    if (pSidNetworkService)
    {
        FreeSid (pSidNetworkService);
    }
    if (pACL)
    {
        LocalFree (pACL);
    }

#endif // UNICODE

    return NULL;
}   // CreateSecurityAttributesWithThreadAsOwner

VOID
DestroySecurityAttributes (
    SECURITY_ATTRIBUTES *pSA
)
/*++

Routine name : DestroySecurityAttributes

Routine description:

	Frees data allocated by call to CreateSecurityAttributesWithThreadAsOwner

Author:

	Eran Yariv (EranY),	Aug, 2000

Arguments:

	pSA     [in]     - Return value from CreateSecurityAttributesWithThreadAsOwner

Return Value:

    None.

--*/
{
    DEBUG_FUNCTION_NAME(TEXT("DestroySecurityAttributes"))
    BOOL bDefaulted;
    BOOL bPresent;
    PSID pSid;
    PACL pACL;
    PSECURITY_DESCRIPTOR pSD;

    Assert (pSA);
    pSD = pSA->lpSecurityDescriptor;
    Assert (pSD);
    if (!GetSecurityDescriptorOwner (pSD, &pSid, &bDefaulted))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetSecurityDescriptorOwner() failed (ec: %ld)"),
            GetLastError());
        ASSERT_FALSE;
    }
    else
    {
        //
        // Free current thread's SID (SD owner)
        //
        MemFree (pSid);
    }
    if (!GetSecurityDescriptorDacl (pSD, &bPresent, &pACL, &bDefaulted))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetSecurityDescriptorDacl() failed (ec: %ld)"),
            GetLastError());
        ASSERT_FALSE
    }
    else
    {
        //
        // Free ACL
        //
        LocalFree (pACL);
    }    
    MemFree (pSA);
    MemFree (pSD);
}   // DestroySecurityAttributes

DWORD
GetServiceStartupType (
    LPCTSTR lpctstrMachine,
    LPCTSTR lpctstrService,
    LPDWORD lpdwStartupType
)
/*++

Routine name : GetServiceStartupType

Routine description:

	Retreives the service startup type. 

Author:

	Eran Yariv (EranY),	Jan, 2002

Arguments:

	lpctstrMachine   [in] - Machine where the service is installed
	lpctstrService   [in] - Service name
	lpdwStartupType [out] - Service startup type. For example: SERVICE_AUTO_START, SERVICE_DISABLED, etc.

Return Value:

    Standard Win32 error code

--*/
{
    DWORD dwRes = ERROR_SUCCESS;
    SC_HANDLE hScm = NULL;
    SC_HANDLE hSvc = NULL;
    BYTE bBuf[1000];
    DWORD dwBufSize = sizeof (bBuf);
    DWORD dwNeeded;
    LPQUERY_SERVICE_CONFIG lpQSC = (LPQUERY_SERVICE_CONFIG)bBuf;
    DEBUG_FUNCTION_NAME(TEXT("GetServiceStartupType"))
    
    Assert (lpdwStartupType);
    dwRes = FaxOpenService (lpctstrMachine, lpctstrService, &hScm, &hSvc, SC_MANAGER_CONNECT, SERVICE_QUERY_CONFIG, NULL);
    if (ERROR_SUCCESS != dwRes)
    {
        return dwRes;
    }
    if (!QueryServiceConfig (hSvc, lpQSC, dwBufSize, &dwNeeded))
    {
        if (ERROR_INSUFFICIENT_BUFFER != GetLastError ())
        {
            //
            // Some real error
            //
            dwRes = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("QueryServiceConfig failed with %ld"),
                dwRes);
            goto exit;
        }                
        //
        // Buffer size issues
        //
        lpQSC = (LPQUERY_SERVICE_CONFIG)MemAlloc (dwNeeded);
        if (!lpQSC)
        {
            dwRes = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("MemAlloc(%d) failed"),
                dwNeeded);
            goto exit;
        }
        dwBufSize = dwNeeded;
        if (!QueryServiceConfig (hSvc, lpQSC, dwBufSize, &dwNeeded))
        {
            //
            // Any error now is serious
            //
            dwRes = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("QueryServiceConfig failed with %ld"),
                dwRes);
            goto exit;
        }
        //
        // Success
        //
        dwRes = ERROR_SUCCESS;
    }            
    Assert (ERROR_SUCCESS == dwRes);                
    *lpdwStartupType = lpQSC->dwStartType;
    
exit:
    FaxCloseService (hScm, hSvc);
    if (lpQSC && (lpQSC != (LPQUERY_SERVICE_CONFIG)bBuf))
    {
        MemFree (lpQSC);
    }
    return dwRes;
}   // GetServiceStartupType

DWORD
SetServiceStartupType (
    LPCTSTR lpctstrMachine,
    LPCTSTR lpctstrService,
    DWORD   dwStartupType
)
/*++

Routine name : SetServiceStartupType

Routine description:

	Sets the service startup type. 

Author:

	Eran Yariv (EranY),	Jan, 2002

Arguments:

	lpctstrMachine   [in] - Machine where the service is installed
	lpctstrService   [in] - Service name
	dwStartupType    [in] - Service startup type. For example: SERVICE_AUTO_START, SERVICE_DISABLED, etc.

Return Value:

    Standard Win32 error code

--*/
{
    DWORD dwRes = ERROR_SUCCESS;
    SC_HANDLE hScm = NULL;
    SC_HANDLE hSvc = NULL;
    DEBUG_FUNCTION_NAME(TEXT("SetServiceStartupType"))

    dwRes = FaxOpenService (lpctstrMachine, lpctstrService, &hScm, &hSvc, SC_MANAGER_CONNECT, SERVICE_CHANGE_CONFIG, NULL);
    if (ERROR_SUCCESS != dwRes)
    {
        return dwRes;
    }
    if (!ChangeServiceConfig (hSvc,
                              SERVICE_NO_CHANGE,    // Service type
                              dwStartupType,        // Startup
                              SERVICE_NO_CHANGE,    // Error control
                              NULL,                 // Binary path -        no change
                              NULL,                 // Load order group -   no change
                              NULL,                 // Tag id -             no change
                              NULL,                 // Dependencies -       no change
                              NULL,                 // Service start name - no change
                              NULL,                 // Password -           no change
                              NULL))                // Display name -       no change
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("ChangeServiceConfig failed with %ld"),
            dwRes);
        goto exit;
    }
    Assert (ERROR_SUCCESS == dwRes);
    
exit:
    FaxCloseService (hScm, hSvc);
    return dwRes;
}   // SetServiceStartupType

DWORD 
WaitForServiceStopOrStart (
    SC_HANDLE hSvc,
    BOOL      bStop,
    DWORD     dwMaxWait
)
/*++

Routine name : WaitForServiceStopOrStart

Routine description:

	Waits for a service to stop or start

Author:

	Eran Yariv (EranY),	Jan, 2002

Arguments:

	hSvc      [in] - Open service handle.
	bStop     [in] - TRUE if service was just stopped. FALSE if service was just started
	dwMaxWait [in] - Max wait time (in millisecs).

Return Value:

    Standard Win32 error code

--*/
{
    SERVICE_STATUS Status;
    DWORD dwRes = ERROR_SUCCESS;
    DWORD dwOldCheckPoint = 0;
    DWORD dwStartTick;
    DWORD dwOldCheckPointTime;
    DEBUG_FUNCTION_NAME(TEXT("WaitForServiceStopOrStart"))

    if (!QueryServiceStatus(hSvc, &Status)) 
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("QueryServiceStatus failed with %ld"),
            dwRes);
        return dwRes;
    }
    if (bStop)
    {
        if (SERVICE_STOPPED == Status.dwCurrentState)
        {
            //
            // Service is already stopped
            //
            return dwRes;
        }
    }
    else
    {
        if (SERVICE_RUNNING == Status.dwCurrentState)
        {
            //
            // Service is already running
            //
            return dwRes;
        }
    }
    //
    // Let's wait for the service to start / stop
    //
    dwOldCheckPointTime = dwStartTick = GetTickCount ();
    for (;;)
    {
        DWORD dwWait;
        if (!QueryServiceStatus(hSvc, &Status)) 
        {
            dwRes = GetLastError ();
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("QueryServiceStatus failed with %ld"),
                dwRes);
            return dwRes;
        }
        //
        // Let's see if all is ok now
        //
        if (bStop)
        {
            if (SERVICE_STOPPED == Status.dwCurrentState)
            {
                //
                // Service is now stopped
                //
                return dwRes;
            }
        }
        else
        {
            if (SERVICE_RUNNING == Status.dwCurrentState)
            {
                //
                // Service is now running
                //
                return dwRes;
            }
        }
        //
        // Let's see if it's pending
        //
        if ((bStop  && SERVICE_STOP_PENDING  != Status.dwCurrentState) ||
            (!bStop && SERVICE_START_PENDING != Status.dwCurrentState))
        {
            //
            // Something is wrong
            //
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("Service cannot be started / stopped. Current state is %ld"),
                Status.dwCurrentState);
            return ERROR_SERVICE_NOT_ACTIVE;
        }
        //
        // Service is pending to stop / start
        //
        if (GetTickCount() - dwStartTick > dwMaxWait)
        {
            //
            // We've waited too long (globally).
            //
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("We've waited too long (globally)"));
            return ERROR_TIMEOUT;
        }            
        Assert (dwOldCheckPoint <= Status.dwCheckPoint);
        if (dwOldCheckPoint >= Status.dwCheckPoint)
        {
            //
            // Check point did not advance
            //
            if (GetTickCount() - dwOldCheckPointTime >= Status.dwWaitHint)
            {
                //
                // We've been waiting on the same checkpoint for more than the recommended hint.
                // Something is wrong.
                //
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("We've been waiting on the same checkpoint for more than the recommend hint"));
                return ERROR_TIMEOUT;
            }
        }
        else
        {
            //
            // Check point advanced
            //
            dwOldCheckPoint = Status.dwCheckPoint;
            dwOldCheckPointTime = GetTickCount();
        }
        //
        // Never sleep longer than 5 seconds
        //
        dwWait = min (Status.dwWaitHint / 2, 1000 * 5);
        Sleep (dwWait);
    }
    return ERROR_SUCCESS;        
} // WaitForServiceStopOrStart

DWORD 
StartServiceEx (
    LPCTSTR lpctstrMachine,
    LPCTSTR lpctstrService,
    DWORD   dwNumArgs,
    LPCTSTR*lppctstrCommandLineArgs,
    DWORD   dwMaxWait
)
/*++

Routine name : StartServiceEx

Routine description:

	Starts a service

Author:

	Eran Yariv (EranY),	Jan, 2002

Arguments:

	lpctstrMachine          [in] - Machine where service is installed
	lpctstrService          [in] - Service name
	dwNumArgs               [in] - Number of service command line arguments
	lppctstrCommandLineArgs [in] - Command line strings.
	dwMaxWait               [in] - Max time to wait for service to start (millisecs)

Return Value:

    Standard Win32 error code

--*/
{
    DWORD dwRes = ERROR_SUCCESS;
    SC_HANDLE hScm = NULL;
    SC_HANDLE hSvc = NULL;
    DWORD dwStatus;
    
    DEBUG_FUNCTION_NAME(TEXT("StartServiceEx"))

    dwRes = FaxOpenService(lpctstrMachine, 
                           lpctstrService, 
                           &hScm, 
                           &hSvc, 
                           SC_MANAGER_CONNECT, 
                           SERVICE_QUERY_STATUS | SERVICE_START, 
                           &dwStatus);
    if (ERROR_SUCCESS != dwRes)
    {
        return dwRes;
    }
    if (SERVICE_RUNNING == dwStatus)
    {
        //
        // Service is already running
        //
        goto exit;
    }
    //
    // Start the sevice
    //
    if (!StartService(hSvc, dwNumArgs, lppctstrCommandLineArgs)) 
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("StartService failed with %ld"),
            GetLastError ());
        goto exit;
    }
    if (dwMaxWait > 0)
    {
        //
        // User wants us to wait for the service to stop.
        //
        dwRes = WaitForServiceStopOrStart (hSvc, FALSE, dwMaxWait);
    }        

exit:
    FaxCloseService (hScm, hSvc);
    return dwRes;
}   // StartServiceEx 


DWORD
SetServiceFailureActions (
    LPCTSTR lpctstrMachine,
    LPCTSTR lpctstrService,
    LPSERVICE_FAILURE_ACTIONS lpFailureActions
)
/*++

Routine name : SetServiceFailureActions

Routine description:

	Sets the failure actions for a given service.
	For more information, refer to the SERVICE_FAILURE_ACTIONS structure documentation and the 
	ChangeServiceConfig2 function documentation.

Author:

	Eran Yariv (EranY),	May, 2002

Arguments:

	lpctstrMachine          [in] - Machine where service is installed
	lpctstrService          [in] - Service name
	lpFailureActions        [in] - Failure actions information

Return Value:

    Standard Win32 error code

--*/
{
    DWORD dwRes = ERROR_SUCCESS;
    SC_HANDLE hScm = NULL;
    SC_HANDLE hSvc = NULL;

    DEBUG_FUNCTION_NAME(TEXT("SetServiceFailureActions"))

    dwRes = FaxOpenService(lpctstrMachine, 
                           lpctstrService, 
                           &hScm, 
                           &hSvc, 
                           SC_MANAGER_CONNECT, 
                           SERVICE_CHANGE_CONFIG | SERVICE_START, 
                           NULL);
    if (ERROR_SUCCESS != dwRes)
    {
        return dwRes;
    }
    if (!ChangeServiceConfig2(hSvc, SERVICE_CONFIG_FAILURE_ACTIONS, lpFailureActions))
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("ChangeServiceConfig2 failed with %ld"),
            dwRes);
        goto exit;
    }        
exit:
    FaxCloseService (hScm, hSvc);
    return dwRes;
}   // SetServiceFailureActions
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\tapi.c ===
/*++

Copyright (c) 1999  Microsoft Corporation

Module Name:

    tapi.c

Abstract:

    This file implements common TAPI functionality

Author:

    Mooly Beery (moolyb) 04-Jan-2001

Environment:

    User Mode

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <WinSpool.h>

#include <faxutil.h>
#include <faxreg.h>

BOOL
GetCallerIDFromCall(
    HCALL hCall,
    LPTSTR lptstrCallerID,
    DWORD dwCallerIDSize
    )
/*++

Routine Description:
    This function will attempt to retrieve Caller ID data
    from the specified call handle.

Arguments:
    hCall           - TAPI call handle
    lptstrCallerID  - pointer to buffer for Caller ID string
    dwCallerIDSize  - size of the string pointed to by lptstrCallerID in TCHARs

Return Values:
    TRUE for success
    FALSE for failure
--*/
{
    BOOL success = FALSE;
    LONG tapiStatus;
    DWORD dwCallInfoSize = sizeof(LINECALLINFO) + 2048;
    LINECALLINFO *pci = NULL;
    DEBUG_FUNCTION_NAME(TEXT("GetCallerIDFromCall"));

Retry:
    pci = (LINECALLINFO *)MemAlloc(dwCallInfoSize);
    if(pci == NULL)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("faled to allocate LINECALLINFO structure"));
        goto Cleanup;
    }

    ZeroMemory(pci, dwCallInfoSize);
    pci->dwTotalSize = dwCallInfoSize;

    tapiStatus = lineGetCallInfo(hCall, pci);

    if(tapiStatus == LINEERR_STRUCTURETOOSMALL)
    {
        dwCallInfoSize = pci->dwNeededSize;
		MemFree(pci);
        goto Retry;
    }

    if(tapiStatus != 0)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("lineGetCallInfo() failed for offered call (error %x)"),
            tapiStatus);
        goto Cleanup;
    };

    // make sure we have enough space for caller ID and terminator
    if(pci->dwCallerIDSize + sizeof(TCHAR) > (dwCallerIDSize * sizeof(TCHAR)))
    {
        SetLastError(ERROR_INSUFFICIENT_BUFFER);
        goto Cleanup;
    }

    if(pci->dwCallerIDSize != 0)
    {
        memcpy((BYTE *)lptstrCallerID, (BYTE *)pci + pci->dwCallerIDOffset, pci->dwCallerIDSize);
    }

    // make sure it is zero terminated
    lptstrCallerID[(pci->dwCallerIDSize / sizeof(TCHAR))] = TEXT('\0');

    success = TRUE;


Cleanup:
    if(pci)
    {
        MemFree(pci);
    }

    return success;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\shortcut.c ===
/*++

Copyright (c) 1997  Microsoft Corporation

Module Name:

    shortcut.c

Abstract:

    This module contains code to manipulate shortcuts.

Author:

    Wesley Witt (wesw) 24-Jul-1997


Revision History:

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <shlobj.h>
#include <shellapi.h>
#include <commdlg.h>
#include <winspool.h>
#include <tchar.h>

#include "faxreg.h"
#include "faxutil.h"
#include "prtcovpg.h"
#include <shfolder.h>
#include <strsafe.h>


BOOL
IsValidCoverPage(
    LPCTSTR  pFileName
)
/*++

Routine Description:

    Check if pFileName is a valid cover page file

Arguments:

    pFileName   - [in] file name

Return Value:

    TRUE if pFileName is a valid cover page file
    FALSE otherwise

--*/
{
    HANDLE   hFile;
    DWORD    dwBytesRead;
    BYTE     CpHeaderSignature[20]= {0x46,0x41,0x58,0x43,0x4F,0x56,0x45,0x52,0x2D,0x56,0x45,0x52,0x30,0x30,0x35,0x77,0x87,0x00,0x00,0x00};
    COMPOSITEFILEHEADER  fileHeader = {0};

    hFile = SafeCreateFile(pFileName,
                       GENERIC_READ,
                       FILE_SHARE_READ,
                       NULL,
                       OPEN_EXISTING,
                       FILE_ATTRIBUTE_NORMAL,
                       NULL);
    if (hFile == INVALID_HANDLE_VALUE) 
    {
        DebugPrint(( TEXT("CreateFile failed: %d\n"), GetLastError()));
        return FALSE;
    }

    if(!ReadFile(hFile, 
                &fileHeader, 
                sizeof(fileHeader), 
                &dwBytesRead, 
                NULL))
    {
        DebugPrint(( TEXT("ReadFile failed: %d\n"), GetLastError()));
        CloseHandle(hFile);
        return FALSE;
    }
        
    //
    // Check the 20-byte signature in the header
    //
    if ((sizeof(fileHeader) != dwBytesRead) ||
        memcmp(CpHeaderSignature, fileHeader.Signature, 20 ))
    {
        CloseHandle(hFile);
        return FALSE;
    }

    CloseHandle(hFile);
    return TRUE;
}


BOOL 
GetSpecialPath(
   IN   int      nFolder,
   OUT  LPTSTR   lptstrPath,
   IN   DWORD    dwPathSize
   )
/*++

Routine Description:

    Get a path from a CSIDL constant

Arguments:

    nFolder     - CSIDL_ constant
    lptstrPath  - Buffer to receive the path, assume this buffer is at least MAX_PATH chars large
    dwPathSize  - lptstrPath buffer size in TCHARs

Return Value:

    TRUE for success.
    FALSE for failure.

--*/

{
    HMODULE hMod = NULL;
    PFNSHGETFOLDERPATH pSHGetFolderPath = NULL;
    HRESULT hr;
    BOOL fSuccess = FALSE;

    TCHAR   strPath[MAX_PATH]= {0};

    DEBUG_FUNCTION_NAME(TEXT("GetSpecialPath"))

    // Load SHFolder.dll 
    hMod = LoadLibrary(_T("SHFolder.dll"));
    if (hMod==NULL)
    {
        DebugPrintEx(DEBUG_ERR, TEXT("LoadLibrary"),GetLastError());
        goto exit;
    }

    // Obtain a pointer to the SHGetFolderPath function
#ifdef UNICODE
    pSHGetFolderPath = (PFNSHGETFOLDERPATH)GetProcAddress(hMod,"SHGetFolderPathW");
#else
    pSHGetFolderPath = (PFNSHGETFOLDERPATH)GetProcAddress(hMod,"SHGetFolderPathA");
#endif
    if (pSHGetFolderPath==NULL)
    {
        DebugPrintEx(DEBUG_ERR, TEXT("GetProcAddress"),GetLastError());
        goto exit;
    }

    hr = pSHGetFolderPath(NULL,nFolder,NULL,SHGFP_TYPE_CURRENT,strPath);
    if (FAILED(hr))
    {
        DebugPrintEx(DEBUG_ERR, TEXT("SHGetFolderPath"),hr);
        SetLastError(hr);
        goto exit;
    }

    
    hr = StringCchCopy(lptstrPath,dwPathSize,strPath);            
    if (FAILED(hr))
    {
        DebugPrintEx(DEBUG_ERR,
                    TEXT("StringCchCopy failed (ec=%lu)"),
                    HRESULT_CODE(hr));
        
        SetLastError(HRESULT_CODE(hr));
        goto exit;
    }

    fSuccess = TRUE;

exit:
    if (hMod)
    {
        if (!FreeLibrary(hMod))
        {
            DebugPrintEx(DEBUG_ERR, TEXT("FreeLibrary"),GetLastError());
        }
    }

    return fSuccess;
}


BOOL
GetClientCpDir(
    LPTSTR CpDir,
    DWORD CpDirSize
    )

/*++

Routine Description:

    Gets the client coverpage directory. The cover page path will return with '\'
    at the end: CSIDL_PERSONAL\Fax\Personal CoverPages\

Arguments:

    CpDir       - buffer to hold the coverpage dir
    CpDirSize   - size in TCHARs of CpDir

Return Value:

    Pointer to the client coverpage direcory.

--*/

{
    TCHAR  szPath[MAX_PATH+1] = {0};
	TCHAR  szSuffix[MAX_PATH+1] = {0};
	DWORD  dwSuffixSize = sizeof(szSuffix);
	DWORD  dwType;
    DWORD  dwSuffixLen;
    
	LONG   lRes;

    HRESULT hRes;

	if(!CpDir)
	{
		Assert(CpDir);
		return FALSE;
	}

	CpDir[0] = 0;

    //
	// get the suffix from the registry
	//
    HKEY hKey = OpenRegistryKey(HKEY_CURRENT_USER, 
                                REGKEY_FAX_SETUP, 
                                TRUE, 
                                KEY_QUERY_VALUE);
	if(NULL == hKey)
    {
        return FALSE;
    }
	
	lRes = RegQueryValueEx(hKey, 
		                   REGVAL_CP_LOCATION, 
						   NULL, 
						   &dwType, 
						   (LPBYTE)szSuffix, 
						   &dwSuffixSize);

    RegCloseKey(hKey);

	if(ERROR_SUCCESS != lRes || (REG_SZ != dwType && REG_EXPAND_SZ != dwType))
    {
        //
        // W2K fax has REG_EXPAND_SZ type of the entry
        //
        return FALSE;
    }
    
	//
	// get personal folder location
	//
	if (!GetSpecialPath(CSIDL_PERSONAL, szPath, ARR_SIZE(szPath)))
    {
        DebugPrint(( TEXT("GetSpecialPath failed err=%ld"), GetLastError()));
	    return FALSE;
    }

    hRes = StringCchCopy(CpDir, CpDirSize, szPath);
    if (FAILED(hRes))
    {
        SetLastError( HRESULT_CODE(hRes) );
        return FALSE;
    }

    if(szSuffix[0] != TEXT('\\'))
    {
        //
        // The suffix doesn't start with '\' - add it
        //
        hRes = StringCchCat (CpDir, CpDirSize, TEXT("\\"));
        if (FAILED(hRes))
        {
            SetLastError( HRESULT_CODE(hRes) );
            return FALSE;
        }
    }

    dwSuffixLen = lstrlen(szSuffix);
    if(dwSuffixLen > 0 && dwSuffixLen < ARR_SIZE(szSuffix) && szSuffix[dwSuffixLen-1] != TEXT('\\'))
    {
        //
        // The suffix doesn't end with '\' - add it
        //
        hRes = StringCchCat (szSuffix, ARR_SIZE(szSuffix), TEXT("\\"));
        if (FAILED(hRes))
        {
            SetLastError( HRESULT_CODE(hRes) );
            return FALSE;
        }
    }

    hRes = StringCchCat (CpDir, CpDirSize, szSuffix);
    if (FAILED(hRes))
    {
        SetLastError( HRESULT_CODE(hRes) );
        return FALSE;
    }

    MakeDirectory(CpDir);
    return TRUE;
}

BOOL
SetClientCpDir(
    LPTSTR CpDir
)
/*++

Routine Description:

    Sets the client coverpage directory.

Arguments:

    CpDir       - pointer to the coverpage dir

Return Value:

    TRUE if success

--*/
{
    HKEY hKey = OpenRegistryKey(HKEY_CURRENT_USER, 
                                REGKEY_FAX_SETUP, 
                                TRUE, 
                                KEY_ALL_ACCESS);
	if(NULL == hKey)
    {
        return FALSE;
    }
	
    if(!SetRegistryString(hKey, 
                          REGVAL_CP_LOCATION, 
                          CpDir))
    {
        RegCloseKey(hKey);
        return FALSE;
    }

    RegCloseKey(hKey);

    return TRUE;
}



BOOL
GetServerCpDir(
    LPCTSTR lpctstrServerName,
    LPTSTR  lptstrCpDir,
    DWORD   dwCpDirSize
    )

/*++

Routine Description:

    Gets the server's coverpage directory.

Arguments:

    lpctstrServerName  - [in]  server name or NULL
    lptstrCpDir        - [out] buffer to hold the coverpage dir
    dwCpDirSize        - [in]  size in chars of lptstrCpDir

Return Value:

    TRUE        - If success
    FALSE       - Otherwise (see thread's last error)

--*/

{
    TCHAR szComputerName[(MAX_COMPUTERNAME_LENGTH + 1)] = {0};
    DWORD dwSizeOfComputerName = sizeof(szComputerName)/sizeof(TCHAR);

    HRESULT hRes;

    DEBUG_FUNCTION_NAME(TEXT("GetServerCpDir"))

    if ((!lptstrCpDir) || (!dwCpDirSize)) 
    {
        ASSERT_FALSE;
        SetLastError (ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    if(IsLocalMachineName(lpctstrServerName))
    {
        //
        // Local machine case
        //
        TCHAR szCommonAppData [MAX_PATH + 1];
        LPCTSTR lpctstrServerCPDirSuffix = NULL;
        HKEY hKey;

        if (!GetSpecialPath(CSIDL_COMMON_APPDATA, szCommonAppData, ARR_SIZE(szCommonAppData) )) 
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("GetSpecialPath (CSIDL_COMMON_APPDATA) failed with %ld"),
                GetLastError());
            return FALSE;
        }
        hKey = OpenRegistryKey (HKEY_LOCAL_MACHINE,
                                REGKEY_FAX_SETUP,
                                FALSE,
                                KEY_QUERY_VALUE);
        if (!hKey)
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("OpenRegistryKey (%s) failed with %ld"),
                REGKEY_FAX_CLIENT,
                GetLastError());
            return FALSE;
        }
        lpctstrServerCPDirSuffix = GetRegistryString (hKey,
                                                      REGVAL_SERVER_CP_LOCATION,
                                                      TEXT(""));
        if (!lpctstrServerCPDirSuffix)
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("GetRegistryString (%s) failed with %ld"),
                REGVAL_SERVER_CP_LOCATION,
                GetLastError());
            RegCloseKey (hKey);    
            return FALSE;
        }
        RegCloseKey (hKey);
        if (!lstrlen (lpctstrServerCPDirSuffix))
        {
            SetLastError (ERROR_REGISTRY_CORRUPT);
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("Value at %s is empty"),
                REGVAL_SERVER_CP_LOCATION);
            MemFree ((LPVOID)lpctstrServerCPDirSuffix);
            return FALSE;
        }

        hRes = StringCchPrintf( lptstrCpDir, 
                                dwCpDirSize,
                                TEXT("%s\\%s"),
                                szCommonAppData,
                                lpctstrServerCPDirSuffix);

        if (FAILED(hRes))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("StringCchPrintf failed (ec=%lu)"),
                HRESULT_CODE(hRes));
            
            SetLastError (HRESULT_CODE(hRes));
            MemFree ((LPVOID)lpctstrServerCPDirSuffix);
            return FALSE;
        }
        MemFree ((LPVOID)lpctstrServerCPDirSuffix);
        return TRUE;
    }

    else
    {
        //
        // Remote server case
        //
        hRes = StringCchPrintf( lptstrCpDir, 
                                dwCpDirSize,
                                TEXT("\\\\%s\\") FAX_COVER_PAGES_SHARE_NAME,
                                lpctstrServerName);
        if (FAILED(hRes))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("StringCchPrintf failed (ec=%lu)"),
                HRESULT_CODE(hRes));

            SetLastError (HRESULT_CODE(hRes));
            return FALSE;
        }
        return TRUE;
    }
}   // GetServerCpDir

DWORD 
WinHelpContextPopup(
    ULONG_PTR dwHelpId, 
    HWND  hWnd
)
/*++

Routine name : WinHelpContextPopup

Routine description:

	open context sensetive help popup with WinHelp

Author:

	Alexander Malysh (AlexMay),	Mar, 2000

Arguments:

	dwHelpId                      [in]     - help ID
	hWnd                          [in]     - parent window handler

Return Value:

    None.

--*/
{
    DWORD dwExpRes;
    DWORD dwRes = ERROR_SUCCESS;
    TCHAR tszHelpFile[MAX_PATH+1];

    if (0 == dwHelpId)
    {
        return dwRes;
    }

    if(!IsFaxComponentInstalled(FAX_COMPONENT_HELP_CLIENT_HLP))
    {
        //
        // The help file is not installed
        //
        return dwRes;
    }
    
    //
    // get help file name
    //
    dwExpRes = ExpandEnvironmentStrings(FAX_CONTEXT_HELP_FILE, tszHelpFile, MAX_PATH);
    if(0 == dwExpRes)
    {
        dwRes = GetLastError();
        DebugPrint(( TEXT("ExpandEnvironmentStrings failed: %d\n"), dwRes ));
        return dwRes;
    }

    WinHelp(hWnd, 
            tszHelpFile, 
            HELP_CONTEXTPOPUP, 
            dwHelpId
           );

    return dwRes;
}//WinHelpContextPopup

BOOL
InvokeServiceManager(
	   HWND hDlg,
	   HINSTANCE hResource,
	   UINT uid
)
/*++

Routine name : InvokeServiceManager

Routine description:

	Invokes a new instance of the Fax Service Manager or pop up an old instance if such one exists.

Arguments:

	hDlg						  [in]     - Identifies the parent window
	hResource                     [in]     - handle to resource module 
	uid                           [in]     - resource identifier

Return Value:

   TRUE        - If success
   FALSE       - Otherwise

--*/
{
	DWORD   dwRes = 0;
    HWND    hwndAdminConsole = NULL;
    TCHAR   szAdminWindowTitle[MAX_PATH] = {0};

    DEBUG_FUNCTION_NAME(TEXT("InvokeServiceManager()"));


    if(!LoadString(hResource, uid, szAdminWindowTitle, MAX_PATH)) 
    {
        DebugPrintEx(DEBUG_ERR, 
                     TEXT("LoadString failed: string ID=%d, error=%d"), 
                     uid,
                     GetLastError());
        Assert(FALSE);
    }
    else
    {
        hwndAdminConsole = FindWindow(NULL, szAdminWindowTitle); // MMCMainFrame
    }

    if(hwndAdminConsole)
    {
        // Switch to that window if client console is already running
        ShowWindow(hwndAdminConsole, SW_RESTORE);
        SetForegroundWindow(hwndAdminConsole);
    }
    else
    {   
		HINSTANCE hAdmin;
		hAdmin = ShellExecute(
                        hDlg,
                        TEXT("open"),
                        FAX_ADMIN_CONSOLE_IMAGE_NAME,
                        NULL,
                        NULL,
                        SW_SHOWNORMAL
                    );
		if((DWORD_PTR)hAdmin <= 32)
		{
		// error
		dwRes = PtrToUlong(hAdmin);
	    DebugPrintEx(DEBUG_ERR, 
                     TEXT("ShellExecute failed: error=%d"),dwRes );
		return FALSE;
		}
	}
    return TRUE;
}//InvokeServiceManager
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\version.cpp ===
/*++

Copyright (c) 2001  Microsoft Corporation

Module Name:

    string.c

Abstract:

    This file implements version functions for fax.

Author:

    Eran Yariv (erany) 30-Oct-2001

Environment:

    User Mode

--*/

#include <windows.h>
#include <tchar.h>
#include <stdlib.h>


#include "faxutil.h"
#include "faxreg.h"

DWORD
GetFileVersion (
    LPCTSTR      lpctstrFileName,
    PFAX_VERSION pVersion
)
/*++

Routine name : GetFileVersion

Routine description:

    Fills a FAX_VERSION structure with data about a given file module

Author:

    Eran Yariv (EranY), Nov, 1999

Arguments:

    lpctstrFileName    [in ] - File name
    pVersion           [out] - Version information

Return Value:

    Standard Win32 error

--*/
{
    DWORD dwRes = ERROR_SUCCESS;
    DWORD dwVerInfoSize;
    DWORD dwVerHnd=0;           // An ignored parameter, always 0
    LPBYTE lpbVffInfo = NULL;
    VS_FIXEDFILEINFO *pFixedFileInfo;
    UINT uVersionDataLength;
    DEBUG_FUNCTION_NAME(TEXT("GetFileVersion"));

    if (!pVersion)
    {
        return ERROR_INVALID_PARAMETER;
    }
    if (sizeof (FAX_VERSION) != pVersion->dwSizeOfStruct)
    {
        //
        // Size mismatch
        //
        return ERROR_INVALID_PARAMETER;
    }
    pVersion->bValid = FALSE;
    //
    // Find size needed for version information
    //
    dwVerInfoSize = GetFileVersionInfoSize ((LPTSTR)lpctstrFileName, &dwVerHnd);
    if (0 == dwVerInfoSize)
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetFileVersionInfoSize() failed . dwRes = %ld"),
            dwRes);
        return dwRes;
    }
    //
    // Allocate memory for file version info
    //
    lpbVffInfo = (LPBYTE)MemAlloc (dwVerInfoSize);
    if (NULL == lpbVffInfo)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("Cant allocate %ld bytes"),
            dwVerInfoSize);
        return ERROR_NOT_ENOUGH_MEMORY;
    }
    //
    // Try to get the version info
    //
    if (!GetFileVersionInfo(
        (LPTSTR)lpctstrFileName,
        dwVerHnd,
        dwVerInfoSize,
        (LPVOID)lpbVffInfo))
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetFileVersionInfo() failed . dwRes = %ld"),
            dwRes);
        goto exit;
    }
    //
    // Query the required version structure
    //
    if (!VerQueryValue (
        (LPVOID)lpbVffInfo,
        TEXT ("\\"),    // Retrieve the VS_FIXEDFILEINFO struct
        (LPVOID *)&pFixedFileInfo,
        &uVersionDataLength))
    {
        dwRes = GetLastError ();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("VerQueryValue() failed . dwRes = %ld"),
            dwRes);
        goto exit;
    }
    pVersion->dwFlags = (pFixedFileInfo->dwFileFlags & VS_FF_DEBUG) ? FAX_VER_FLAG_CHECKED : 0;
    pVersion->wMajorVersion      = WORD((pFixedFileInfo->dwProductVersionMS) >> 16);
    pVersion->wMinorVersion      = WORD((pFixedFileInfo->dwProductVersionMS) & 0x0000ffff);
    pVersion->wMajorBuildNumber  = WORD((pFixedFileInfo->dwProductVersionLS) >> 16);
    pVersion->wMinorBuildNumber  = WORD((pFixedFileInfo->dwProductVersionLS) & 0x0000ffff);
    pVersion->bValid = TRUE;

    Assert (ERROR_SUCCESS == dwRes);

exit:
    if (lpbVffInfo)
    {
        MemFree (lpbVffInfo);
    }
    return dwRes;
}   // GetFileVersion

#define REG_KEY_IE			_T("Software\\Microsoft\\Internet Explorer")
#define REG_VAL_IE_VERSION	_T("Version")
///////////////////////////////////////////////////////////////////////////////////////
//  Function: 
//                  GetVersionIE
//
//  Purpose:        
//                  Find out the version of IE that is installed on this machine.
//					This function can be used on any platform.
//					For versions less than 4.0 this function always returns 1.0
//
//  Params:
//					BOOL* fInstalled - out param, is IE installed?
//                  INT* iMajorVersion - out param, the major version of IE
//					INT* iMinorVersion - out param, the minor version of IE
//
//  Return Value:
//                  ERROR_SUCCESS - in case of success
//                  Win32 Error code - in case of failure
//
//  Author:
//                  Mooly Beery (MoolyB) 19-May-2002
///////////////////////////////////////////////////////////////////////////////////////
DWORD GetVersionIE(BOOL* fInstalled, INT* iMajorVersion, INT* iMinorVersion)
{
	DWORD	dwRet			= ERROR_SUCCESS;
	LPTSTR	lptstrVersion	= NULL;
	HKEY	hKey			= NULL;

	(*fInstalled) = FALSE;
	(*iMajorVersion) = 1;
	(*iMinorVersion) = 0;

	hKey = OpenRegistryKey(HKEY_LOCAL_MACHINE,REG_KEY_IE,KEY_READ,FALSE);
	if (!hKey)
	{
		// IE is not installed at all.
		goto exit;
	}

	(*fInstalled) = TRUE;

	lptstrVersion = GetRegistryString(hKey,REG_VAL_IE_VERSION,NULL);
	if (!lptstrVersion)
	{
		// no Version entry, this means IE version is less than 4.0
		goto exit;
	}

	// the version is formatted: <major version>.<minor version>.<major build>.<minor build>
	LPTSTR lptsrtFirstDot = _tcschr(lptstrVersion,_T('.'));
	if (!lptsrtFirstDot)
	{
		// something is wrong in the format.
		dwRet = ERROR_BAD_FORMAT;
		goto exit;
	}

	(*lptsrtFirstDot++) = 0;
	(*iMajorVersion) = _ttoi(lptstrVersion);

	LPTSTR lptsrtSecondDot = _tcschr(lptsrtFirstDot,_T('.'));
	if (!lptsrtSecondDot)
	{
		// something is wrong in the format.
		dwRet = ERROR_BAD_FORMAT;
		goto exit;
	}

	(*lptsrtSecondDot) = 0;
	(*iMinorVersion) = _ttoi(lptsrtFirstDot);

exit:
	if (hKey)
	{
		RegCloseKey(hKey);
	}
	if (lptstrVersion)
	{
		MemFree(lptstrVersion);
	}
	return dwRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\security.cpp ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

	Security.cpp

Abstract:

	General fax server security utility functions

Author:

	Eran Yariv (EranY)	Feb, 2001

Revision History:

--*/


#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <Accctrl.h>
#include <Aclapi.h>

#include "faxutil.h"
#include "faxreg.h"
#include "FaxUIConstants.h"


HANDLE 
EnablePrivilege (
    LPCTSTR lpctstrPrivName
)
/*++

Routine name : EnablePrivilege

Routine description:

	Enables a specific privilege in the current thread (or process) access token

Author:

	Eran Yariv (EranY),	Feb, 2001

Arguments:

	lpctstrPrivName   [in]  - Privilege to enable (e.g. SE_TAKE_OWNERSHIP_NAME)

Return Value:

    INVALID_HANDLE_VALUE on failure (call GetLastError to get error code).
    On success, returns the handle which holds the thread/process priviledges before the change.

    The caller must call ReleasePrivilege() to restore the access token state and release the handle.

--*/
{
    BOOL                fResult;
    HANDLE              hToken = INVALID_HANDLE_VALUE;
    HANDLE              hOriginalThreadToken = INVALID_HANDLE_VALUE;
    LUID                luidPriv;
    TOKEN_PRIVILEGES    tp = {0};

    DEBUG_FUNCTION_NAME( TEXT("EnablePrivileges"));

    Assert (lpctstrPrivName);
    //
    // Get the LUID of the privilege.
    //
    if (!LookupPrivilegeValue(NULL,
                              lpctstrPrivName,
                              &luidPriv))
    {
        DebugPrintEx(
			DEBUG_ERR,
			_T("Failed to LookupPrivilegeValue. (ec: %ld)"), 
			GetLastError ());
        return INVALID_HANDLE_VALUE;
    }

    //
    // Initialize the Privileges Structure
    //
    tp.PrivilegeCount = 1;
    tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
    tp.Privileges[0].Luid = luidPriv;
    //
    // Open the Token
    //
    fResult = OpenThreadToken(GetCurrentThread(), TOKEN_DUPLICATE, FALSE, &hToken);
    if (fResult)
    {
        //
        // Remember the thread token
        //
        hOriginalThreadToken = hToken;  
    }
    else
    {
        fResult = OpenProcessToken(GetCurrentProcess(), TOKEN_DUPLICATE, &hToken);
    }
    if (fResult)
    {
        HANDLE hNewToken;
        //
        // Duplicate that Token
        //
        fResult = DuplicateTokenEx(hToken,
                                   TOKEN_IMPERSONATE | TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY,
                                   NULL,                                // PSECURITY_ATTRIBUTES
                                   SecurityImpersonation,               // SECURITY_IMPERSONATION_LEVEL
                                   TokenImpersonation,                  // TokenType
                                   &hNewToken);                         // Duplicate token
        if (fResult)
        {
            //
            // Add new privileges
            //
            fResult = AdjustTokenPrivileges(hNewToken,  // TokenHandle
                                            FALSE,      // DisableAllPrivileges
                                            &tp,        // NewState
                                            0,          // BufferLength
                                            NULL,       // PreviousState
                                            NULL);      // ReturnLength
            if (fResult)
            {
                //
                // Begin impersonating with the new token
                //
                fResult = SetThreadToken(NULL, hNewToken);
            }
            CloseHandle(hNewToken);
        }
    }
    //
    // If something failed, don't return a token
    //
    if (!fResult)
    {
        hOriginalThreadToken = INVALID_HANDLE_VALUE;
    }
    if (INVALID_HANDLE_VALUE == hOriginalThreadToken)
    {
        //
        // Using the process token
        //
        if (INVALID_HANDLE_VALUE != hToken)
        {
            //
            // Close the original token if we aren't returning it
            //
            CloseHandle(hToken);
        }
        if (fResult)
        {
            //
            // If we succeeded, but there was no original thread token,
            // return NULL to indicate we need to do SetThreadToken(NULL, NULL) to release privs.
            //
            hOriginalThreadToken = NULL;
        }
    }
    return hOriginalThreadToken;
}   // EnablePrivilege


void 
ReleasePrivilege(
    HANDLE hToken
)
/*++

Routine name : ReleasePrivilege

Routine description:

	Resets privileges to the state prior to the corresponding EnablePrivilege() call

Author:

	Eran Yariv (EranY),	Feb, 2001

Arguments:

	hToken  [IN]    - Return value from the corresponding EnablePrivilege() call

Return Value:

    None.

--*/
{
    DEBUG_FUNCTION_NAME( TEXT("ReleasePrivilege"));
    if (INVALID_HANDLE_VALUE != hToken)
    {
        if(!SetThreadToken(NULL, hToken))
        {
            DebugPrintEx(DEBUG_ERR, TEXT("SetThreadToken() failed (ec: %ld)"), GetLastError());
        }

        if (hToken)
        {
            if(!CloseHandle(hToken))
            {
                DebugPrintEx(DEBUG_ERR, TEXT("CloseHandle() failed (ec: %ld)"), GetLastError());
            }
        }
    }
}   // ReleasePrivilege


DWORD
EnableProcessPrivilege(LPCTSTR lpPrivilegeName)
/*++

Routine name : EnableProcessPrivilege

Routine description:

    Enables process privilege.

Author:

    Caliv Nir   (t-nicali)  Mar, 2002

Arguments:

    lpPrivilegeName [in] -  Pointer to a null-terminated string that specifies the name of the privilege, 
                            as defined in the Winnt.h header file. For example, 
                            this parameter could specify the constant SE_SECURITY_NAME, 
                            or its corresponding string, "SeSecurityPrivilege"
Return Value:

    Standard Win32 error code.

--*/
{
    HANDLE hToken = INVALID_HANDLE_VALUE;
    TOKEN_PRIVILEGES    tp = {0};
    LUID                luidPriv;

    BOOL    bRet;
    DWORD   dwRet=ERROR_SUCCESS;

    DEBUG_FUNCTION_NAME( TEXT("EnableProcessPrivilege"));

    Assert(lpPrivilegeName);

    //
    // Get the LUID of the privilege.
    //
    if (!LookupPrivilegeValue(NULL,
                              lpPrivilegeName,
                              &luidPriv))
    {
        dwRet = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            _T("Failed to LookupPrivilegeValue. (ec: %lu)"), 
            dwRet);
        goto Exit;
    }

    //
    // Initialize the Privileges Structure
    //
    tp.PrivilegeCount = 1;
    tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
    tp.Privileges[0].Luid = luidPriv;

    //
    //  Open process token
    //
    bRet = OpenProcessToken(GetCurrentProcess(),
                            TOKEN_ADJUST_PRIVILEGES, 
                            &hToken);
    if (FALSE == bRet)  
    {
        //
        //  Failed to OpenProcessToken
        //
        dwRet = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("OpenProcessToken() failed: err = %lu"),
            dwRet);
        goto Exit;
    }

    //
    //  Adjust the Token
    // 
    bRet = AdjustTokenPrivileges(hToken,     // TokenHandle
                                 FALSE,      // DisableAllPrivileges
                                 &tp,        // NewState
                                 0,          // BufferLength
                                 NULL,       // PreviousState
                                 NULL);      // ReturnLength
    if (FALSE == bRet)  
    {
        //
        //  Failed to OpenProcessToken
        //
        dwRet = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("AdjustTokenPrivileges() failed: err = %lu"),
            dwRet);
        goto Exit;
    }

    Assert(ERROR_SUCCESS == dwRet);
Exit:
    
    if(NULL != hToken)
    {
        if(!CloseHandle(hToken))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("CloseHandle() failed: err = %lu"),
                GetLastError());
        }
    }
    return dwRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\string.c ===
/*++

Copyright (c) 1995  Microsoft Corporation

Module Name:

    string.c

Abstract:

    This file implements string functions for fax.

Author:

    Wesley Witt (wesw) 23-Jan-1995

Environment:

    User Mode

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <ObjBase.h>
#include "faxutil.h"
#include "fxsapip.h"
#define  SECURITY_WIN32         // needed by security.h
#include <Security.h>
#include "faxreg.h"
#include "FaxUIConstants.h"

#define STRSAFE_NO_DEPRECATE
#include <strsafe.h>

LPTSTR
AllocateAndLoadString(
                      HINSTANCE     hInstance,
                      UINT          uID
                      )
/*++

Routine Description:

    Calls LoadString for given HINSTANCE and ID of the string.
    Allocates memory in loop to find enough memory.
    Returns the given string.
    The caller must free the string.

Arguments:

    hInstance               -   module instance
    uID                     -   ID of the string to bring

Return Value:

    the allocated string, NULL if error.
    Call GetLastError() for the details.

Author:

    Iv Garber, 22-Oct-2000

--*/
{
    LPTSTR  lptstrResult = NULL;
    DWORD   dwNumCopiedChars = 0;
    DWORD   dwSize = 100;

    do
    {
        //
        //  There is not enough place for all the string
        //
        dwSize = dwSize * 3;
        MemFree(lptstrResult);

        //
        //  Allocate memory for the string
        //
        lptstrResult = LPTSTR(MemAlloc(dwSize * sizeof(TCHAR)));
        if (!lptstrResult)
        {
            return NULL;
        }

        //
        //  Bring the string from the resource file
        //
        dwNumCopiedChars = LoadString(hInstance, uID, lptstrResult, dwSize);
        if (!dwNumCopiedChars)
        {
            //
            //  the string does not exist in the resource file
            //
            SetLastError(ERROR_INVALID_PARAMETER);
            MemFree(lptstrResult);
            return NULL;
        }

    } while(dwNumCopiedChars == (dwSize - 1));

    return lptstrResult;
}


LPTSTR
StringDup(
    LPCTSTR String
    )
{
    LPTSTR NewString;

    if (!String) {
        return NULL;
    }

    NewString = (LPTSTR) MemAlloc( (_tcslen( String ) + 1) * sizeof(TCHAR) );
    if (!NewString) {
        return NULL;
    }

    _tcscpy( NewString, String );

    return NewString;
}


LPWSTR
StringDupW(
    LPCWSTR String
    )
{
    LPWSTR NewString;

    if (!String) {
        return NULL;
    }

    NewString = (LPWSTR) MemAlloc( (wcslen( String ) + 1) * sizeof(WCHAR) );
    if (!NewString) {
        return NULL;
    }

    wcscpy( NewString, String );

    return NewString;
}

int MultiStringDup(PSTRING_PAIR lpPairs, int nPairCount)
{
    int i,j;

    Assert(lpPairs);

    for (i=0;i<nPairCount;i++) {
        if (lpPairs[i].lptstrSrc) {
                 *(lpPairs[i].lpptstrDst)=StringDup(lpPairs[i].lptstrSrc);
                 if (!*(lpPairs[i].lpptstrDst)) {
                     // Cleanup the strings we did copy so far.
                     for (j=0;j<i;j++) {
                         MemFree(*(lpPairs[j].lpptstrDst));
                         *(lpPairs[j].lpptstrDst) = NULL;
                     }
                     // return the index in which we failed + 1 (0 is success so we can not use it).
                     return i+1;
                 }
        }
    }
    return 0;
}


VOID
FreeString(
    LPVOID String
    )
{
    MemFree( String );
}


LPWSTR
AnsiStringToUnicodeString(
    LPCSTR AnsiString
    )
{
    DWORD Count;
    LPWSTR UnicodeString;


    if (!AnsiString)
        return NULL;
    //
    // first see how big the buffer needs to be
    //
    Count = MultiByteToWideChar(
        CP_ACP,
        MB_PRECOMPOSED,
        AnsiString,
        -1,
        NULL,
        0
        );

    //
    // i guess the input string is empty
    //
    if (!Count) {
        return NULL;
    }

    //
    // allocate a buffer for the unicode string
    //
    Count += 1;
    UnicodeString = (LPWSTR) MemAlloc( Count * sizeof(UNICODE_NULL) );
    if (!UnicodeString) {
        return NULL;
    }

    //
    // convert the string
    //
    Count = MultiByteToWideChar(
        CP_ACP,
        MB_PRECOMPOSED,
        AnsiString,
        -1,
        UnicodeString,
        Count
        );

    //
    // the conversion failed
    //
    if (!Count) {
        MemFree( UnicodeString );
        return NULL;
    }

    return UnicodeString;
}


LPSTR
UnicodeStringToAnsiString(
    LPCWSTR UnicodeString
    )
{
    DWORD Count;
    LPSTR AnsiString;

    if (!UnicodeString)
        return NULL;

    //
    // first see how big the buffer needs to be
    //
    Count = WideCharToMultiByte(
        CP_ACP,
        0,
        UnicodeString,
        -1,
        NULL,
        0,
        NULL,
        NULL
        );

    //
    // i guess the input string is empty
    //
    if (!Count) {
        return NULL;
    }

    //
    // allocate a buffer for the unicode string
    //
    Count += 1;
    AnsiString = (LPSTR) MemAlloc( Count );
    if (!AnsiString) {
        return NULL;
    }

    //
    // convert the string
    //
    Count = WideCharToMultiByte(
        CP_ACP,
        0,
        UnicodeString,
        -1,
        AnsiString,
        Count,
        NULL,
        NULL
        );

    //
    // the conversion failed
    //
    if (!Count) {
        MemFree( AnsiString );
        return NULL;
    }

    return AnsiString;
}


BOOL
MakeDirectory(
    LPCTSTR Dir
    )

/*++

Routine Description:

    Attempt to create all of the directories in the given path.

Arguments:

    Dir                     - Directory path to create

Return Value:

    TRUE for success, FALSE on error

--*/

{
    LPTSTR p, NewDir;
    DWORD ec = ERROR_SUCCESS;
    DWORD dwFileAtt;
    DEBUG_FUNCTION_NAME(TEXT("MakeDirectory"));

    NewDir = p = ExpandEnvironmentString( Dir );
    if (!NewDir)
    {
        ec = GetLastError();
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("ExpandEnvironmentString (private function) failed. (ec: %ld)"),
            ec);
        goto Exit;
    }

    dwFileAtt = GetFileAttributes( NewDir );
    if (-1 != dwFileAtt && (dwFileAtt & FILE_ATTRIBUTE_DIRECTORY))
    {
        //
        // The directory exists
        //
        ec = ERROR_SUCCESS;
        goto Exit;
    }

    if ( (_tcsclen(p) > 2) && (_tcsncmp(p,TEXT("\\\\"),2) == 0) )
    {
        //
        // Path name start with UNC (\\)
        // Skip first double backslash (\\)
        //
        p = _tcsninc(p,2);
        //
        // Scan until the end of the server name
        //
        if( p = _tcschr(p,TEXT('\\')) )
        {
            //
            // Skip the server name
            //
            p = _tcsinc(p);

            //
            // Scan until the end of the share name
            //
            if( p = _tcschr(p,TEXT('\\')) )
            {
                //
                // Skip the share name
                //
                p = _tcsinc(p);
            }
        }
    }
    else if ( (_tcsclen(p) > 1) && (_tcsncmp(p,TEXT("\\"),1) == 0) )
    {
        //
        // Path name starts with root directory (e.g. : "\blah\blah2") - skip it
        //
        p = _tcsinc(p);
    }
    else if ( (_tcsclen(p) > 3) &&
                _istalpha(p[0]) &&
                (_tcsncmp(_tcsinc(p),TEXT(":\\"),2) == 0) )
    {
        //
        // Path name starts with drive and root directory (e.g. : "c:\blah\blah2") - skip it
        //
        p = _tcsninc(p,3);
    }

    if (NULL == p)
    {
        //
        // Reached EOSTR
        //
        if (!CreateDirectory( NewDir, NULL ))
        {
            //
            // Check if we failed because the dir already existed.
            // If so this is not an error.
            //
            ec = GetLastError();
            if (ERROR_ALREADY_EXISTS != ec)
            {
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("CreateDirectory [%s] failed (ec: %ld)"),
                    NewDir,
                    ec);
            }
            else
            {
                ec = ERROR_SUCCESS;
            }
            goto Exit;
        }
    }

    while( *(p = _tcsinc(p)) )
    {
        p = _tcschr(p,TEXT('\\'));
        if( !p )
        {
            //
            // Reached EOSTR
            //
            if (!CreateDirectory( NewDir, NULL ))
            {
                //
                // Check if we failed because the dir already existed.
                // If so this is not an error.
                //
                if (ERROR_ALREADY_EXISTS != GetLastError())
                {
                    ec = GetLastError();
                    DebugPrintEx(
                        DEBUG_ERR,
                        TEXT("CreateDirectory [%s] failed (ec: %ld)"),
                        NewDir,
                        ec);
                }
            }
            break; // success case
        }
        //
        // Place NULL instead of backslash
        //
        p[0] = TEXT('\0');
        if (!CreateDirectory( NewDir, NULL ))
        {
            //
            // Check if we failed because the dir already existed.
            // If so this is not an error.
            //
            if (ERROR_ALREADY_EXISTS != GetLastError())
            {
                ec = GetLastError();
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("CreateDirectory [%s] failed (ec: %ld)"),
                    NewDir,
                    ec);

                break;
            }
        }
        //
        // Restore backslash
        //
        p[0] = TEXT('\\');
    }

Exit:
    MemFree( NewDir );
    if (ERROR_SUCCESS != ec)
    {
        SetLastError(ec);
    }
    return (ERROR_SUCCESS == ec);
}

VOID
HideDirectory(
   LPTSTR Dir
   )
/*++

Routine Description:

    Hide the specified directory

Arguments:

    Dir                     - Directory path to hide

Return Value:

    none.

--*/
{
   DWORD attrib;

   //
   // make sure it exists
   //
   if (!Dir) {
      return;
   }

   MakeDirectory( Dir );

   attrib  = GetFileAttributes(Dir);

   if (attrib == 0xFFFFFFFF) {
      return;
   }

   attrib |= FILE_ATTRIBUTE_HIDDEN;

   SetFileAttributes( Dir, attrib );

   return;


}


VOID
DeleteDirectory(
    LPTSTR Dir
    )

/*++

Routine Description:

    Attempt to delete all of the directories in the given path.

Arguments:

    Dir                     - Directory path to delete

Return Value:

    TRUE for success, FALSE on error

--*/
{
    LPTSTR p;

    while (true)
    {
        if (!RemoveDirectory( Dir ))
        {
            return;
        }
        // get a pointer to the end of Dir
        p = _tcschr(Dir,TEXT('\0'));
        p = _tcsdec(Dir,p);

        //
        //  If p is equal to ( or less then ) Dir, _tscdec returns NULL
        //
        if (!p)
        {
            return;
        }

        while ( _tcsncmp(p,TEXT("\\"),1) && p != Dir )
        {
            p = _tcsdec(Dir,p);
        }

        if (p == Dir)
        {
            return;
        }

        _tcsnset(p,TEXT('\0'),1);
    }
}   // DeleteDirectory


int
FormatElapsedTimeStr(
    FILETIME *ElapsedTime,
    LPTSTR TimeStr,
    DWORD StringSize
    )
/*++

Routine Description:

    Convert ElapsedTime to a string.

Arguments:

    ElaspedTime                     - the elapsed time
    TimeStr                         - buffer to store the string into
    StringSize                      - size of the buffer in TCHARS

Return Value:

    The return value of GetTimeFormat()

--*/

{
    SYSTEMTIME  SystemTime;
    FileTimeToSystemTime( ElapsedTime, &SystemTime );
    return FaxTimeFormat(
        LOCALE_SYSTEM_DEFAULT,
        LOCALE_NOUSEROVERRIDE | TIME_FORCE24HOURFORMAT | TIME_NOTIMEMARKER,
        &SystemTime,
        NULL,
        TimeStr,
        StringSize
        );
}


LPTSTR
ExpandEnvironmentString(
    LPCTSTR EnvString
    )
{
    DWORD dwRes;
    DWORD Size;
    LPTSTR String;

    DEBUG_FUNCTION_NAME(TEXT("ExpandEnvironmentString"));

    if(!_tcschr(EnvString, '%'))
    {
        //
        // On Win95 ExpandEnvironmentStrings fails if sting
        // doesn't contain environment variable.
        //
        String = StringDup(EnvString);
        if(!String)
        {
            DebugPrintEx(DEBUG_ERR, TEXT("StringDup failed"));
            return NULL;
        }
        else
        {
            return String;
        }
    }

    Size = ExpandEnvironmentStrings( EnvString, NULL, 0 );
    if (Size == 0)
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR, TEXT("ExpandEnvironmentStrings failed: 0x%08X)"), dwRes);
        return NULL;
    }

    ++Size;

    String = (LPTSTR) MemAlloc( Size * sizeof(TCHAR) );
    if (String == NULL)
    {
        DebugPrintEx(DEBUG_ERR, TEXT("MemAlloc failed"));
        return NULL;
    }

    if (ExpandEnvironmentStrings( EnvString, String, Size ) == 0)
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR, TEXT("ExpandEnvironmentStrings failed: 0x%08X)"), dwRes);

        MemFree( String );
        return NULL;
    }

    return String;
}


LPTSTR
GetEnvVariable(
    LPCTSTR EnvString
    )
{
    DWORD Size;
    LPTSTR EnvVar;


    Size = GetEnvironmentVariable( EnvString, NULL, 0 );
    if (!Size) {
        return NULL;
    }

    EnvVar = (LPTSTR) MemAlloc( Size * sizeof(TCHAR) );
    if (EnvVar == NULL) {
        return NULL;
    }

    Size = GetEnvironmentVariable( EnvString, EnvVar, Size );
    if (!Size) {
        MemFree( EnvVar );
        return NULL;
    }

    return EnvVar;
}



int 
GetY2KCompliantDate (
    LCID                Locale,
    DWORD               dwFlags,
    CONST SYSTEMTIME   *lpDate,
    LPTSTR              lpDateStr,
    int                 cchDate
)
{
    int     iRes;

    DEBUG_FUNCTION_NAME(TEXT("GetY2KCompliantDate()"));

    iRes = GetDateFormat(Locale,
        dwFlags,
        lpDate,
        NULL,
        lpDateStr,
        cchDate);

    if (!iRes)
    {
        //
        //  If failed, no need to care about the formatted date string
        //
        return iRes;
    }

    if (0 == cchDate)
    {
        //
        // User only wants to know the output string size.
        //
        // We return a bigger size than GetDateFormat() returns,
        // because the DATE_LTRREADING flag we sometimes add later,
        // might enlarge the result string.
        // Although we don't always use the DATE_LTRREADING flag (only used in Win2K and only
        // if the string has right-to-left characters), we always return a bigger required
        // buffer size - just to make the code simpler.
        //
        return iRes * 2;
    }

#if (WINVER >= 0x0500)
#ifdef UNICODE


    //
    //  If the formatted date string contains right-to-left characters
    //      for example, in Hebrew, Arabic etc. languages
    //      then the system fails to write it correctly.
    //
    //  So, we want to enforce right-to-left direction in this case
    //
    //  This is possible only for WINVER>=0x0500
    //  For any other OS nothing can be done.
    //
    if ( (dwFlags & DATE_RTLREADING) || (dwFlags & DATE_LTRREADING) )
    {
        //
        //  the caller defined a direction, nothing needs to be added
        //
        return iRes;
    }

    OSVERSIONINFO   osVerInfo;
    osVerInfo.dwOSVersionInfoSize = sizeof(osVerInfo);
    if (!GetVersionEx(&osVerInfo))
    {
        DebugPrintEx(DEBUG_ERR, _T("GetVersionEx() failed : %ld"), GetLastError());
        return 0;
    }

    if ( (osVerInfo.dwPlatformId == VER_PLATFORM_WIN32_NT) && (osVerInfo.dwMajorVersion >= 5) )
    {
        //
        //  Get direction information about the characters in the formatted date string
        //
        if (StrHasRTLChar(Locale, lpDateStr))
        {
            //
            //  There is at least one Right-To-Left character
            //  So, we need to add Right-To-Left marks to the whole string
            //
            iRes = GetDateFormat(Locale,
                                 dwFlags | DATE_RTLREADING,
                                 lpDate,
                                 NULL,
                                 lpDateStr,
                                 cchDate);
        }
    }

#endif // UNICODE
#endif // (WINVER >= 0x0500)

    return iRes;

}   // GetY2KCompliantDate

DWORD
IsValidGUID (
    LPCWSTR lpcwstrGUID
)
/*++

Routine name : IsValidGUID

Routine description:

    Checks validity of a GUID string

Author:

    Eran Yariv (EranY),    Nov, 1999

Arguments:

    lpcwstrGUID    [in ] - GUID string to check for validity

Return Value:

    ERROR_SUCCESS if valid GUID string.
    Win32 error otherwise.

--*/
{
    GUID guid;
    HRESULT hr;
    DEBUG_FUNCTION_NAME(TEXT("IsValidGUID"));

    hr = CLSIDFromString((LPOLESTR)lpcwstrGUID, &guid);
    if (FAILED(hr) && hr != REGDB_E_WRITEREGDB )
    {
        if (CO_E_CLASSSTRING == hr)
        {
            //
            // Invalid GUID
            //
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("GUID [%s] is invalid"),
                lpcwstrGUID);
            return ERROR_WMI_GUID_NOT_FOUND;
        }
        else
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("CLSIDFromString for GUID [%s] has failed (hr: 0x%08X)"),
                lpcwstrGUID,
                hr);
            return ERROR_GEN_FAILURE;
        }
    }
    return ERROR_SUCCESS;
}   // IsValidGUID



//*****************************************************************************
//* Name:   StoreString
//* Author:
//*****************************************************************************
//* DESCRIPTION:
//* Copies a string to an offset within a buffer and updates the offset
//* to refelect the length of the copied string. Used for filling out
//* pointerless buffers (i.e. using offset to start of buffer instead of
//* pointers to memory locations).
//* PARAMETERS:
//*     [IN]    String:
//*         The string to be copied.
//*     [OUT]   DestString:
//*         Points to a variable that should be assigned the offset
//*         at which the string was copied.
//*     [IN]    Buffer
//*         A pointer to the buffer into which the string should be copied.
//*     [IN]    Offset
//*         A pointer to a variable that holds the offset from the start
//*         of the buffer where the string is to be copied (0 based).
//*         On successful return the value of this variable is increased
//*         by the length of the string (not including null).
//*         The new offset can be used to copy the next string just after
//*         the terminatng null of the last copied string.
//*     [IN]  dwBufferSize   
//*         Size of the buffer Buffer, in bytes.
//*         This parameter is used only if Buffer is not NULL.
//*
//* RETURN VALUE:
//*			None
//* Comments:
//*         None.
//*****************************************************************************
VOID
StoreString(
    LPCTSTR String,
    PULONG_PTR DestString,
    LPBYTE Buffer,
    PULONG_PTR Offset,
	DWORD dwBufferSize
    )
{

    if (String) 
	{
		Assert(Offset);
        if (Buffer) 
		{
			Assert(DestString);
            
			if ( dwBufferSize <= *Offset ||
				(dwBufferSize - *Offset) < StringSize( String ))
			{
				ASSERT_FALSE;
			}
			HRESULT hr = StringCbCopy( (LPTSTR) (Buffer+*Offset),
										dwBufferSize - *Offset,
										String);

			if (FAILED(hr))
			{
				ASSERT_FALSE;
				// In case of insufficient buffer we write a truncated string
				//
			}    			
		
			*DestString = *Offset;
        }
        *Offset += StringSize( String );
    }
	else 
	{
        if (Buffer)
		{
			Assert(DestString);
            *DestString = 0;
        }
    }
}

VOID
StoreStringW(
    LPCWSTR String,
    PULONG_PTR DestString,
    LPBYTE Buffer,
    PULONG_PTR Offset,
	DWORD dwBufferSize
    )
{

    if (String)
	{
		Assert(Offset);
        if (Buffer)
		{
			Assert(DestString);
			if ( dwBufferSize <= *Offset ||
				(dwBufferSize - *Offset) < StringSizeW( String ))
			{
				ASSERT_FALSE;
			}
			HRESULT hr = StringCbCopyW( (LPWSTR) (Buffer+*Offset),
										 dwBufferSize - *Offset,
										 String);

			if (FAILED(hr))
			{
				ASSERT_FALSE;
				// In case of insufficient buffer we write a truncated string
				//
			}    			
            *DestString = *Offset;
        }
        *Offset += StringSizeW( String );
    }
	else
	{
        if (Buffer)
		{
			Assert(DestString);
            *DestString = 0;
        }
    }
}


DWORD
IsCanonicalAddress(
    LPCTSTR lpctstrAddress,
    BOOL* lpbRslt,
    LPDWORD lpdwCountryCode,
    LPDWORD lpdwAreaCode,
    LPCTSTR* lppctstrSubNumber
    )
/*++

Routine name : IsCanonicalAddress

Routine description:

    Checks if an address is canonical. 
    Returns the country code, area code, and the rest of the number. 
    If it is succsfull the caller must free the rest the subscriber number (if requested).

Author:

    Oded Sacher (OdedS),    Dec, 1999

Arguments:

    lpctstrAddress          [in ] - Pointer to a null terminated string containing the address.
    lpbRslt                 [out] - Pointer to a BOOL to recieve whether the address is canonical.
                                    Valid only if the function did not fail.
    lpdwCountryCode         [out] - Pointer to a DWORD to recieve the country code (Can be NULL). 
                                    Return value is valid only if lpbRslt is TRUE.
    lpdwAreaCode            [out] - Pointer to a DWORD to recieve the area code (Can be NULL). 
                                    Return value is valid only if lpbRslt is TRUE.
    lppctstrSubNumber       [out] - Pointer to a LPCTSTR to recieve the subsriber number (Can be NULL).
                                    If it is not NULL, and the return value is TRUE, Call MemFree to deallocate memory.

Return Value:

    Standard win32 error code.

--*/
{
    DWORD dwRes = ERROR_SUCCESS;
    LPTSTR lptstrSubNumber = NULL;
    DWORD dwStringSize, dwScanedArg, dwCountryCode, dwAreaCode;
    BOOL bFreeSubNumber = TRUE;

    DEBUG_FUNCTION_NAME(TEXT("IsCanonicalAddress"));

    dwStringSize = (_tcslen(lpctstrAddress) + 1) * sizeof(TCHAR);
    lptstrSubNumber = (LPTSTR)MemAlloc (dwStringSize);
    if (NULL == lptstrSubNumber)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("failed to allocate memory"));
        return ERROR_OUTOFMEMORY;
    }

    if (NULL == _tcschr(lpctstrAddress, TEXT('(')))
    {
        dwScanedArg = _stscanf (lpctstrAddress,
                                TEXT("+%lu%*1[' ']%[^'\0']"),
                                &dwCountryCode,
                                lptstrSubNumber);
        if (2 != dwScanedArg)
        {
            *lpbRslt = FALSE;
            goto exit;
        }
        dwAreaCode = ROUTING_RULE_AREA_CODE_ANY;
    }
    else
    {
        dwScanedArg = _stscanf (lpctstrAddress,
                                TEXT("+%lu%*1[' '](%lu)%*1[' ']%[^'\0']"),
                                &dwCountryCode,
                                &dwAreaCode,
                                lptstrSubNumber);
        if (3 != dwScanedArg)
        {
            *lpbRslt = FALSE;
            goto exit;
        }
    }

    if (NULL != _tcschr(lptstrSubNumber, TEXT('(')))
    {
        *lpbRslt = FALSE;
        goto exit;
    }

    if (NULL != lpdwCountryCode)
    {
        *lpdwCountryCode = dwCountryCode;
    }

    if (NULL != lpdwAreaCode)
    {
        *lpdwAreaCode = dwAreaCode;
    }

    if (NULL != lppctstrSubNumber)
    {
        *lppctstrSubNumber = lptstrSubNumber;
        bFreeSubNumber = FALSE;
    }

    *lpbRslt = TRUE;
    Assert (ERROR_SUCCESS == dwRes);

exit:
    if (TRUE == bFreeSubNumber)
    {
        MemFree (lptstrSubNumber);
    }
    return dwRes;
}   // IsCanonicalAddress

BOOL
IsValidFaxAddress (
    LPCTSTR lpctstrFaxAddress,
    BOOL    bAllowCanonicalFormat
)
/*++

Routine name : IsValidFaxAddress

Routine description:

	Checks if a given string is a valid fax address

Author:

	Eran Yariv (EranY),	Apr, 2001

Arguments:

	lpctstrFaxAddress       [in]     - String to check
	bAllowCanonicalFormat   [in]     - Allow string to be of canonical format.
                                       If string is in a canonical format, only the sub-address is checked.

Return Value:

    TRUE if string is a valid fax address, FALSE otherwise.

--*/
{
    BOOL bCanonical;
    BOOL bRes = FALSE;
    LPCTSTR lpctstrSubAddress = lpctstrFaxAddress;

    DEBUG_FUNCTION_NAME(TEXT("IsValidFaxAddress"));
    if (bAllowCanonicalFormat)
    {
        //
        // Check an see if the address is canonical
        //
        if (ERROR_SUCCESS != IsCanonicalAddress (lpctstrFaxAddress, &bCanonical, NULL, NULL, &lpctstrSubAddress))
        {
            //
            // Can't detect canonical state - return invalid address
            //
            return FALSE;
        }
        if (!bCanonical)
        {
            //
            // Analyse entire string
            //
            lpctstrSubAddress = lpctstrFaxAddress;
        }
    }
    //
    // Scan for occurance of characters NOT in valid set
    //
    if (NULL == _tcsspnp (lpctstrSubAddress, FAX_ADDERSS_VALID_CHARACTERS))
    {
        //
        // Address string contains only valid characters
        //
        bRes = TRUE;
        goto exit;
    }
    //
    // Found an illegal character - return FALSE
    //
exit:
    if (lpctstrSubAddress && lpctstrSubAddress != lpctstrFaxAddress)
    {
        MemFree ((LPVOID)lpctstrSubAddress);
    }
    return bRes;
}   // IsValidFaxAddress


BOOL
IsLocalMachineNameA (
    LPCSTR lpcstrMachineName
    )
/*++

Routine name : IsLocalMachineNameA

Routine description:

    Checks if a given string points to the local machine.
    ANSII version.

Author:

    Eran Yariv (EranY), Jul, 2000

Arguments:

    lpcstrMachineName             [in]     - String input

Return Value:

    TRUE if given string points to the local machine, FALSE otherwise.

--*/
{
    CHAR szComputerName[MAX_COMPUTERNAME_LENGTH + 1];
    DWORD dwBufLen = MAX_COMPUTERNAME_LENGTH + 1;
    DEBUG_FUNCTION_NAME(TEXT("IsLocalMachineNameA"));

    if (!lpcstrMachineName)
    {
        //
        // NULL is local
        //
        return TRUE;
    }
    if (!strlen(lpcstrMachineName))
    {
        //
        // Empty string is local
        //
        return TRUE;
    }
    if (!strcmp (".", lpcstrMachineName))
    {
        //
        // "." is local
        //
        return TRUE;
    }
    if (!GetComputerNameA (szComputerName, &dwBufLen))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetComputerNameA failed with %ld"),
            GetLastError());
        return FALSE;
    }
    if (!_stricmp (szComputerName, lpcstrMachineName))
    {
        //
        // Same string as computer name
        //
        return TRUE;
    }
    return FALSE;
}   // IsLocalMachineNameA

BOOL
IsLocalMachineNameW (
    LPCWSTR lpcwstrMachineName
    )
/*++

Routine name : IsLocalMachineNameW

Routine description:

    Checks if a given string points to the local machine.
    UNICODE version.

Author:

    Eran Yariv (EranY), Jul, 2000

Arguments:

    lpcwstrMachineName             [in]     - String input

Return Value:

    TRUE if given string points to the local machine, FALSE otherwise.

--*/
{
    WCHAR wszComputerName[MAX_COMPUTERNAME_LENGTH + 1];
    DWORD dwBufLen = MAX_COMPUTERNAME_LENGTH + 1;
    DEBUG_FUNCTION_NAME(TEXT("IsLocalMachineNameW"));

    if (!lpcwstrMachineName)
    {
        //
        // NULL is local
        //
        return TRUE;
    }
    if (!wcslen(lpcwstrMachineName))
    {
        //
        // Empty string is local
        //
        return TRUE;
    }
    if (!wcscmp (L".", lpcwstrMachineName))
    {
        //
        // "." is local
        //
        return TRUE;
    }
    if (!GetComputerNameW (wszComputerName, &dwBufLen))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("GetComputerNameA failed with %ld"),
            GetLastError());
        return FALSE;
    }
    if (!_wcsicmp (wszComputerName, lpcwstrMachineName))
    {
        //
        // Same string as computer name
        //
        return TRUE;
    }
    return FALSE;
}   // IsLocalMachineNameW


//+--------------------------------------------------------------------------
//
//  Function:   GetSecondsFreeTimeFormat (former UpdateTimeFormat)
//
//  Synopsis:   Construct a time format containing hour and minute for use
//              with the date picker control.
//
//  Arguments:  [tszTimeFormat] - buffer to fill with time format
//              [cchTimeFormat] - size in chars of buffer
//
//  Modifies:   *[tszTimeFormat]
//
//  History:    After 11-18-1996   DavidMun   UpdateTimeFormat
//
//
//---------------------------------------------------------------------------
void
GetSecondsFreeTimeFormat(
        LPTSTR tszTimeFormat,
        ULONG  cchTimeFormat)
{
    DEBUG_FUNCTION_NAME( _T("GetSecondsFreeTimeFormat"));

    DWORD ec = ERROR_SUCCESS;

    ULONG cch = 0;
    TCHAR tszScratch[100];
    BOOL  fAmPm;
    BOOL  fAmPmPrefixes;
    BOOL  fLeadingZero;

    TCHAR tszDefaultTimeFormat[] = { TEXT("hh:mm tt") };

    //
    // 1) GetLocal info
    //

    //
    // AM/PM (0) or 24H (1)
    //
    if (0 == GetLocaleInfo( LOCALE_USER_DEFAULT,
                            LOCALE_ITIME,
                            tszScratch,
                            sizeof(tszScratch)/sizeof(tszScratch[0])))
    {
        ec = GetLastError();

        DebugPrintEx(
            DEBUG_ERR,
            _T("Failed to GetLocaleInfo for LOCALE_ITIME. (ec: %ld)"),
            ec);


        if (ERROR_INSUFFICIENT_BUFFER == ec)
        {
            Assert(FALSE);
        }

        goto Error;
    }

    fAmPm = (*tszScratch == TEXT('0'));

    if (fAmPm)
    {
        //
        // AM/PM as suffix (0) as prefix (1)
        //
        if (0 == GetLocaleInfo( LOCALE_USER_DEFAULT,
                                LOCALE_ITIMEMARKPOSN,
                                tszScratch,
                                sizeof(tszScratch)/sizeof(tszScratch[0])))
        {
            ec = GetLastError();

            DebugPrintEx(
                DEBUG_ERR,
                _T("Failed to GetLocaleInfo for LOCALE_ITIMEMARKPOSN. (ec: %ld)"),
                ec);


            if (ERROR_INSUFFICIENT_BUFFER == ec)
            {
                Assert(FALSE);
            }

            goto Error;
        }
        fAmPmPrefixes = (*tszScratch == TEXT('1'));
    }

    //
    // Leading zeros for hours: no (0) yes (1)
    //
    if (0 == GetLocaleInfo( LOCALE_USER_DEFAULT,
                            LOCALE_ITLZERO,
                            tszScratch,
                            sizeof(tszScratch)/sizeof(tszScratch[0])))
    {
        ec = GetLastError();

        DebugPrintEx(
            DEBUG_ERR,
            _T("Failed to GetLocaleInfo for LOCALE_ITLZERO. (ec: %ld)"),
            ec);


        if (ERROR_INSUFFICIENT_BUFFER == ec)
        {
            Assert(FALSE);
        }

        goto Error;
    }
    fLeadingZero = (*tszScratch == TEXT('1'));

    //
    // Get Charcter(s) for time seperator
    //
    if (0 == GetLocaleInfo( LOCALE_USER_DEFAULT,
                            LOCALE_STIME,
                            tszScratch,
                            sizeof(tszScratch)/sizeof(tszScratch[0])))
    {
        ec = GetLastError();

        DebugPrintEx(
            DEBUG_ERR,
            _T("Failed to GetLocaleInfo for LOCALE_STIME. (ec: %ld)"),
            ec);


        if (ERROR_INSUFFICIENT_BUFFER == ec)
        {
            Assert(FALSE);
        }

        goto Error;
    }

    //
    // See if there's enough room in destination string
    //

    cch = 1                     +  // terminating nul
          1                     +  // first hour digit specifier "h"
          2                     +  // minutes specifier "mm"
          (fLeadingZero != 0)   +  // leading hour digit specifier "h"
          lstrlen(tszScratch)   +  // separator string
          (fAmPm ? 3 : 0);         // space and "tt" for AM/PM

    if (cch > cchTimeFormat)
    {
        cch = 0; // signal error

        DebugPrintEx(
            DEBUG_ERR,
            _T("Time format too long."));

        goto Error;
    }

    Assert(cch);

    //
    // 2) Build a time string that has hours and minutes but no seconds.
    //

    tszTimeFormat[0] = TEXT('\0');

    if (fAmPm)
    {
        if (fAmPmPrefixes)
        {
            lstrcpy(tszTimeFormat, TEXT("tt "));
        }

        lstrcat(tszTimeFormat, TEXT("h"));

        if (fLeadingZero)
        {
            lstrcat(tszTimeFormat, TEXT("h"));
        }
    }
    else
    {
        lstrcat(tszTimeFormat, TEXT("H"));

        if (fLeadingZero)
        {
            lstrcat(tszTimeFormat, TEXT("H"));
        }
    }

    lstrcat(tszTimeFormat, tszScratch); // separator
    lstrcat(tszTimeFormat, TEXT("mm"));

    if (fAmPm && !fAmPmPrefixes)
    {
        lstrcat(tszTimeFormat, TEXT(" tt"));
    }
    return;

Error:
    //
    // If there was a problem in getting locale info for building time string
    // just use the default and bail.
    //

    Assert (!cch);

    lstrcpyn(tszTimeFormat, tszDefaultTimeFormat,cchTimeFormat);

    DebugPrintEx(
        DEBUG_ERR,
        _T("Failed to GET_LOCALE_INFO set tszDefaultTimeFormat."));

    return;
}

/*++

Routine name : MultiStringSize


Description:

    Helper function to find Multi-String size (UNICODE or ANSI)
    
    MultiString (as in registry REG_MULTY_SZ type) is stored as a series of zero-terminated string,
    with two zero charcters terminating the final string in the series.

    Multi-String have to be at least 2 characters long!!!

Author:

    Caliv Nir, FEB , 2001

Arguments:

    psz     -   [IN]    - input multi-string (must be leggal multi-string otherwise result are undefined)

Return Value:

    string length including the terminating zero !!!

--*/

size_t MultiStringLength(LPCTSTR psz)
{
  LPCTSTR pszT = psz;

  Assert ( psz );

  if ( !psz[0] ) psz+=1;    // empty string as a first string skip it


  while (*psz)
      psz += lstrlen(psz) + 1;

  return psz - pszT + 1;      // one additional zero-terminator
}



LPCTSTR 
GetRegisteredOrganization ()
/*++

Routine name : GetRegisteredOrganization

Routine description:

	Retrieves the system's registered company name (organization)

Author:

	Eran Yariv (EranY),	Apr, 2001

Arguments:


Return Value:

    Allocated result string

--*/
{
    DEBUG_FUNCTION_NAME( _T("GetRegisteredOrganization"));

    LPTSTR lptstrRes = NULL;
    HKEY hKey = NULL;
    hKey = OpenRegistryKey (HKEY_LOCAL_MACHINE,
                            REGKEY_INSTALLLOCATION,
                            FALSE,
                            KEY_QUERY_VALUE);
    if (!hKey)
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("OpenRegistryKey failed with %ld"),
            GetLastError());
        return StringDup(TEXT(""));
    }
    lptstrRes = GetRegistryString (hKey,
                                   TEXT("RegisteredOrganization"),
                                   TEXT(""));
    RegCloseKey (hKey);
    return lptstrRes;
}   // GetRegisteredOrganization

LPCTSTR 
GetCurrentUserName ()
/*++

Routine name : GetCurrentUserName

Routine description:

	Retrieves display name of the current user

Author:

	Eran Yariv (EranY),	Apr, 2001

Arguments:


Return Value:

    Allocated result string

--*/
{
    DEBUG_FUNCTION_NAME( _T("GetCurrentUserName"));
    TCHAR tszName[MAX_PATH] = TEXT("");
    DWORD dwSize = ARR_SIZE(tszName);

    typedef BOOLEAN (SEC_ENTRY * PFNGETUSERNAMEXA)(EXTENDED_NAME_FORMAT, LPSTR, PULONG);
    typedef BOOLEAN (SEC_ENTRY * PFNGETUSERNAMEXW)(EXTENDED_NAME_FORMAT, LPWSTR, PULONG);

    HMODULE hMod = LoadLibrary (TEXT("Secur32.dll"));
    if (hMod)
    {
#ifdef UNICODE
        PFNGETUSERNAMEXW pfnGetUserNameEx = (PFNGETUSERNAMEXW)GetProcAddress (hMod, "GetUserNameExW");
#else
        PFNGETUSERNAMEXA pfnGetUserNameEx = (PFNGETUSERNAMEXA)GetProcAddress (hMod, "GetUserNameExA");
#endif
        if (pfnGetUserNameEx)
        {
            if (!pfnGetUserNameEx(NameDisplay, tszName, &dwSize)) 
            {
                DebugPrintEx(
                    DEBUG_ERR,
                    TEXT("GetUserNameEx failed with %ld"),
                    GetLastError());
            }
        }
        else
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("GetProcAddress failed with %ld"),
                GetLastError());
        }
        FreeLibrary (hMod);
    }
    else
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("LoadLibrary(secur32.dll) failed with %ld"),
            GetLastError());
    }
    return StringDup(tszName);
}   // GetCurrentUserName

BOOL
IsValidSubscriberIdW (
    LPCWSTR lpcwstrSubscriberId
)
{
    DEBUG_FUNCTION_NAME(TEXT("IsValidSubscriberIdW"));

    CHAR szAnsiiSID[FXS_TSID_CSID_MAX_LENGTH + 1];
    CHAR cDefaultChar = 19;

    Assert (lpcwstrSubscriberId);

    if(wcslen (lpcwstrSubscriberId) > FXS_TSID_CSID_MAX_LENGTH)
    {
        return FALSE;   
    }

    if (!WideCharToMultiByte (CP_ACP,
                              0,
                              lpcwstrSubscriberId,
                              -1,
                              szAnsiiSID,
                              sizeof (szAnsiiSID),
                              &cDefaultChar,
                              NULL))
    {
        DebugPrintEx(
            DEBUG_ERR,
            TEXT("WideCharToMultiByte failed with %ld"),
            GetLastError());
        return FALSE;
    }
    return IsValidSubscriberIdA(szAnsiiSID);
}   // IsValidSubscriberIdW

BOOL
IsValidSubscriberIdA (
    LPCSTR lpcstrSubscriberId
)
{
    DWORD dwLen;
    DWORD dw;
    DEBUG_FUNCTION_NAME(TEXT("IsValidSubscriberIdA"));


    Assert (lpcstrSubscriberId);
        
    dwLen = strlen (lpcstrSubscriberId);

    if(dwLen > FXS_TSID_CSID_MAX_LENGTH)
    {
        return FALSE;   
    }

    for (dw = 0; dw < dwLen; dw++)
    {
        if (!isprint (lpcstrSubscriberId[dw]))
        {
            DebugPrintEx(
                DEBUG_ERR,
                TEXT("%s contains invalid characters"),
                lpcstrSubscriberId);
            return FALSE;
        }   
    }             
    return TRUE;
}   // IsValidSubscriberIdA
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\uiutil.cpp ===
/////////////////////////////////////////////////////
//
// Fax UI utlity implementation
//

#include <faxutil.h>
#include <Shlwapi.h>
#include <tchar.h>
#include <htmlhelp.h>
#include <Sddl.h>
#include <Shlobj.h>
#include <Aclapi.h>
#include <faxres.h>
#include <faxreg.h>
#include "..\admin\faxres\resource.h"

//
// Topics of the fxsadmin.chm HTML help file
//
#define HELP_FOLDER_SECURITY        FAX_ADMIN_HELP_FILE TEXT("::/FaxS_H_SecureFolder.htm") 


WNDPROC  g_pfOrigWndProc = NULL;    // original window procedure
TCHAR*   g_tszHelpTopic  = NULL;    // help topic


LRESULT 
CALLBACK 
HlpSubclassProc(
  HWND hwnd,      // handle to window
  UINT uMsg,      // message identifier
  WPARAM wParam,  // first message parameter
  LPARAM lParam   // second message parameter
)
/*++

Routine Description:

    Window procedure
    Displays HTML help topic when receives WM_HELP message

--*/
{
    if(WM_HELP == uMsg)
    {
        DEBUG_FUNCTION_NAME(TEXT("MgsHlpWindowProc(WM_HELP)"));

        DWORD dwRes;
        SetLastError(0);
        HtmlHelp(hwnd, g_tszHelpTopic, HH_DISPLAY_TOPIC, NULL);
        dwRes = GetLastError(); 
        if(dwRes != ERROR_SUCCESS)
        {
            DebugPrintEx(DEBUG_ERR, TEXT("HtmlHelp failed with %ld."), dwRes);
        }
        return 0;
    }

    if(g_pfOrigWndProc)
    {
        return CallWindowProc(g_pfOrigWndProc, hwnd, uMsg, wParam, lParam); 
    }

    return 0;
}

int
FaxMsgBox(
    HWND   hWnd,
    DWORD  dwMsgId, 
    UINT   uType
)
/*++

Routine Description:

    MessageBox wrapper function
    Uses constant caption IDS_FAX_MESSAGE_BOX_TITLE "Microsoft Fax"

Arguments:

    hWnd        [in] - notification window
    dwMsgId     [in] - message resource ID from FxsRes.dll
    uType       [in] - MessageBox type

Return Value:

    MessageBox return value

--*/
{
    DWORD dwRes;
    int   nRes = IDABORT;
    TCHAR szTitle[MAX_PATH] = {0};
    TCHAR szMessage[MAX_PATH*2] = {0};

    DEBUG_FUNCTION_NAME(TEXT("FaxMsgBox"));

    //
    // Load strings
    //
    HINSTANCE hResource = GetResInstance(GetModuleHandle(NULL));
    if(!hResource)
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR, TEXT("GetResInstance failed with %ld."), dwRes);
        return nRes;
    }

    if(!LoadString(hResource, IDS_FAX_MESSAGE_BOX_TITLE, szTitle, ARR_SIZE(szTitle)-1))
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR, TEXT("LoadString failed with %ld."), dwRes);
        return nRes;
    }

    if(!LoadString(hResource, dwMsgId, szMessage, ARR_SIZE(szMessage)-1))
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR, TEXT("LoadString failed with %ld."), dwRes);
        return nRes;
    }

    //
    // Open the message box
    //
    nRes = AlignedMessageBox(hWnd, szMessage, szTitle, uType);

    return nRes;

} // FaxMsgBox


int
FaxMessageBoxWithHelp(
    HWND   hWnd,
    DWORD  dwMsgId, 
    TCHAR* tszHelpTopic,
    UINT   uType
)
/*++

Routine Description:

    MessageBox wrapper function
    Creates helper window to handle WM_HELP message

Arguments:

    hWnd            [in] - parent window handle
    dwMsgId         [in] - message resource ID from FxsRes.dll
    tszHelpTopic    [in] - HTML help topic
    uType           [in] - MessageBox type

Return Value:

    MessageBox return value

--*/
{
    DEBUG_FUNCTION_NAME(TEXT("FaxMessageBoxWithHelp"));

    DWORD     dwRes;
    int       nRes = IDABORT;

    if(GetWindowLongPtr(hWnd, GWL_STYLE) & WS_CHILD)
    {
        //
        // A child window doesn't receive WM_HELP message
        // get handle to its parent.
        //
        hWnd = GetParent(hWnd);
    }

    //
    // Subclass parent window in order to catch WM_HELP message
    //
    g_pfOrigWndProc = (WNDPROC)SetWindowLongPtr(hWnd, GWLP_WNDPROC, (LONG_PTR)HlpSubclassProc);
    if(!g_pfOrigWndProc)
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR, TEXT("SetWindowLongPtr failed with %ld."), dwRes);
        return nRes;
    }

    g_tszHelpTopic = tszHelpTopic;
    //
    // Open the message box
    //
    nRes = FaxMsgBox(hWnd, dwMsgId, uType | MB_HELP);

    g_tszHelpTopic = NULL;

    //
    // Remove the subclass from the parent window
    //
    if(!SetWindowLongPtr(hWnd, GWLP_WNDPROC, (LONG_PTR)g_pfOrigWndProc))
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR, TEXT("SetWindowLongPtr failed with %ld."), dwRes);
    }
    g_pfOrigWndProc = NULL;

    return nRes;

} // FaxMessageBoxWithHelp

DWORD
AskUserAndAdjustFaxFolder(
    HWND   hWnd,
    TCHAR* szServerName, 
    TCHAR* szPath,
    DWORD  dwError
)
/*++

Routine Description:

    This function tries to create and adjust access rights for a use supplied path 
    after the fax server failed to accept this path

Arguments:

    hWnd                [in]  - Parent window
    szServerName        [in]  - Fax server name
    szPath              [in]  - Desired path
    dwError             [in]  - Error code returned by fax server

Return Value:

    Win32 error code
    Special meaning:
        ERROR_SUCCESS      - the folder has been created and adjusted
        ERROR_BAD_PATHNAME - an error message box has been shown to the user

--*/
{
    DWORD dwRes = ERROR_SUCCESS;
    DEBUG_FUNCTION_NAME(TEXT("AskUserAndAdjustFaxFolder"));

    if(dwError == ERROR_BAD_NETPATH  ||
       dwError == ERROR_BAD_PATHNAME ||
       dwError == ERROR_DIRECTORY    ||
       dwError == ERROR_NOT_READY    ||
       szPath  == NULL               ||
       PathIsRelative(szPath))
    {
        //
        // The path is not valid
        //
        FaxMsgBox(hWnd, IDS_PATH_NOT_VALID, MB_OK | MB_ICONERROR);
        return ERROR_BAD_PATHNAME;
    }

    if(dwError == FAX_ERR_DIRECTORY_IN_USE)
    {        
        //
        // The path is already used for fax archive or queue
        //
        FaxMsgBox(hWnd, IDS_FAX_ERR_DIRECTORY_IN_USE, MB_OK | MB_ICONERROR);
        return ERROR_BAD_PATHNAME;
    }
    
    if(dwError == FAX_ERR_FILE_ACCESS_DENIED)
    {
        //
        // The fax service has no access to the folder
        //
        FaxMessageBoxWithHelp(hWnd,
                              IDS_FOLDER_ACCESS_DENIED,
                              HELP_FOLDER_SECURITY,
                              MB_OK | MB_ICONERROR);       
        return ERROR_BAD_PATHNAME;
    }

    if(dwError != ERROR_PATH_NOT_FOUND &&
       dwError != ERROR_FILE_NOT_FOUND)
    {
        return dwError;
    }

    if(!IsLocalMachineName(szServerName)) 
    {
        //
        // Remote server
        //       
        FaxMessageBoxWithHelp(hWnd,
                              IDS_PATH_NOT_FOUND_REMOTE_FAX,
                              HELP_FOLDER_SECURITY,
                              MB_OK | MB_ICONERROR);       
        return ERROR_BAD_PATHNAME;
    }

    //
    // Check for environment strings
    //
    if(StrChr(szPath, _T('%')))
    {
        //
        // Path contains environment variables
        //
        FaxMessageBoxWithHelp(hWnd,
                              IDS_PATH_NOT_FOUND_ENV_VAR,
                              HELP_FOLDER_SECURITY, 
                              MB_OK | MB_ICONERROR); 
        return ERROR_BAD_PATHNAME;
    }


    if(PathIsNetworkPath(szPath))
    {
        FaxMessageBoxWithHelp(hWnd,
                              IDS_PATH_NOT_FOUND_REMOTE_PATH,
                              HELP_FOLDER_SECURITY,
                              MB_OK | MB_ICONERROR); 
        return ERROR_BAD_PATHNAME;
    }

    //
    // Suggest to create / adjust path
    //
    if(IDYES != FaxMessageBoxWithHelp(hWnd,
                                      IDS_PATH_NOT_FOUND_ASK_CREATE,
                                      HELP_FOLDER_SECURITY,
                                      MB_YESNO | MB_ICONQUESTION))                                        
    {
        return ERROR_BAD_PATHNAME;
    }

    PSECURITY_DESCRIPTOR pSD = NULL;

    if(!ConvertStringSecurityDescriptorToSecurityDescriptor(SD_FAX_FOLDERS,
                                                            SDDL_REVISION_1,
                                                            &pSD,
                                                            NULL))
    {
        dwRes = GetLastError();
        DebugPrintEx(DEBUG_ERR, TEXT("ConvertStringSecurityDescriptorToSecurityDescriptor failed with %ld."), dwRes);
        return dwRes;
    }

    //
    // Create the folder
    //
    SECURITY_ATTRIBUTES sa = {sizeof(SECURITY_ATTRIBUTES), pSD, FALSE};

    dwRes = SHCreateDirectoryEx(hWnd, szPath, &sa);
    if(ERROR_SUCCESS != dwRes)
    {
        DebugPrintEx(DEBUG_ERR, TEXT("SHCreateDirectoryEx failed with %ld."), dwRes);

        if(dwRes == ERROR_BAD_PATHNAME)
        {
            FaxMsgBox(hWnd, IDS_PATH_NOT_VALID, MB_OK | MB_ICONERROR);
        }

        if(dwRes == ERROR_CANCELLED)
        {
            //
            // The user canceled the operation. No need to popup again.
            //
            dwRes = ERROR_BAD_PATHNAME;
        }

        goto exit;
    }

exit:

    if(pSD)
    {
        LocalFree(pSD);
    }

    return dwRes;

} // AskUserAndAdjustFaxFolder
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\wiadevdp.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       WIADEVDP.H
 *
 *  VERSION:     1.1
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        7/15/1999
 *
 *  DESCRIPTION: Private Device Dialog Declarations
 *
 *******************************************************************************/
#ifndef _WIADEVDP_H_INCLUDED
#define _WIADEVDP_H_INCLUDED

#include "wia.h"

#if defined(__cplusplus)
extern "C" {
#endif

#include <pshpack8.h>

//
// Private flags for WIA enumeration
//
//      DEV_MAN_ENUM_TYPE_REMOTE    Will enumerate local AND remote
//      DEV_MAN_ENUM_TYPE_VOL       Will enumerate our volume devices
//      DEV_MAN_ENUM_TYPE_INACTIVE  Will enumerate inactive devices (e.g. USB 
//                                  device thaat is unplugged)
//      DEV_MAN_ENUM_TYPE_STI       Will enumerate STI only devices too
//      DEV_MAN_ENUM_TYPE_ALL       Will enumerate all devices
//
#define DEV_MAN_ENUM_TYPE_REMOTE    0x00000001
#define DEV_MAN_ENUM_TYPE_VOL       0x00000002
#define DEV_MAN_ENUM_TYPE_INACTIVE  0x00000004
#define DEV_MAN_ENUM_TYPE_STI       0x00000008
#define DEV_MAN_ENUM_TYPE_ALL       0x0000000F

DEFINE_GUID( CLSID_WiaDefaultUi, 0xD1621129, 0x45C4, 0x41AD, 0xA1, 0xD1, 0xAF, 0x7E, 0xAF, 0xAB, 0xEE, 0xDC );

//
// {F1ABE2B5-C073-4dba-B6EB-FD7A5111DD8F}
//
DEFINE_GUID( CLSID_WiaAutoPlayDropTarget, 0xf1abe2b5, 0xc073, 0x4dba, 0xb6, 0xeb, 0xfd, 0x7a, 0x51, 0x11, 0xdd, 0x8f );

//
// Private interface used to call system ui
//
#undef  INTERFACE
#define INTERFACE IWiaGetImageDlg
DECLARE_INTERFACE_(IWiaGetImageDlg, IUnknown)
{
    // *** IUnknown methods ***
    STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef) (THIS) PURE;
    STDMETHOD_(ULONG,Release) (THIS) PURE;

    // *** IWiaGetImageDlg methods ***
    STDMETHOD(SelectDeviceDlg) (THIS_
        HWND         hwndParent,
        BSTR         bstrInitialDeviceId,
        LONG         lDeviceType,
        LONG         lFlags,
        BSTR        *pbstrDeviceID,
        IWiaItem   **ppWiaItemRoot );

    STDMETHOD(GetImageDlg)( THIS_
        IWiaDevMgr  *pWiaDevMgr,
        HWND         hwndParent,
        LONG         lDeviceType,
        LONG         lFlags,
        LONG         lIntent,
        IWiaItem    *pItemRoot,
        BSTR         bstrFilename,
        GUID        *pguidFormat );
};

DEFINE_GUID( IID_IWiaGetImageDlg, 0x4F67AD3C, 0x19EA, 0x4CE9, 0x80, 0xE2, 0x3A, 0xDE, 0x50, 0xD5, 0x02, 0xA2 );

//
// Hide various controls
//
#define WIA_PROGRESSDLG_NO_PROGRESS              0x00000001
#define WIA_PROGRESSDLG_NO_CANCEL                0x00000002
#define WIA_PROGRESSDLG_NO_ANIM                  0x00000004
#define WIA_PROGRESSDLG_NO_TITLE                 0x00000008

//
// Animation flags
//
#define WIA_PROGRESSDLG_ANIM_SCANNER_COMMUNICATE 0x00010000
#define WIA_PROGRESSDLG_ANIM_CAMERA_COMMUNICATE  0x00020000
#define WIA_PROGRESSDLG_ANIM_VIDEO_COMMUNICATE   0x00040000
#define WIA_PROGRESSDLG_ANIM_SCANNER_ACQUIRE     0x00080000
#define WIA_PROGRESSDLG_ANIM_CAMERA_ACQUIRE      0x00100000
#define WIA_PROGRESSDLG_ANIM_VIDEO_ACQUIRE       0x00200000
#define WIA_PROGRESSDLG_ANIM_DEFAULT_COMMUNICATE 0x00400000

#undef  INTERFACE
#define INTERFACE IWiaProgressDialog
DECLARE_INTERFACE_(IWiaProgressDialog, IUnknown)
{
    // *** IUnknown methods ***
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    // *** IWiaProgressDialog methods ***
    STDMETHOD(Create)(THIS_ HWND hwndParent, LONG lFlags );
    STDMETHOD(Show)(THIS);
    STDMETHOD(Hide)(THIS);
    STDMETHOD(Cancelled)( THIS_ BOOL *pbCancelled );
    STDMETHOD(SetTitle)( THIS_ LPCWSTR pszMessage );
    STDMETHOD(SetMessage)( THIS_ LPCWSTR pszTitle );
    STDMETHOD(SetPercentComplete)( THIS_ UINT nPercent );
    STDMETHOD(Destroy)(THIS);
};

// {F740718A-E460-4b05-83E8-C5D221C772E5}
DEFINE_GUID( IID_IWiaProgressDialog, 0xF740718A, 0xE460, 0x4B05, 0x83, 0xE8, 0xC5, 0xD2, 0x21, 0xC7, 0x72, 0xE5 );


// {8144B6F5-20A8-444a-B8EE-19DF0BB84BDB}
DEFINE_GUID( CLSID_StiEventHandler, 0x8144b6f5, 0x20a8, 0x444a, 0xb8, 0xee, 0x19, 0xdf, 0xb, 0xb8, 0x4b, 0xdb );


#include <poppack.h>

#if defined(__cplusplus)
};
#endif

#endif // !_WIADEVDP_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\debugex\sources.inc ===
!IF 0

Copyright (c) 1990  Microsoft Corporation

Module Name:

    sources.

Abstract:

    This file specifies the target component being built and the list of
    sources files needed to build that component.  Also specifies optional
    compiler switches and libraries that are unique for the component being
    built.

!ENDIF

TARGETNAME=debugex
TARGETPATH=obj
TARGETTYPE=LIBRARY

USE_LIBCMT=1
USE_NATIVE_EH=1

INCLUDES=$(BASEDIR)\public\sdk\inc;                 \
         ..\..\..\inc;

C_DEFINES= $(C_DEFINES) -DWIN32 -DENABLE_FRE_LOGGING

SOURCES=\
	debugex.cpp
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\version\cvernum.h ===
#ifndef FAX_VERNUM_H_INCLUDED
#define FAX_VERNUM_H_INCLUDED

#include "FaxVer.h"
// common Fax RC definitions


#define FAX_VER_COMPANYNAME_STR     "Microsoft Corporation"
#define FAX_VER_LEGALCOPYRIGHT_STR  "\251 Microsoft Corporation. All rights reserved."
#define FAX_VER_PRODUCTNAME_STR     "Microsoft\256 Fax Server"


#ifndef VER_PRODUCTBUILD_QFE
#define VER_PRODUCTBUILD_QFE        0
#endif


#define BUILD                       rup
#define VERMAJOR                    rmj
#define VERMINOR                    rmm


// HOT FIX # field as part of fax build # 
// (should be manually updated!!!)
#define FAX_HOTFIX_NUM              0


// FaxConfigurationVersion - this is an internal upgrade code for schema
// changes upgrade
#define CCV                           1

                                        
#endif // FAX_VERNUM_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\version\faxver.h ===
#define rmj	5		
#define rmm	2	
#define rup	2581	
#define szVerName	"KUKI MUKI"
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\debugex\stdafx.h ===
#ifndef _STDAFX_H
#define _STDAFX_H


#define _ATL_APARTMENT_THREADED

#include <atlbase.h>
#include <shellapi.h>
#include <commctrl.h>

extern CComModule _Module;

#include <atlcom.h>
#include <atlhost.h>
#include <atlwin.h>

#include <atldlgs.h>
#include <atlctl.h>
#include <atlctrls.h>

#include "resource.h"

#include <icomponentimpl.h>
#include <isetup.h>
#include <propguid.h>


extern const IID LIBID_MpLib;
extern const CLSID CLSID_ComMpComponent;
extern const ModuleID CartmanMpComponentID;
extern const VersionID MpVersionID;

#endif	// _STDAFX_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\faxsrv\util\debugex\debugex.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Module Name:

    Debugex.cpp

Abstract:

    Implementation of the CDebug class.

Author:

    Eran Yariv (EranY)  Jul, 1999

Revision History:

--*/


#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <time.h>
#include "debugex.h"

#include <faxreg.h>     // We're reading the default mask from HKLM\REGKEY_FAX_CLIENT\REGVAL_DBGLEVEL_EX
#include <faxutil.h>    // For the DEBUG_FAX_TAPI_MSG, DEBUG_VER_MSG, DEBUG_WRN_MSG, and DEBUG_ERR_MSG constants

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#ifdef ENABLE_FRE_LOGGING
#define ENABLE_LOGGING
#endif

#ifdef DEBUG 
#define ENABLE_LOGGING
#endif

#ifdef ENABLE_LOGGING
//////////////////////////////////////////////////////////////////////
// Static variables
//////////////////////////////////////////////////////////////////////

HANDLE  CDebug::m_shLogFile =           INVALID_HANDLE_VALUE;
LONG    CDebug::m_sdwIndent =           0;
DWORD   CDebug::m_sDbgMask =            DEFAULT_DEBUG_MASK;
DWORD   CDebug::m_sFmtMask =            DEFAULT_FORMAT_MASK;
BOOL    CDebug::m_sbMaskReadFromReg =   FALSE;
BOOL    CDebug::m_sbRegistryExist =     FALSE;
BOOL    CDebug::m_sbFlush =             TRUE;

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CDebug::~CDebug()
/*++

Routine name : CDebug::~CDebug

Routine description:

    Destructor

Author:

    Eran Yariv (EranY), Jul, 1999

Arguments:

    None.

Return Value:

    None.

--*/
{
    DWORD dwLastError = GetLastError ();
    Unindent ();
    switch (m_ReturnType)
    {
        case DBG_FUNC_RET_UNKNOWN:
            DbgPrint (FUNC_TRACE, NULL, 0, TEXT("}"));
            break;

        case DBG_FUNC_RET_HR:
            //
            // We have the return HRESULT
            //
            if (NOERROR == *m_phr)
            {
                DbgPrint (FUNC_TRACE, NULL, 0, TEXT("} (NOERROR)"));
            }
            else if (S_FALSE == *m_phr)
            {
                DbgPrint (FUNC_TRACE, NULL, 0, TEXT("} (S_FALSE)"));
            }
            else
            {    
                DbgPrint (FUNC_TRACE, NULL, 0, TEXT("} (0x%08X)"), *m_phr);
            }
            break;

        case DBG_FUNC_RET_DWORD:
            //
            // We have the return DWORD
            //
            if (ERROR_SUCCESS == *m_pDword)
            {
                DbgPrint (FUNC_TRACE, NULL, 0, TEXT("} (ERROR_SUCCESS)"));
            }
            else
            {    
                DbgPrint (FUNC_TRACE, NULL, 0, TEXT("} (%ld)"), *m_pDword);
            }
            break;

        case DBG_FUNC_RET_BOOL:
            //
            // We have the return BOOL
            //
            if (*m_pBool)
            {
                DbgPrint (FUNC_TRACE, NULL, 0, TEXT("} (TRUE)"));
            }
            else
            {    
                DbgPrint (FUNC_TRACE, NULL, 0, TEXT("} (FALSE)"));
            }
            break;
        default:
            DbgPrint  (ASSERTION_FAILED, 
                       TEXT(__FILE__), 
                       __LINE__, 
                       TEXT("ASSERTION FAILURE!!!"));
            {
                DebugBreak();
            }
            break;
    }
    SetLastError (dwLastError);
}

//////////////////////////////////////////////////////////////////////
// Implementation
//////////////////////////////////////////////////////////////////////

void
CDebug::EnterModuleWithParams (
    LPCTSTR lpctstrModule, 
    LPCTSTR lpctstrFormat,
    va_list arg_ptr
)
{
    DWORD dwLastError = GetLastError ();
    if (!m_sbMaskReadFromReg)
    {
        ReadMaskFromReg ();
    }
    lstrcpyn (m_tszModuleName, 
              lpctstrModule, 
              ARR_SIZE (m_tszModuleName) - 1);
    m_tszModuleName[ARR_SIZE(m_tszModuleName)-1] = TEXT('\0');                  
    TCHAR szArgs[1024] = {0};
    _vsntprintf(szArgs, ARR_SIZE(szArgs)-1, lpctstrFormat, arg_ptr);

    TCHAR szBuf[1024] = {0};
    _sntprintf (szBuf, ARR_SIZE(szBuf) - 1, TEXT("%s (%s)"), m_tszModuleName, szArgs);
    DbgPrint (FUNC_TRACE, NULL, 0, szBuf);
    DbgPrint (FUNC_TRACE, NULL, 0, TEXT("{"));
    Indent ();
    SetLastError (dwLastError);
}

void
CDebug::EnterModule (
    LPCTSTR lpctstrModule
)
{
    DWORD dwLastError = GetLastError ();
    if (!m_sbMaskReadFromReg)
    {
        ReadMaskFromReg ();
    }
    lstrcpyn (m_tszModuleName, 
              lpctstrModule, 
              ARR_SIZE (m_tszModuleName) - 1);
    m_tszModuleName[ARR_SIZE(m_tszModuleName)-1] = TEXT('\0');              
    DbgPrint (FUNC_TRACE, NULL, 0, m_tszModuleName);
    DbgPrint (FUNC_TRACE, NULL, 0, TEXT("{"));
    Indent ();
    SetLastError (dwLastError);
}

//*****************************************************************************
//* Name:   OpenLogFile
//* Author: Mooly Beery (MoolyB), May, 2000
//*****************************************************************************
//* DESCRIPTION:
//*     Creates a log file which accepts the debug output
//*     
//* PARAMETERS:
//*     [IN] LPCTSTR lpctstrFilename:
//*         the filename which will be created in the temporary folder
//*         
//* RETURN VALUE:
//*         FALSE if the operation failed.
//*         TRUE is succeeded.
//* Comments:
//*         this function should be used together with CloseLogFile()
//*****************************************************************************
BOOL CDebug::OpenLogFile(LPCTSTR lpctstrFilename)
{
    TCHAR szFilename[MAX_PATH]      = {0};
    TCHAR szTempFolder[MAX_PATH]    = {0};
    TCHAR szPathToFile[MAX_PATH]    = {0};

    if (!lpctstrFilename)
    {
        DbgPrint (ASSERTION_FAILED, 
                  TEXT(__FILE__), 
                  __LINE__, 
                  TEXT("Internat error - bad Filename"));
        DebugBreak();
        return FALSE;
    }

    // first expand the filename
    if (ExpandEnvironmentStrings(lpctstrFilename,szFilename,MAX_PATH)==0)
    {
        return FALSE;
    }
    // is this is a file description or a complete path to file
    if (_tcschr(szFilename,_T('\\'))==NULL)
    {
        // this is just the file's name, need to add the temp folder to it.
        if (GetTempPath(MAX_PATH,szTempFolder)==0)
        {
            return FALSE;
        }

        _tcsncpy(szPathToFile,szTempFolder,MAX_PATH-1);
        _tcsncat(szPathToFile,szFilename,MAX_PATH-_tcslen(szPathToFile)-1);
    }
    else
    {
        // this is the full path to the log file, use it.
        _tcsncpy(szPathToFile,szFilename,MAX_PATH-1);
    }

    m_shLogFile = ::SafeCreateFile( 
                                szPathToFile,
                                GENERIC_WRITE,
                                FILE_SHARE_WRITE | FILE_SHARE_READ,
                                NULL,
                                OPEN_ALWAYS,
                                FILE_ATTRIBUTE_NORMAL | FILE_FLAG_WRITE_THROUGH,
                                NULL);

    if (m_shLogFile==INVALID_HANDLE_VALUE)  
    {
        return FALSE;
    }

    SetLogFile(m_shLogFile);
    // no sense to open the file and not enable printing to it.
    m_sFmtMask |= DBG_PRNT_TO_FILE;
    return TRUE;
}

//*****************************************************************************
//* Name:   CloseLogFile
//* Author: Mooly Beery (MoolyB), May, 2000
//*****************************************************************************
//* DESCRIPTION:
//*     Closes the log file which accepts the debug output
//*     
//* PARAMETERS:
//*     
//* RETURN VALUE:
//*         
//* Comments:
//*         this function should be used together with OpenLogFile()
//*****************************************************************************
void CDebug::CloseLogFile()
{
    if (m_shLogFile!=INVALID_HANDLE_VALUE)  
    {
        ::CloseHandle(m_shLogFile);
        m_shLogFile = INVALID_HANDLE_VALUE;
    }
}

//*****************************************************************************
//* Name:   SetLogFile
//* Author: Mooly Beery (MoolyB), May, 2000
//*****************************************************************************
//* DESCRIPTION:
//*     redirects the debug output to the file whose handle is given
//*     
//* PARAMETERS:
//*     [IN] HANDLE hFile:
//*         the handle of the file which will accept the debug output
//*         
//* RETURN VALUE:
//*         the previous handle
//*         
//* Comments:
//*         this function should be used only in cases the OpenLogFile is
//*         insufficient and a different file location/type is required
//*         otherwise, don't manipulate the handle yourself, just use the
//*         pair OpenLogFile / CloseLogFile
//*****************************************************************************
HANDLE CDebug::SetLogFile(HANDLE hFile)
{ 
    HANDLE OldHandle = m_shLogFile; 
    m_shLogFile = hFile; 
    return OldHandle; 
}

void CDebug::DbgPrint ( 
    DbgMsgType type,
    LPCTSTR    lpctstrFileName,
    DWORD      dwLine,
    LPCTSTR    lpctstrFormat,
    ...
)
/*++

Routine name : CDebug::DbgPrint

Routine description:

    Print to debug (with file and line number)

Author:

    Eran Yariv (EranY), Jul, 1999

Arguments:

    type            [in] - Type of message
    lpctstrFileName [in] - Location of caller
    dwLine          [in] - Line of caller
    lpctstrFormat   [in] - printf format string
    ...             [in] - optional parameters

Return Value:

    None.

--*/
{
    va_list arg_ptr;
    va_start(arg_ptr, lpctstrFormat);
    Print (type, lpctstrFileName, dwLine, lpctstrFormat, arg_ptr);
    va_end (arg_ptr);
}


void CDebug::Trace (
    DbgMsgType type,
    LPCTSTR    lpctstrFormat,
    ...
)
/*++

Routine name : CDebug::DbgPrint

Routine description:

    Trace to debug

Author:

    Eran Yariv (EranY), Jul, 1999

Arguments:

    type            [in] - Type of message
    lpctstrFormat   [in] - printf format string
    ...             [in] - optional parameters

Return Value:

    None.

--*/
{
    va_list arg_ptr;
    va_start(arg_ptr, lpctstrFormat);
    Print (type, NULL, 0, lpctstrFormat, arg_ptr);
    va_end (arg_ptr);
}

void CDebug::Print (
    DbgMsgType  type,
    LPCTSTR     lpctstrFileName,
    DWORD       dwLine,
    LPCTSTR     lpctstrFormat,
    va_list     arg_ptr
)
/*++

Routine name : CDebug::Print

Routine description:

    Print to debug

Author:

    Eran Yariv (EranY), Jul, 1999
    Mooly Beery (MoolyB), Jun, 2000

Arguments:

    type            [in] - Type of message
    lpctstrFileName [in] - Location of caller
    dwLine          [in] - Line of caller
    lpctstrFormat   [in] - printf format string
    arg_ptr         [in] - optional parameters list

Return Value:

    None.

--*/
{
    if (!(type & m_sDbgMask))
    {
        //
        // This type of debug message is masked out
        //
        return;
    }

    TCHAR szMsg [2000]={0};
    TCHAR szBuf [1000]={0};
    TCHAR szTimeBuff[10]={0};
    TCHAR szDateBuff[10]={0};

    DWORD dwLastError = GetLastError();

    DWORD dwInd = 0;
    // Time stamps
    if (m_sFmtMask & DBG_PRNT_TIME_STAMP)
    {
        dwInd += _stprintf(&szMsg[dwInd], 
                          TEXT("[%-8s %-8s] "), 
                          _tstrdate(szDateBuff),
                          _tstrtime(szTimeBuff));
    }
    // Thread ID
    if (m_sFmtMask & DBG_PRNT_THREAD_ID)
    {
        dwInd += _stprintf(&szMsg[dwInd], 
                          TEXT("[0x%04x] "),
                          GetCurrentThreadId());
    }
    // Message type
    if (m_sFmtMask & DBG_PRNT_MSG_TYPE)
    {
        dwInd += _stprintf(&szMsg[dwInd], 
                          TEXT("[%s] "),
                          GetMsgTypeString(type));
    }

    // Now comes the actual message
    _vsntprintf(szBuf, ARR_SIZE(szBuf)-1, lpctstrFormat, arg_ptr);
    
    int i;
    i = _sntprintf( &szMsg[dwInd],
                    ARR_SIZE(szMsg) - dwInd - 1,
                    TEXT("%*c%s "),
                    m_sdwIndent * _DEBUG_INDENT_SIZE, 
                    TEXT(' '),
                    szBuf);
    if (i > 0)
    {                    
        dwInd += i;
    }
    else
    {
        //
        // No more room
        //
        szMsg[ARR_SIZE(szMsg)-1]=TEXT('\0');
        goto OutputString;
    }

    // filename & line number
    if (m_sFmtMask & DBG_PRNT_FILE_LINE)
    {
        if (lpctstrFileName && dwLine)
        {
            //
            //  Protect from overrun.
            //
            i = _sntprintf( &szMsg[dwInd],
                            ARR_SIZE(szMsg)-dwInd-2,        // 2 for '\n' and '\0'
                            TEXT("(%s %ld)"),
                            lpctstrFileName,
                            dwLine);
            if (i > 0)
            {                            
                dwInd += i;
            }
            else
            {
                //
                // No more room
                //
                szMsg[ARR_SIZE(szMsg)-1]=TEXT('\0');
                goto OutputString;
            }
        }
    }

    _sntprintf( &szMsg[dwInd], ARR_SIZE(szMsg)-dwInd-1, TEXT("\n"));
    szMsg[ARR_SIZE(szMsg)-1]=TEXT('\0');

OutputString:
    // standard output?
    if (m_sFmtMask & DBG_PRNT_TO_STD)
    {
        OutputDebugString(szMsg);
    }

    // file output?
    if (m_sFmtMask & DBG_PRNT_TO_FILE)
    {
        if (m_shLogFile!=INVALID_HANDLE_VALUE)
        {
            OutputFileString(szMsg);
        }
    }
    SetLastError (dwLastError);
}   // CDebug::Print
   
void  
CDebug::Unindent()                 
/*++

Routine name : CDebug::Unindent

Routine description:

    Move indention one step backwards

Author:

    Eran Yariv (EranY), Jul, 1999

Arguments:


Return Value:

    None.

--*/
{ 
    if (InterlockedDecrement(&m_sdwIndent)<0)
    {
        DbgPrint (ASSERTION_FAILED, 
                  TEXT(__FILE__), 
                  __LINE__, 
                  TEXT("Internat error - bad indent"));
        DebugBreak();
    }
}   // CDebug::Unindent

void CDebug::SetDebugMask(DWORD dwMask)
{ 
    m_sbMaskReadFromReg = TRUE;
    m_sDbgMask = dwMask; 
}

void CDebug::SetFormatMask(DWORD dwMask)
{ 
    m_sbMaskReadFromReg = TRUE;
    m_sFmtMask = dwMask; 
}

DWORD CDebug::ModifyDebugMask(DWORD dwAdd,DWORD dwRemove)
{
    if (!m_sbMaskReadFromReg)
    {
        // first let's read the requested debug mask & format
        ReadMaskFromReg();
    }
    m_sDbgMask |= dwAdd;
    m_sDbgMask &= ~dwRemove;

    return m_sDbgMask;
}

DWORD CDebug::ModifyFormatMask(DWORD dwAdd,DWORD dwRemove)
{
    if (!m_sbMaskReadFromReg)
    {
        // first let's read the requested debug mask & format
        ReadMaskFromReg();
    }
    m_sFmtMask |= dwAdd;
    m_sFmtMask &= ~dwRemove;

    return m_sFmtMask;
}

void CDebug::SetDebugFlush(BOOL fFlush)
{
    m_sbFlush = fFlush;
}

BOOL CDebug::DebugFromRegistry()
{ 
    if (!m_sbMaskReadFromReg)
    {
        // first let's read the requested debug mask & format
        ReadMaskFromReg();
    }
    return m_sbRegistryExist; 
}

BOOL CDebug::ReadMaskFromReg()
{
    BOOL  bRes = FALSE;
    HKEY  hkey = NULL;
    DWORD dwRegValue;
    DWORD dwRegType;
    DWORD dwRes;
    DWORD dwRegSize = sizeof (dwRegValue);
    if (m_sbMaskReadFromReg)
    {
        //
        // Debug & Format mask already read.
        //
        goto end;
    }
    m_sbMaskReadFromReg = TRUE;
    m_sDbgMask = DEFAULT_DEBUG_MASK;
    m_sFmtMask = DEFAULT_FORMAT_MASK;

    dwRes = RegOpenKeyEx (HKEY_LOCAL_MACHINE, REGKEY_FAX_CLIENT, 0, KEY_READ, &hkey);
    if (ERROR_SUCCESS != dwRes)
    {
        goto end;
    }
    dwRes = RegQueryValueEx (hkey,
                             REGVAL_DBGLEVEL_EX,
                             NULL,
                             &dwRegType,
                             (LPBYTE)&dwRegValue,
                             &dwRegSize);
    if (ERROR_SUCCESS != dwRes)
    {
        goto end;
    }
    if (REG_DWORD != dwRegType)
    {
        //
        // Expecting only a DWORD value
        //
        goto end;
    }
    
    m_sDbgMask = dwRegValue;
    
    dwRes = RegQueryValueEx (hkey,
                             REGVAL_DBGFORMAT_EX,
                             NULL,
                             &dwRegType,
                             (LPBYTE)&dwRegValue,
                             &dwRegSize);
    if (ERROR_SUCCESS != dwRes)
    {
        goto end;
    }
    if (REG_DWORD != dwRegType)
    {
        //
        // Expecting only a DWORD value
        //
        goto end;
    }

    m_sFmtMask = dwRegValue;

    bRes = TRUE;
    m_sbRegistryExist = TRUE;

end:
    if (hkey)
    {
        RegCloseKey (hkey);
    }
    return bRes;
}   // CDebug::ReadMaskFromReg

BOOL CDebug::OutputFileString(LPCTSTR szMsg)
{
    BOOL bRes = FALSE;
    //
    // Attempt to add the line to a log file
    //
#ifdef UNICODE
    char sFileMsg[2000];

    int Count = WideCharToMultiByte(
        CP_ACP,
        0,
        szMsg,
        -1,
        sFileMsg,
        sizeof(sFileMsg)/sizeof(sFileMsg[0]),
        NULL,
        NULL
        );

    if (Count==0)
    {
        return bRes;
    }
#else
    const char* sFileMsg = szMsg;
#endif
    DWORD dwFilePointer = ::SetFilePointer(m_shLogFile,0,NULL,FILE_END);
    if (dwFilePointer==INVALID_SET_FILE_POINTER)
    {
        return bRes;
    }

    DWORD dwNumBytesWritten = 0;
    DWORD dwNumOfBytesToWrite = strlen(sFileMsg);
    if (!::WriteFile(m_shLogFile,sFileMsg,dwNumOfBytesToWrite,&dwNumBytesWritten,NULL))
    {
        return bRes;
    }

    if (dwNumBytesWritten!=dwNumOfBytesToWrite)
    {
        return bRes;
    }

    if (m_sbFlush)
    {
        if (!::FlushFileBuffers(m_shLogFile))
        {
            return bRes;
        }
    }

    bRes = TRUE;
    return bRes;
}


LPCTSTR CDebug::GetMsgTypeString(DWORD dwMask)
{
    switch (dwMask)
    {
    case ASSERTION_FAILED:  return _T("ERR");
    case DBG_MSG:          
    case FUNC_TRACE:        return _T("   ");
    case DBG_WARNING:       return _T("WRN");
    case MEM_ERR:
    case COM_ERR:
    case RESOURCE_ERR:
    case STARTUP_ERR:
    case GENERAL_ERR:
    case EXCEPTION_ERR:
    case RPC_ERR:
    case WINDOW_ERR:
    case FILE_ERR:
    case SECURITY_ERR:
    case REGISTRY_ERR:
    case PRINT_ERR:
    case SETUP_ERR:
    case NET_ERR:           return _T("ERR");
    default:                return _T("???");
    }
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\wiaseld.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       WIASELD.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        2/27/1999
 *
 *  DESCRIPTION: Device selection dialog
 *
 *******************************************************************************/
#ifndef __WIASELD_H_INCLUDED
#define __WIASELD_H_INCLUDED

#if defined(__cplusplus)
extern "C" {
#endif

#include "wia.h"

typedef struct _SELECTDEVICEDLG
{
    DWORD        cbSize;
    HWND         hwndParent;
    LPWSTR       pwszInitialDeviceId;
    IWiaItem   **ppWiaItemRoot;
    LONG         nFlags;
    LONG         nDeviceType;
    BSTR         *pbstrDeviceID;
} SELECTDEVICEDLG, *LPSELECTDEVICEDLG, *PSELECTDEVICEDLG;

HRESULT WINAPI SelectDeviceDlg( PSELECTDEVICEDLG pSelectDeviceDlg );

typedef HRESULT (WINAPI *SELECTDEVICEDLGFUNCTION)( PSELECTDEVICEDLG );

#if defined(__cplusplus)
};
#endif

#endif // __WIASELD_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\fusutils.h ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       fusutils.h
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        14-Feb-2001
 *
 *  DESCRIPTION: Fusion utilities
 *
 *****************************************************************************/

#ifndef _FUSUTILS_H
#define _FUSUTILS_H

// open C code brace
#ifdef __cplusplus
extern "C" {
#endif

//
// CreateActivationContextFromExecutableEx:
//
// check the passed in executable name for a manifest (if any)
// and creates an activation context from it.
//
HRESULT CreateActivationContextFromExecutableEx(
    LPCTSTR lpszExecutableName, 
    UINT uResourceID, 
    BOOL bMakeProcessDefault, 
    HANDLE *phActCtx);

//
// CreateActivationContextFromExecutable:
//
// check the passed in executable name for a manifest (if any)
// and creates an activation context from it using the defaults
// (i.e. bMakeProcessDefault=FALSE & uResourceID=123)
//
HRESULT CreateActivationContextFromExecutable(
    LPCTSTR lpszExecutableName, 
    HANDLE *phActCtx);

// close C code brace
#ifdef __cplusplus
}
#endif

#endif // endif _FUSUTILS_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\coredefs.h ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       coredefs.h
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        14-Feb-2001
 *
 *  DESCRIPTION: core definitions
 *
 *****************************************************************************/

#ifndef _COREDEFS_H_
#define _COREDEFS_H_

////////////////////////////////////////////////////
//  win64 conversion macros
//
#define INT2PTR(i, ptrType)     (reinterpret_cast<ptrType>(static_cast<INT_PTR>(i)))
#define PTR2INT(ptr)            (static_cast<INT>(reinterpret_cast<INT_PTR>(ptr)))
#define UINT2PTR(u, ptrType)    (reinterpret_cast<ptrType>(static_cast<UINT_PTR>(u)))
#define PTR2UINT(ptr)           (static_cast<UINT>(reinterpret_cast<UINT_PTR>(ptr)))
#define LONG2PTR(l, ptrType)    (reinterpret_cast<ptrType>(static_cast<LONG_PTR>(l)))
#define PTR2LONG(ptr)           (static_cast<LONG>(reinterpret_cast<LONG_PTR>(ptr)))
#define DWORD2PTR(dw, ptrType)  (reinterpret_cast<ptrType>(static_cast<DWORD_PTR>(dw)))
#define PTR2DWORD(ptr)          (static_cast<DWORD>(reinterpret_cast<DWORD_PTR>(ptr)))

////////////////////////////////////////////////////
// check to define some useful debugging macros
//

#define BREAK_ON_FALSE(expr)                \
    do                                      \
    {                                       \
        if (!(expr))                        \
        {                                   \
            if (IsDebuggerPresent())        \
            {                               \
                DebugBreak();               \
            }                               \
            else                            \
            {                               \
                RaiseException(EXCEPTION_ACCESS_VIOLATION, 0, 0, NULL); \
            }                               \
        }                                   \
    }                                       \
    while (false);                          \

#if DBG

// ***************** ASSERT *****************
#ifndef ASSERT
    #if defined(SPLASSERT) 
        // use SPLASSERT
        #define ASSERT(expr) SPLASSERT(expr) 
    #else
        #if defined(WIA_ASSERT)
            // use WIA_ASSERT
            #define ASSERT(expr) WIA_ASSERT(expr) 
        #else
            // ASSERT is not defined -- define a simple version
            #define ASSERT(expr) BREAK_ON_FALSE(expr)
        #endif // WIA_ASSERT
    #endif // SPLASSERT
#endif // ASSERT

// ***************** CHECK *****************
#ifndef CHECK
    #if defined(DBGMSG) && defined(DBG_INFO) 
        // use the printui trace macros
        #define CHECK(expr) \
            do \
            { \
                if(!(expr)) \
                { \
                    DBGMSG(DBG_INFO, ("Failed: "TSTR", File: "TSTR", Line: %d\n", #expr, __FILE__, __LINE__)); \
                } \
            } \
            while(FALSE) 
    #else 
        // nothing special
        #define CHECK(expr)  (expr) 
    #endif // DBGMSG && DBG_INFO
#endif // CHECK

// ***************** VERIFY *****************
#ifndef VERIFY
    #if defined(ASSERT) 
        #define VERIFY(expr) ASSERT(expr)
    #else
        #define VERIFY(expr) (expr)
    #endif // ASSERT
#endif // VERIFY

// ***************** RIP *****************
#ifndef RIP
    #if defined(ASSERT) 
        #define RIP(expr) ASSERT(expr)
    #else
        #define RIP(expr) BREAK_ON_FALSE(expr)
    #endif // ASSERT
#endif // RIP

#else // DBG

#undef ASSERT
#undef VERIFY
#undef CHECK
#undef RIP

#define ASSERT(expr)
#define VERIFY(expr)    (expr)
#define CHECK(expr)     (expr)
#define RIP(expr)       BREAK_ON_FALSE(expr)

#endif // DBG

////////////////////////////////////////////////
// some other helpful macros
//

#ifndef COUNTOF
#define COUNTOF(x) (sizeof(x)/sizeof(x[0]))
#endif // COUNTOF

#ifndef ARRAYSIZE
#define ARRAYSIZE(x) (sizeof(x)/sizeof(x[0]))
#endif // ARRAYSIZE

#endif // endif _COREDEFS_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\comutils.h ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       comutils.h
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        23-Dec-2000
 *
 *  DESCRIPTION: COM templates & utilities
 *
 *****************************************************************************/

#ifndef _COMUTILS_H
#define _COMUTILS_H

// the generic smart pointers & handles
#include "gensph.h"

////////////////////////////////////////////////
// template class CUnknownMT<pQITable>
//
// milti-thread impl. of IUnknown
// with interlocking for the ref-counting.
//
template <const QITAB* pQITable>
class CUnknownMT
{
public:
    CUnknownMT(): m_cRefs(1) {}
    virtual ~CUnknownMT()   {}

    //////////////////
    // IUnknown
    //
    STDMETHODIMP Handle_QueryInterface(REFIID riid, void **ppv)
    {
        return QISearch(this, pQITable, riid, ppv);
    }
    STDMETHODIMP_(ULONG) Handle_AddRef()
    {
        return InterlockedIncrement(&m_cRefs);
    }
    STDMETHODIMP_(ULONG) Handle_Release()
    {
        ULONG cRefs = InterlockedDecrement(&m_cRefs);
        if( 0 == cRefs )
        {
            delete this;
        }
        return cRefs;
    }
private:
    LONG m_cRefs;
};

////////////////////////////////////////////////
// template class CUnknownST<pQITable>
//
// single-thread impl. of IUnknown
// no interlocking for the ref-counting.
//
template <const QITAB* pQITable>
class CUnknownST
{
public:
    CUnknownST(): m_cRefs(1) {}
    virtual ~CUnknownST()   {}

    //////////////////
    // IUnknown
    //
    STDMETHODIMP Handle_QueryInterface(REFIID riid, void **ppv)
    {
        return QISearch(this, pQITable, riid, ppv);
    }
    STDMETHODIMP_(ULONG) Handle_AddRef()
    {
        return m_cRefs++;
    }
    STDMETHODIMP_(ULONG) Handle_Release()
    {
        if( 0 == --m_cRefs )
        {
            delete this;
            return 0;
        }
        return m_cRefs;
    }
private:
    LONG m_cRefs;
};

#define QITABLE_DECLARE(className)  \
    class className##_QITable       \
    {                               \
    public:                         \
        static const QITAB qit[];   \
    };                              \


#define QITABLE_GET(className)      \
    className##_QITable::qit        \

#define QITABLE_BEGIN(className)                    \
    const QITAB className##_QITable::qit[] =        \
    {                                               \

#define QITABLE_END()                               \
        { 0 },                                      \
    };                                              \

#define IMPLEMENT_IUNKNOWN()                                \
    STDMETHODIMP QueryInterface(REFIID riid, void **ppv)    \
    { return Handle_QueryInterface(riid, ppv); }            \
    STDMETHODIMP_(ULONG) AddRef()                           \
    { return Handle_AddRef(); }                             \
    STDMETHODIMP_(ULONG) Release()                          \
    { return Handle_Release(); }                            \

#if FALSE
////////////////////////////////////////////////
// template class CEnumFormatEtc
//
// implementation for an IDataObject which
// supports SetData to different formats.
// - not implemented yet.
//
class CEnumFormatEtc: public IEnumFORMATETC
{
public:
    CEnumFormatEtc(IUnknown *pUnkOuter, const FORMATETC *pfetc, UINT uSize);
    ~CEnumFormatEtc();

    //////////////////
    // IUnknown 
    //
    STDMETHODIMP QueryInterface(REFIID riid, void **ppv);
    STDMETHODIMP_(ULONG) AddRef();
    STDMETHODIMP_(ULONG) Release();

    //////////////////
    // IEnumFORMATETC 
    //
    /* [local] */ 
    virtual HRESULT STDMETHODCALLTYPE Next( 
        /* [in] */ ULONG celt,
        /* [length_is][size_is][out] */ FORMATETC *rgelt,
        /* [out] */ ULONG *pceltFetched) = 0;
    
    virtual HRESULT STDMETHODCALLTYPE Skip( 
        /* [in] */ ULONG celt) = 0;
    
    virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
    
    virtual HRESULT STDMETHODCALLTYPE Clone( 
        /* [out] */ IEnumFORMATETC **ppenum) = 0;

private:
    ULONG           m_cRefs;
    IUnknown       *m_pUnkOuter;
    LPFORMATETC     m_prgfe;
    ULONG           m_iCur;
    ULONG           m_cItems;
};
#endif // #if FALSE

////////////////////////////////////////////////
// template class CDataObj<MAX_FORMATS>
//
// implementation for an IDataObject which
// supports SetData to different formats.
//
template <int MAX_FORMATS = 32>
class CDataObj: public IDataObject
{
public:
    // construction/destruction
    CDataObj();
    ~CDataObj();

    //////////////////
    // IUnknown
    //
    STDMETHODIMP QueryInterface(REFIID riid, void **ppv);
    STDMETHODIMP_(ULONG) AddRef();
    STDMETHODIMP_(ULONG) Release();

    //////////////////
    // IDataObject
    //
    /* [local] */ 
    virtual HRESULT STDMETHODCALLTYPE GetData(
        /* [unique][in] */ FORMATETC *pformatetcIn,
        /* [out] */ STGMEDIUM *pmedium);

    /* [local] */ 
    virtual HRESULT STDMETHODCALLTYPE GetDataHere(
        /* [unique][in] */ FORMATETC *pformatetc,
        /* [out][in] */ STGMEDIUM *pmedium);

    virtual HRESULT STDMETHODCALLTYPE QueryGetData(
        /* [unique][in] */ FORMATETC *pformatetc);

    virtual HRESULT STDMETHODCALLTYPE GetCanonicalFormatEtc(
        /* [unique][in] */ FORMATETC *pformatectIn,
        /* [out] */ FORMATETC *pformatetcOut);

    /* [local] */ 
    virtual HRESULT STDMETHODCALLTYPE SetData(
        /* [unique][in] */ FORMATETC *pformatetc,
        /* [unique][in] */ STGMEDIUM *pmedium,
        /* [in] */ BOOL fRelease);

    virtual HRESULT STDMETHODCALLTYPE EnumFormatEtc(
        /* [in] */ DWORD dwDirection,
        /* [out] */ IEnumFORMATETC **ppenumFormatEtc);

    virtual HRESULT STDMETHODCALLTYPE DAdvise(
        /* [in] */ FORMATETC *pformatetc,
        /* [in] */ DWORD advf,
        /* [unique][in] */ IAdviseSink *pAdvSink,
        /* [out] */ DWORD *pdwConnection);

    virtual HRESULT STDMETHODCALLTYPE DUnadvise(
        /* [in] */ DWORD dwConnection);

    virtual HRESULT STDMETHODCALLTYPE EnumDAdvise(
        /* [out] */ IEnumSTATDATA **ppenumAdvise);

private:
    LONG m_cRefs;
    FORMATETC m_fmte[MAX_FORMATS];
    STGMEDIUM m_medium[MAX_FORMATS];
};


////////////////////////////////////////////////
// template class CSimpleDataObjImpl<T>
//
// simple implementation for an IDataObject
// and IDropSource which lives in memory.
//
template <class T>
class CSimpleDataObjImpl: public IDataObject,
                          public IDropSource
{
public:
    // construction/destruction
    CSimpleDataObjImpl(const T &data, CLIPFORMAT cfDataType, IDataObject *pDataObj = NULL);
    ~CSimpleDataObjImpl();

    //////////////////
    // IUnknown
    //
    STDMETHODIMP QueryInterface(REFIID riid, void **ppv);
    STDMETHODIMP_(ULONG) AddRef();
    STDMETHODIMP_(ULONG) Release();

    //////////////////
    // IDataObject
    //
    /* [local] */ 
    virtual HRESULT STDMETHODCALLTYPE GetData(
        /* [unique][in] */ FORMATETC *pformatetcIn,
        /* [out] */ STGMEDIUM *pmedium);

    /* [local] */ 
    virtual HRESULT STDMETHODCALLTYPE GetDataHere(
        /* [unique][in] */ FORMATETC *pformatetc,
        /* [out][in] */ STGMEDIUM *pmedium);

    virtual HRESULT STDMETHODCALLTYPE QueryGetData(
        /* [unique][in] */ FORMATETC *pformatetc);

    virtual HRESULT STDMETHODCALLTYPE GetCanonicalFormatEtc(
        /* [unique][in] */ FORMATETC *pformatectIn,
        /* [out] */ FORMATETC *pformatetcOut);

    /* [local] */ 
    virtual HRESULT STDMETHODCALLTYPE SetData(
        /* [unique][in] */ FORMATETC *pformatetc,
        /* [unique][in] */ STGMEDIUM *pmedium,
        /* [in] */ BOOL fRelease);

    virtual HRESULT STDMETHODCALLTYPE EnumFormatEtc(
        /* [in] */ DWORD dwDirection,
        /* [out] */ IEnumFORMATETC **ppenumFormatEtc);

    virtual HRESULT STDMETHODCALLTYPE DAdvise(
        /* [in] */ FORMATETC *pformatetc,
        /* [in] */ DWORD advf,
        /* [unique][in] */ IAdviseSink *pAdvSink,
        /* [out] */ DWORD *pdwConnection);

    virtual HRESULT STDMETHODCALLTYPE DUnadvise(
        /* [in] */ DWORD dwConnection);

    virtual HRESULT STDMETHODCALLTYPE EnumDAdvise(
        /* [out] */ IEnumSTATDATA **ppenumAdvise);

    //////////////////
    // IDropSource
    //
    virtual HRESULT STDMETHODCALLTYPE QueryContinueDrag(
        /* [in] */ BOOL fEscapePressed,
        /* [in] */ DWORD grfKeyState);

    virtual HRESULT STDMETHODCALLTYPE GiveFeedback(
        /* [in] */ DWORD dwEffect);

private:
    LONG        m_cRefs;
    T           m_data;
    CLIPFORMAT  m_cfDataType;
    CRefPtrCOM<IDataObject> m_spDataObj;
};

// this namespace is a placeholder to put COM related helpers here
namespace comhelpers
{

BOOL AreObjectsIdentical(IUnknown *punk1, IUnknown *punk2);

}

// include the implementation of the template classes here
#include "comutils.inl"

#endif // endif _COMUTILS_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\comutils.inl ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       comutils.inl
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        23-Dec-2000
 *
 *  DESCRIPTION: COM templates & utilities (Impl.)
 *
 *****************************************************************************/

////////////////////////////////////////////////
// template class CDataObj<MAX_FORMATS>
//
// implementation for an IDataObject which
// supports SetData to different formats.
//

// construction/destruction
template <int MAX_FORMATS>
CDataObj<MAX_FORMATS>::CDataObj<MAX_FORMATS>()
    : m_cRefs(1)
{
    memset(m_fmte, 0, sizeof(m_fmte));
    memset(m_medium, 0, sizeof(m_medium));
}

template <int MAX_FORMATS>
CDataObj<MAX_FORMATS>::~CDataObj<MAX_FORMATS>()
{
    // release the data we keep
    for( int i = 0; i < MAX_FORMATS; i++ )
    {
        if( m_medium[i].hGlobal )
        {
            ReleaseStgMedium(&m_medium[i]);
        }
    }
}

///////////////////////////////
// IUnknown impl. - standard
//
template <int MAX_FORMATS>
STDMETHODIMP CDataObj<MAX_FORMATS>::QueryInterface(REFIID riid, void **ppv)
{
    // standard implementation
    if( !ppv )
    {
        return E_INVALIDARG;
    }

    *ppv = NULL;

    if( IsEqualIID(riid, IID_IUnknown) || IsEqualIID(riid, IID_IDataObject) )
    {
        *ppv = static_cast<IDataObject*>(this);
    } 
    else 
    {
        return E_NOINTERFACE;
    }

    reinterpret_cast<IUnknown*>(*ppv)->AddRef();
    return S_OK;
}

template <int MAX_FORMATS>
STDMETHODIMP_(ULONG) CDataObj<MAX_FORMATS>::AddRef()
{
    // standard implementation
    return InterlockedIncrement(&m_cRefs);
}

template <int MAX_FORMATS>
STDMETHODIMP_(ULONG) CDataObj<MAX_FORMATS>::Release()
{
    // standard implementation
    ULONG cRefs = InterlockedDecrement(&m_cRefs);
    if( 0 == cRefs )
    {
        delete this;
    }
    return cRefs;
}

//////////////////
// IDataObject
//
template <int MAX_FORMATS>
/* [local] */ 
HRESULT STDMETHODCALLTYPE CDataObj<MAX_FORMATS>::GetData(
    /* [unique][in] */ FORMATETC *pformatetcIn,
    /* [out] */ STGMEDIUM *pmedium)
{
    HRESULT hr = E_INVALIDARG;

    pmedium->hGlobal = NULL;
    pmedium->pUnkForRelease = NULL;

    for( int i = 0; i < MAX_FORMATS; i++ )
    {
        if( (m_fmte[i].cfFormat == pformatetcIn->cfFormat) &&
            (m_fmte[i].tymed & pformatetcIn->tymed) &&
            (m_fmte[i].dwAspect == pformatetcIn->dwAspect) )
        {
            *pmedium = m_medium[i];

            if( pmedium->hGlobal )
            {
                // indicate that the caller should not release hmem.
                if( pmedium->tymed == TYMED_HGLOBAL )
                {
                    pmedium->pUnkForRelease = static_cast<IDataObject*>(this);
                    AddRef();
                    return S_OK;
                }

                // if the type is stream  then clone the stream.
                if( pmedium->tymed == TYMED_ISTREAM )
                {
                    hr = CreateStreamOnHGlobal(NULL, TRUE, &pmedium->pstm);

                    if( SUCCEEDED(hr) )
                    {
                        STATSTG stat;

                         // Get the Current Stream size
                         hr = m_medium[i].pstm->Stat(&stat, STATFLAG_NONAME);

                         if( SUCCEEDED(hr) )
                         {
                            const LARGE_INTEGER g_li0 = {0};

                            // Seek the source stream to  the beginning.
                            m_medium[i].pstm->Seek(g_li0, STREAM_SEEK_SET, NULL);

                            // Copy the entire source into the destination. Since the destination stream is created using 
                            // CreateStreamOnHGlobal, it seek pointer is at the beginning.
                            hr = m_medium[i].pstm->CopyTo(pmedium->pstm, stat.cbSize, NULL,NULL );
                        
                            // Before returning Set the destination seek pointer back at the beginning.
                            pmedium->pstm->Seek(g_li0, STREAM_SEEK_SET, NULL);

                            // If this medium has a punk for release, make sure to add ref that...
                            pmedium->pUnkForRelease = m_medium[i].pUnkForRelease;

                            if( pmedium->pUnkForRelease )
                            {
                                pmedium->pUnkForRelease->AddRef();
                            }

                         }
                         else
                         {
                             hr = E_OUTOFMEMORY;
                         }
                    }
                }
            }
        }
    }

    return hr;
}

template <int MAX_FORMATS>
/* [local] */ 
HRESULT STDMETHODCALLTYPE CDataObj<MAX_FORMATS>::GetDataHere(
    /* [unique][in] */ FORMATETC *pformatetc,
    /* [out][in] */ STGMEDIUM *pmedium)
{
    // we don't implement this. 
    return E_NOTIMPL;
}

template <int MAX_FORMATS>
HRESULT STDMETHODCALLTYPE CDataObj<MAX_FORMATS>::QueryGetData(
    /* [unique][in] */ FORMATETC *pformatetc)
{
    HRESULT hr = E_UNEXPECTED;

    for( int i = 0; i < MAX_FORMATS; i++ )
    {
        if( (m_fmte[i].cfFormat == pformatetc->cfFormat) &&
            (m_fmte[i].tymed & pformatetc->tymed) &&
            (m_fmte[i].dwAspect == pformatetc->dwAspect) )
        {
            hr = S_OK;
        }
    }

    return hr;
}

template <int MAX_FORMATS>
HRESULT STDMETHODCALLTYPE CDataObj<MAX_FORMATS>::GetCanonicalFormatEtc(
    /* [unique][in] */ FORMATETC *pformatectIn,
    /* [out] */ FORMATETC *pformatetcOut)
{
    // always return the data in the same format
    return DATA_S_SAMEFORMATETC;
}

template <int MAX_FORMATS>
/* [local] */ 
HRESULT STDMETHODCALLTYPE CDataObj<MAX_FORMATS>::SetData(
    /* [unique][in] */ FORMATETC *pformatetc,
    /* [unique][in] */ STGMEDIUM *pmedium,
    /* [in] */ BOOL fRelease)
{
    HRESULT hr = E_INVALIDARG;
    ASSERT(pformatetc->tymed == pmedium->tymed);

    if( fRelease )
    {
        int i;

        // first add it if that format is already present
        // on a NULL medium (render on demand)
        for( i = 0; i < MAX_FORMATS; i++ )
        {
            if( (m_fmte[i].cfFormat == pformatetc->cfFormat) &&
                (m_fmte[i].tymed    == pformatetc->tymed) &&
                (m_fmte[i].dwAspect == pformatetc->dwAspect) )
            {
                // we are simply adding a format, ignore.
                if( pmedium->hGlobal == NULL )
                {
                    return S_OK;
                }

                // if we are set twice on the same object
                if( m_medium[i].hGlobal )
                {
                    ReleaseStgMedium(&m_medium[i]);
                }

                m_medium[i] = *pmedium;
                return S_OK;
            }
        }

        //  this is a new clipboard format. look for a free slot.
        for( i = 0; i < MAX_FORMATS; i++ )
        {
            if( m_fmte[i].cfFormat == 0 )
            {
                // found a free slot
                m_medium[i] = *pmedium;
                m_fmte[i] = *pformatetc;
                return S_OK;
            }
        }

        // overflow of our fixed size table
        hr = E_OUTOFMEMORY;
    }

    return hr;
}

template <int MAX_FORMATS>
HRESULT STDMETHODCALLTYPE CDataObj<MAX_FORMATS>::EnumFormatEtc(
    /* [in] */ DWORD dwDirection,
    /* [out] */ IEnumFORMATETC **ppenumFormatEtc)
{
    // we don't implement this. 
    return E_NOTIMPL;
}

template <int MAX_FORMATS>
HRESULT STDMETHODCALLTYPE CDataObj<MAX_FORMATS>::DAdvise(
    /* [in] */ FORMATETC *pformatetc,
    /* [in] */ DWORD advf,
    /* [unique][in] */ IAdviseSink *pAdvSink,
    /* [out] */ DWORD *pdwConnection)
{
    // we don't implement this. 
    return OLE_E_ADVISENOTSUPPORTED;
}

template <int MAX_FORMATS>
HRESULT STDMETHODCALLTYPE CDataObj<MAX_FORMATS>::DUnadvise(
    /* [in] */ DWORD dwConnection)
{
    // we don't implement this. 
    return OLE_E_ADVISENOTSUPPORTED;
}

template <int MAX_FORMATS>
HRESULT STDMETHODCALLTYPE CDataObj<MAX_FORMATS>::EnumDAdvise(
    /* [out] */ IEnumSTATDATA **ppenumAdvise)
{
    // we don't implement this. 
    return OLE_E_ADVISENOTSUPPORTED;
}

////////////////////////////////////////////////
// template class CSimpleDataObjImpl<T>
//
// simple implementation for an IDataObject
// and IDropSource which lives in memory.
//

// construction/destruction
template <class T>
CSimpleDataObjImpl<T>::CSimpleDataObjImpl<T>(const T &data, CLIPFORMAT cfDataType, IDataObject *pDataObj)
    : m_cRefs(1), 
      m_cfDataType(cfDataType)
{
    m_data = data;
    m_spDataObj.CopyFrom(pDataObj);
}

template <class T>
CSimpleDataObjImpl<T>::~CSimpleDataObjImpl<T>()
{
    // nothing special
}

///////////////////////////////
// IUnknown impl. - standard
//
template <class T>
STDMETHODIMP CSimpleDataObjImpl<T>::QueryInterface(REFIID riid, void **ppv)
{
    // standard implementation
    if( !ppv )
    {
        return E_INVALIDARG;
    }

    *ppv = NULL;

    if( IsEqualIID(riid, IID_IUnknown) || IsEqualIID(riid, IID_IDataObject) )
    {
        *ppv = static_cast<IDataObject*>(this);
    } 
    else if( IsEqualIID(riid, IID_IDropSource) )
    {
        *ppv = static_cast<IDropSource*>(this);
    }
    else 
    {
        return E_NOINTERFACE;
    }

    reinterpret_cast<IUnknown*>(*ppv)->AddRef();
    return S_OK;
}

template <class T>
STDMETHODIMP_(ULONG) CSimpleDataObjImpl<T>::AddRef()
{
    // standard implementation
    return InterlockedIncrement(&m_cRefs);
}

template <class T>
STDMETHODIMP_(ULONG) CSimpleDataObjImpl<T>::Release()
{
    // standard implementation
    ULONG cRefs = InterlockedDecrement(&m_cRefs);
    if( 0 == cRefs )
    {
        delete this;
    }
    return cRefs;
}

//////////////////
// IDataObject
//
template <class T>
/* [local] */ 
HRESULT STDMETHODCALLTYPE CSimpleDataObjImpl<T>::GetData(
    /* [unique][in] */ FORMATETC *pformatetcIn,
    /* [out] */ STGMEDIUM *pmedium)
{
    HRESULT hr = E_INVALIDARG;

    // try our data obejct first
    if( m_spDataObj )
    {
        hr = m_spDataObj->GetData(pformatetcIn, pmedium);
    }

    if( FAILED(hr) )
    {
        pmedium->hGlobal = NULL;
        pmedium->pUnkForRelease = NULL;
        pmedium->tymed = TYMED_HGLOBAL;

        hr = QueryGetData(pformatetcIn);

        if( SUCCEEDED(hr) && FAILED(m_spDataObj->QueryGetData(pformatetcIn)) )
        {
            pmedium->hGlobal = GlobalAlloc(GPTR, sizeof(T));

            if( pmedium->hGlobal )
            {
                *((T *)pmedium->hGlobal) = m_data;
                hr = S_OK; // success
            }
            else
            {
                hr = E_OUTOFMEMORY;
            }
        }
    }

    return hr;
}

template <class T>
/* [local] */ 
HRESULT STDMETHODCALLTYPE CSimpleDataObjImpl<T>::GetDataHere(
    /* [unique][in] */ FORMATETC *pformatetc,
    /* [out][in] */ STGMEDIUM *pmedium)
{
    // we don't implement this. 
    return E_NOTIMPL;
}

template <class T>
HRESULT STDMETHODCALLTYPE CSimpleDataObjImpl<T>::QueryGetData(
    /* [unique][in] */ FORMATETC *pformatetc)
{
    HRESULT hr = E_UNEXPECTED;

    // try our data obejct first
    if( m_spDataObj )
    {
        hr = m_spDataObj->QueryGetData(pformatetc);
    }

    if( FAILED(hr) )
    {
        if( m_cfDataType == pformatetc->cfFormat )
        {
            if( TYMED_HGLOBAL & pformatetc->tymed )
            {
                // success
                hr = S_OK;
            }
            else
            {
                // invalid tymed
                hr = DV_E_TYMED;
            }
        }
        else
        {
            // invalid clipboard format
            hr = DV_E_CLIPFORMAT;
        }
    }

    return hr;
}

template <class T>
HRESULT STDMETHODCALLTYPE CSimpleDataObjImpl<T>::GetCanonicalFormatEtc(
    /* [unique][in] */ FORMATETC *pformatectIn,
    /* [out] */ FORMATETC *pformatetcOut)
{
    // always return the data in the same format
    return DATA_S_SAMEFORMATETC;
}

template <class T>
/* [local] */ 
HRESULT STDMETHODCALLTYPE CSimpleDataObjImpl<T>::SetData(
    /* [unique][in] */ FORMATETC *pformatetc,
    /* [unique][in] */ STGMEDIUM *pmedium,
    /* [in] */ BOOL fRelease)
{
    HRESULT hr = E_INVALIDARG;

    // try our data obejct first
    if( m_spDataObj )
    {
        hr = m_spDataObj->SetData(pformatetc, pmedium, fRelease);
    }

    if( FAILED(hr) )
    {
        hr = QueryGetData(pformatetc);

        if( SUCCEEDED(hr) && FAILED(m_spDataObj->QueryGetData(pformatetc)) )
        {
            if( pmedium->hGlobal )
            {
                m_data = *((T *)pmedium->hGlobal);
                hr = S_OK; // success
            }
            else
            {
                hr = E_INVALIDARG;
            }
        }
    }

    return hr;
}

template <class T>
HRESULT STDMETHODCALLTYPE CSimpleDataObjImpl<T>::EnumFormatEtc(
    /* [in] */ DWORD dwDirection,
    /* [out] */ IEnumFORMATETC **ppenumFormatEtc)
{
    // we don't implement this. 
    return E_NOTIMPL;
}

template <class T>
HRESULT STDMETHODCALLTYPE CSimpleDataObjImpl<T>::DAdvise(
    /* [in] */ FORMATETC *pformatetc,
    /* [in] */ DWORD advf,
    /* [unique][in] */ IAdviseSink *pAdvSink,
    /* [out] */ DWORD *pdwConnection)
{
    // we don't implement this. 
    return OLE_E_ADVISENOTSUPPORTED;
}

template <class T>
HRESULT STDMETHODCALLTYPE CSimpleDataObjImpl<T>::DUnadvise(
    /* [in] */ DWORD dwConnection)
{
    // we don't implement this. 
    return OLE_E_ADVISENOTSUPPORTED;
}

template <class T>
HRESULT STDMETHODCALLTYPE CSimpleDataObjImpl<T>::EnumDAdvise(
    /* [out] */ IEnumSTATDATA **ppenumAdvise)
{
    // we don't implement this. 
    return OLE_E_ADVISENOTSUPPORTED;
}

//////////////////
// IDropSource
//
template <class T>
HRESULT STDMETHODCALLTYPE CSimpleDataObjImpl<T>::QueryContinueDrag(
    /* [in] */ BOOL fEscapePressed,
    /* [in] */ DWORD grfKeyState)
{
    // standard implementation
    HRESULT hr = S_OK;

    if( fEscapePressed )
    {
        hr = DRAGDROP_S_CANCEL;
    }

    if( !(grfKeyState & (MK_LBUTTON | MK_RBUTTON | MK_MBUTTON)) )
    {
        hr = DRAGDROP_S_DROP;
    }

    return hr;
}

template <class T>
HRESULT STDMETHODCALLTYPE CSimpleDataObjImpl<T>::GiveFeedback(
    /* [in] */ DWORD dwEffect)
{
    // standard implementation
    return DRAGDROP_S_USEDEFAULTCURSORS;
}

// this namespace is a placeholder to put COM related helpers here
namespace comhelpers
{

inline    
BOOL AreObjectsIdentical(IUnknown *punk1, IUnknown *punk2)
{
    BOOL bRet = FALSE;
    if (NULL == punk1 && NULL == punk2)
    {
        // if both are NULL then we assume they are identical
        bRet = TRUE;
    }
    else
    {
        // one of them isn't NULL - we compare using the COM identity rules
        if (punk1 && punk2)
        {
            CRefPtrCOM<IUnknown> spUnk1, spUnk2;
            if (SUCCEEDED(punk1->QueryInterface(IID_IUnknown, (void**)&spUnk1)) &&
                SUCCEEDED(punk2->QueryInterface(IID_IUnknown, (void**)&spUnk2)))
            {
                bRet = (spUnk1 == spUnk2);
            }
        }
    }
    return bRet;
}

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\gensph.h ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       gensph.h
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        23-Dec-2000
 *
 *  DESCRIPTION: generic smart pointers & smart handles templates
 *
 *****************************************************************************/

#ifndef _GENSPH_H_
#define _GENSPH_H_

// include the core definitions first
#include "coredefs.h"

////////////////////////////////////////////////
//
// class CGenericSP
//
// a generic smart pointer
// everything starts here -:)
//
template < class   T, 
           class   inheritorClass,
           class   pType           = T*,
           INT_PTR null            = 0,
           class   pCType          = const T* >

class CGenericSP
{
public:
    // construction/destruction
    CGenericSP(): m_p(GetNull()) {}
    CGenericSP(pType p): m_p(GetNull()) { _Attach(p); }
    ~CGenericSP() { Reset(); }

    // follows common smart pointer impl. - 
    // operators & methods

    void Reset()
    {
        if( GetNull() != m_p )
        {
            _Delete(m_p);
            m_p = GetNull();
        }
    }

    void Attach(pType p)
    {
        Reset();
        m_p = (p ? p : GetNull());
    }

    pType Detach()
    {
        pType p = GetNull();
        if( GetNull() != m_p )
        {
            p = m_p;
            m_p = GetNull();
        }
        return p;
    }

    template <class AS_TYPE>
    AS_TYPE GetPtrAs() const
    {
        return (GetNull() == m_p) ? reinterpret_cast<AS_TYPE>(NULL) : reinterpret_cast<AS_TYPE>(m_p);
    }

    pType GetPtr() const
    {
        return GetPtrAs<pType>();
    }

    pType* GetPPT()
    {
        return static_cast<pType*>(&m_p);
    }

    pCType* GetPPCT()
    {
        return const_cast<pCType*>(&m_p);
    }

    void** GetPPV()
    {
        return reinterpret_cast<void**>(&m_p);
    }

    operator pType() const
    {
        return GetPtr();
    }

    T& operator*() const
    {
        ASSERT(GetNull() != m_p);
        return *m_p;
    }

    pType* operator&()
    {
        ASSERT(GetNull() == m_p);
        return GetPPT();
    }

    pType operator->() const
    {
        ASSERT(GetNull() != m_p);
        return (pType)m_p;
    }

    pType operator=(pType p)
    {
        _Attach(p);
        return m_p;
    }

    pType operator=(const int i)
    {
        // this operator is only for NULL assignment
        ASSERT(INT2PTR(i, pType) == NULL || INT2PTR(i, pType) == GetNull());
        Attach(INT2PTR(i, pType));
        return m_p;
    }

    bool operator!() const
    {
        return (GetNull() == m_p);
    }

    bool operator<(pType p) const
    {
        return (m_p < p);
    }

    bool operator==(pType p) const
    {
        return (m_p == p);
    }

protected:
    pType m_p;

    // those will be declared protected, so people won't use them directly
    CGenericSP(CGenericSP<T, inheritorClass, pType, null, pCType> &sp): m_p(GetNull()) 
    { 
        _Attach(sp); 
    }

    void Attach(CGenericSP<T, inheritorClass, pType, null, pCType> &sp)
    {
        static_cast<inheritorClass*>(this)->Attach(static_cast<pType>(sp));
        sp.Detach();
    }

    pType operator=(CGenericSP<T, inheritorClass, pType, null, pCType> &sp)
    {
        _Attach(sp);
        return m_p;
    }

    // NULL support, use these to check for/assign NULL in inheritors
    pType   GetNull()           const { return reinterpret_cast<pType>(null); }
    bool    IsNull(pType p)     const { return GetNull() == p;  }
    bool    IsntNull(pType p)   const { return GetNull() != p;  }

private:
    void _Attach(pType p)
    {
        // give a chance to inheritors to override the attach
        static_cast<inheritorClass*>(this)->Attach(p);
    }

    void _Attach(CGenericSP<T, inheritorClass, pType, null, pCType> &sp)
    {
        // give a chance to inheritors to override the attach
        static_cast<inheritorClass*>(this)->Attach(sp);
    }

    void _Delete(pType  p)
    { 
        // the inheritor class defines static member called Delete(pType p)
        // to destroy the object.
        if( GetNull() != p )
        {
#pragma prefast(suppress:307, "This is a known prefast bug fixed in version 1.2 (PREfast bug 616)") 
            inheritorClass::Delete(p); 
        }
    }
};

// declares standard default contructor, copy constructor, attach 
// contructor and assignment operators (they can't be inherited as constructors can't) 
// for the CGenericSP class in an inheritor class.
#define DECLARE_GENERICSMARTPTR_CONSTRUCT(T, className)                             \
    private:                                                                        \
    className(className &sp): CGenericSP< T, className >(sp) { }                    \
    T* operator=(className &sp)                                                     \
    { return CGenericSP< T, className >::operator =(sp); }                          \
    public:                                                                         \
    className() { }                                                                 \
    className(T *p): CGenericSP< T, className >(p) { }                              \
    T* operator=(T *p)                                                              \
    { return CGenericSP< T, className >::operator =(p); }                           \
    T* operator=(const int i)                                                       \
    { return CGenericSP< T, className >::operator =(i); }                           \

#define DECLARE_GENERICSMARTPTR_CONSTRUCT1(T, className, pType)                     \
    private:                                                                        \
    className(className &sp): CGenericSP<T, className, pType>(sp) { }               \
    pType operator=(className &sp)                                                  \
    { return CGenericSP<T, className, pType>::operator =(sp); }                     \
    public:                                                                         \
    className() { }                                                                 \
    className(pType p): CGenericSP<T, className, pType>(p) { }                      \
    pType operator=(pType p)                                                        \
    { return CGenericSP<T, className, pType>::operator =(p); }                      \
    pType operator=(const int i)                                                    \
    { return CGenericSP<T, className, pType>::operator =(i); }                      \

#define DECLARE_GENERICSMARTPTR_CONSTRUCT2(T, className, pType, null)               \
    private:                                                                        \
    className(className &sp): CGenericSP<T, className, pType, null>(sp) { }         \
    pType operator=(className &sp)                                                  \
    { return CGenericSP<T, className, pType, null>::operator =(sp); }               \
    public:                                                                         \
    className() { }                                                                 \
    className(pType p): CGenericSP<T, className, pType, null>(p) { }                \
    pType operator=(pType p)                                                        \
    { return CGenericSP<T, className, pType, null>::operator =(p); }                \
    pType operator=(const int i)                                                    \
    { return CGenericSP<T, className, pType, null>::operator =(i); }                \

////////////////////////////////////////////////
////////// AUTO POINTERS ///////////////////////
////////////////////////////////////////////////

////////////////////////////////////////////////
//
// class CAutoPtr
//
// simple auto-pointer
// uses delete operator to free memory
//
template <class T>
class CAutoPtr: public CGenericSP< T, CAutoPtr<T> >
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT(T, CAutoPtr<T>)
    static void Delete(T *p) { delete p; }
};

////////////////////////////////////////////////
//
// class CAutoPtrArray
//
// simple auto-pointer allocated as array
// uses delete[] operator to free memory
//
template <class T>
class CAutoPtrArray: public CGenericSP< T, CAutoPtrArray<T> >
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT(T, CAutoPtrArray<T>)
    static void Delete(T *p) { delete[] p; }
};

////////////////////////////////////////////////
//
// class CAutoPtrCRT
//
// simple CRT auto-pointer - allocated with malloc/calloc
// uses free to free the memory
//
template <class T>
class CAutoPtrCRT: public CGenericSP< T, CAutoPtrCRT<T> >
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT(T, CAutoPtrCRT<T>)
    static void Delete(T *p) { free(p); }
};

////////////////////////////////////////////////
//
// class CAutoPtrSpl
//
// simple spooler auto-pointer -
// uses FreeMem to free memory
//
template <class T>
class CAutoPtrSpl: public CGenericSP< T, CAutoPtrSpl<T> >
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT(T, CAutoPtrSpl<T>)
    static void Delete(T *p) { FreeMem(p); }
};

////////////////////////////////////////////////
//
// class CAutoPtrBSTR
//
// simple BSTR auto-pointer -
// SysAllocString/SysFreeString
//
class CAutoPtrBSTR: public CGenericSP<BSTR, CAutoPtrBSTR, BSTR>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(BSTR, CAutoPtrBSTR, BSTR)
    static void Delete(BSTR p) { SysFreeString(p); }
};

////////////////////////////////////////////////
//
// class CAutoPtrCOM
//
// simple smart COM pointer
//
template <class T>
class CAutoPtrCOM: public CGenericSP< T, CAutoPtrCOM<T> >
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT(T, CAutoPtrCOM<T>)
    static void Delete(T *p) { p->Release(); } 
};

////////////////////////////////////////////////
//
// class CRefPtrCOM
//
// referenced smart COM pointer (ATL style)
// with improvements for robustness
//
template <class T>
class CRefPtrCOM: public CGenericSP< T, CRefPtrCOM<T> >
{
    void _AddRefAttach(T *p);
public:
    // special case all these
    CRefPtrCOM() { }
    CRefPtrCOM(const CGenericSP< T, CRefPtrCOM<T> > &sp): CGenericSP< T, CRefPtrCOM<T> >(sp) { }
    T* operator=(const CRefPtrCOM<T> &sp) { return CGenericSP< T, CRefPtrCOM<T> >::operator =(sp); }
    T* operator=(const int i) { return CGenericSP< T, CRefPtrCOM<T> >::operator =(i); }

    // overloaded stuff
    void Attach(const CRefPtrCOM<T> &sp) { _AddRefAttach(static_cast<T*>(sp)); }
    static void Delete(T *p) { p->Release(); } 

    // use these functions instead of operators (more clear)
    HRESULT CopyFrom(T *p);             // AddRef p  and assign to this
    HRESULT CopyTo(T **ppObj);          // AddRef this and assign to ppObj
    HRESULT TransferTo(T **ppObj);      // assign this to ppObj and assign NULL to this
    HRESULT Adopt(T *p);                // take ownership of p

private:
    // disable contruction, assignment operator & attach from
    // a raw pointer - it's not clear what exactly you want:
    // to copy (AddRef) the object or to take ownership - use
    // the functions above to make clear
    void Attach(T* p);
    CRefPtrCOM(T *p);
    T* operator=(T *p);
};


////////////////////////////////////////////////
//
// class CAutoPtrShell
//
// smart shell auto pointer - 
// uses shell IMalloc to free memory
//
template <class T>
class CAutoPtrShell: public CGenericSP< T, CAutoPtrShell<T> >
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT(T, CAutoPtrShell<T>)
    static void Delete(T *p)
    {
        CAutoPtrCOM<IMalloc> spShellMalloc;
        if( SUCCEEDED(SHGetMalloc(&spShellMalloc)) )
        {
            spShellMalloc->Free(p);
        }
    }
};

////////////////////////////////////////////////
//
// class CAutoPtrPIDL
//
// smart shell ID list ptr - LPCITEMIDLIST, LPITEMIDLIST.
//
typedef CAutoPtrShell<ITEMIDLIST> CAutoPtrPIDL;

////////////////////////////////////////////////
////////// AUTO HANDLES ////////////////////////
////////////////////////////////////////////////

////////////////////////////////////////////////
//
// class CAutoHandleNT
//
// NT kernel object handle (closed with CloseHandle)
//
class CAutoHandleNT: public CGenericSP<HANDLE, CAutoHandleNT, HANDLE>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(HANDLE, CAutoHandleNT, HANDLE)
    static void Delete(HANDLE h) { VERIFY(CloseHandle(h)); }
};

////////////////////////////////////////////////
//
// class CAutoHandleHLOCAL
//
// NT local heap handle (closed with LocalFree)
//
class CAutoHandleHLOCAL: public CGenericSP<HLOCAL, CAutoHandleHLOCAL, HLOCAL>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(HLOCAL, CAutoHandleHLOCAL, HLOCAL)
    static void Delete(HLOCAL h) { VERIFY(NULL == LocalFree(h)); }
};

////////////////////////////////////////////////
//
// class CAutoHandleHGLOBAL
//
// NT global heap handle (closed with GlobalFree)
//
class CAutoHandleHGLOBAL: public CGenericSP<HGLOBAL, CAutoHandleHGLOBAL, HGLOBAL>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(HGLOBAL, CAutoHandleHGLOBAL, HGLOBAL)
    static void Delete(HGLOBAL h) { VERIFY(NULL == GlobalFree(h)); }
};

////////////////////////////////////////////////
//
// class CAutoHandlePrinter
//
// auto printer handle
//
class CAutoHandlePrinter: public CGenericSP<HANDLE, CAutoHandlePrinter, HANDLE>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(HANDLE, CAutoHandlePrinter, HANDLE)
    static void Delete(HANDLE h) { CHECK(ClosePrinter(h)); }
};

////////////////////////////////////////////////
//
// class CAutoHandlePrinterNotify
//
// printer notifications handle - 
// Find[Firse/Next/Close]PrinterChangeNotification()
//
class CAutoHandlePrinterNotify: public CGenericSP<HANDLE, CAutoHandlePrinterNotify, HANDLE, -1>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT2(HANDLE, CAutoHandlePrinterNotify, HANDLE, -1)
    static void Delete(HANDLE h) { CHECK(FindClosePrinterChangeNotification(h)); }
};

////////////////////////////////////////////////
//
// class CAutoPtrPrinterNotify
//
// printer notifications memory - spooler should free it.
// Find[Firse/Next/Close]PrinterChangeNotification()
//
class CAutoPtrPrinterNotify: public CGenericSP<PRINTER_NOTIFY_INFO, CAutoPtrPrinterNotify>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT(PRINTER_NOTIFY_INFO, CAutoPtrPrinterNotify)
    static void Delete(PRINTER_NOTIFY_INFO *p) { CHECK(FreePrinterNotifyInfo(p)); }
};

////////////////////////////////////////////////
//
// class CAutoHandleGDI
//
// GDI auto handle (WindowsNT GDI handle wrapper)
//
template <class T>
class CAutoHandleGDI: public CGenericSP< T, CAutoHandleGDI<T>, T >
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(T, CAutoHandleGDI<T>, T)
    static void Delete(T hGDIObj) { VERIFY(DeleteObject(hGDIObj)); }
};

// GDI auto handles
typedef CAutoHandleGDI<HPEN>        CAutoHandlePen;
typedef CAutoHandleGDI<HBRUSH>      CAutoHandleBrush;
typedef CAutoHandleGDI<HFONT>       CAutoHandleFont;
typedef CAutoHandleGDI<HBITMAP>     CAutoHandleBitmap;
// etc...

////////////////////////////////////////////////
//
// class CAutoHandleCursor
//
// auto handle for HCURSOR
//
class CAutoHandleCursor: public CGenericSP<HCURSOR, CAutoHandleCursor, HCURSOR>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(HCURSOR, CAutoHandleCursor, HCURSOR)
    static void Delete(HCURSOR h) { VERIFY(DestroyCursor(h)); }
};

////////////////////////////////////////////////
//
// class CAutoHandleIcon
//
// auto handle for HICON
//
class CAutoHandleIcon: public CGenericSP<HICON, CAutoHandleIcon, HICON>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(HICON, CAutoHandleIcon, HICON)
    static void Delete(HICON h) { VERIFY(DestroyIcon(h)); }
};

////////////////////////////////////////////////
//
// class CAutoHandleMenu
//
// auto handle for HMENU
//
class CAutoHandleMenu: public CGenericSP<HMENU, CAutoHandleMenu, HMENU>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(HMENU, CAutoHandleMenu, HMENU)
    static void Delete(HMENU h) { VERIFY(DestroyMenu(h)); }
};

////////////////////////////////////////////////
//
// class CAutoHandleAccel
//
// auto handle for HACCEL
//
class CAutoHandleAccel: public CGenericSP<HACCEL, CAutoHandleAccel, HACCEL>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(HACCEL, CAutoHandleAccel, HACCEL)
    static void Delete(HACCEL h) { DestroyAcceleratorTable(h); }
};

#ifdef _INC_COMCTRLP
////////////////////////////////////////////////
//
// class CAutoHandleHDSA
//
// auto handle for shell HDSA
// (dynamic structure arrays)
//
class CAutoHandleHDSA: public CGenericSP<HDSA, CAutoHandleHDSA, HDSA>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(HDSA, CAutoHandleHDSA, HDSA)
    static void Delete(HDSA h) { VERIFY(DSA_Destroy(h)); }
};

////////////////////////////////////////////////
//
// class CAutoHandleMRU
//
// auto handle for MRU (shell common controls)
// CreateMRUList/FreeMRUList
//
class CAutoHandleMRU: public CGenericSP<HANDLE, CAutoHandleMRU, HANDLE>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(HANDLE, CAutoHandleMRU, HANDLE)
    static void Delete(HANDLE h) { FreeMRUList(h); }
};
#endif // _INC_COMCTRLP

////////////////////////////////////////////////
//
// class CAutoHandleHKEY
//
// auto handle for a Windows registry key (HKEY)
// RegCreateKeyEx/RegOpenKeyEx/RegCloseKey
//
class CAutoHandleHKEY: public CGenericSP<HKEY, CAutoHandleHKEY, HKEY>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(HKEY, CAutoHandleHKEY, HKEY)
    static void Delete(HKEY h) { VERIFY(ERROR_SUCCESS == RegCloseKey(h)); }
};

////////////////////////////////////////////////
//
// class CAutoHandleHMODULE
//
// auto handle for a HMODULE
// LoadLibrary/FreeLibrary
//
class CAutoHandleHMODULE: public CGenericSP<HMODULE, CAutoHandleHMODULE, HMODULE>
{
public:
    DECLARE_GENERICSMARTPTR_CONSTRUCT1(HMODULE, CAutoHandleHMODULE, HMODULE)
    static void Delete(HMODULE h) { VERIFY(FreeLibrary(h)); }
};

// include the implementation of the template classes here
#include "gensph.inl"

#endif // endif _GENSPH_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\cntutils.h ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       cntutils.h
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        23-Dec-2000
 *
 *  DESCRIPTION: Containers and algorithms utility templates
 *
 *****************************************************************************/

#ifndef _CNTUTILS_H
#define _CNTUTILS_H

// the generic smart pointers & handles
#include "gensph.h"

////////////////////////////////////////////////
// Algorithms
//
namespace Alg
{

///////////////////////////////////////////////////////////////
// CDefaultAdaptor<T,K> - default adaptor class.
//
// T - type
// K - key for sorting
//
template <class T, class K = T>
class CDefaultAdaptor
{
public:
    // assumes the key is the item itself
    static const K& Key(const T &i) { return (const K&)i; }
    // assumes K has less operator defined
    static int Compare(const K &k1, const K &k2) { return (k2 < k1) - (k1 < k2); }
    // assumes assignment operator defined
    static T& Assign(T &i1, const T &i2) { return (i1 = i2); }
};

//////////////////////////////////////////////////////////
// _LowerBound<T,K,A> - lowerbound search alg.
// assumes the array is sorted.
//
// returns the position where this key (item) should be inserted. 
// all the items before that position will be less or equal to the input key
//
// T - type
// K - key for sorting
// A - adaptor
//
template <class T, class K, class A>
int _LowerBound(const K &k, const T *base, int lo, int hi)
{
    while( lo <= hi )
    {
        if( lo == hi )
        {
            // boundary case
            if( A::Compare(k, A::Key(base[lo])) >= 0 )
            {
                // k >= lo
                lo++;
            }
            break;
        }
        else
        {
            // divide & conquer
            int mid = (lo+hi)/2;

            if( A::Compare(k, A::Key(base[mid])) < 0 )
            {
                // k < mid
                hi = mid;
            }
            else
            {
                // k >= mid
                lo = mid+1;
            }
        }
    }
    return lo;
}

///////////////////////////////////////////////////////////////
// CSearchAlgorithms<T,K,A> - search alg.
//
// T - type
// K - key for sorting
// A - adaptor
//
// default template arguments are allowed only on classes
template <class T, class K = T, class A = CDefaultAdaptor<T,K> >
class CSearchAlgorithms
{
public:
    // lower bound
    static int LowerBound(const K &k, const T *base, int count)
    {
        return _LowerBound<T,K,A>(k, base, 0, count-1);
    }

    // binary search
    static bool Find(const K &k, const T *base, int count, int *pi)
    {
        int iPos = _LowerBound<T,K,A>(k, base, 0, count-1)-1;
        bool bFound = (0 <= iPos && iPos < count && 0 == A::Compare(k, A::Key(base[iPos])));
        if( bFound && pi ) *pi = iPos;
        return bFound;
    };
};

} // namespace Alg

////////////////////////////////////////////////
//
// class CSimpleArray
//
// a simple array implementation based on 
// shell DSA_* stuff (not MT safe)
//

// turn off debugging new for a while
#if defined(_DEBUG) && defined(_CRTDBG_MAP_ALLOC)
#undef new
#endif

template <class T>
class CSimpleArray
{
    // in-place construct/destruct wrapper
    class CWrapper
    {
    public:
        // proper copy semantics
        CWrapper() { }
        CWrapper(const T &t): m_t(t) { }
        T& operator = (const T &t) { m_t = t; return t; }

        // placed new & delete

        void *operator new(size_t, CWrapper *p) { ASSERT(p); return p; }
        void  operator delete(void *p) { }
        T m_t;
    };
public:
    enum { DEFAULT_GROW = 32 };
    typedef int (*PFN_COMPARE)(const T &i1, const T &i2);

    CSimpleArray(int iGrow = DEFAULT_GROW) { Create(iGrow); }
    ~CSimpleArray() { Destroy(); }

    HRESULT Create(int iGrow = DEFAULT_GROW)
    {
        m_shDSA = DSA_Create(sizeof(CWrapper), iGrow);
        return m_shDSA ? S_OK : E_OUTOFMEMORY;
    }

    HRESULT Destroy()
    {
        if( m_shDSA )
        {
            DeleteAll();
            m_shDSA = NULL;
        }
        return S_OK;
    }

    // the array interface
    int Count() const
    {
        ASSERT(m_shDSA);
        return _DSA_GetItemCount(m_shDSA);
    }

    const T& operator [] (int i) const
    {
        return _GetWrapperAt(i)->m_t;
    }

    T& operator [] (int i)
    {
        return _GetWrapperAt(i)->m_t;
    }

    // returns true if created/initialized
    operator bool () const
    {
        return m_shDSA;
    }

    // returns -1 if failed to grow - i.e. out of memory
    int Append(const T &item)
    {
        ASSERT(m_shDSA);

        int i = DSA_InsertItem(m_shDSA, DA_LAST, (void *)_GetZeroMemWrapper()); // allocate
        if( -1 != i ) 
        {
            new (_GetWrapperAt(i)) CWrapper(item); // construct
        }

        return i;
    }

    // returns -1 if failed to grow - i.e. out of memory
    int Insert(int i, const T &item)
    {
        ASSERT(m_shDSA && 0 <= i && i <= _DSA_GetItemCount(m_shDSA));

        i = DSA_InsertItem(m_shDSA, i, (void *)_GetZeroMemWrapper()); // allocate
        if( -1 != i ) 
        {
            new (_GetWrapperAt(i)) CWrapper(item); // construct
        }

        return i;
    }

    BOOL Delete(int i)
    {
        ASSERT(m_shDSA && 0 <= i && i < _DSA_GetItemCount(m_shDSA));
        delete _GetWrapperAt(i); // destruct
        return DSA_DeleteItem(m_shDSA, i); // free
    }

    void DeleteAll()
    {
        ASSERT(m_shDSA);

        // destruct all
        if( Count() )
        {
            int i, iCount = Count();
            CWrapper *p = _GetWrapperAt(0);
            for( i=0; i<iCount; i++ )
            {
                delete (p+i);
            }
        }

        // free all
        DSA_DeleteAllItems(m_shDSA);
    }

    HRESULT Sort(PFN_COMPARE pfnCompare)
    {
        // would be nice to have it
        return E_NOTIMPL;
    }

private:
    static CWrapper* _GetZeroMemWrapper()
    { 
        // returns zero initialized memory of size - sizeof(CWrapper)
        static BYTE buffer[sizeof(CWrapper)]; 
        return reinterpret_cast<CWrapper*>(buffer);
    }
    CWrapper* _GetWrapperAt(int i) const
    {
        ASSERT(m_shDSA && 0 <= i && i < _DSA_GetItemCount(m_shDSA));
        return reinterpret_cast<CWrapper*>(DSA_GetItemPtr(m_shDSA, i));
    }
    int _DSA_GetItemCount(HDSA hdsa) const
    {
        // DSA_GetItemCount is a macro, which is casting to int* (somewhat illegal),
        // so we need to do a static cast here, so our casting operator gets invoked
        return DSA_GetItemCount(static_cast<HDSA>(m_shDSA));
    }

    CAutoHandleHDSA m_shDSA; // shell dynamic structure array
};

// turn back on debugging new
#if defined(_DEBUG) && defined(_CRTDBG_MAP_ALLOC)
#define new new(_NORMAL_BLOCK, __FILE__, __LINE__)
#endif

////////////////////////////////////////////////
//
// class CSortedArray<T,K,A>
//
// a sorted array implementation based on DSA_*
// (not MT safe)
//
// T - type
// K - key for sorting
// A - adaptor
//
template <class T, class K = T, class A = Alg::CDefaultAdaptor<T,K> >
class CSortedArray: public CSimpleArray<T>
{
public:
    CSortedArray() { }
    CSortedArray(int iGrow): CSimpleArray<T>(iGrow) { }
    ~CSortedArray() { }

    // returns -1 if failed to grow - i.e. out of memory
    int SortedInsert(const T &item)
    { 
        return CSimpleArray<T>::Insert(
            Count() ? Alg::CSearchAlgorithms<T,K,A>::LowerBound(A::Key(item), &operator[](0), Count()) : 0, 
            item);
    }

    // true if found and false otherwise
    bool FindItem(const K &k, int *pi) const
    { 
        return Count() ? Alg::CSearchAlgorithms<T,K,A>::Find(k, &operator[](0), Count(), pi) : false;
    }

private:
    // those APIs shouldn't be visible, so make them private.
    int Append(const T &item)               { CSimpleArray<T>::Append(item);        }
    int Insert(int i, const T &item)        { CSimpleArray<T>::Insert(i, item);     }
    HRESULT Sort(PFN_COMPARE pfnCompare)    { CSimpleArray<T>::Sort(pfnCompare);    }
};

////////////////////////////////////////////////
//
// class CFastHeap<T>
//
// fast cached heap for fixed chunks 
// of memory (MT safe)
//
template <class T>
class CFastHeap
{
public:
    enum { DEFAULT_CACHE_SIZE = 32 };

    // construction/destruction
    CFastHeap(int iCacheSize = DEFAULT_CACHE_SIZE);
    ~CFastHeap();

    // the fast heap interface
    HRESULT Alloc(const T &data, HANDLE *ph);
    HRESULT Free(HANDLE h);
    HRESULT GetItem(HANDLE h, T **ppData);

#if DBG
    int m_iPhysicalAllocs;
    int m_iLogicalAllocs;
#else
private:
#endif

    // private stuff/impl.
    struct HeapItem
    {
        HeapItem *pNext;
        T data;
    };

    CCSLock m_csLock;
    HeapItem *m_pFreeList;
    int m_iCacheSize;
    int m_iCached;
};

// include the implementation of the template classes here
#include "cntutils.inl"

#endif // endif _CNTUTILS_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\cntutils.inl ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       cntutils.inl
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        23-Dec-2000
 *
 *  DESCRIPTION: Containers and algorithms utility templates (Impl.)
 *
 *****************************************************************************/

////////////////////////////////////////////////
//
// class CFastHeap<T>
//
// fast cached heap for fixed chunks 
// of memory (MT safe)
//

template <class T>
CFastHeap<T>::CFastHeap<T>(int iCacheSize): 
#if DBG
    m_iPhysicalAllocs(0),
    m_iLogicalAllocs(0),
#endif
    m_pFreeList(NULL),
    m_iCacheSize(iCacheSize),
    m_iCached(0)
{
    // nothing
}

template <class T>
CFastHeap<T>::~CFastHeap<T>()
{
    // delete the cache
    while( m_pFreeList )
    {
        HeapItem *pItem = m_pFreeList;
        m_pFreeList = m_pFreeList->pNext;
        delete pItem;
#if DBG
        m_iPhysicalAllocs--;
#endif
    }

#if DBG
    ASSERT(0 == m_iPhysicalAllocs);
    ASSERT(0 == m_iLogicalAllocs);
#endif
}

template <class T>
HRESULT CFastHeap<T>::Alloc(const T &data, HANDLE *ph)
{
    CCSLock::Locker lock(m_csLock);
    HRESULT hr = E_INVALIDARG;

    if( ph )
    {
        *ph = NULL;
        HeapItem *pi = NULL;

        if( m_pFreeList )
        {
            // we have an item in the cache, just use it
            pi = m_pFreeList;
            m_pFreeList = m_pFreeList->pNext;
            m_iCached--;
            ASSERT(m_iCached >= 0);
        }
        else
        {
            // no items in the cache, allocate new one
            pi = new HeapItem;
#if DBG
            if( pi )
            {
                m_iPhysicalAllocs++;
            }
#endif
        }

        if( pi )
        {
            pi->data = data;
            *ph = reinterpret_cast<HANDLE>(pi);
#if DBG
            m_iLogicalAllocs++;
#endif
        }   

        hr = (*ph) ? S_OK : E_OUTOFMEMORY;
    }

    return hr;
}

template <class T>
HRESULT CFastHeap<T>::Free(HANDLE h)
{
    CCSLock::Locker lock(m_csLock);
    HRESULT hr = E_INVALIDARG;

    if( h )
    {
#if DBG
        m_iLogicalAllocs--;
#endif
        ASSERT(m_iCached >= 0);
        HeapItem *pi = reinterpret_cast<HeapItem*>(h);
        if( m_iCached < m_iCacheSize )
        {
            // the number of cached items is less than the
            // cache size, so we put this item in the cache
            pi->pNext = m_pFreeList;
            m_pFreeList = pi;
            m_iCached++;
        }
        else
        {
            // enough items cached, delete this one
            delete pi;
#if DBG
            m_iPhysicalAllocs--;
#endif
        }
        hr = S_OK;
    }

    return hr;
}

template <class T>
HRESULT CFastHeap<T>::GetItem(HANDLE h, T **ppData)
{
    // just return the item ptr. no need to aquire the CS as this is
    // readonly function and Alloc/Free cannot invalidate the item.
    *ppData = &(reinterpret_cast<HeapItem*>(h)->data);
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\psnew.h ===
#ifndef __IINEW_H_INCLUDED
#define __IINEW_H_INCLUDED

#if defined(__cplusplus)

#include "wiadebug.h"

inline void * __cdecl operator new(size_t size)
{
    if (0 == size)
    {
        WIA_TRACE((TEXT("size == 0 in operator new")));
        return NULL;
    }
    PBYTE pBuf = size ? (PBYTE)LocalAlloc(LPTR, size) : NULL;
    WIA_ASSERT(pBuf != NULL);
    return (void *)pBuf;
}

inline void __cdecl operator delete(void *ptr)
{
    if (ptr)
        LocalFree(ptr);
}

extern "C" inline __cdecl _purecall(void)
{
    return 0;
}

#endif  // __cplusplus

#endif // __IINEW_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\gensph.inl ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       gensph.h
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        23-Dec-2000
 *
 *  DESCRIPTION: generic smart pointers & smart handles templates
 *
 *****************************************************************************/

////////////////////////////////////////////////
//
// class CRefPtrCOM
//
// referenced smart COM pointer (ATL style)
//

template <class T>
inline void CRefPtrCOM<T>::_AddRefAttach(T *p)
{
    if( IsntNull(p) )
    {
        p->AddRef();
    }

    Reset();
    m_p = (p ? p : GetNull());
}

template <class T>
inline HRESULT CRefPtrCOM<T>::CopyFrom(T *p)
{ 
    _AddRefAttach(p);
    return S_OK;
}

template <class T>
inline HRESULT CRefPtrCOM<T>::CopyTo(T **ppObj)
{ 
    HRESULT hr = E_INVALIDARG;
    if( ppObj )
    {
        *ppObj = m_p;
        if( IsntNull(*ppObj) )
        {
            (*ppObj)->AddRef();
        }
        hr = S_OK;
    }
    return hr;
}

template <class T>
inline HRESULT CRefPtrCOM<T>::TransferTo(T **ppObj)
{
    HRESULT hr = E_INVALIDARG;
    if( ppObj )
    {
        *ppObj = m_p;
        m_p = GetNull();
        hr = S_OK;
    }
    return hr;
}

template <class T>
inline HRESULT CRefPtrCOM<T>::Adopt(T *p)
{
    Reset();
    m_p = (p ? p : GetNull());
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\simarray.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       SIMARRAY.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/4/1999
 *
 *  DESCRIPTION: Dynamic array template class
 *
 *******************************************************************************/
#ifndef __SIMARRAY_H_INCLUDED
#define __SIMARRAY_H_INCLUDED

template<class T>
class CSimpleDynamicArray
{
private:
    int m_nSize;
    int m_nMaxSize;
    int m_nGrowSize;
    T *m_pArray;
    enum
    {
        eGrowSize = 10  // The number of items to add each time the array grows.
    };
public:
    CSimpleDynamicArray(void)
      : m_nSize(0),
        m_nMaxSize(0),
        m_nGrowSize(eGrowSize),
        m_pArray(NULL)
    {
    }
    CSimpleDynamicArray( int nInitialSize, int nGrowSize=0 )
      : m_nSize(0),
        m_nMaxSize(0),
        m_nGrowSize(nGrowSize ? nGrowSize : eGrowSize),
        m_pArray(NULL)
    {
        GrowTo(nInitialSize);
    }
    CSimpleDynamicArray( const CSimpleDynamicArray<T> &other )
      : m_nSize(0),
        m_nMaxSize(0),
        m_nGrowSize(eGrowSize),
        m_pArray(NULL)
    {
        Append(other);
    }
    virtual ~CSimpleDynamicArray(void)
    {
        Destroy();
    }
    CSimpleDynamicArray &operator=( const CSimpleDynamicArray &other )
    {
        if (this != &other)
        {
            Destroy();
            Append(other);
        }
        return *this;
    }
    void Destroy(void)
    {
        if (m_pArray)
        {
            delete[] m_pArray;
            m_pArray = NULL;
        }
        m_nSize = m_nMaxSize = 0;
    }
    void Append( const CSimpleDynamicArray &other )
    {
        if (GrowTo( m_nSize + other.Size() ))
        {
            for (int i=0;i<other.Size();i++)
            {
                Append(other[i]);
            }
        }
    }
    int Append( const T &element )
    {
        if (GrowTo( m_nSize + 1 ))
        {
            m_pArray[m_nSize] = element;
            int nResult = m_nSize;
            m_nSize++;
            return nResult;
        }
        else return -1;
    }
    int Insert( const T &element, int nIndex )
    {
        //
        // Make sure we can accomodate this new item
        //
        if (GrowTo( m_nSize + 1 ))
        {
            //
            // Make sure the item is within the range we've allocated
            //
            if (nIndex >= 0 && nIndex <= m_nSize)
            {
                //
                // Make room for the new item by moving all items above up by one slot
                //
                for (int i=Size();i>nIndex;i--)
                {
                    m_pArray[i] = m_pArray[i-1];
                }

                //
                // Save the new item
                //
                m_pArray[nIndex] = element;

                //
                // We're now one larger
                //
                m_nSize++;

                //
                // Return the index of the slot we used
                //
                return nIndex;
            }
        }

        //
        // Return an error
        //
        return -1;
    }
    void Delete( int nItem )
    {
        if (nItem >= 0 && nItem < m_nSize && m_pArray)
        {
            T *pTmpArray = new T[m_nMaxSize];
            if (pTmpArray)
            {
                T *pSrc, *pTgt;
                pSrc = m_pArray;
                pTgt = pTmpArray;
                for (int i=0;i<m_nSize;i++)
                {
                    if (i != nItem)
                    {
                        *pTgt = *pSrc;
                        pTgt++;
                    }
                    pSrc++;
                }
                delete[] m_pArray;
                m_pArray = pTmpArray;
                m_nSize--;
            }
        }
    }
    bool GrowTo( int nSize )
    {
        //
        // If the array is already large enough, just return true
        //
        if (nSize < m_nMaxSize)
        {
            return true;
        }

        //
        // Save old size, in case we can't allocate a new array
        //
        int nOldMaxSize = m_nMaxSize;

        //
        // Find the correct size to grow to
        //
        while (m_nMaxSize < nSize)
        {
            m_nMaxSize += m_nGrowSize;
        }

        //
        // Allocate the array
        //
        T *pTmpArray = new T[m_nMaxSize];
        if (pTmpArray)
        {
            //
            // Copy the old array over
            //
            for (int i=0;i<m_nSize;i++)
            {
                pTmpArray[i] = m_pArray[i];
            }

            //
            // Delete the old array
            //
            if (m_pArray)
            {
                delete[] m_pArray;
            }

            //
            // Assign the new array to the old one and return true
            //
            m_pArray = pTmpArray;
            return true;
        }
        else
        {
            //
            // If we couldn't allocate the new array, restore the maximum size
            // and return false
            //
            m_nMaxSize = nOldMaxSize;
            return false;
        }
    }
    int Find( const T& element )
    {
        for (int i=0;i<m_nSize;i++)
            if (m_pArray[i] == element)
                return i;
        return -1;
    }
    bool operator==( const CSimpleDynamicArray &other )
    {
        if (Size() != other.Size())
            return false;
        for (int i=0;i<Size();i++)
            if (!(m_pArray[i] == other[i]))
                return false;
        return true;
    }
    bool Contains( const T& element )     { return(Find(element) >= 0);}
    void Size( int nSize )                { m_nSize = nSize;}
    void MaxSize( int nMaxSize )          { m_nMaxSize = nMaxSize;}
    void GrowSize( int nGrowSize )        { m_nGrowSize = nGrowSize;}
    int Size(void) const                  { return m_nSize;}
    int MaxSize(void) const               { return m_nMaxSize;}
    int GrowSize(void) const              { return m_nGrowSize;}
    const T *Array(void) const            { return m_pArray;}
    const T &operator[](int nIndex) const { return m_pArray[nIndex];}
    T &operator[](int nIndex)             { return m_pArray[nIndex];}
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\simcrack.h ===
/*******************************************************************************
*
*  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
*
*  TITLE:       SIMCRACK.H
*
*  VERSION:     1.0
*
*  AUTHOR:      ShaunIv
*
*  DATE:        5/11/1998
*
*  DESCRIPTION: Simple Message-crackers
*
*******************************************************************************/
#ifndef ___SIMCRACK_H_INCLUDED
#define ___SIMCRACK_H_INCLUDED

// Define these if we're compiling on pre-sundown prepared compiler
#if !defined(GWLP_USERDATA)
#define GWLP_USERDATA    GWL_USERDATA
#define GWLP_WNDPROC     GWL_WNDPROC
#define DWLP_USER        DWL_USER
#define DWLP_MSGRESULT   DWL_MSGRESULT
#define SetWindowLongPtr SetWindowLong
#define GetWindowLongPtr GetWindowLong
#define INT_PTR          LONG
#endif



#if (0) // Examples

/****************************************

 EXAMPLE USAGE

 ****************************************/
// Normal message handlers for normal windows
LRESULT CALLBACK CMyWindow::WndProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
   SC_BEGIN_MESSAGE_HANDLERS(CMyWindow)
   {
       SC_HANDLE_MESSAGE( WM_SIZE, OnSize );
       SC_HANDLE_MESSAGE( WM_SETFOCUS, OnSetFocus );
       SC_FORWARD_MESSAGE( WM_CLOSE, hWnd );
   }
   SC_HANDLE_REGISTERED_MESSAGE(MyMessage,MyMessageHandler);
   SC_END_MESSAGE_HANDLERS();
}

// For use in dialog boxes (handles DWLP_MSGRESULT, etc)
BOOL CALLBACK CMyDialog::DialogProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    SC_BEGIN_DIALOG_MESSAGE_HANDLERS(CMyDialog)
    {
        SC_HANDLE_DIALOG_MESSAGE( WM_INITDIALOG, OnInitDialog );
        SC_HANDLE_DIALOG_MESSAGE( WM_COMMAND, OnCommand );
    }
    SC_HANDLE_REGISTERED_DIALOG_MESSAGE( MyMessage, MyMessageHandler );
    SC_END_DIALOG_MESSAGE_HANDLERS();
}

// WM_NOTIFY message cracker usage:
LRESULT CMyWindow::OnNotify( WPARAM wParam, LPARAM lParam )
{
   SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
   {
       SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_SETACTIVE,OnSetActive);
       SC_HANDLE_NOTIFY_MESSAGE_CONTROL(LVN_DBLCLK,IDC_LIST,OnListDblClk);
   }
   SC_END_NOTIFY_MESSAGE_HANDLERS();
}

// WM_COMMAND message cracker usage:
LRESULT CMyWindow::OnCommand( WPARAM wParam, LPARAM lParam )
{
   SC_BEGIN_COMMAND_HANDLERS()
   {
       SC_HANDLE_COMMAND_NOTIFY(EN_CHANGE,IDC_EDIT,OnEditChange);
       SC_HANDLE_COMMAND(IDOK,OnOK);
   }
   SC_END_COMMAND_HANDLERS();
}

/*
For an example of a complete class structured to use this method of window encapsulation,
look at the bottom of the file.
*/

#endif // Examples

/****************************************

 IMPLEMENTATION

 ****************************************/


/****************************************
Normal message handlers for normal windows
****************************************/
#define SC_BEGIN_MESSAGE_HANDLERS(className) \
    className *This = (className*)GetWindowLongPtr(hWnd,GWLP_USERDATA);\
    if (WM_CREATE == uMsg)\
    {\
        This = new className(hWnd);\
        SetWindowLongPtr(hWnd,GWLP_USERDATA,(INT_PTR)This);\
    }\
    else if (WM_NCDESTROY == uMsg)\
    {\
        delete This;\
        This = NULL;\
        SetWindowLongPtr(hWnd,GWLP_USERDATA,0);\
    }\
    switch (uMsg)

#define SC_HANDLE_MESSAGE(msg,handler) \
    case (msg):\
        {\
            if (This)\
                return This->handler( wParam, lParam );\
        }\
        break

#define SC_FORWARD_MESSAGE(msg,hwndForward)\
    case (msg):\
        {\
            return SendMessage( hwndForward, msg, wParam, lParam );\
        }\
        break

#define SC_END_MESSAGE_HANDLERS() \
    return (DefWindowProc(hWnd,uMsg,wParam,lParam))


#define SC_HANDLE_REGISTERED_MESSAGE(msg,handler)\
    if (This && uMsg == This->msg)\
    {\
        return This->handler( wParam, lParam );\
    }


/****************************************
Normal message handlers for reference counted windows
****************************************/
#define SC_BEGIN_REFCOUNTED_MESSAGE_HANDLERS(className) \
    className *This = (className*)GetWindowLongPtr(hWnd,GWLP_USERDATA);\
    if (WM_CREATE == uMsg)\
    {\
        This = new className(hWnd);\
        SetWindowLongPtr(hWnd,GWLP_USERDATA,(INT_PTR)This);\
    }\
    else if (WM_NCDESTROY == uMsg)\
    {\
        if (This)\
        {\
            This->Release();\
            This = NULL;\
        }\
        SetWindowLongPtr(hWnd,GWLP_USERDATA,0);\
    }\
    switch (uMsg)

#define SC_HANDLE_MESSAGE(msg,handler) \
    case (msg):\
        {\
            if (This)\
                return This->handler( wParam, lParam );\
        }\
        break

#define SC_FORWARD_MESSAGE(msg,hwndForward)\
    case (msg):\
        {\
            return SendMessage( hwndForward, msg, wParam, lParam );\
        }\
        break

#define SC_END_MESSAGE_HANDLERS() \
    return (DefWindowProc(hWnd,uMsg,wParam,lParam))


#define SC_HANDLE_REGISTERED_MESSAGE(msg,handler)\
    if (This && uMsg == This->msg)\
    {\
        return This->handler( wParam, lParam );\
    }


/****************************************
Dialog box message crackers
****************************************/
#define SC_BEGIN_DIALOG_MESSAGE_HANDLERS(className) \
    UINT_PTR bRes = FALSE;\
    className *This = (className *)GetWindowLongPtr(hWnd,DWLP_USER);\
    if (WM_INITDIALOG == uMsg)\
    {\
        This = new className( hWnd );\
        SetWindowLongPtr(hWnd,DWLP_USER,(INT_PTR)This);\
    }\
    else if (WM_NCDESTROY == uMsg)\
    {\
        if (This)\
            delete This;\
        This = NULL;\
        SetWindowLongPtr(hWnd,DWLP_USER,(INT_PTR)This);\
    }\
    switch (uMsg)

#define SC_HANDLE_DIALOG_MESSAGE(msg,handler) \
case (msg):\
    {\
        if (This)\
        {\
            LRESULT lRes = This->handler( wParam, lParam );\
            if (WM_INITDIALOG==msg)\
            {\
                bRes = (UINT_PTR)(!lRes);\
            }\
            else if (WM_CTLCOLORBTN==msg || WM_CTLCOLORDLG==msg || WM_CTLCOLOREDIT==msg || WM_CTLCOLORLISTBOX==msg || WM_CTLCOLORMSGBOX==msg || WM_CTLCOLORSCROLLBAR==msg || WM_CTLCOLORSTATIC==msg)\
            {\
                bRes = (UINT_PTR)(lRes);\
            }\
            else bRes = true;\
            SetWindowLongPtr( hWnd, DWLP_MSGRESULT, (INT_PTR)lRes );\
        }\
    }\
    break

#define SC_HANDLE_REGISTERED_DIALOG_MESSAGE(msg,handler)\
        if (This && uMsg == This->msg)\
        {\
            LRESULT lRes = This->handler( wParam, lParam );\
            SetWindowLongPtr( hWnd, DWLP_MSGRESULT, (INT_PTR)lRes );\
            bRes = true;\
        }

#define SC_END_DIALOG_MESSAGE_HANDLERS() \
    return (bRes)

/****************************************
WM_NOTIFY message crackers
****************************************/
#define SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()

#define SC_HANDLE_NOTIFY_MESSAGE_CODE(_code,proc)\
    if ((_code) == ((LPNMHDR)lParam)->code)\
        return proc( wParam, lParam )

#define SC_HANDLE_NOTIFY_MESSAGE_CONTROL(_code,id,proc)\
    if ((_code) == ((LPNMHDR)lParam)->code && (id) == (int)wParam)\
        return proc( wParam, lParam )

#define SC_END_NOTIFY_MESSAGE_HANDLERS()\
    return 0;


/****************************************
WM_COMMAND message crackers
****************************************/
#define SC_BEGIN_COMMAND_HANDLERS()

#define SC_HANDLE_COMMAND_NOTIFY(nCode,nIdCtl,handler)\
    if (nCode==(int)HIWORD(wParam) && nIdCtl==(int)LOWORD(wParam))\
    {\
        handler( wParam, lParam );\
        return (0);\
    }

#define SC_HANDLE_COMMAND(nIdCtl,handler)\
    if (nIdCtl==(int)LOWORD(wParam))\
    {\
        handler( wParam, lParam );\
        return (0);\
    }

#define SC_END_COMMAND_HANDLERS()\
    return (0)

#if (0) // More examples

class CMyWindow
{
private:
    HWND m_hWnd;

private:
    explicit CHideWindow( HWND hWnd )
        : m_hWnd(hWnd)
    {
    }

public:
    ~CMyWindow(void)
    {
    }

    // Standard Windows Message Handlers
    LRESULT OnCreate( WPARAM wParam, LPARAM lParam )
    {
        return 0;
    }

    // WM_COMMAND Handlers
    void OnEditChange( WPARAM wParam, LPARAM lParam )
    {
    }

    void OnOK( WPARAM wParam, LPARAM lParam )
    {
    }

    // WM_NOTIFY Handlers
    LRESULT OnSetActive( WPARAM wParam, LPARAM lParam )
    {
        return 0;
    }

    LRESULT OnListDblClk( WPARAM wParam, LPARAM lParam )
    {
        return 0;
    }


    LRESULT OnNotify( WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_NOTIFY_MESSAGE_HANDLERS()
        {
            SC_HANDLE_NOTIFY_MESSAGE_CODE(PSN_SETACTIVE,OnSetActive);
            SC_HANDLE_NOTIFY_MESSAGE_CONTROL(LVN_DBLCLK,IDC_LIST,OnListDblClk);
        }
        SC_END_NOTIFY_MESSAGE_HANDLERS();
    }

    LRESULT OnCommand( WPARAM wParam, LPARAM lParam )
    {
       SC_BEGIN_COMMAND_HANDLERS()
       {
           SC_HANDLE_COMMAND_NOTIFY(EN_CHANGE,IDC_EDIT,OnEditChange);
           SC_HANDLE_COMMAND(IDOK,OnOK);
       }
       SC_END_COMMAND_HANDLERS();
    }

    static LRESULT CALLBACK WndProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
    {
        SC_BEGIN_MESSAGE_HANDLERS(CMyWindow)
        {
            SC_HANDLE_MESSAGE( WM_CREATE, OnCreate );
        }
        SC_END_MESSAGE_HANDLERS();
    }
};

#endif // More examples

#endif // ___SIMCRACK_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\simbstr.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       SIMBSTR.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/12/1998
 *
 *  DESCRIPTION: Simple CBSTR class
 *
 *******************************************************************************/
#ifndef _SIMBSTR_H_INCLUDED
#define _SIMBSTR_H_INCLUDED

#include <windows.h>
#include "simstr.h"

class CSimpleBStr
{
private:
    BSTR m_BStr;
public:
    CSimpleBStr( void )
    : m_BStr(NULL)
    {

    }
    CSimpleBStr( LPCWSTR pwstrString )
    : m_BStr(NULL)
    {
        AllocString(pwstrString);
    }
    CSimpleBStr( const CSimpleString &str )
    : m_BStr(NULL)
    {
        AllocString(CSimpleStringConvert::WideString(str).String());
    }
    CSimpleBStr( const CSimpleBStr &other )
    : m_BStr(NULL)
    {
        AllocString(other.WideString().String());
    }
    void AllocString( LPCWSTR pwstrString )
    {
        FreeString();
        if (pwstrString)
        {
            m_BStr = SysAllocString(pwstrString);
        }
    }
    void FreeString(void)
    {
        if (m_BStr)
        {
            SysFreeString(m_BStr);
            m_BStr = NULL;
        }
    }
    virtual ~CSimpleBStr(void)
    {
        FreeString();
    }
    CSimpleBStr &operator=( const CSimpleBStr &other )
    {
        AllocString(other.WideString().String());
        return *this;
    }
    CSimpleBStr &operator=( LPCWSTR lpwstrString )
    {
        AllocString(lpwstrString);
        return *this;
    }
    BSTR BString(void) const
    {
        return m_BStr;
    }
    operator BSTR(void) const
    {
        return m_BStr;
    }
    CSimpleStringWide WideString(void) const
    {
        return CSimpleStringConvert::WideString(CSimpleStringWide(m_BStr));
    }
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\gphelper.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       GPHELPER.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        10/11/1999
 *
 *  DESCRIPTION: Encapsulation of common GDI plus operationss
 *
 *******************************************************************************/
#ifndef __GPHELPER_H_INCLUDED
#define __GPHELPER_H_INCLUDED

#include <windows.h>
#include <simstr.h>
#include <gdiplus.h>
#include <simarray.h>


#include <gdiplusinit.h>

class CGdiPlusInit
{
    ULONG_PTR m_pGdiplusToken;
public:
    CGdiPlusInit();
    ~CGdiPlusInit();
};

class CGdiPlusHelper
{
private:
    CGdiPlusInit              m_Init;
    Gdiplus::ImageCodecInfo  *m_pImageEncoderInfo;
    UINT                      m_nImageEncoderCount;

    Gdiplus::ImageCodecInfo  *m_pImageDecoderInfo;
    UINT                      m_nImageDecoderCount;

private:
    CGdiPlusHelper( const CGdiPlusHelper & );
    CGdiPlusHelper &operator=( const CGdiPlusHelper & );

public:
    CGdiPlusHelper(void);
    ~CGdiPlusHelper(void);

protected:
    HRESULT Initialize(void);
    static HRESULT ConstructCodecExtensionSearchStrings( CSimpleString &strExtensions, Gdiplus::ImageCodecInfo *pImageCodecInfo, UINT nImageCodecCount );
    void Destroy(void);

public:
    bool IsValid(void) const;

    HRESULT ConstructDecoderExtensionSearchStrings( CSimpleString &strExtensions );
    HRESULT ConstructEncoderExtensionSearchStrings( CSimpleString &strExtensions );
    HRESULT GetClsidOfEncoder( const GUID &guidFormatId, CLSID &clsidFormat ) const;
    HRESULT GetClsidOfDecoder( const GUID &guidFormatId, CLSID &clsidFormat ) const;
    HRESULT Convert( LPCWSTR pszInputFilename, LPCWSTR pszOutputFilename, const CLSID &guidOutputFormat ) const;
    HRESULT Rotate( LPCWSTR pszInputFilename, LPCWSTR pszOutputFilename, int nRotationAngle, const CLSID &guidOutputFormat ) const;
    HRESULT Rotate( HBITMAP hSourceBitmap, HBITMAP &hTargetBitmap, int nRotation ) const;
    HRESULT LoadAndScale( HBITMAP &hTargetBitmap, LPCTSTR pszFilename, UINT nMaxWidth=0, UINT nMaxHeight=0, bool bStretchSmallImages=false );
    HRESULT LoadAndScale( HBITMAP &hTargetBitmap, IStream *pStream, UINT nMaxWidth=0, UINT nMaxHeight=0, bool bStretchSmallImages=false );
    HRESULT SaveMultipleImagesAsMultiPage( const CSimpleDynamicArray<CSimpleStringWide> &Filenames, const CSimpleStringWide &strFilename, const CLSID &guidOutputFormat );
    HRESULT SetBrightnessAndContrast( HBITMAP hSourceBitmap, HBITMAP &hTargetBitmap, BYTE nBrightness, BYTE nContrast );
    HRESULT SetThreshold( HBITMAP hSourceBitmap, HBITMAP &hTargetBitmap, BYTE nThreshold );

    static Gdiplus::EncoderParameters *AppendEncoderParameter( Gdiplus::EncoderParameters *pEncoderParameters, const GUID &guidProp, ULONG nType, PVOID pVoid );
    
    static inline GDISTATUS_TO_HRESULT(Gdiplus::Status status)
    {
        //
        // Default to turning GDI+ errors into generic failures
        // 
        HRESULT hr = E_FAIL;
    
        switch( status )
        {
            case Gdiplus::Ok:
                hr = S_OK;
                break;
    
            case Gdiplus::InvalidParameter:
                hr = E_INVALIDARG;
                break;
    
            case Gdiplus::OutOfMemory:
                hr = E_OUTOFMEMORY;
                break;
    
            case Gdiplus::InsufficientBuffer:
                hr = HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER);
                break;
    
            case Gdiplus::Aborted:
                hr = E_ABORT;
                break;
    
            case Gdiplus::ObjectBusy:
                hr = E_PENDING;
                break;
    
            case Gdiplus::FileNotFound:
                hr = HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND);
                break;
    
            case Gdiplus::AccessDenied:
                hr = E_ACCESSDENIED;
                break;
    
            case Gdiplus::UnknownImageFormat:
                hr = HRESULT_FROM_WIN32(ERROR_INVALID_PIXEL_FORMAT);
                break;
    
            case Gdiplus::NotImplemented:
                hr = E_NOTIMPL;
                break;
    
            case Gdiplus::Win32Error:
                hr = HRESULT_FROM_WIN32(GetLastError());
                break;
    
            case Gdiplus::ValueOverflow:
            case Gdiplus::FontFamilyNotFound:
            case Gdiplus::FontStyleNotFound:
            case Gdiplus::NotTrueTypeFont:
            case Gdiplus::UnsupportedGdiplusVersion:
            case Gdiplus::GdiplusNotInitialized:
            case Gdiplus::WrongState:
                break;
        }
        return hr;
    }
};


class CImageFileFormatVerifier
{
private:
    //
    // Internal class used to store the file signatures
    //
    class CImageFileFormatVerifierItem
    {
    private:
        PBYTE  m_pSignature;
        PBYTE  m_pMask;
        int    m_nLength;
        GUID   m_guidFormat;
        CLSID  m_clsidDecoder;

    public:
        //
        // Constructors, assignment operator and destructor
        //
        CImageFileFormatVerifierItem(void);
        CImageFileFormatVerifierItem( const PBYTE pSignature, const PBYTE pMask, int nLength, const GUID &guidFormat, const CLSID &guidDecoder );
        CImageFileFormatVerifierItem( const CImageFileFormatVerifierItem &other );
        CImageFileFormatVerifierItem &operator=( const CImageFileFormatVerifierItem &other );
        CImageFileFormatVerifierItem &Assign( const PBYTE pSignature, const PBYTE pMask, int nLength, const GUID &Format, const CLSID &guidDecoder );
        ~CImageFileFormatVerifierItem(void);

    protected:
        void Destroy(void);

    public:
        //
        // Accessor functions
        //
        PBYTE Signature(void) const;
        PBYTE Mask(void) const;
        int Length(void) const;
        GUID Format(void) const;
        CLSID Decoder(void) const;

        //
        // Does this stream of bytes match this format?
        //
        bool Match( PBYTE pBytes, int nLen ) const;
    };


private:
    CSimpleDynamicArray<CImageFileFormatVerifierItem> m_FileFormatVerifierList;
    int   m_nMaxSignatureLength;
    PBYTE m_pSignatureBuffer;

private:
    CImageFileFormatVerifier( const CImageFileFormatVerifier & );
    CImageFileFormatVerifier &operator=( const CImageFileFormatVerifier & );

public:
    CImageFileFormatVerifier(void);
    ~CImageFileFormatVerifier(void);
    void Destroy(void);
    bool IsValid(void) const;
    bool IsImageFile( LPCTSTR pszFilename );
    bool IsSupportedImageFromStream( IStream * pStream, GUID * pGuidOfFormat = NULL );
    GUID GetImageType( IStream * pStream );

};


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\simcrit.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       SIMCRIT.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/6/1999
 *
 *  DESCRIPTION: Simple critical section implementation.  Note the hideous hack
 *  to get around the fact that many of our components don't use the CRT (so global
 *  and static classes don't have their constructors called.  Ever.
 *  The solution is to link to MSVCRT.LIB and set _DllMainCRTStartup as the entry
 *  point in your DLL, instead of DllMain.  The way this is coded is not thread safe.
 *  Two threads could call InitializeCriticalSection at the same time.  If you setup
 *  your build as discussed above, this won't be a problem.  Note that this hack only
 *  affects the use of this class when you have a GLOBAL or STATIC instance of a
 *  critical section.
 *
 *******************************************************************************/
#ifndef __SIMCRIT_H_INCLUDED
#define __SIMCRIT_H_INCLUDED

#include <windows.h>

class CSimpleCriticalSection
{
private:
    CRITICAL_SECTION m_CriticalSection;
    bool             m_bInitCalled;

private:
    //
    // No implementation
    //
    CSimpleCriticalSection( const CSimpleCriticalSection & );
    CSimpleCriticalSection &operator=( const CSimpleCriticalSection & );

public:
    CSimpleCriticalSection(void)
        : m_bInitCalled(false)
    {
        Initialize();
    }
    ~CSimpleCriticalSection(void)
    {
        if (m_bInitCalled)
        {
            DeleteCriticalSection(&m_CriticalSection);
        }
    }
    void Initialize(void)
    {
        if (!m_bInitCalled)
        {
            _try
            {
                InitializeCriticalSection(&m_CriticalSection);
                m_bInitCalled = true;
            }
            _except(EXCEPTION_EXECUTE_HANDLER)
            {
#if defined(DBG)
                OutputDebugString(TEXT("CSimpleCriticalSection::Initialize(), InitializeCriticalSection failed\n"));
                DebugBreak();
#endif
                m_bInitCalled = false;
            }
        }
    }
    void Enter(void)
    {
        if (!m_bInitCalled)
        {
            Initialize();
        }
        if (m_bInitCalled)
        {
            EnterCriticalSection(&m_CriticalSection);
        }
    }
    void Leave(void)
    {
        if (m_bInitCalled)
        {
            LeaveCriticalSection(&m_CriticalSection);
        }
    }
    CRITICAL_SECTION &cs(void)
    {
        return m_CriticalSection;
    }
};

class CAutoCriticalSection
{
private:
    PVOID m_pvCriticalSection;
    bool m_bUsingPlainCriticalSection;

private:
    // No implementation
    CAutoCriticalSection(void);
    CAutoCriticalSection( const CAutoCriticalSection & );
    CAutoCriticalSection &operator=( const CAutoCriticalSection & );

public:
    CAutoCriticalSection( CSimpleCriticalSection &criticalSection )
      : m_pvCriticalSection(&criticalSection),
        m_bUsingPlainCriticalSection(false)
    {
        reinterpret_cast<CSimpleCriticalSection*>(m_pvCriticalSection)->Enter();
    }
    CAutoCriticalSection( CRITICAL_SECTION &criticalSection )
      : m_pvCriticalSection(&criticalSection),
        m_bUsingPlainCriticalSection(true)
    {
        EnterCriticalSection(reinterpret_cast<CRITICAL_SECTION*>(m_pvCriticalSection));
    }
    ~CAutoCriticalSection(void)
    {
        if (m_bUsingPlainCriticalSection)
        {
            LeaveCriticalSection(reinterpret_cast<CRITICAL_SECTION*>(m_pvCriticalSection));
        }
        else
        {
            reinterpret_cast<CSimpleCriticalSection*>(m_pvCriticalSection)->Leave();
        }
        m_pvCriticalSection = NULL;
    }
};


#endif //__SIMCRIT_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\psutil.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       PSUTIL.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/28/1998
 *
 *  DESCRIPTION: Various utility functions we use in more than one place
 *
 *******************************************************************************/
#ifndef __PSUTIL_H_INCLUDED
#define __PSUTIL_H_INCLUDED

#include <windows.h>
#include <simstr.h>

#if !defined(ARRAYSIZE)
#define ARRAYSIZE(x)  (sizeof((x))/sizeof((x)[0]))
#endif

#if !defined(SETFormatEtc)
#define SETFormatEtc(fe, cf, asp, td, med, li)   \
    {\
    (fe).cfFormat=cf;\
    (fe).dwAspect=asp;\
    (fe).ptd=td;\
    (fe).tymed=med;\
    (fe).lindex=li;\
    };
#endif

#if !defined(SETDefFormatEtc)
#define SETDefFormatEtc(fe, cf, med)   \
    {\
    (fe).cfFormat=cf;\
    (fe).dwAspect=DVASPECT_CONTENT;\
    (fe).ptd=NULL;\
    (fe).tymed=med;\
    (fe).lindex=-1;\
    };
#endif


namespace PrintScanUtil
{
    template <class T>
    T Absolute( const T &m )
    {
        return((m < 0) ? -m : m);
    }

    template <class T>
    T Max( const T &m, const T &n )
    {
        return((m > n) ? m : n);
    }

    template <class T>
    T Min( const T &m, const T &n )
    {
        return((m < n) ? m : n);
    }

    template <class T>
    T GetMinimum( const T& nDesired, const T& nMin, const T& nStep )
    {
        T nResult = Max<T>( nMin, nDesired );
        if (nStep)
            nResult = nResult + (nResult - nMin) % nStep;
        return nResult;
    }

    inline bool ScreenToClient( HWND hwnd, RECT *prc )
    {
        return (::MapWindowPoints( NULL, hwnd, reinterpret_cast<POINT*>(prc), 2 ) != 0);
    }

    inline bool ClientToScreen( HWND hwnd, RECT *prc )
    {
        return (::MapWindowPoints( hwnd, NULL, reinterpret_cast<POINT*>(prc), 2 ) != 0);
    }

    inline bool ScreenToClient( HWND hwnd, RECT &rc )
    {
        return ScreenToClient( hwnd, &rc );
    }

    inline bool ClientToScreen( HWND hwnd, RECT &rc )
    {
        return ClientToScreen( hwnd, &rc );
    }

    inline int RectWidth( const RECT &rc )
    {
        return (rc.right - rc.left);
    }

    inline int RectHeight( const RECT &rc )
    {
        return (rc.bottom - rc.top);
    }

    inline LONGLONG PowerOfTwo( int nCount )
    {
        return(LONGLONG)1 << nCount;
    }

    inline int MulDivNoRound( int nNumber, int nNumerator, int nDenominator )
    {
        return(int)(((LONGLONG)nNumber * nNumerator) / nDenominator);
    }

    inline SIZE ScalePreserveAspectRatio( int nAvailX, int nAvailY, int nItemX, int nItemY )
    {
        SIZE sizeResult = { nAvailX, nAvailY };
        if (nItemX && nItemY)
        {
            //
            // Width is greater than height.  X is the constraining factor
            //
            if (nAvailY*nItemX > nAvailX*nItemY)
            {
                sizeResult.cy = MulDivNoRound(nItemY,nAvailX,nItemX);
            }

            //
            // Height is greater than width.  Y is the constraining factor
            //
            else
            {
                sizeResult.cx = MulDivNoRound(nItemX,nAvailY,nItemY);
            }
        }
        return sizeResult;
    }

    inline bool GetBitmapSize( HBITMAP hBitmap, SIZE &sizeBitmap )
    {
        bool bResult = false;
        BITMAP Bitmap = {0};
        if (GetObject(hBitmap,sizeof(Bitmap),&Bitmap))
        {
            sizeBitmap.cx = Bitmap.bmWidth;
            sizeBitmap.cy = Bitmap.bmHeight;
            bResult = true;
        }

        return bResult;
    }

    //
    // Get the size of an icon
    //
    inline bool GetIconSize( HICON hIcon, SIZE &sizeIcon )
    {
        //
        // Assume failure
        //
        bool bResult = false;

        //
        // Get the icon information
        //
        ICONINFO IconInfo = {0};
        if (GetIconInfo( hIcon, &IconInfo ))
        {
            //
            // Get one of the bitmaps
            //
            BITMAP bm;
            if (GetObject( IconInfo.hbmColor, sizeof(bm), &bm ))
            {
                //
                // Save the size of the icon
                //
                sizeIcon.cx = bm.bmWidth;
                sizeIcon.cy = bm.bmHeight;

                //
                // Everything worked
                //
                bResult = true;
            }

            //
            // Free the bitmaps
            //
            if (IconInfo.hbmMask)
            {
                DeleteObject(IconInfo.hbmMask);
            }
            if (IconInfo.hbmColor)
            {
                DeleteObject(IconInfo.hbmColor);
            }
        }

        return bResult;
    }

    inline void Enable( HWND hWnd, bool bEnable )
    {
        if (hWnd && IsWindow(hWnd))
        {
            if (!IsWindowEnabled(hWnd) && bEnable)
            {
                ::EnableWindow( hWnd, TRUE );
            }
            else if (IsWindowEnabled(hWnd) && !bEnable)
            {
                ::EnableWindow( hWnd, FALSE );
            }

        }
    }

    inline void Enable( HWND hWnd, int nChildId, bool bEnable )
    {
        if (hWnd && IsWindow(hWnd))
        {
            Enable(GetDlgItem(hWnd,nChildId),bEnable);
        }
    }

    inline int CalculateImageListColorDepth(void)
    {
        //
        // Let's assume worst case
        //
        int nColorDepth = 4;
        HDC hDC = GetDC( NULL );
        if (hDC)
        {
            //
            // Calculate the color depth for the display
            //
            nColorDepth = GetDeviceCaps( hDC, BITSPIXEL ) * GetDeviceCaps( hDC, PLANES );
            ReleaseDC( NULL, hDC );
        }

        //
        // Get the correct image list color depth
        //
        int nImageListColorDepth;
        switch (nColorDepth)
        {
        case 4:
        case 8:
            nImageListColorDepth = ILC_COLOR4;
            break;

        case 16:
            nImageListColorDepth = ILC_COLOR16;
            break;

        case 24:
            nImageListColorDepth = ILC_COLOR24;
            break;

        case 32:
            nImageListColorDepth = ILC_COLOR32;
            break;
        
        default:
            nImageListColorDepth = ILC_COLOR;
        }

        return nImageListColorDepth;
    }
}


#endif // __PSUTIL_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\simlist.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       SIMLIST.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        2/25/1999
 *
 *  DESCRIPTION: Simple singly linked list template class.
 *
 *******************************************************************************/

#ifndef __SIMLIST_H_INCLUDED
#define __SIMLIST_H_INCLUDED

template <class T>
class CSimpleLinkedList
{
private:

    class CLinkedListNode
    {
    private:
        CLinkedListNode *m_pNext;
        T                m_Data;
    public:
        CLinkedListNode( const T &data )
        : m_pNext(NULL), m_Data(data)
        {
        }
        const CLinkedListNode *Next(void) const
        {
            return (m_pNext);
        }
        CLinkedListNode *Next(void)
        {
            return (m_pNext);
        }
        void Next( CLinkedListNode *pNext )
        {
            m_pNext = pNext;
        }
        const T &Data(void) const
        {
            return (m_Data);
        }
        T &Data(void)
        {
            return (m_Data);
        }
    };

private:
    CLinkedListNode *m_pHead;
    CLinkedListNode *m_pTail;
    int              m_nItemCount;

public:
    CSimpleLinkedList( const CSimpleLinkedList &other )
      : m_pHead(NULL),
        m_pTail(NULL),
        m_nItemCount(0)
    {
        for (Iterator i(other);i != other.End();i++)
        {
            Append(*i);
        }
    }
    CSimpleLinkedList(void)
      : m_pHead(NULL),
        m_pTail(NULL),
        m_nItemCount(0)
    {
    }
    CSimpleLinkedList &operator=( const CSimpleLinkedList &other )
    {
        //
        // Make sure we aren't the same object
        //
        if (this != &other)
        {
            //
            // Free our list
            //
            Destroy();

            //
            // Loop through the other list, copying nodes to our list
            //
            for (Iterator i(other);i != other.End();i++)
            {
                Append(*i);
            }
        }
        return *this;
    }
    virtual ~CSimpleLinkedList(void)
    {
        Destroy();
    }
    void Destroy(void)
    {
        //
        // Loop through each item, deleting it
        //
        while (m_pHead)
        {
            //
            // Save the head pointer
            //
            CLinkedListNode *pCurr = m_pHead;

            //
            // Point the head to the next item
            //
            m_pHead = m_pHead->Next();

            //
            // Delete this item
            //
            delete pCurr;
        }

        //
        // Reinitialize all the variables to their empty state
        //
        m_pHead = m_pTail = NULL;
        m_nItemCount = 0;
    }
    void Remove( const T &data )
    {
        //
        // Loop until we find this item, and save the previous item before incrementing
        //
        CLinkedListNode *pPrev = NULL, *pCurr = m_pHead;
        while (pCurr && pCurr->Data() != data)
        {
            pPrev = pCurr;
            pCurr = pCurr->Next();
        }
        
        //
        // If we didn't find the item, return
        //
        if (!pCurr)
        {
            return;
        }

        //
        // If this is the last item, point the tail pointer at the previous item (which could be NULL)
        //
        if (pCurr == m_pTail)
        {
            m_pTail = pPrev;
        }

        //
        // If this is the first item, point the head at the next item
        //
        if (pCurr == m_pHead)
        {
            m_pHead = pCurr->Next();
        }
        
        //
        // Point the previous item's next pointer at our next pointer
        //
        if (pPrev)
        {
            pPrev->Next(pCurr->Next());
        }
        
        //
        // Delete this item
        //
        delete pCurr;

        //
        // Decrement the item count
        //
        m_nItemCount--;
    }
    void Append( const CSimpleLinkedList &other )
    {
        //
        // Loop through the other list, copying nodes to our list
        //
        for (Iterator i(other);i != other.End();i++)
        {
            Append(*i);
        }
    }

    int Count(void) const
    {
        return m_nItemCount;
    }

    class Iterator;
    friend class Iterator;
    class Iterator
    {
    private:
        CLinkedListNode *m_pCurr;
    public:
        Iterator( CLinkedListNode *pNode )
          : m_pCurr(pNode)
        {
        }
        Iterator( const CSimpleLinkedList &list )
          : m_pCurr(list.m_pHead)
        {
        }
        Iterator(void)
          : m_pCurr(NULL)
        {
        }
        Iterator &Next(void)
        {
            if (m_pCurr)
            {
                m_pCurr = m_pCurr->Next();
            }
            return (*this);
        }
        Iterator &Begin(const CSimpleLinkedList &list)
        {
            m_pCurr = list.m_pHead;
            return (*this);
        }
        Iterator &operator=( const Iterator &other )
        {
            m_pCurr = other.m_pCurr;
            return (*this);
        }
        bool End(void) const
        {
            return(m_pCurr == NULL);
        }
        T &operator*(void)
        {
            return (m_pCurr->Data());
        }
        const T &operator*(void) const
        {
            return (m_pCurr->Data());
        }
        Iterator &operator++(void)
        {
            Next();
            return (*this);
        }
        Iterator operator++(int)
        {
            Iterator tmp(*this);
            Next();
            return (tmp);
        }
        bool operator!=( const Iterator &other ) const
        {
            return (m_pCurr != other.m_pCurr);
        }
        bool operator==( const Iterator &other ) const
        {
            return (m_pCurr == other.m_pCurr);
        }
    };
    Iterator Begin(void) const
    {
        return Iterator(*this);
    }
    Iterator End(void) const
    {
        return Iterator();
    }
    Iterator Begin(void)
    {
        return Iterator(*this);
    }
    Iterator End(void)
    {
        return Iterator();
    }
    Iterator Find( const T &data )
    {
        for (Iterator i=Begin();i != End();++i)
        {
            if (*i == data)
            {
                return i;
            }
        }
        return End();
    }
    Iterator Prepend( const T &data )
    {
        //
        // Allocate a new item to hold this data
        //
        CLinkedListNode *pNewItem = new CLinkedListNode(data);
        if (pNewItem)
        {
            //
            // If the list is empty, point everything at this item
            //
            if (Empty())
            {
                m_pHead = m_pTail = pNewItem;
            }
            
            //
            // Point our next pointer to the current, then point the head at us
            //
            else
            {
                pNewItem->Next(m_pHead);
                m_pHead = pNewItem;
            }
            
            //
            // Increment the item count
            //
            m_nItemCount++;
        }
        
        //
        // Return an iterator that points to the new item
        //
        return Iterator(pNewItem);
    }
    Iterator Append( const T &data )
    {
        //
        // Allocate a new item to hold this data
        //
        CLinkedListNode *pNewItem = new CLinkedListNode(data);
        if (pNewItem)
        {
            //
            // If the list is empty, point everything at this item
            //
            if (Empty())
            {
                m_pHead = m_pTail = pNewItem;
            }

            //
            // Point the tail's next pointer to us, then point the tail at us
            //
            else
            {
                m_pTail->Next(pNewItem);
                m_pTail = pNewItem;
            }
            
            //
            // Increment the item count
            //
            m_nItemCount++;
        }

        //
        // Return an iterator that points to the new item
        //
        return Iterator(pNewItem);
    }
    
    bool Empty(void) const
    {
        return (m_pHead == NULL);
    }
};

template <class T>
class CSimpleStack : public CSimpleLinkedList<T>
{
private:
    CSimpleStack( const CSimpleStack &other );
    CSimpleStack &operator=( const CSimpleStack &other );
public:
    CSimpleStack(void)
    {
    }
    virtual ~CSimpleStack(void)
    {
    }
    void Push( const T &data )
    {
        Prepend(data);
    }
    bool Pop( T &data )
    {
        if (Empty())
            return false;
        Iterator iter(*this);
        data = *iter;
        Remove(*iter);
        return true;
    }
};


template <class T>
class CSimpleQueue : public CSimpleLinkedList<T>
{
private:
    CSimpleQueue( const CSimpleQueue &other );
    CSimpleQueue &operator=( const CSimpleQueue &other );
public:
    CSimpleQueue(void)
    {
    }
    virtual ~CSimpleQueue(void)
    {
    }
    void Enqueue( const T &data )
    {
        Append(data);
    }
    bool Dequeue( T &data )
    {
        if (Empty())
            return false;
        Iterator iter(*this);
        data = *iter;
        Remove(*iter);
        return true;
    }
};

#endif __SIMLIST_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\tmplutil.inl ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       tmplutil.inl
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        10-Mar-2000
 *
 *  DESCRIPTION: Placeholder for common utility templates & functions (Impl.)
 *
 *****************************************************************************/
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\tmplutil.h ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       tmplutil.h
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        10-Mar-2000
 *
 *  DESCRIPTION: Placeholder for common utility templates & functions
 *
 *****************************************************************************/

#ifndef _TMPLUTIL_H
#define _TMPLUTIL_H

////////////////////////////////////////////////////////////////////////////////
// ****************************  INCLUDE ALL **************************** 
//
#include "gensph.h"         // generic smart pointers & handles
#include "comutils.h"       // COM utility classes & templates
#include "w32utils.h"       // Win32 utility classes & templates
#include "cntutils.h"       // Containers & Algorithms utility templates

// max path limits
#define SERVER_MAX_PATH     (INTERNET_MAX_HOST_NAME_LENGTH + 1 + 2)
#define PRINTER_MAX_PATH    (SERVER_MAX_PATH + MAX_PATH + 1)

#if defined(_DEBUG) && defined(_CRTDBG_MAP_ALLOC)  // CRT mem debugging
////////////////////////////////////////////////////
// CRT debug flags - infowise
//
// _CRTDBG_ALLOC_MEM_DF
// _CRTDBG_DELAY_FREE_MEM_DF
// _CRTDBG_CHECK_ALWAYS_DF
// _CRTDBG_CHECK_CRT_DF
// _CRTDBG_LEAK_CHECK_DF
//

#define  CRT_DEBUG_SET_FLAG(a)              _CrtSetDbgFlag( (a) | _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG))
#define  CRT_DEBUG_CLR_FLAG(a)              _CrtSetDbgFlag(~(a) & _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG))

// sends all reports to stdout
#define  CRT_DEBUG_REPORT_TO_STDOUT()                   \
   _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);     \
   _CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDOUT);   \
   _CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE);    \
   _CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDOUT);  \
   _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE);   \
   _CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDOUT)  \

// redefine new to be debug new
#undef  new 
#define new new(_NORMAL_BLOCK, __FILE__, __LINE__)

#else
#define  CRT_DEBUG_SET_FLAG(a)              ((void) 0)
#define  CRT_DEBUG_CLR_FLAG(a)              ((void) 0)
#define  CRT_DEBUG_REPORT_TO_STDOUT()       ((void) 0)
#endif

////////////////////////////////////////////////
// shell related services
namespace ShellServices
{
    // creates a PIDL to a printer in the local printers folder.
    // args:
    //  [in]    hwnd - window handle (in case we need to show UI - message box)
    //  [in]    pszPrinterName - full printer name.
    //  [out]   ppLocalPrnFolder - the printers folder (optional - may be NULL)
    //  [out]   ppidlPrinter - the PIDL of the printer pointed by pszPrinterName (optional - may be NULL) 
    //
    // remarks:
    //  pszPrinterName should be fully qualified printer name, i.e. if printer connection it should be
    //  like "\\server\printer", if local printer just the printer name.
    //  
    // returns:
    //  S_OK on success, or OLE2 error otherwise
    HRESULT CreatePrinterPIDL(HWND hwnd, LPCTSTR pszPrinterName, IShellFolder **ppLocalPrnFolder, LPITEMIDLIST *ppidlPrinter);

    // loads a popup menu
    HMENU LoadPopupMenu(HINSTANCE hInstance, UINT id, UINT uSubOffset = 0);

    // initializes enum printer's autocomplete
    HRESULT InitPrintersAutoComplete(HWND hwndEdit);

    // helpers for the Enum* idioms
    enum { ENUM_MAX_RETRY = 5 };
    HRESULT EnumPrintersWrap(DWORD dwFlags, DWORD dwLevel, LPCTSTR pszName, BYTE **ppBuffer, DWORD *pcReturned);
    HRESULT GetJobWrap(HANDLE hPrinter, DWORD JobId, DWORD dwLevel, BYTE **ppBuffer, DWORD *pcReturned);

    // enumerates the shared resources on a server, for more info see SDK for NetShareEnum API.
    HRESULT NetAPI_EnumShares(LPCTSTR pszServer, DWORD dwLevel, BYTE **ppBuffer, DWORD *pcReturned);
}

// utility functions
HRESULT LoadXMLDOMDoc(LPCTSTR pszURL, IXMLDOMDocument **ppXMLDoc);
HRESULT CreateStreamFromURL(LPCTSTR pszURL, IStream **pps);
HRESULT CreateStreamFromResource(LPCTSTR pszModule, LPCTSTR pszResType, LPCTSTR pszResName, IStream **pps);
HRESULT GetCurrentThreadLastPopup(HWND *phwnd);
HRESULT PrinterSplitFullName(LPCTSTR pszFullName, TCHAR szBuffer[], int nMaxLength, LPCTSTR *ppszServer,LPCTSTR *ppszPrinter);

// generate proper HRESULT from Win32 last error
inline HRESULT 
CreateHRFromWin32(DWORD dwError = GetLastError())
{
    return (ERROR_SUCCESS == dwError) ? E_FAIL : HRESULT_FROM_WIN32(dwError);
}

inline HRESULT 
SafeGetModuleFileName(HMODULE hModule, LPTSTR lpBuffer, UINT nBufferLength)
{
    DWORD cch = GetModuleFileName(hModule, lpBuffer, nBufferLength);
    
    //
    // Make sure the buffer is zero terminated.
    //
    lpBuffer[nBufferLength-1] = 0;

    //
    // Check if the buffer is large enough or we have truncation.
    //
    return (0 == cch) ? CreateHRFromWin32() :
        (cch >= nBufferLength) ? CreateHRFromWin32(ERROR_INSUFFICIENT_BUFFER) : S_OK;
}

LONG COMObjects_GetCount();

#ifdef _GDIPLUS_H
// gdiplus utility functions
HRESULT Gdiplus2HRESULT(Gdiplus::Status status);
HRESULT LoadAndScaleBmp(LPCTSTR pszURL, UINT nWidth, UINT nHeight, Gdiplus::Bitmap **ppBmp);
HRESULT LoadAndScaleBmp(IStream *pStream, UINT nWidth, UINT nHeight, Gdiplus::Bitmap **ppBmp);
#endif // endif _GDIPLUS_H

// include the implementation of the template classes here
#include "tmplutil.inl"

#endif // endif _TMPLUTIL_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\simstr.h ===
/*******************************************************************************
*
*  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
*
*  TITLE:       SIMSTR.H
*
*  VERSION:     1.0
*
*  AUTHOR:      ShaunIv
*
*  DATE:        5/12/1998
*
*  DESCRIPTION: Simple string classes
*
*******************************************************************************/
#ifndef _SIMSTR_H_INCLUDED
#define _SIMSTR_H_INCLUDED

/*
* Simple string class.
*
* Template class:
*   CSimpleStringBase<CharType>
* Implementations:
*   CSimpleStringBase<wchar_t> CSimpleStringWide
*   CSimpleStringBase<char> CSimpleStringAnsi
*   CSimpleString = CSimpleString[Ansi|Wide] depending on UNICODE macro
* Inline functions:
*   CSimpleStringAnsi CSimpleStringConvert::AnsiString(CharType n)
*   CSimpleStringWide CSimpleStringConvert::WideString(CharType n)
*   CSimpleString     CSimpleStringConvert::NaturalString(CharType n)
* Macros:
*   IS_CHAR(CharType)
*   IS_WCHAR(CharType)
*/

#include <windows.h>
#include <stdarg.h>
#include <stdio.h>
#include <tchar.h>

//
// Disable the "conditional expression is constant" warning that is caused by
// the IS_CHAR and IS_WCHAR macros
//
#pragma warning( push )
#pragma warning( disable : 4127 )

#define IS_CHAR(x)     (sizeof(x) & sizeof(char))
#define IS_WCHAR(x)    (sizeof(x) & sizeof(wchar_t))

#ifndef ARRAYSIZE
    #define ARRAYSIZE(x)   (sizeof(x) / sizeof(x[0]))
#endif

template <class CharType>
class CSimpleStringBase
{
private:
    enum
    {
        c_nDefaultGranularity  = 16,   // Default number of extra characters to allocate when we have to grow
        c_nMaxLoadStringBuffer = 1024, // Maximum length of .RC string
        c_nMaxAutoDataLength   = 128   // Length of non-dynamically allocated string
    };

private:    
    //
    // If the string is less than c_nMaxAutoDataLength characters, it will be
    // stored here, instead of in a dynamically allocated buffer
    //
    CharType m_pstrAutoData[c_nMaxAutoDataLength];
    
    //
    // If we have to allocated data, it will be stored here
    //
    CharType *m_pstrData;

    //
    // Current maximum buffer size
    //
    UINT m_nMaxSize;

    //
    // Amount of extra space we allocate when we have to grow the buffer
    //
    UINT m_nGranularity;

private:

    //
    // Min, in case it isn't already defined
    //
    template <class NumberType>
    static NumberType Min( const NumberType &a, const NumberType &b )
    {
        return (a < b) ? a : b;
    }

public:
    
    //
    // Replacements (in some cases just wrappers) for strlen, strcpy, ...
    //
    static inline CharType   *GenericCopy( CharType *pstrTarget, const CharType *pstrSource );
    static inline CharType   *GenericCopyLength( CharType *pstrTarget, const CharType *pstrSource, UINT nSize );
    static inline UINT        GenericLength( const CharType *pstrStr );
    static inline CharType   *GenericConcatenate( CharType *pstrTarget, const CharType *pstrSource );
    static inline int         GenericCompare( const CharType *pstrTarget, const CharType *pstrSource );
    static inline int         GenericCompareNoCase( const CharType *pstrStrA, const CharType *pstrStrB );
    static inline int         GenericCompareLength( const CharType *pstrTarget, const CharType *pstrSource, UINT nLength );
    static inline CharType   *GenericCharNext( const CharType *pszStr );

private:
    //
    // Internal only helpers
    //
    bool EnsureLength( UINT nMaxSize );
    void DeleteStorage();
    static inline CharType *CreateStorage( UINT nCount );
    void Destroy();

public:
    //
    // Constructors and destructor
    //
    CSimpleStringBase();
    CSimpleStringBase( const CSimpleStringBase & );
    CSimpleStringBase( const CharType *szStr );
    CSimpleStringBase( CharType ch );
    CSimpleStringBase( UINT nResId, HMODULE hModule );
    virtual ~CSimpleStringBase();

    //
    // Various helpers
    //
    UINT Length() const;
    void Concat( const CSimpleStringBase &other );
    int Resize();
    UINT Truncate( UINT nLen );
    bool Assign( const CharType *szStr );
    bool Assign( const CSimpleStringBase & );
    void SetAt( UINT nIndex, CharType chValue );
    CharType &operator[](int index);
    const CharType &operator[](int index) const;

    //
    // Handy Win32 wrappers
    //
    CSimpleStringBase &Format( const CharType *strFmt, ... );
    CSimpleStringBase &Format( int nResId, HINSTANCE hInst, ... );
    CSimpleStringBase &GetWindowText( HWND hWnd );    
    bool SetWindowText( HWND hWnd );
    bool LoadString( UINT nResId, HMODULE hModule );
    bool Load( HKEY hRegKey, const CharType *pszValueName, const CharType *pszDefault=NULL );
    bool Store( HKEY hRegKey, const CharType *pszValueName, DWORD nType = REG_SZ );

    //
    // Operators
    //
    CSimpleStringBase &operator=( const CSimpleStringBase &other );
    CSimpleStringBase &operator=( const CharType *other );
    CSimpleStringBase &operator+=( const CSimpleStringBase &other );


    //
    // Convert this string and return the converted string
    //
    CSimpleStringBase ToUpper() const;
    CSimpleStringBase ToLower() const;

    //
    // Convert in place
    //
    CSimpleStringBase &MakeUpper();
    CSimpleStringBase &MakeLower();

    //
    // Remove leading and trailing spaces
    //
    CSimpleStringBase &TrimRight();
    CSimpleStringBase &TrimLeft();
    CSimpleStringBase &Trim();

    //
    // Reverse
    //
    CSimpleStringBase &Reverse();

    //
    // Searching
    //
    int Find( CharType cChar ) const;
    int Find( const CSimpleStringBase &other, UINT nStart=0 ) const;
    int ReverseFind( CharType cChar ) const;
    int ReverseFind( const CSimpleStringBase &other ) const;

    //
    // Substring copies
    //
    CSimpleStringBase SubStr( int nStart, int nCount=-1 ) const;

    CSimpleStringBase Left( int nCount ) const
    { 
        return SubStr( 0, nCount );
    }
    CSimpleStringBase Right( int nCount ) const
    {
        return SubStr( max(0,(int)Length()-nCount), -1 );
    }

    //
    // Comparison functions
    //
    int CompareNoCase( const CSimpleStringBase &other, int nLength=-1 ) const;
    int Compare( const CSimpleStringBase &other, int nLength=-1 ) const;
    bool MatchLastCharacter( CharType cChar ) const;

    //
    // Direct manipulation
    //
    CharType *GetBuffer( int nLength )
    {
        //
        // If the user passed 0, or we are able to allocate a string of the
        // requested length, return a pointer to the actual data.
        //
        if (!nLength || EnsureLength(nLength+1))
        {
            return m_pstrData;
        }
        return NULL;
    }

    //
    // Useful inlines
    //
    const CharType *String() const
    { 
        return m_pstrData;
    }
    UINT MaxSize() const
    {
        return m_nMaxSize;
    }
    UINT Granularity( UINT nGranularity )
    { 
        if (nGranularity>0)
        {
            m_nGranularity = nGranularity;
        }
        return m_nGranularity;
    }
    UINT Granularity() const
    {
        return m_nGranularity;
    }

    //
    // Implicit cast operator
    //
    operator const CharType *() const
    { 
        return String();
    }

    //
    // Sanity check
    //
    bool IsValid() const
    {
        return(NULL != m_pstrData);
    }
};

template <class CharType>
inline CharType *CSimpleStringBase<CharType>::GenericCopy( CharType *pszDest, const CharType *pszSource )
{
    CopyMemory( pszDest, pszSource, sizeof(CharType) * (GenericLength(pszSource) + 1) );
    return pszDest;
}

template <class CharType>
inline CharType *CSimpleStringBase<CharType>::GenericCharNext( const CharType *pszStr )
{
    if (IS_CHAR(*pszStr))
        return(CharType*)CharNextA((LPCSTR)pszStr);
    else if (!*pszStr)
        return(CharType*)pszStr;
    else return(CharType*)((LPWSTR)pszStr + 1);
}

template <class CharType>
inline CharType *CSimpleStringBase<CharType>::GenericCopyLength( CharType *pszTarget, const CharType *pszSource, UINT nCount )
{
    UINT nCopyLen = min( nCount, GenericLength(pszSource) + 1 );

    CopyMemory( pszTarget, pszSource, nCopyLen * sizeof(CharType) );

    if (nCopyLen < nCount)
    {
        pszTarget[nCopyLen] = 0;
    }
    return pszTarget;
}

template <class CharType>
inline UINT CSimpleStringBase<CharType>::GenericLength( const CharType *pszString )
{
    const CharType *eos = pszString;

    while (*eos++)
        ;
    return((UINT)(eos - pszString - 1));
}

template <class CharType>
inline CharType*CSimpleStringBase<CharType>::GenericConcatenate( CharType *pszDest, const CharType *pszSource )
{
    CharType *pCurr = pszDest;

    while (*pCurr)
        pCurr++;

    CopyMemory( pCurr, pszSource, sizeof(CharType) * (GenericLength(pszSource) + 1) );

    return pszDest;
}


template <class CharType>
inline int CSimpleStringBase<CharType>::GenericCompare( const CharType *pszSource, const CharType *pszDest )
{
#if defined(DBG) && !defined(UNICODE) && !defined(_UNICODE)
    if (sizeof(CharType) == sizeof(wchar_t))
    {
        OutputDebugString(TEXT("CompareStringW is not supported under win9x, so this call is going to fail!"));
    }
#endif
    int nRes = IS_CHAR(*pszSource) ?
               CompareStringA( LOCALE_USER_DEFAULT, 0, (LPCSTR)pszSource, -1, (LPCSTR)pszDest, -1 ) :
               CompareStringW( LOCALE_USER_DEFAULT, 0, (LPCWSTR)pszSource, -1, (LPCWSTR)pszDest, -1 );
    switch (nRes)
    {
    case CSTR_LESS_THAN:
        return -1;
    case CSTR_GREATER_THAN:
        return 1;
    default:
        return 0;
    }
}


template <class CharType>
inline int CSimpleStringBase<CharType>::GenericCompareNoCase( const CharType *pszSource, const CharType *pszDest )
{
#if defined(DBG) && !defined(UNICODE) && !defined(_UNICODE)
    if (sizeof(CharType) == sizeof(wchar_t))
    {
        OutputDebugString(TEXT("CompareStringW is not supported under win9x, so this call is going to fail!"));
    }
#endif
    int nRes = IS_CHAR(*pszSource) ?
               CompareStringA( LOCALE_USER_DEFAULT, NORM_IGNORECASE, (LPCSTR)pszSource, -1, (LPCSTR)pszDest, -1 ) :
               CompareStringW( LOCALE_USER_DEFAULT, NORM_IGNORECASE, (LPCWSTR)pszSource, -1, (LPCWSTR)pszDest, -1 );
    switch (nRes)
    {
    case CSTR_LESS_THAN:
        return -1;
    case CSTR_GREATER_THAN:
        return 1;
    default:
        return 0;
    }
}

template <class CharType>
inline int CSimpleStringBase<CharType>::GenericCompareLength( const CharType *pszStringA, const CharType *pszStringB, UINT nLength )
{
#if defined(DBG) && !defined(UNICODE) && !defined(_UNICODE)
    if (sizeof(CharType) == sizeof(wchar_t))
    {
        OutputDebugString(TEXT("CompareStringW is not supported under win9x, so this call is going to fail!"));
    }
#endif
    if (!nLength)
        return(0);
    int nRes = IS_CHAR(*pszStringA) ?
               CompareStringA( LOCALE_USER_DEFAULT, 0, (LPCSTR)pszStringA, Min(nLength,CSimpleStringBase<CHAR>::GenericLength((LPCSTR)pszStringA)), (LPCSTR)pszStringB, Min(nLength,CSimpleStringBase<CHAR>::GenericLength((LPCSTR)pszStringB)) ) :
               CompareStringW( LOCALE_USER_DEFAULT, 0, (LPWSTR)pszStringA, Min(nLength,CSimpleStringBase<WCHAR>::GenericLength((LPCWSTR)pszStringA)), (LPCWSTR)pszStringB, Min(nLength,CSimpleStringBase<WCHAR>::GenericLength((LPCWSTR)pszStringB)) );
    switch (nRes)
    {
    case CSTR_LESS_THAN:
        return -1;
    case CSTR_GREATER_THAN:
        return 1;
    default:
        return 0;
    }
}

template <class CharType>
bool CSimpleStringBase<CharType>::EnsureLength( UINT nMaxSize )
{
    //
    // If the string is already long enough, just return true
    //
    if (m_nMaxSize >= nMaxSize)
    {
        return true;
    }

    // Get the new size
    //
    UINT nNewMaxSize = nMaxSize + m_nGranularity;

    //
    // Allocate the new buffer
    //
    CharType *pszTmp = CreateStorage(nNewMaxSize);

    //
    // Make sure the allocation succeded
    //
    if (pszTmp)
    {
        //
        // If we have an existing string, copy it and delete it
        //
        if (m_pstrData)
        {
            GenericCopy(pszTmp,m_pstrData);
            DeleteStorage();
        }

        //
        // Save the new max size
        //
        m_nMaxSize = nNewMaxSize;

        //
        // Save this new string
        //
        m_pstrData = pszTmp;

        //
        // Return success
        //
        return true;
    }

    //
    // Couldn't allocate memory
    //
    return false;
}

template <class CharType>
CSimpleStringBase<CharType> &CSimpleStringBase<CharType>::GetWindowText( HWND hWnd )
{
    Destroy();
    // Assume it didn't work
    bool bSuccess = false;
    int nLen = ::GetWindowTextLength(hWnd);
    if (nLen)
    {
        if (EnsureLength(nLen+1))
        {
            if (::GetWindowText( hWnd, m_pstrData, (nLen+1) ))
            {
                bSuccess = true;
            }
        }
    }
    if (!bSuccess)
        Destroy();
    return *this;
}

template <class CharType>
bool CSimpleStringBase<CharType>::SetWindowText( HWND hWnd )
{
    return(::SetWindowText( hWnd, String() ) != FALSE);
}

template <class CharType>
UINT CSimpleStringBase<CharType>::Truncate( UINT nLen )
{
    if (Length() < nLen)
        return Length();
    if (!nLen)
        return 0;
    m_pstrData[nLen-1] = 0;
    Resize();
    return Length();
}

template <class CharType>
int CSimpleStringBase<CharType>::Resize()
{
    m_nMaxSize = m_pstrData ? GenericLength(m_pstrData) : 0;
    ++m_nMaxSize;
    CharType *pszTmp = CreateStorage(m_nMaxSize);
    if (pszTmp)
    {
        if (m_pstrData)
        {
            GenericCopy(pszTmp,m_pstrData);
            DeleteStorage();
        }
        else *pszTmp = 0;
        m_pstrData = pszTmp;
    }
    return Length();
}

template <class CharType>
CSimpleStringBase<CharType>::CSimpleStringBase()
  : m_pstrData(m_pstrAutoData),
    m_nMaxSize(ARRAYSIZE(m_pstrAutoData)),
    m_nGranularity(c_nDefaultGranularity)
{
    m_pstrAutoData[0] = 0;
    CharType szTmp[1] = { 0};
    Assign(szTmp);
}

template <class CharType>
CSimpleStringBase<CharType>::CSimpleStringBase( const CSimpleStringBase &other )
  : m_pstrData(m_pstrAutoData),
    m_nMaxSize(ARRAYSIZE(m_pstrAutoData)),
    m_nGranularity(c_nDefaultGranularity)
{
    m_pstrAutoData[0] = 0;
    Assign(other.String());
}

template <class CharType>
CSimpleStringBase<CharType>::CSimpleStringBase( const CharType *szStr )
  : m_pstrData(m_pstrAutoData),
    m_nMaxSize(ARRAYSIZE(m_pstrAutoData)),
    m_nGranularity(c_nDefaultGranularity)
{
    m_pstrAutoData[0] = 0;
    Assign(szStr);
}

template <class CharType>
CSimpleStringBase<CharType>::CSimpleStringBase( CharType ch )
  : m_pstrData(m_pstrAutoData),
    m_nMaxSize(ARRAYSIZE(m_pstrAutoData)),
    m_nGranularity(c_nDefaultGranularity)
{
    m_pstrAutoData[0] = 0;
    CharType szTmp[2];
    szTmp[0] = ch;
    szTmp[1] = 0;
    Assign(szTmp);
}


template <class CharType>
CSimpleStringBase<CharType>::CSimpleStringBase( UINT nResId, HMODULE hModule )
  : m_pstrData(m_pstrAutoData),
    m_nMaxSize(ARRAYSIZE(m_pstrAutoData)),
    m_nGranularity(c_nDefaultGranularity)
{
    m_pstrAutoData[0] = 0;
    LoadString( nResId, hModule );
}

template <>
inline CSimpleStringBase<WCHAR> &CSimpleStringBase<WCHAR>::Format( const WCHAR *strFmt, ... )
{
    WCHAR szTmp[1024] = {0};
    va_list arglist;

    va_start(arglist, strFmt);
    _vsnwprintf( szTmp, ARRAYSIZE(szTmp)-1, strFmt, arglist );
    va_end(arglist);
    Assign(szTmp);
    return *this;
}

template <>
inline CSimpleStringBase<CHAR> &CSimpleStringBase<CHAR>::Format( const CHAR *strFmt, ... )
{
    CHAR szTmp[1024] = {0};
    va_list arglist;

    va_start(arglist, strFmt);
    _vsnprintf( szTmp, ARRAYSIZE(szTmp)-1, strFmt, arglist );
    va_end(arglist);
    Assign(szTmp);
    return *this;
}


template <>
inline CSimpleStringBase<CHAR> &CSimpleStringBase<CHAR>::Format( int nResId, HINSTANCE hInst, ... )
{
    CSimpleStringBase<CHAR> strFmt;
    if (strFmt.LoadString(nResId,hInst))
    {
        CHAR szTmp[1024] = {0};
        
        va_list arglist;
        va_start(arglist, hInst);
        _vsnprintf( szTmp, ARRAYSIZE(szTmp)-1, strFmt, arglist );
        va_end(arglist);
        Assign(szTmp);
    }
    else Assign(NULL);
    return *this;
}

template <>
inline CSimpleStringBase<WCHAR> &CSimpleStringBase<WCHAR>::Format( int nResId, HINSTANCE hInst, ... )
{
    CSimpleStringBase<WCHAR> strFmt;
    if (strFmt.LoadString(nResId,hInst))
    {
        WCHAR szTmp[1024] = {0};
        
        va_list arglist;
        va_start(arglist, hInst);
        _vsnwprintf( szTmp, ARRAYSIZE(szTmp)-1, strFmt, arglist );
        va_end(arglist);
        Assign(szTmp);
    }
    else Assign(NULL);
    return *this;
}


template <>
inline bool CSimpleStringBase<CHAR>::LoadString( UINT nResId, HMODULE hModule )
{
    if (!hModule)
    {
        hModule = GetModuleHandle(NULL);
    }
    CHAR szTmp[c_nMaxLoadStringBuffer] = {0};
    int nRet = ::LoadStringA( hModule, nResId, szTmp, ARRAYSIZE(szTmp));
    return nRet ? Assign(szTmp) : Assign(NULL);
}

template <>
inline bool CSimpleStringBase<WCHAR>::LoadString( UINT nResId, HMODULE hModule )
{
    if (!hModule)
    {
        hModule = GetModuleHandle(NULL);
    }
    WCHAR szTmp[c_nMaxLoadStringBuffer] = {0};
    int nRet = ::LoadStringW( hModule, nResId, szTmp, ARRAYSIZE(szTmp));
    return nRet ? Assign(szTmp) : Assign(NULL);
}


template <class CharType>
CSimpleStringBase<CharType>::~CSimpleStringBase()
{
    Destroy();
}

template <class CharType>
void CSimpleStringBase<CharType>::DeleteStorage()
{
    //
    // Only delete the string if it is non-NULL and not pointing to our non-dynamically allocated buffer
    //
    if (m_pstrData && m_pstrData != m_pstrAutoData)
    {
        delete[] m_pstrData;
    }
    m_pstrData = NULL;
}

template <class CharType>
CharType *CSimpleStringBase<CharType>::CreateStorage( UINT nCount )
{
    return new CharType[nCount];
}

template <class CharType>
void CSimpleStringBase<CharType>::Destroy()
{
    DeleteStorage();
    m_nMaxSize = 0;
}

template <class CharType>
UINT CSimpleStringBase<CharType>::Length() const
{
    return(m_pstrData ? GenericLength(m_pstrData) : 0);
}

template <class CharType>
CSimpleStringBase<CharType> &CSimpleStringBase<CharType>::operator=( const CSimpleStringBase &other )
{
    if (&other != this)
    {
        Assign(other.String());
    }
    return *this;
}

template <class CharType>
CSimpleStringBase<CharType> &CSimpleStringBase<CharType>::operator=( const CharType *other )
{
    if (other != String())
    {
        Assign(other);
    }
    return *this;
}

template <class CharType>
CSimpleStringBase<CharType> &CSimpleStringBase<CharType>::operator+=( const CSimpleStringBase &other )
{
    Concat(other.String());
    return *this;
}

template <class CharType>
bool CSimpleStringBase<CharType>::Assign( const CharType *szStr )
{
    if (szStr && EnsureLength(GenericLength(szStr)+1))
    {
        GenericCopy(m_pstrData,szStr);
    }
    else if (EnsureLength(1))
    {
        *m_pstrData = 0;
    }
    else Destroy();
    return(NULL != m_pstrData);
}

template <class CharType>
bool CSimpleStringBase<CharType>::Assign( const CSimpleStringBase &other )
{
    return Assign( other.String() );
}

template <class CharType>
void CSimpleStringBase<CharType>::SetAt( UINT nIndex, CharType chValue )
{
    //
    // Make sure we don't go off the end of the string or overwrite the '\0'
    //
    if (m_pstrData && Length() > nIndex)
    {
        m_pstrData[nIndex] = chValue;
    }
}


template <class CharType>
void CSimpleStringBase<CharType>::Concat( const CSimpleStringBase &other )
{
    if (EnsureLength( Length() + other.Length() + 1 ))
    {
        GenericConcatenate(m_pstrData,other.String());
    }
}

template <class CharType>
CSimpleStringBase<CharType> &CSimpleStringBase<CharType>::MakeUpper()
{
    //
    // Make sure the string is not NULL
    //
    if (m_pstrData)
    {
        IS_CHAR(*m_pstrData) ? CharUpperBuffA( (LPSTR)m_pstrData, Length() ) : CharUpperBuffW( (LPWSTR)m_pstrData, Length() );
    }
    return *this;
}

template <class CharType>
CSimpleStringBase<CharType> &CSimpleStringBase<CharType>::MakeLower()
{
    //
    // Make sure the string is not NULL
    //
    if (m_pstrData)
    {
        IS_CHAR(*m_pstrData) ? CharLowerBuffA( (LPSTR)m_pstrData, Length() ) : CharLowerBuffW( (LPWSTR)m_pstrData, Length() );
    }
    return *this;
}

template <class CharType>
CSimpleStringBase<CharType> CSimpleStringBase<CharType>::ToUpper() const
{
    CSimpleStringBase str(*this);
    str.MakeUpper();
    return str;
}

template <class CharType>
CSimpleStringBase<CharType> CSimpleStringBase<CharType>::ToLower() const
{
    CSimpleStringBase str(*this);
    str.MakeLower();
    return str;
}

template <class CharType>
CharType &CSimpleStringBase<CharType>::operator[](int nIndex)
{
    return m_pstrData[nIndex];
}

template <class CharType>
const CharType &CSimpleStringBase<CharType>::operator[](int index) const
{
    return m_pstrData[index];
}

template <class CharType>
CSimpleStringBase<CharType> &CSimpleStringBase<CharType>::TrimRight()
{
    CharType *pFirstWhitespaceCharacterInSequence = NULL;
    bool bInWhiteSpace = false;
    CharType *pszPtr = m_pstrData;
    while (pszPtr && *pszPtr)
    {
        if (*pszPtr == L' ' || *pszPtr == L'\t' || *pszPtr == L'\n' || *pszPtr == L'\r')
        {
            if (!bInWhiteSpace)
            {
                pFirstWhitespaceCharacterInSequence = pszPtr;
                bInWhiteSpace = true;
            }
        }
        else
        {
            bInWhiteSpace = false;
        }
        pszPtr = GenericCharNext(pszPtr);
    }
    if (pFirstWhitespaceCharacterInSequence && bInWhiteSpace)
        *pFirstWhitespaceCharacterInSequence = 0;
    return *this;
}

template <class CharType>
CSimpleStringBase<CharType> &CSimpleStringBase<CharType>::TrimLeft()
{
    CharType *pszPtr = m_pstrData;
    while (pszPtr && *pszPtr)
    {
        if (*pszPtr == L' ' || *pszPtr == L'\t' || *pszPtr == L'\n' || *pszPtr == L'\r')
        {
            pszPtr = GenericCharNext(pszPtr);
        }
        else break;
    }
    Assign(CSimpleStringBase<CharType>(pszPtr).String());
    return *this;
}

template <class CharType>
inline CSimpleStringBase<CharType> &CSimpleStringBase<CharType>::Trim()
{
    TrimLeft();
    TrimRight();
    return *this;
}

//
// Note that this function WILL NOT WORK CORRECTLY for multi-byte characters in ANSI strings
//
template <class CharType>
CSimpleStringBase<CharType> &CSimpleStringBase<CharType>::Reverse()
{
    UINT nLen = Length();
    for (UINT i = 0;i<nLen/2;i++)
    {
        CharType tmp = m_pstrData[i];
        m_pstrData[i] = m_pstrData[nLen-i-1];
        m_pstrData[nLen-i-1] = tmp;
    }
    return *this;
}

template <class CharType>
int CSimpleStringBase<CharType>::Find( CharType cChar ) const
{
    CharType strTemp[2] = { cChar, 0};
    return Find(strTemp);
}


template <class CharType>
int CSimpleStringBase<CharType>::Find( const CSimpleStringBase &other, UINT nStart ) const
{
    if (!m_pstrData)
        return -1;
    if (nStart > Length())
        return -1;
    CharType *pstrCurr = m_pstrData+nStart, *pstrSrc, *pstrSubStr;
    while (*pstrCurr)
    {
        pstrSrc = pstrCurr;
        pstrSubStr = (CharType *)other.String();
        while (*pstrSrc && *pstrSubStr && *pstrSrc == *pstrSubStr)
        {
            pstrSrc = GenericCharNext(pstrSrc);
            pstrSubStr = GenericCharNext(pstrSubStr);
        }
        if (!*pstrSubStr)
            return static_cast<int>(pstrCurr-m_pstrData);
        pstrCurr = GenericCharNext(pstrCurr);
    }
    return -1;
}

template <class CharType>
int CSimpleStringBase<CharType>::ReverseFind( CharType cChar ) const
{
    CharType strTemp[2] = { cChar, 0};
    return ReverseFind(strTemp);
}

template <class CharType>
int CSimpleStringBase<CharType>::ReverseFind( const CSimpleStringBase &srcStr ) const
{
    int nLastFind = -1, nFind=0;
    while ((nFind = Find( srcStr, nFind )) >= 0)
    {
        nLastFind = nFind;
        ++nFind;
    }
    return nLastFind;
}

template <class CharType>
CSimpleStringBase<CharType> CSimpleStringBase<CharType>::SubStr( int nStart, int nCount ) const
{
    if (nStart >= (int)Length() || nStart < 0)
    {
        return CSimpleStringBase<CharType>();
    }
    if (nCount < 0)
    {
        nCount = Length() - nStart;
    }
    CSimpleStringBase<CharType> strTmp;
    CharType *pszTmp = CreateStorage(nCount+1);
    if (pszTmp)
    {
        GenericCopyLength( pszTmp, m_pstrData+nStart, nCount+1 );
        pszTmp[nCount] = 0;
        strTmp = pszTmp;
        delete[] pszTmp;
    }
    return strTmp;
}

template <class CharType>
int CSimpleStringBase<CharType>::CompareNoCase( const CSimpleStringBase &other, int nLength ) const
{
    if (nLength < 0)
    {
        //
        // Make sure both strings are non-NULL
        //
        if (!String() && !other.String())
        {
            return 0;
        }
        else if (!String())
        {
            return -1;
        }
        else if (!other.String())
        {
            return 1;
        }
        else return GenericCompareNoCase(m_pstrData,other.String());
    }
    CSimpleStringBase<CharType> strSrc(*this);
    CSimpleStringBase<CharType> strTgt(other);
    strSrc.MakeUpper();
    strTgt.MakeUpper();
    //
    // Make sure both strings are non-NULL
    //
    if (!strSrc.String() && !strTgt.String())
    {
        return 0;
    }
    else if (!strSrc.String())
    {
        return -1;
    }
    else if (!strTgt.String())
    {
        return 1;
    }
    else return GenericCompareLength(strSrc.String(),strTgt.String(),nLength);
}


template <class CharType>
int CSimpleStringBase<CharType>::Compare( const CSimpleStringBase &other, int nLength ) const
{
    //
    // Make sure both strings are non-NULL
    //
    if (!String() && !other.String())
    {
        return 0;
    }
    else if (!String())
    {
        return -1;
    }
    else if (!other.String())
    {
        return 1;
    }

    if (nLength < 0)
    {
        return GenericCompare(String(),other.String());
    }
    return GenericCompareLength(String(),other.String(),nLength);
}

template <class CharType>
bool CSimpleStringBase<CharType>::MatchLastCharacter( CharType cChar ) const
{
    int nFind = ReverseFind(cChar);
    if (nFind < 0)
        return false;
    if (nFind == (int)Length()-1)
        return true;
    else return false;
}

template <class CharType>
bool CSimpleStringBase<CharType>::Load( HKEY hRegKey, const CharType *pszValueName, const CharType *pszDefault )
{
    bool bResult = false;
    Assign(pszDefault);
    DWORD nType=0;
    DWORD nSize=0;
    LONG nRet;
    if (IS_CHAR(*m_pstrData))
        nRet = RegQueryValueExA( hRegKey, (LPCSTR)pszValueName, NULL, &nType, NULL, &nSize);
    else nRet = RegQueryValueExW( hRegKey, (LPCWSTR)pszValueName, NULL, &nType, NULL, &nSize);
    if (ERROR_SUCCESS == nRet)
    {
        if ((nType == REG_SZ) || (nType == REG_EXPAND_SZ))
        {
            // Round up to the nearest 2
            nSize = ((nSize + 1) & 0xFFFFFFFE);
            CharType *pstrTemp = CreateStorage(nSize / sizeof(CharType));
            if (pstrTemp)
            {
                if (IS_CHAR(*m_pstrData))
                    nRet = RegQueryValueExA( hRegKey, (LPCSTR)pszValueName, NULL, &nType, (PBYTE)pstrTemp, &nSize);
                else nRet = RegQueryValueExW( hRegKey, (LPCWSTR)pszValueName, NULL, &nType, (PBYTE)pstrTemp, &nSize);
                if (ERROR_SUCCESS == nRet)
                {
                    Assign(pstrTemp);
                    bResult = true;
                }
                delete pstrTemp;
            }
        }
    }
    return bResult;
}

template <class CharType>
bool CSimpleStringBase<CharType>::Store( HKEY hRegKey, const CharType *pszValueName, DWORD nType )
{
    long nRet;
    if (Length())
    {
        if (IS_CHAR(*m_pstrData))
        {
            nRet = RegSetValueExA( hRegKey, (LPCSTR)pszValueName, 0, nType, (PBYTE)m_pstrData, sizeof(*m_pstrData)*(Length()+1) );
        }
        else
        {
            nRet = RegSetValueExW( hRegKey, (LPCWSTR)pszValueName, 0, nType, (PBYTE)m_pstrData, sizeof(*m_pstrData)*(Length()+1) );
        }
    }
    else
    {
        CharType strBlank = 0;
        if (IS_CHAR(*m_pstrData))
        {
            nRet = RegSetValueExA( hRegKey, (LPCSTR)pszValueName, 0, nType, (PBYTE)&strBlank, sizeof(CharType) );
        }
        else
        {
            nRet = RegSetValueExW( hRegKey, (LPCWSTR)pszValueName, 0, nType, (PBYTE)&strBlank, sizeof(CharType) );
        }
    }
    return(ERROR_SUCCESS == nRet);
}


//
// Two main typedefs
//
typedef CSimpleStringBase<char>     CSimpleStringAnsi;
typedef CSimpleStringBase<wchar_t>  CSimpleStringWide;

//
// LPCTSTR equivalents
//
#if defined(UNICODE) || defined(_UNICODE)
typedef CSimpleStringWide CSimpleString;
#else
typedef CSimpleStringAnsi CSimpleString;
#endif

//
// Operators
//
inline bool operator<( const CSimpleStringAnsi &a, const CSimpleStringAnsi &b )
{
    return a.Compare(b) < 0;
}

inline bool operator<( const CSimpleStringWide &a, const CSimpleStringWide &b )
{
    return a.Compare(b) < 0;
}

inline bool operator<=( const CSimpleStringAnsi &a, const CSimpleStringAnsi &b )
{
    return a.Compare(b) <= 0;
}

inline bool operator<=( const CSimpleStringWide &a, const CSimpleStringWide &b )
{
    return a.Compare(b) <= 0;
}

inline bool operator==( const CSimpleStringAnsi &a, const CSimpleStringAnsi &b )
{
    return a.Compare(b) == 0;
}

inline bool operator==( const CSimpleStringWide &a, const CSimpleStringWide &b )
{
    return a.Compare(b) == 0;
}

inline bool operator!=( const CSimpleStringAnsi &a, const CSimpleStringAnsi &b )
{
    return a.Compare(b) != 0;
}

inline bool operator!=( const CSimpleStringWide &a, const CSimpleStringWide &b )
{
    return a.Compare(b) != 0;
}

inline bool operator>=( const CSimpleStringAnsi &a, const CSimpleStringAnsi &b )
{
    return a.Compare(b) >= 0;
}

inline bool operator>=( const CSimpleStringWide &a, const CSimpleStringWide &b )
{
    return a.Compare(b) >= 0;
}

inline bool operator>( const CSimpleStringAnsi &a, const CSimpleStringAnsi &b )
{
    return a.Compare(b) > 0;
}

inline bool operator>( const CSimpleStringWide &a, const CSimpleStringWide &b )
{
    return a.Compare(b) > 0;
}

inline CSimpleStringWide operator+( const CSimpleStringWide &a, const CSimpleStringWide &b )
{
    CSimpleStringWide strResult(a);
    strResult.Concat(b);
    return strResult;
}

inline CSimpleStringAnsi operator+( const CSimpleStringAnsi &a, const CSimpleStringAnsi &b )
{
    CSimpleStringAnsi strResult(a);
    strResult.Concat(b);
    return strResult;
}

namespace CSimpleStringConvert
{
    inline
    CSimpleStringWide WideString( const CSimpleStringWide &strSource )
    {
        //
        // Just return the source string
        //
        return strSource;
    }


    inline
    CSimpleStringAnsi AnsiString( const CSimpleStringAnsi &strSource )
    {
        //
        // Just return the source string
        //
        return strSource;
    }

    inline
    CSimpleStringWide WideString( const CSimpleStringAnsi &strSource )
    {
        //
        // Declare the return value.  If anything goes wrong, it will contain an empty string
        //
        CSimpleStringWide strResult;

        //
        // Make sure we have a string
        //
        if (strSource.Length())
        {
            //
            // Find out how long it needs to be
            //
            int nLength = MultiByteToWideChar( CP_ACP, MB_PRECOMPOSED, strSource.String(), strSource.Length()+1, NULL, 0 );
            if (nLength)
            {
                //
                //  Allocate a temporary buffer to hold the converted string
                //
                LPWSTR pwszBuffer = new WCHAR[nLength];
                if (pwszBuffer)
                {
                    //
                    // Convert the string
                    //
                    if (MultiByteToWideChar( CP_ACP, MB_PRECOMPOSED, strSource.String(), strSource.Length()+1, pwszBuffer, nLength ))
                    {
                        //
                        // Save the result
                        //
                        strResult = pwszBuffer;
                    }
                    //
                    // Free the temporary buffer
                    //
                    delete[] pwszBuffer;
                }
            }
        }
        
        //
        // Return the result
        //
        return strResult;
    }

    inline
    CSimpleStringAnsi AnsiString( const CSimpleStringWide &strSource )
    {
        //
        // Declare the return value.  If anything goes wrong, it will contain an empty string
        //
        CSimpleStringAnsi strResult;

        //
        // Make sure we have a valid string
        //
        if (strSource.Length())
        {
            //
            // Figure out how long it needs to be
            //
            int nLength = WideCharToMultiByte( CP_ACP, 0, strSource, strSource.Length()+1, NULL, 0, NULL, NULL );
            if (nLength)
            {
                //
                // Allocate a temporary buffer to hold it
                //
                LPSTR pszBuffer = new CHAR[nLength];
                if (pszBuffer)
                {
                    //
                    // Convert the string
                    //
                    if (WideCharToMultiByte( CP_ACP, 0, strSource, strSource.Length()+1, pszBuffer, nLength, NULL, NULL ))
                    {
                        //
                        // Save the result
                        //
                        strResult = pszBuffer;
                    }                

                    //
                    // Save the temporary buffer
                    //
                    delete[] pszBuffer;
                }
            }
        }
        
        //
        // Return the result
        //
        return strResult;
    }

    inline
    CSimpleStringWide FromUtf8( const CSimpleStringAnsi &strSource )
    {
        //
        // Declare the return value.  If anything goes wrong, it will contain an empty string
        //
        CSimpleStringWide strResult;

        //
        // Make sure we have a valid source string
        //
        if (strSource.Length())
        {
            //
            // Find the required target string length
            //
            int nLength = MultiByteToWideChar( CP_UTF8, 0, strSource, strSource.Length()+1, NULL, 0 );
            if (nLength)
            {
                //
                // Allocate a temporary buffer
                //
                LPWSTR pwszBuffer = new WCHAR[nLength];
                if (pwszBuffer)
                {
                    //
                    // Convert the string
                    //
                    if (MultiByteToWideChar( CP_UTF8, 0, strSource.String(), strSource.Length()+1, pwszBuffer, nLength ))
                    {
                        //
                        // Save the result
                        //
                        strResult = pwszBuffer;
                    }

                    //
                    // Delete the temporary buffer
                    //
                    delete[] pwszBuffer;
                }
            }
        }
        
        //
        // Return the result
        //
        return strResult;
    }

    inline
    CSimpleStringAnsi ToUtf8( const CSimpleStringWide &strSource )
    {
        //
        // Declare the return value.  If anything goes wrong, it will contain an empty string
        //
        CSimpleStringAnsi strResult;

        //
        // Make sure we have a valid source string
        //
        if (strSource.Length())
        {
            int nLength = WideCharToMultiByte( CP_UTF8, 0, strSource, strSource.Length()+1, NULL, 0, NULL, NULL );
            if (nLength)
            {
                //
                // Find the required target string length
                //
                LPSTR pszBuffer = new CHAR[nLength];
                if (pszBuffer)
                {
                    //
                    // Convert the string
                    //
                    if (WideCharToMultiByte( CP_UTF8, 0, strSource, strSource.Length()+1, pszBuffer, nLength, NULL, NULL ))
                    {
                        //
                        // Save the result
                        //
                        strResult = pszBuffer;
                    }

                    //
                    // Delete the temporary buffer
                    //
                    delete[] pszBuffer;
                }
            }
        }

        //
        // Return the result
        //
        return strResult;
    }

#if defined(_UNICODE) || defined(UNICODE)
    template <class CharType>
    CSimpleStringWide NaturalString(const CharType &strSource)
    {
        return WideString(strSource);
    }
#else
    template <class CharType>
    CSimpleStringAnsi NaturalString(const CharType &strSource)
    {
        return AnsiString(strSource);
    }
#endif

    inline CSimpleString NumberToString( int nNumber, LCID Locale=LOCALE_USER_DEFAULT )
    {
        //
        // This turns a string into a number, like so: 3;2;0=32 or 3;0 = 3 or 1;2;3;4;5;6;0 = 123456.  Got it?
        //
        TCHAR szDigitGrouping[32] = {0};
        GetLocaleInfo( Locale, LOCALE_SGROUPING, szDigitGrouping, ARRAYSIZE(szDigitGrouping));
        
        //
        // Initialize the number format
        //
        NUMBERFMT NumberFormat = {0};
        for (LPTSTR pszCurr = szDigitGrouping; *pszCurr && *pszCurr >= TEXT('1') && *pszCurr <= TEXT('9'); pszCurr += 2)
        {
            NumberFormat.Grouping *= 10;
            NumberFormat.Grouping += (*pszCurr - TEXT('0'));
        }
        
        //
        // Get the thousands separator
        //
        TCHAR szThousandsSeparator[32] = {0};
        GetLocaleInfo( Locale, LOCALE_STHOUSAND, szThousandsSeparator, ARRAYSIZE(szThousandsSeparator));
        NumberFormat.lpThousandSep = szThousandsSeparator;

        //
        // Get the decimal separator
        //
        TCHAR szDecimalSeparator[32] = {0};
        GetLocaleInfo( Locale, LOCALE_SDECIMAL, szDecimalSeparator, ARRAYSIZE(szDecimalSeparator));
        NumberFormat.lpDecimalSep = szDecimalSeparator;

        //
        // Create the raw number string
        //
        TCHAR szRawNumber[MAX_PATH] = {0};
        _sntprintf( szRawNumber, ARRAYSIZE(szRawNumber)-1, TEXT("%d"), nNumber );
        
        //
        // Format the string
        //
        TCHAR szNumberStr[MAX_PATH] = {0};
        if (GetNumberFormat( Locale, 0, szRawNumber, &NumberFormat, szNumberStr, ARRAYSIZE(szNumberStr)))
        {
            return szNumberStr;
        }
        else
        {
            return TEXT("");
        }
    }
}  // End CSimpleStringConvert namespace


//
// Restore the warning state
//
#pragma warning( pop )

#endif  // ifndef _SIMSTR_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\w32utils.h ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       w32utils.h
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        23-Dec-2000
 *
 *  DESCRIPTION: Win32 templates & utilities
 *
 *****************************************************************************/

#ifndef _W32UTILS_H
#define _W32UTILS_H

// the generic smart pointers & handles
#include "gensph.h"

////////////////////////////////////////////////
//
// class CSimpleWndSubclass
//
// class implementing simple window subclassing
// (Windows specific classes)
//
typedef LRESULT type_WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
template <class inheritorClass>
class CSimpleWndSubclass
{
    WNDPROC m_wndDefProc;
    static LRESULT CALLBACK _ThunkWndProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
public:
    CSimpleWndSubclass(): m_hwnd(NULL), m_wndDefProc(NULL) { }
    CSimpleWndSubclass(HWND hwnd): m_hwnd(NULL), m_wndDefProc(NULL) { Attach(hwnd); }
    ~CSimpleWndSubclass() { Detach(); }

    // attach/detach
    BOOL IsAttached() const;
    BOOL Attach(HWND hwnd);
    BOOL Detach();

    // default subclass proc
    LRESULT WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

    // default proc(s)
    LRESULT DefWindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
    LRESULT DefDlgProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

    HWND m_hwnd;
};

////////////////////////////////////////////////
//
// class COleComInitializer
//
// smart OLE2, COM initializer - just declare 
// an instance wherever need to use COM, OLE2
//
class COleComInitializer
{
public:
    COleComInitializer(BOOL bOleInit = FALSE);
    ~COleComInitializer();
    operator BOOL () const;

private:
    HRESULT m_hr;
    BOOL m_bOleInit;
};

////////////////////////////////////////////////
//
// class CDllLoader
//
// smart DLL loader - calls LoadLibrary
// FreeLibrary for you.
//
class CDllLoader
{
public:
    CDllLoader(LPCTSTR pszDllName);
    ~CDllLoader();
    operator BOOL () const;
    FARPROC GetProcAddress( LPCSTR lpProcName );
    FARPROC GetProcAddress( WORD wProcOrd );

private:
    HMODULE m_hLib;
};

////////////////////////////////////////////////
// class CCookiesHolder
//
// this a utility class which allows us to pass more 
// than one pointer through a single cookie (pointer).
//
class CCookiesHolder
{
public:
    // construction/destruction
    CCookiesHolder();
    CCookiesHolder(UINT nCount);
    ~CCookiesHolder();

    // sets the count
    BOOL SetCount(UINT uCount);

    // returns the number of cookies here
    UINT GetCount() const
    { return m_uCount; } 

    // returns the cookie at this position
    template <class pType>
    pType GetCookie(UINT iIndex) const
    { 
        ASSERT(iIndex < m_uCount);
        return reinterpret_cast<pType>(m_pCookies[iIndex]);
    }

    // returns the previous cookie at this position
    template <class pType>
    pType SetCookie(UINT iIndex, pType pCookie)
    { 
        ASSERT(iIndex < m_uCount);
        pType pReturn = reinterpret_cast<pType>(m_pCookies[iIndex]);
        m_pCookies[iIndex] = reinterpret_cast<LPVOID>(pCookie);
        return pReturn;
    }

    // const & non-const operators [] 
    LPVOID  operator [] (UINT iIndex) const
    {
        ASSERT(iIndex < m_uCount);
        return m_pCookies[iIndex];
    }
    LPVOID& operator [] (UINT iIndex)
    {
        ASSERT(iIndex < m_uCount);
        return m_pCookies[iIndex];
    }

private:
    UINT m_uCount;
    LPVOID *m_pCookies;
};

////////////////////////////////////////////////
//
// template class CScopeLocker<TLOCK>
//
template <class TLOCK>
class CScopeLocker
{
public:
    CScopeLocker(TLOCK &lock): 
        m_Lock(lock), m_bLocked(false) 
    { 
        m_bLocked = m_Lock;
        if (m_bLocked) m_Lock.Lock(); 
    }

    ~CScopeLocker() 
    { if (m_bLocked) m_Lock.Unlock(); }

    operator bool () const 
    { return m_bLocked; }

private:
    bool m_bLocked;
    TLOCK &m_Lock;
};

////////////////////////////////////////////////
//
// class CCSLock - win32 critical section lock.
//
class CCSLock
{
public:
    // CCSLock::Locker should be used as locker class.
    typedef CScopeLocker<CCSLock> Locker;
   
    CCSLock(): m_bInitialized(false)
    { 
        BOOL bRet = InitializeCriticalSectionAndSpinCount(&m_CS, 1 << (sizeof(DWORD) * 8 - 1)); 

        if (bRet)
        {
            m_bInitialized = true;
        }
    }

    ~CCSLock()    
    { 
        if (m_bInitialized) 
        {
            // delete the critical section only if initialized successfully
            DeleteCriticalSection(&m_CS); 
        }
    }

    operator bool () const
    { 
        return m_bInitialized; 
    }

    void Lock()
    { 
        // EnterCriticalSection will not raise any exception since
        // we are using InitializeCriticalSectionAndSpinCount to 
        // initialize
        EnterCriticalSection(&m_CS); 
    }

    void Unlock() 
    {
        // Unlock() should be called *ONLY* if the corresponding 
        // Lock() call has succeeded.
        LeaveCriticalSection(&m_CS); 
    }

#if DBG
    // debug code...
    bool bInside()  const
    { 
        return (m_bInitialized && m_CS.OwningThread == DWORD2PTR(GetCurrentThreadId(), HANDLE)); 
    }
    bool bOutside() const 
    { 
        return (m_bInitialized && m_CS.OwningThread != DWORD2PTR(GetCurrentThreadId(), HANDLE)); 
    }
#endif

private:
    bool m_bInitialized;
    CRITICAL_SECTION m_CS;
};

////////////////////////////////////////////////
//
// class CSemaphoreLock -  simple semaphore lock.
//
class CSemaphoreLock
{
public:
    typedef CScopeLocker<CSemaphoreLock> Locker;

    CSemaphoreLock()  { }
    ~CSemaphoreLock() { }

    void Lock()   { ASSERT(m_shSemaphore); WaitForSingleObject(m_shSemaphore, INFINITE); }
    void Unlock() { ASSERT(m_shSemaphore); ReleaseSemaphore(m_shSemaphore, 1, NULL); }

    HRESULT Create(
        LONG lInitialCount,                                     // initial count
        LONG lMaximumCount,                                     // maximum count
        LPCTSTR lpName = NULL,                                  // object name
        LPSECURITY_ATTRIBUTES lpSemaphoreAttributes = NULL      // SD
        )
    {
        m_shSemaphore = CreateSemaphore(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName);
        return m_shSemaphore ? S_OK : E_OUTOFMEMORY;
    }

private:
    CAutoHandleNT m_shSemaphore;
};

// include the implementation of the template classes here
#include "w32utils.inl"

#endif // endif _W32UTILS_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\simreg.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       SIMREG.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        5/12/1998
 *
 *  DESCRIPTION: Simple registry access class
 *
 *******************************************************************************/
#ifndef __SIMREG_H_INCLUDED
#define __SIMREG_H_INCLUDED

#include <windows.h>
#include "simstr.h"

class CSimpleReg
{
private:
    CSimpleString         m_strKeyName;
    HKEY                  m_hRootKey;
    HKEY                  m_hKey;
    bool                  m_bCreate;
    LPSECURITY_ATTRIBUTES m_lpsaSecurityAttributes;
    REGSAM                m_samDesiredAccess;

public:
    // Process current node-->recurse
    //             or
    // recurse-->Process current node
    enum
    {
        PreOrder=0,
        PostOrder=1
    };

    // structure passed to key enumeration proc
    struct CKeyEnumInfo
    {
        CSimpleString strName;
        HKEY          hkRoot;
        int           nLevel;
        LPARAM        lParam;
    };

    // structure passed to value enumeration proc
    class CValueEnumInfo
    {
    private:
        // No implementation
        CValueEnumInfo(void);
        CValueEnumInfo &operator=( const CValueEnumInfo & );
        CValueEnumInfo( const CValueEnumInfo & );

    public:
        CValueEnumInfo( CSimpleReg &_reg, const CSimpleString &_strName, DWORD _nType, DWORD _nSize, LPARAM _lParam )
        : reg(_reg), strName(_strName), nType(_nType), nSize(_nSize), lParam(_lParam)
        {
        }
        CSimpleReg    &reg;
        CSimpleString  strName;
        DWORD          nType;
        DWORD          nSize;
        LPARAM         lParam;
    };

    // Enumeration procs
    typedef bool (*SimRegKeyEnumProc)( CKeyEnumInfo &enumInfo );
    typedef bool (*SimRegValueEnumProc)( CValueEnumInfo &enumInfo );

    // Constructors, destructor and assignment operator
    CSimpleReg( HKEY hkRoot, const CSimpleString &strSubKey, bool bCreate=false, REGSAM samDesired=KEY_ALL_ACCESS, LPSECURITY_ATTRIBUTES lpsa=NULL );
    CSimpleReg(void);
    CSimpleReg(const CSimpleReg &other);
    virtual ~CSimpleReg(void);
    CSimpleReg &operator=(const CSimpleReg &other );

    // Open and close
    bool Open(void);
    bool Close(void);
    bool Flush(void);

    // Key and value information
    DWORD Size( const CSimpleString &key ) const;
    DWORD Type( const CSimpleString &key ) const;
    DWORD SubKeyCount(void) const;

    // Query functions
    CSimpleString Query( const CSimpleString &strValueName, const CSimpleString &strDef ) const;
    LPTSTR        Query( const CSimpleString &strValueName, const CSimpleString &strDef, LPTSTR pszBuffer, DWORD nLen ) const;
    DWORD         Query( const CSimpleString &strValueName, DWORD nDef ) const;
    DWORD         QueryBin( const CSimpleString &strValueName, PBYTE pData, DWORD nMaxLen ) const;

    // Set functions
    bool Set( const CSimpleString &strValueName, const CSimpleString &strValue, DWORD nType=REG_SZ ) const;
    bool Set( const CSimpleString &strValueName, DWORD nValue ) const;
    bool SetBin( const CSimpleString &strValueName, const PBYTE pValue, DWORD nLen, DWORD dwType = REG_BINARY ) const;

    // Delete a value
    bool Delete( const CSimpleString &strValue );

    // Some static helpers
    static bool IsStringValue( DWORD nType );
    static HKEY GetHkeyFromName( const CSimpleString &strName );
    static bool Delete( HKEY hkRoot, const CSimpleString &stKeyName );
    static bool DeleteRecursively( HKEY hkRoot, const CSimpleString &strKeyName );

    // Inline accessor functions
    const LPSECURITY_ATTRIBUTES GetSecurityAttributes(void) const
    {
        return(m_lpsaSecurityAttributes);
    }
    CSimpleString GetSubKeyName(void) const
    {
        return(m_strKeyName);
    }
    bool GetCreate(void) const
    {
        return(m_bCreate);
    }
    HKEY GetRootKey(void) const
    {
        return(m_hRootKey);
    }
    HKEY GetKey(void) const
    {
        return(m_hKey);
    }
    REGSAM DesiredAccess(void) const
    {
        return m_samDesiredAccess;
    }

    // Status
    bool OK(void) const
    {
        return(m_hRootKey && m_hKey);
    }
    operator bool(void) const
    {
        return(OK());
    }

    operator HKEY(void) const
    {
        return(GetKey());
    }

    // Enumeration and recursion
    bool EnumValues( SimRegValueEnumProc enumProc, LPARAM lParam = 0 );
    bool RecurseKeys( SimRegKeyEnumProc enumProc, LPARAM lParam = 0, int recurseOrder = CSimpleReg::PostOrder, bool bFailOnOpenError = true ) const;
    bool EnumKeys( SimRegKeyEnumProc enumProc, LPARAM lParam = 0, bool bFailOnOpenError = true ) const;

protected:
    // Recursion and enumeration implementation
    static bool DoRecurseKeys( HKEY hkKey, const CSimpleString &root, SimRegKeyEnumProc enumProc, LPARAM lParam, int nLevel, int recurseOrder, bool bFailOnOpenError );
    static bool DoEnumKeys( HKEY hkKey, const CSimpleString &root, SimRegKeyEnumProc enumProc, LPARAM lParam, bool bFailOnOpenError );

    // Recursion proc that allows us to recursively nuke a registry tree
    static bool DeleteEnumKeyProc( CSimpleReg::CKeyEnumInfo &enumInfo );
};

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\wiadebug.h ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       WIADEBUG.H
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        9/6/1999
 *
 *  DESCRIPTION: Declarations for the debugging functions, macros and classes
 *
 *******************************************************************************/
#ifndef __WIADEBUG_H_INCLUDED
#define __WIADEBUG_H_INCLUDED

#include <windows.h>
#include "simcrit.h"

#if !defined(__cplusplus)
#error This library can only be used in c++ programs.
#endif

//
// Severity levels
//
enum
{
    WiaDebugSeverityNormal  = 0,
    WiaDebugSeverityWarning = 1,
    WiaDebugSeverityError   = 2
};


//
// Make sure these haven't already been defined.  This shouldn't normally be a problem.
//
#ifdef WIA_DEBUG_CREATE
#undef WIA_DEBUG_CREATE
#endif
#ifdef WIA_DEBUG_DESTROY
#undef WIA_DEBUG_DESTROY
#endif
#ifdef WIA_SET_TRACE_MASK
#undef WIA_SET_TRACE_MASK
#endif
#ifdef WIA_PUSHFUNCTION
#undef WIA_PUSHFUNCTION
#endif
#ifdef WIA_PUSH_FUNCTION
#undef WIA_PUSH_FUNCTION
#endif
#ifdef WIA_PUSHFUNCTION_MASK
#undef WIA_PUSHFUNCTION_MASK
#endif
#ifdef WIA_PUSH_FUNCTION_MASK
#undef WIA_PUSH_FUNCTION_MASK
#endif
#ifdef WIA_TRACE
#undef WIA_TRACE
#endif
#ifdef WIA_WARNING
#undef WIA_WARNING
#endif
#ifdef WIA_ERROR
#undef WIA_ERROR
#endif
#ifdef WIA_PRINTHRESULT
#undef WIA_PRINTHRESULT
#endif
#ifdef WIA_PRINTGUID
#undef WIA_PRINTGUID
#endif
#ifdef WIA_PRINTWINDOWMESSAGE
#undef WIA_PRINTWINDOWMESSAGE
#endif
#ifdef WIA_ASSERT
#undef WIA_ASSERT
#endif
#ifdef WIA_CHECK_HR
#undef WIA_CHECK_HR
#endif
#ifdef WIA_RETURN_HR
#undef WIA_RETURN_HR
#endif

//
// Turn of name mangling for exported/imported functions
//
extern "C"
{

//
// Exported functions
//
int      WINAPI IncrementDebugIndentLevel(void);
int      WINAPI DecrementDebugIndentLevel(void);
BOOL     WINAPI PrintDebugMessageW( DWORD dwSeverity, DWORD dwModuleMask, COLORREF crForegroundColor, COLORREF crBackgroundColor, LPCWSTR pszModuleName, LPCWSTR pszMsg );
BOOL     WINAPI PrintDebugMessageA( DWORD dwSeverity, DWORD dwModuleMask, COLORREF crForegroundColor, COLORREF crBackgroundColor, LPCSTR pszModuleName, LPCSTR pszMsg );
DWORD    WINAPI GetDebugMask(void);
DWORD    WINAPI SetDebugMask( DWORD dwNewMask );
COLORREF WINAPI AllocateDebugColor(void);
BOOL     WINAPI GetStringFromGuidA( const IID *pGuid, LPSTR pszString, int nMaxLen );
BOOL     WINAPI GetStringFromGuidW( const IID *pGuid, LPWSTR pszString, int nMaxLen );
VOID     WINAPI DoRecordAllocation( LPVOID pv, size_t Size );
VOID     WINAPI DoRecordFree( LPVOID pv );
BOOL     WINAPI GetStringFromMsgA( UINT uMsg, LPSTR pszString, int nMaxLen );
BOOL     WINAPI GetStringFromMsgW( UINT uMsg, LPWSTR pszString, int nMaxLen );

//
// Exported function typedefs
//
typedef int      (WINAPI *IncrementDebugIndentLevelProc)(void);
typedef int      (WINAPI *DecrementDebugIndentLevelProc)(void);
typedef BOOL     (WINAPI *PrintDebugMessageWProc)( DWORD, DWORD, COLORREF, COLORREF, LPCWSTR, LPCWSTR );
typedef BOOL     (WINAPI *PrintDebugMessageAProc)( DWORD, DWORD, COLORREF, COLORREF, LPCSTR, LPCSTR );
typedef DWORD    (WINAPI *GetDebugMaskProc)(void);
typedef DWORD    (WINAPI *SetDebugMaskProc)( DWORD );
typedef COLORREF (WINAPI *AllocateDebugColorProc)(void);
typedef BOOL     (WINAPI *GetStringFromGuidAProc)( const IID*, LPSTR, int );
typedef BOOL     (WINAPI *GetStringFromGuidWProc)( const IID*, LPWSTR, int );
typedef VOID     (WINAPI *DoRecordAllocationProc)( LPVOID pv, size_t Size );
typedef VOID     (WINAPI *DoRecordFreeProc)( LPVOID pv );
typedef VOID     (WINAPI *DoReportLeaksProc)( LPTSTR );
typedef BOOL     (WINAPI *GetStringFromMsgAProc)( UINT uMsg, LPSTR pszString, int nMaxLen );
typedef BOOL     (WINAPI *GetStringFromMsgWProc)( UINT uMsg, LPWSTR pszString, int nMaxLen );

} // extern "C"


//
// Names of exported functions
//
#define INCREMENT_DEBUG_INDENT_LEVEL_NAME  "IncrementDebugIndentLevel"
#define DECREMENT_DEBUG_INDENT_LEVEL_NAME  "DecrementDebugIndentLevel"
#define PRINT_DEBUG_MESSAGE_NAMEW          "PrintDebugMessageW"
#define PRINT_DEBUG_MESSAGE_NAMEA          "PrintDebugMessageA"
#define GET_DEBUG_MASK_NAME                "GetDebugMask"
#define SET_DEBUG_MASK_NAME                "SetDebugMask"
#define ALLOCATE_DEBUG_COLOR_NAME          "AllocateDebugColor"
#define GET_STRING_FROM_GUID_NAMEA         "GetStringFromGuidA"
#define GET_STRING_FROM_GUID_NAMEW         "GetStringFromGuidW"
#define DO_RECORD_ALLOCATION               "DoRecordAllocation"
#define DO_RECORD_FREE                     "DoRecordFree"
#define DO_REPORT_LEAKS                    "DoReportLeaks"
#define GET_STRING_FROM_MSGA               "GetStringFromMsgA"
#define GET_STRING_FROM_MSGW               "GetStringFromMsgW"

//
// Forced error stuff
//
#define REGSTR_FORCEERR_KEY TEXT("Software\\Microsoft\\Windows\\CurrentVersion\\WIA\\ForceError")
#define REGSTR_ERROR_POINT  TEXT("ErrorPoint")
#define REGSTR_ERROR_VALUE  TEXT("ErrorValue")
#define HKEY_FORCEERROR     HKEY_CURRENT_USER


//
// Name of DLL
//
#define DEBUG_DLL_NAMEW                   L"wiadebug.dll"
#define DEBUG_DLL_NAMEA                    "wiadebug.dll"

//
// Path to the section of the registry in which all debug data is stored
//
#define DEBUG_REGISTRY_PATHA               "Software\\Microsoft\\Wia\\WiaDebugUi"
#define DEBUG_REGISTRY_PATHW              L"Software\\Microsoft\\Wia\\WiaDebugUi"

//
// Path to the section of the registry in which the module flags are stored
//
#define DEBUG_REGISTRY_PATH_FLAGSA         "Software\\Microsoft\\Wia\\WiaDebugUi\\ModuleFlags"
#define DEBUG_REGISTRY_PATH_FLAGSW        L"Software\\Microsoft\\Wia\\WiaDebugUi\\ModuleFlags"

//
// Registry value names
//
#define DEBUG_REGISTRY_ENABLE_DBGA         "EnableTracing"
#define DEBUG_REGISTRY_ENABLE_DBGW        L"EnableTracing"

//
// Name of default value.  This allows us to turn on all debugging.
//
#define DEBUG_REGISTRY_DEFAULT_FLAGSA      "DefaultDebugModuleFlag"
#define DEBUG_REGISTRY_DEFAULT_FLAGSW     L"DefaultDebugModuleFlag"

//
// Unicode/ANSI versions
//
#if defined(UNICODE)

typedef PrintDebugMessageWProc             PrintDebugMessageProc;
typedef GetStringFromGuidWProc             GetStringFromGuidProc;
#define PRINT_DEBUG_MESSAGE_NAME           PRINT_DEBUG_MESSAGE_NAMEW
#define DEBUG_DLL_NAME                     DEBUG_DLL_NAMEW
#define GET_STRING_FROM_GUID_NAME          GET_STRING_FROM_GUID_NAMEW
#define DEBUG_REGISTRY_PATH                DEBUG_REGISTRY_PATHW
#define DEBUG_REGISTRY_PATH_FLAGS          DEBUG_REGISTRY_PATH_FLAGSW
#define DEBUG_REGISTRY_ENABLE_DBG          DEBUG_REGISTRY_ENABLE_DBGW
#define DEBUG_REGISTRY_DEFAULT_FLAGS       DEBUG_REGISTRY_DEFAULT_FLAGSW
#define GET_STRING_FROM_MSG                GET_STRING_FROM_MSGW

#else

typedef PrintDebugMessageAProc             PrintDebugMessageProc;
typedef GetStringFromGuidAProc             GetStringFromGuidProc;
#define PRINT_DEBUG_MESSAGE_NAME           PRINT_DEBUG_MESSAGE_NAMEA
#define DEBUG_DLL_NAME                     DEBUG_DLL_NAMEA
#define GET_STRING_FROM_GUID_NAME          GET_STRING_FROM_GUID_NAMEA
#define DEBUG_REGISTRY_PATH                DEBUG_REGISTRY_PATHA
#define DEBUG_REGISTRY_PATH_FLAGS          DEBUG_REGISTRY_PATH_FLAGSA
#define DEBUG_REGISTRY_ENABLE_DBG          DEBUG_REGISTRY_ENABLE_DBGA
#define DEBUG_REGISTRY_DEFAULT_FLAGS       DEBUG_REGISTRY_DEFAULT_FLAGSA
#define GET_STRING_FROM_MSG                GET_STRING_FROM_MSGA

#endif

//
// Color used to specify use default
//
#define DEFAULT_DEBUG_COLOR                 static_cast<COLORREF>(0xFFFFFFFF)

//
// Default colors
//
#define ERROR_FOREGROUND_COLOR              RGB(0x00,0x00,0x00)
#define ERROR_BACKGROUND_COLOR              RGB(0xFF,0x7F,0x7F)
#define WARNING_FOREGROUND_COLOR            RGB(0x00,0x00,0x00)
#define WARNING_BACKGROUND_COLOR            RGB(0xFF,0xFF,0x7F)

//
// Kernel object names
//
#define WIADEBUG_MEMORYMAPPED_FILENAME      TEXT("WiaDebugMemoryMappedFile")
#define WIADEBUG_MEMORYMAPPED_MUTEXNAME     TEXT("WiaDebugMemoryMappedMutex")
#define WIADEBUG_DEBUGCLIENT_MUTEXNAME      TEXT("WiaDebugDebugClientMutex")

#define NUMBER_OF_DEBUG_COLORS 8

//
// The data stored in the shared memory section
//

//
// Make sure it it is byte aligned
//
#include <pshpack1.h>
struct CSystemGlobalData
{
    //
    // Global debugging switch
    //
    DWORD     nAllowDebugMessages;

    //
    // Registered debug window.  We will cast it to an HWND (which should be safe under Win64)
    //
    DWORD     hwndDebug;

    //
    // Color information
    //
    COLORREF  crDebugColors[NUMBER_OF_DEBUG_COLORS];
    DWORD     nCurrentColor;
};
#include <poppack.h>


//
// Class for safely manipulating the global data
//
class CGlobalDebugState
{
private:
    HANDLE                    m_hSystemDataMutex;
    HANDLE                    m_hMemoryMappedFile;
    CSystemGlobalData        *m_pSystemGlobalData;

private:
    //
    // No implementation
    //
    CGlobalDebugState( const CGlobalDebugState & );
    CGlobalDebugState &operator=( const CGlobalDebugState & );

private:
    CSystemGlobalData *Lock(void);
    void Release(void);

public:
    CGlobalDebugState(void);
    void Destroy(void);
    ~CGlobalDebugState(void);
    bool IsValid(void) const;

    DWORD AllowDebugMessages(void);
    DWORD AllowDebugMessages( DWORD nAllowDebugMessages );

    DWORD AllocateNextColorIndex(void);

    COLORREF GetColorFromIndex( DWORD nIndex );

    bool SendDebugWindowMessage( UINT, WPARAM, LPARAM );
    bool DebugWindow( HWND hWnd );
    HWND DebugWindow(void);
};



//
// The WM_COPYDATA message will have this ID when it is sent with a debug string
//
#define COPYDATA_DEBUG_MESSAGE_ID    0xDEADBEEF

//
// The data stored in the shared memory section
//
//
// Make sure this data is byte aligned
//
#include <pshpack1.h>

struct CDebugStringMessageData
{
    COLORREF crBackground;
    COLORREF crForeground;
    BOOL     bUnicode;
    CHAR     szString[2048];
};

#include <poppack.h>

///////////////////////////////////////////////////////////////////////////////
// Main debug class.  Mostly used though macros.
///////////////////////////////////////////////////////////////////////////////
class CWiaDebugClient
{
public:
    mutable CSimpleCriticalSection m_CriticalSection;

private:
    HINSTANCE                      m_hDebugModule;
    HINSTANCE                      m_hCurrentModuleInstance;

    IncrementDebugIndentLevelProc  m_pfnIncrementDebugIndentLevel;
    DecrementDebugIndentLevelProc  m_pfnDecrementDebugIndentLevel;
    PrintDebugMessageWProc         m_pfnPrintDebugMessageW;
    PrintDebugMessageAProc         m_pfnPrintDebugMessageA;
    GetDebugMaskProc               m_pfnGetDebugMask;
    SetDebugMaskProc               m_pfnSetDebugMask;
    AllocateDebugColorProc         m_pfnAllocateDebugColor;
    GetStringFromGuidAProc         m_pfnGetStringFromGuidA;
    GetStringFromGuidWProc         m_pfnGetStringFromGuidW;
    DoRecordAllocationProc         m_pfnDoRecordAllocation;
    DoRecordFreeProc               m_pfnDoRecordFree;
    DoReportLeaksProc              m_pfnDoReportLeaks;
    GetStringFromMsgAProc          m_pfnGetStringFromMsgA;
    GetStringFromMsgWProc          m_pfnGetStringFromMsgW;

    CHAR                           m_szModuleNameA[MAX_PATH];
    WCHAR                          m_szModuleNameW[MAX_PATH];
    COLORREF                       m_crForegroundColor;
    DWORD                          m_dwModuleDebugMask;

    bool                           m_bHaveModuleInformation;
    bool                           m_bDebugLibLoadAttempted;

public:
    //
    // Actual constructor and destructor
    //
    CWiaDebugClient(void);
    ~CWiaDebugClient(void);

private:
    //
    // No implementation
    //
    CWiaDebugClient( const CWiaDebugClient & );
    CWiaDebugClient &operator=( const CWiaDebugClient & );

private:
    bool LoadWiaDebugExports();
    bool InitializeModuleInfo();
    LPTSTR GetJustTheFileName( LPCTSTR pszPath, LPTSTR pszFileName, int nMaxLen );

public:
    void SetInstance( HINSTANCE hInstance );
    bool Initialize();
    void Destroy();
    bool IsInitialized();

    DWORD SetDebugMask( DWORD dwNewMask );
    DWORD GetDebugMask(void);

    int IncrementIndentLevel();
    int DecrementIndentLevel();

    void RecordAllocation( LPVOID pv, size_t Size );
    void RecordFree( LPVOID pv );
    void ReportLeaks( void );

    inline void * __cdecl operator new(size_t size, UINT uNothing )
    {
        if (0 == size)
        {
            return NULL;
        }

        PBYTE pBuf = size ? (PBYTE)LocalAlloc(LPTR, size) : NULL;
        return (void *)pBuf;
    }

    inline void __cdecl operator delete(void *ptr)
    {
        if (ptr)
        {
            LocalFree(ptr);
        }
    }
    
    //
    // Unicode versions
    //
    void PrintWarningMessage( LPCWSTR pszFmt, ... );
    void PrintErrorMessage( LPCWSTR pszFmt, ... );
    void PrintTraceMessage( LPCWSTR pszFmt, ... );
    void PrintHResult( HRESULT hr, LPCWSTR pszFmt, ... );
    void PrintGuid( const IID &guid, LPCWSTR pszFmt, ... );
    void PrintMessage( DWORD dwSeverity, COLORREF crForegroundColor, COLORREF crBackgroundColor, LPCWSTR pszFmt, ... );
    void PrintWindowMessage( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, LPCWSTR pszMessage=NULL );


    //
    // Ansi versions
    //
    void PrintWarningMessage( LPCSTR pszFmt, ... );
    void PrintErrorMessage( LPCSTR pszFmt, ... );
    void PrintTraceMessage( LPCSTR pszFmt, ... );
    void PrintHResult( HRESULT hr, LPCSTR pszFmt, ... );
    void PrintGuid( const IID &guid, LPCSTR pszFmt, ... );
    void PrintMessage( DWORD dwSeverity, COLORREF crForegroundColor, COLORREF crBackgroundColor, LPCSTR pszFmt, ... );
    void PrintWindowMessage( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, LPCSTR pszMessage=NULL );



    static DWORD GetForceFailurePoint( LPCTSTR pszProgramName );
    static HRESULT GetForceFailureValue( LPCTSTR pszProgramName, bool bPrintWarning=false );
    static void SetForceFailurePoint( LPCTSTR pszProgramName, DWORD dwErrorPoint );
    static void SetForceFailureValue( LPCTSTR pszProgramName, HRESULT hr );
};


///////////////////////////////////////////////////////////////////////////////
// A bunch of useful "auto" classes.  Mostly used though macros.
///////////////////////////////////////////////////////////////////////////////
class CPushTraceMask
{
private:
    DWORD m_dwOldMask;

private:
    // Not implemented
    CPushTraceMask(void);
    CPushTraceMask( const CPushTraceMask & );
    CPushTraceMask &operator=( const CPushTraceMask & );

public:
    CPushTraceMask( DWORD dwTraceMask );
    ~CPushTraceMask(void);
};


class CPushIndentLevel
{
private:
    int m_nIndentLevel;

private:
    //
    // Not implemented
    //
    CPushIndentLevel(void);
    CPushIndentLevel( const CPushIndentLevel & );
    CPushIndentLevel &operator=( const CPushIndentLevel & );

public:
    CPushIndentLevel( LPCTSTR pszFmt, ... );
    ~CPushIndentLevel(void);
};


class CPushTraceMaskAndIndentLevel
{
private:
    int m_nIndentLevel;
    DWORD m_dwOldMask;

private:
    //
    // Not implemented
    //
    CPushTraceMaskAndIndentLevel( const CPushTraceMaskAndIndentLevel & );
    CPushTraceMaskAndIndentLevel &operator=( const CPushTraceMaskAndIndentLevel & );

public:
    CPushTraceMaskAndIndentLevel( DWORD dwTraceMask, LPCTSTR pszFmt, ... );
    ~CPushTraceMaskAndIndentLevel(void);
};

///////////////////////////////////////////////////////////////////////////////
// This is debug-only stuff
///////////////////////////////////////////////////////////////////////////////
#if defined(DBG) || defined(_DEBUG)


extern CWiaDebugClient g_TheDebugClient;


#define WIA_DEBUG_CREATE(hInstance) g_TheDebugClient.SetInstance(hInstance)


#define WIA_DEBUG_DESTROY()


#define WIA_PUSH_TRACE_MASK(__x)    CPushTraceMask __pushTraceMask( __x )

//
// This version does support varargs
//
#define WIA_PUSH_FUNCTION(__x)      CPushIndentLevel __pushIndentLevel __x

//
// This version doesn't support varargs
//
#define WIA_PUSHFUNCTION(__x)       CPushIndentLevel __pushIndentLevel(TEXT("%s"),__x)


#define WIA_PUSH_FUNCTION_MASK(__x) CPushTraceMaskAndIndentLevel __PushTraceMaskAndIndentLevel __x


#define WIA_TRACE(args)\
do\
{\
    g_TheDebugClient.PrintTraceMessage args;\
} while(false)

#define WIA_ERROR(args)\
do\
{\
    g_TheDebugClient.PrintErrorMessage args;\
} while (false)

#define WIA_WARNING(args)\
do\
{\
    g_TheDebugClient.PrintWarningMessage args;\
} while (false)

#define WIA_PRINTHRESULT(args)\
do\
{\
    g_TheDebugClient.PrintHResult args;\
} while (false)

#define WIA_PRINTGUID(args)\
do\
{\
    g_TheDebugClient.PrintGuid args;\
} while (false)

#define WIA_PRINTWINDOWMESSAGE(args)\
do\
{\
    g_TheDebugClient.PrintWindowMessage args;\
} while (false)

#define WIA_ASSERT(x)\
do\
{\
    if (!(x))\
    {\
        WIA_ERROR((TEXT("WIA ASSERTION FAILED: %hs(%d): %hs"),__FILE__,__LINE__,#x));\
        DebugBreak();\
    }\
}\
while (false)

#define WIA_CHECK_HR(hr,fnc)\
if (FAILED(hr))\
{\
    WIA_PRINTHRESULT((hr,"%s failed", fnc));\
}

#define WIA_RETURN_HR(hr)\
if (FAILED(hr))\
{\
    WIA_PRINTHRESULT((hr,"Returning WiaError"));\
}\
return hr


#define WIA_RECORD_ALLOC(pv,size)\
do\
{\
    g_TheDebugClient.RecordAllocation(pv,size);\
} while (false)

#define WIA_RECORD_FREE(pv)\
do\
{\
    g_TheDebugClient.RecordFree(pv);\
} while (false)

#define WIA_REPORT_LEAKS()\
do\
{\
    g_TheDebugClient.ReportLeaks();\
} while (false)


#define WIA_FORCE_ERROR(DbgProgram,ForceFlag,RetailValue) ((CWiaDebugClient::GetForceFailurePoint(DbgProgram) == (ForceFlag)) ? (CWiaDebugClient::GetForceFailureValue(DbgProgram,true)) : (RetailValue))

#else // !defined(DBG) || !defined(_DEBUG)

#define WIA_DEBUG_CREATE(hInstance)
#define WIA_DEBUG_DESTROY()
#define WIA_SET_TRACE_MASK(__x)
#define WIA_PUSHFUNCTION(__x)
#define WIA_PUSH_FUNCTION(__x)
#define WIA_PUSH_FUNCTION_MASK(__x)
#define WIA_TRACE(args)
#define WIA_WARNING(args)
#define WIA_ERROR(args)
#define WIA_PRINTHRESULT(args)
#define WIA_PRINTGUID(args)
#define WIA_PRINTWINDOWMESSAGE(args)
#define WIA_ASSERT(x)
#define WIA_CHECK_HR(hr,fnc)
#define WIA_RETURN_HR(hr)   return hr
#define WIA_RECORD_ALLOC(pv,size)
#define WIA_RECORD_FREE(pv)
#define WIA_REPORT_LEAKS()
#define WIA_FORCE_ERROR(DbgProgram,ForceFlag,RetailValue) (RetailValue)

#endif // defined(DBG) || defined(_DEBUG)

#endif //__WIADEBUG_H_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\inc\psutil\w32utils.inl ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       w32utils.inl
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        23-Dec-2000
 *
 *  DESCRIPTION: Win32 templates & utilities (Impl.)
 *
 *****************************************************************************/

////////////////////////////////////////////////
//
// class CSimpleWndSubclass
//
// class implementing simple window subclassing
// (Windows specific classes)
//

template <class inheritorClass>
inline BOOL CSimpleWndSubclass<inheritorClass>::IsAttached() const 
{ 
    return (NULL != m_hwnd); 
}

template <class inheritorClass>
BOOL CSimpleWndSubclass<inheritorClass>::Attach(HWND hwnd)
{
    if( hwnd )
    {
        // make sure we are not attached and nobody is using
        // GWLP_USERDATA for something else already.
        ASSERT(NULL == m_hwnd);
        ASSERT(NULL == m_wndDefProc);
        ASSERT(NULL == GetWindowLongPtr(hwnd, GWLP_USERDATA));

        // attach to this window
        m_hwnd = hwnd;
        m_wndDefProc = reinterpret_cast<WNDPROC>(GetWindowLongPtr(m_hwnd, GWLP_WNDPROC));

        // thunk the window proc
        SetWindowLongPtr(m_hwnd, GWLP_USERDATA, reinterpret_cast<LONG_PTR>(this));
        SetWindowLongPtr(m_hwnd, GWLP_WNDPROC,  reinterpret_cast<LONG_PTR>(_ThunkWndProc));

        return TRUE;
    }
    return FALSE;
}

template <class inheritorClass>
BOOL CSimpleWndSubclass<inheritorClass>::Detach()
{
    if( m_hwnd )
    {
        // unthunk the window proc
        SetWindowLongPtr(m_hwnd, GWLP_WNDPROC,  reinterpret_cast<LONG_PTR>(m_wndDefProc));
        SetWindowLongPtr(m_hwnd, GWLP_USERDATA, 0);

        // clear out our data
        m_wndDefProc = NULL;
        m_hwnd = NULL;

        return TRUE;
    }
    return FALSE;
}

template <class inheritorClass>
LRESULT CALLBACK CSimpleWndSubclass<inheritorClass>::_ThunkWndProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    // get the pThis ptr from GWLP_USERDATA
    CSimpleWndSubclass<inheritorClass> *pThis = 
        reinterpret_cast<CSimpleWndSubclass<inheritorClass>*>(GetWindowLongPtr(hwnd, GWLP_USERDATA));

    // must be attached
    ASSERT(pThis->IsAttached());

    // static cast pThis to inheritorClass
    inheritorClass *pTarget = static_cast<inheritorClass*>(pThis);

    // messsage processing is here
    if( WM_NCDESTROY == uMsg )
    {
        // this window is about to go away - detach.
        LRESULT lResult = pTarget->WindowProc(hwnd, uMsg, wParam, lParam);
        pThis->Detach();
        return lResult;
    }
    else
    {
        // invoke the inheritorClass WindowProc (should be defined)
        return pTarget->WindowProc(hwnd, uMsg, wParam, lParam);
    }
}

template <class inheritorClass>
inline LRESULT CSimpleWndSubclass<inheritorClass>::WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}

template <class inheritorClass>
inline LRESULT CSimpleWndSubclass<inheritorClass>::DefWindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    if( m_wndDefProc )
    {
        return CallWindowProc(m_wndDefProc, hwnd, uMsg, wParam, lParam);
    }
    return ::DefWindowProc(hwnd, uMsg, wParam, lParam);
}

template <class inheritorClass>
inline LRESULT CSimpleWndSubclass<inheritorClass>::DefDlgProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    if( m_wndDefProc )
    {
        return CallWindowProc(m_wndDefProc, hwnd, uMsg, wParam, lParam);
    }
    return ::DefDlgProc(hwnd, uMsg, wParam, lParam);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\lib\psutil\fusutils.cpp ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       fusutils.cpp
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        14-Feb-2001
 *
 *  DESCRIPTION: Fusion utilities
 *
 *****************************************************************************/

#include "precomp.h"
#pragma hdrstop

#include "fusutils.h"
#include "coredefs.h"
#include "tmplutil.h"

// open C code brace
#ifdef __cplusplus
extern "C" {
#endif

//
// SearchExecutableWrap: HRESULT wrapper around SearchPath
//
// searches for an executable and returns its full path in lpBuffer.
// returns E_INVALIDARG if the executable cannot be found and 
// returns CreateHRFromWin32(ERROR_INSUFFICIENT_BUFFER) if the
// passed in buffer is too small to hold the full path.
//
inline HRESULT SearchExecutableWrap(LPCTSTR lpszExecutableName, UINT nBufferLength, LPTSTR lpBuffer, LPTSTR *lppFilePart)
{
    DWORD cch = SearchPath(NULL, lpszExecutableName, NULL, nBufferLength, lpBuffer, lppFilePart);

    return (0 == cch) ? CreateHRFromWin32() :
        (cch >= nBufferLength) ? CreateHRFromWin32(ERROR_INSUFFICIENT_BUFFER) : S_OK;
}

//
// FileExists: checks if the passed in file name exists.
// 
inline HRESULT FileExists(LPCTSTR pszFileName, BOOL *pbExists)
{
    HRESULT hr = E_INVALIDARG;
    if (pszFileName && pbExists)
    {
        hr = S_OK;
        *pbExists = FALSE;

        WIN32_FIND_DATA findFileData;
        HANDLE hFind = FindFirstFile(pszFileName, &findFileData);

        if (hFind != INVALID_HANDLE_VALUE)
        {
            *pbExists = TRUE;
            FindClose(hFind);
        }
    }
    return hr;
}

static TCHAR g_szManifestExt[] = TEXT(".manifest");

//
// CreateActivationContextFromExecutableEx:
//
// check the passed in executable name for a manifest (if any)
// and creates an activation context from it.
//
HRESULT CreateActivationContextFromExecutableEx(LPCTSTR lpszExecutableName, UINT uResourceID, BOOL bMakeProcessDefault, HANDLE *phActCtx)
{
    HRESULT hr = E_INVALIDARG;

    if (phActCtx)
    {
        TCHAR szModule[MAX_PATH];
        TCHAR szManifest[MAX_PATH];
        BOOL bManifestFileFound = FALSE;

        // let's try to figure out whether this executable has a manifest file or not
        if (lpszExecutableName)
        {
            // search the passed in name in the path
            hr = SearchExecutableWrap(lpszExecutableName, ARRAYSIZE(szModule), szModule, NULL);
        }
        else
        {
            // if lpszExecutableName is NULL we assume the current module name
            hr = SafeGetModuleFileName(GetModuleHandle(NULL), szModule, ARRAYSIZE(szModule));
        }

        if (SUCCEEDED(hr))
        {
            if ((lstrlen(szModule) + lstrlen(g_szManifestExt)) < ARRAYSIZE(szManifest))
            {
                // create the manifest file name by appending ".manifest" to the executable name
                StringCchCopy(szManifest, ARRAYSIZE(szManifest), szModule);
                StringCchCat(szManifest, ARRAYSIZE(szManifest), g_szManifestExt);
            }
            else
            {
                // buffer is too small to hold the manifest file name
                hr = CreateHRFromWin32(ERROR_BUFFER_OVERFLOW);
            }

            if (SUCCEEDED(hr))
            {
                BOOL bFileExists = FALSE;
                hr = FileExists(szManifest, &bFileExists);

                if (SUCCEEDED(hr) && bFileExists)
                {
                    // an external manifest file found!
                    bManifestFileFound = TRUE;
                }
            }
        }

        // now let's try to create an activation context 
        ACTCTX act;
        ::ZeroMemory(&act, sizeof(act));
        act.cbSize = sizeof(act);

        if (bManifestFileFound)
        {
            // the executable has an external manifest file
            act.lpSource = szManifest;
        }
        else
        {
            // if the executable doesn't have an external  manifest file, 
            // so we assume that the it may have a manifest in its resources.
            act.dwFlags |= ACTCTX_FLAG_RESOURCE_NAME_VALID;
            act.lpResourceName = MAKEINTRESOURCE(uResourceID);
            act.lpSource = szModule;
        }

        if (bMakeProcessDefault)
        {
            // the caller has requested to set this activation context as 
            // sefault for the current process. watch out!
            act.dwFlags |= ACTCTX_FLAG_SET_PROCESS_DEFAULT;
        }

        // now let's ask kernel32 to create an activation context
        HANDLE hActCtx = CreateActCtx(&act);

        if (INVALID_HANDLE_VALUE == hActCtx)
        {
            // something failed. create proper HRESULT to return.
            hr = CreateHRFromWin32();
        }
        else
        {
            // wow, success!
            *phActCtx = hActCtx;
            hr = S_OK;
        }
    }

    return hr;
}

//
// CreateActivationContextFromExecutable:
//
// check the passed in executable name for a manifest (if any)
// and creates an activation context from it using the defaults
// (i.e. bMakeProcessDefault=FALSE & uResourceID=123)
//
HRESULT CreateActivationContextFromExecutable(LPCTSTR lpszExecutableName, HANDLE *phActCtx)
{
    return CreateActivationContextFromExecutableEx(lpszExecutableName, 123, FALSE, phActCtx);
}

// close C code brace
#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\lib\psutil\gphelper.cpp ===
/*******************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1998
 *
 *  TITLE:       GPHELPER.CPP
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      ShaunIv
 *
 *  DATE:        10/11/1999
 *
 *  DESCRIPTION: Encapsulation of common GDI plus operationss
 *
 *******************************************************************************/
#include "precomp.h"
#pragma hdrstop
#include "gphelper.h"
#include <wiadebug.h>
#include <psutil.h>

using namespace Gdiplus;

CGdiPlusHelper::CGdiPlusHelper(void)
  : m_pImageEncoderInfo(NULL),
    m_nImageEncoderCount(0),
    m_pImageDecoderInfo(NULL),
    m_nImageDecoderCount(0)

{
    Initialize();
}


CGdiPlusHelper::~CGdiPlusHelper(void)
{
    Destroy();
}


HRESULT CGdiPlusHelper::Initialize(void)
{
    WIA_PUSHFUNCTION(TEXT("CGdiPlusHelper::Initialize"));


    //
    // Get the installed encoders
    //
    UINT cbCodecs = 0;
    HRESULT hr = GDISTATUS_TO_HRESULT(GetImageEncodersSize( &m_nImageEncoderCount, &cbCodecs ));
    if (SUCCEEDED(hr))
    {
        if (cbCodecs)
        {
            m_pImageEncoderInfo = static_cast<ImageCodecInfo*>(LocalAlloc(LPTR,cbCodecs));
            if (m_pImageEncoderInfo)
            {
                hr = GDISTATUS_TO_HRESULT(GetImageEncoders( m_nImageEncoderCount, cbCodecs, m_pImageEncoderInfo ));
                if (FAILED(hr))
                {
                    WIA_PRINTHRESULT((hr,TEXT("GetImageEncoders failed")));
                }
            }
            else
            {
                hr = HRESULT_FROM_WIN32(GetLastError());
                WIA_PRINTHRESULT((hr,TEXT("LocalAlloc failed")));
            }
        }
        else
        {
            hr = E_INVALIDARG;
            WIA_PRINTHRESULT((hr,TEXT("GetImageEncodersSize succeeded, but cbCodecs was 0")));
        }
    }
    else
    {
        WIA_PRINTHRESULT((hr,TEXT("GetImageEncodersSize failed")));
    }

    //
    // Get the installed decoders
    //
    if (SUCCEEDED(hr))
    {
        cbCodecs = 0;
        hr = GDISTATUS_TO_HRESULT(GetImageDecodersSize( &m_nImageDecoderCount, &cbCodecs ));
        if (SUCCEEDED(hr))
        {
            if (cbCodecs)
            {
                m_pImageDecoderInfo = static_cast<ImageCodecInfo*>(LocalAlloc(LPTR,cbCodecs));
                if (m_pImageDecoderInfo)
                {
                    hr = GDISTATUS_TO_HRESULT(GetImageDecoders( m_nImageDecoderCount, cbCodecs, m_pImageDecoderInfo ));
                    if (FAILED(hr))
                    {
                        WIA_PRINTHRESULT((hr,TEXT("GetImageDecoders failed")));
                    }
                }
                else
                {
                    hr = HRESULT_FROM_WIN32(GetLastError());
                    WIA_PRINTHRESULT((hr,TEXT("LocalAlloc failed")));
                }
            }
            else
            {
                hr = E_INVALIDARG;
                WIA_PRINTHRESULT((hr,TEXT("GetImageDecodersSize succeeded, but cbCodecs was 0")));
            }
        }
        else
        {
            WIA_PRINTHRESULT((hr,TEXT("GetImageDecodersSize failed")));
        }
    }

    //
    // If there was a problem, make sure there are no half-initialized things laying around
    //
    if (!SUCCEEDED(hr))
    {
        Destroy();
    }
    return hr;
}



void CGdiPlusHelper::Destroy(void)
{

#if defined(GDIPLUSHELPER_EXPLICIT_INITIALIZATION)
    //
    // Shut down GDI+
    //
    if (m_bGdiplusInitialized)
    {

    }
#endif

    //
    // Free the lists of Encoders and Decoders
    //
    if (m_pImageEncoderInfo)
    {
        LocalFree(m_pImageEncoderInfo);
        m_pImageEncoderInfo = NULL;
    }
    m_nImageEncoderCount = 0;

    if (m_pImageDecoderInfo)
    {
        LocalFree(m_pImageDecoderInfo);
        m_pImageDecoderInfo = NULL;
    }
    m_nImageDecoderCount = 0;
}


bool CGdiPlusHelper::IsValid(void) const
{
    //
    // Make sure we've been completely created
    //
#if defined(GDIPLUSHELPER_EXPLICIT_INITIALIZATION)
    return(m_bGdiplusInitialized && m_pImageEncoderInfo && m_nImageEncoderCount && m_pImageDecoderInfo && m_nImageDecoderCount);
#else
    return(m_pImageEncoderInfo && m_nImageEncoderCount && m_pImageDecoderInfo && m_nImageDecoderCount);
#endif
}


HRESULT CGdiPlusHelper::GetClsidOfEncoder( const GUID &guidFormatId, CLSID &clsidFormat ) const
{
    //
    // Given an image format, find the clsid for the output type
    //
    if (IsValid())
    {
        for (UINT i=0;i<m_nImageEncoderCount;i++)
        {
            if (m_pImageEncoderInfo[i].FormatID == guidFormatId)
            {
                clsidFormat = m_pImageEncoderInfo[i].Clsid;
                return S_OK;
            }
        }
    }
    return E_FAIL;
}


HRESULT CGdiPlusHelper::GetClsidOfDecoder( const GUID &guidFormatId, CLSID &clsidFormat ) const
{
    //
    // Given an image format, find the clsid for the output type
    //
    if (IsValid())
    {
        for (UINT i=0;i<m_nImageDecoderCount;i++)
        {
            if (m_pImageDecoderInfo[i].FormatID == guidFormatId)
            {
                clsidFormat = m_pImageDecoderInfo[i].Clsid;
                return S_OK;
            }
        }
    }
    return E_FAIL;
}


HRESULT CGdiPlusHelper::Convert( LPCWSTR pszInputFilename, LPCWSTR pszOutputFilename, const CLSID &guidOutputFormat ) const
{
    WIA_PUSH_FUNCTION((TEXT("CGdiPlusHelper::Convert( %ws, %ws )"), pszInputFilename, pszOutputFilename  ));
    WIA_PRINTGUID((guidOutputFormat,TEXT("guidOutputFormat")));

    HRESULT hr;

    if (IsValid())
    {
        //
        // Open the source image
        //
        Image SourceImage(pszInputFilename);

        //
        // Make sure it was valid
        //
        hr = GDISTATUS_TO_HRESULT(SourceImage.GetLastStatus());
        if (SUCCEEDED(hr))
        {
            //
            // Get the correct encoder
            //
            CLSID clsidEncoder;
            hr = GetClsidOfEncoder( guidOutputFormat, clsidEncoder );
            if (SUCCEEDED(hr))
            {
                //
                // Save the image
                //
                hr = GDISTATUS_TO_HRESULT(SourceImage.Save( pszOutputFilename, &clsidEncoder, NULL ));
                if (FAILED(hr))
                {
                    WIA_PRINTHRESULT((hr,TEXT("GetLastError() after Save()")));
                }
            }
            else
            {
                WIA_PRINTHRESULT((hr,TEXT("GetClsidOfEncoder() failed")));
            }
        }
        else
        {
            WIA_PRINTHRESULT((hr,TEXT("SourceImage.GetLastStatus() failed")));
        }
    }
    else
    {
        WIA_ERROR((TEXT("IsValid() returned false")));
        hr = E_FAIL;
    }
    return hr;
}



HRESULT CGdiPlusHelper::Rotate( LPCWSTR pszInputFilename, LPCWSTR pszOutputFilename, int nRotationAngle, const CLSID &guidOutputFormat ) const
{
    WIA_PUSH_FUNCTION((TEXT("CGdiPlusHelper::Rotate( %ws, %ws, %d )"), pszInputFilename, pszOutputFilename, nRotationAngle  ));

    HRESULT hr = E_FAIL;

    if (IsValid())
    {
        //
        // Open the source image
        //
        Image SourceImage(pszInputFilename);

        //
        // Make sure it was valid
        //
        hr = GDISTATUS_TO_HRESULT(SourceImage.GetLastStatus());
        if (SUCCEEDED(hr))
        {
            //
            // Figure out what the output format should be.  If it is IID_NULL, change it to the same format as the input format
            //
            GUID OutputFormat = guidOutputFormat;
            if (OutputFormat == IID_NULL)
            {
                //
                // Find the input format
                //
                hr = GDISTATUS_TO_HRESULT(SourceImage.GetRawFormat(&OutputFormat));
                if (FAILED(hr))
                {
                    WIA_PRINTHRESULT((hr,TEXT("SourceImage.GetRawFormat() failed")));
                }
            }

            if (SUCCEEDED(hr))
            {
                //
                // Get the encoder for this format
                //
                CLSID clsidEncoder;
                hr = GetClsidOfEncoder( OutputFormat, clsidEncoder );
                if (SUCCEEDED(hr))
                {
                    //
                    // Lossless rotation for JPEGs...
                    //
                    if (ImageFormatJPEG == OutputFormat && (SourceImage.GetWidth() % 8 == 0) && (SourceImage.GetHeight() % 8 == 0))
                    {
                        WIA_TRACE((TEXT("Performing lossless rotation")));
                        LONG nTransform = 0;

                        //
                        // Which transform should we use?
                        //
                        switch (nRotationAngle % 360)
                        {
                        case 90:
                        case -270:
                            nTransform = EncoderValueTransformRotate90;
                            break;

                        case 180:
                        case -180:
                            nTransform = EncoderValueTransformRotate180;
                            break;

                        case 270:
                        case -90:
                            nTransform = EncoderValueTransformRotate270;
                            break;
                        }

                        //
                        // If the transform is zero, an invalid rotation angle was specified
                        //
                        if (nTransform)
                        {
                            //
                            // Fill out the EncoderParameters for lossless JPEG rotation
                            //
                            EncoderParameters EncoderParams = {0};
                            EncoderParams.Parameter[0].Guid = Gdiplus::EncoderTransformation;
                            EncoderParams.Parameter[0].Type = EncoderParameterValueTypeLong;
                            EncoderParams.Parameter[0].NumberOfValues = 1;
                            EncoderParams.Parameter[0].Value = &nTransform;
                            EncoderParams.Count = 1;

                            //
                            // Save the image to the target file
                            //
                            hr = GDISTATUS_TO_HRESULT(SourceImage.Save( pszOutputFilename, &clsidEncoder, &EncoderParams ));
                        }
                        else
                        {
                            hr = E_FAIL;
                        }
                    }

                    //
                    // Non-JPEG rotation, or rotation of JPEG files with non-standard sizes
                    //
                    else
                    {
                        WIA_TRACE((TEXT("Performing normal rotation")));

                        //
                        // Figure out which rotation flag to use
                        //
                        RotateFlipType rotateFlipType = RotateNoneFlipNone;
                        switch (nRotationAngle % 360)
                        {
                        case 90:
                        case -270:
                            rotateFlipType = Rotate90FlipNone;
                            break;

                        case 180:
                        case -180:
                            rotateFlipType = Rotate180FlipNone;
                            break;

                        case 270:
                        case -90:
                            rotateFlipType = Rotate270FlipNone;
                            break;
                        }

                        //
                        // Make sure we have a valid rotation angle
                        //
                        if (rotateFlipType)
                        {
                            //
                            // Rotate the image
                            //
                            hr = GDISTATUS_TO_HRESULT(SourceImage.RotateFlip(rotateFlipType));
                            if (SUCCEEDED(hr))
                            {
                                //
                                // Save the image
                                //
                                hr = GDISTATUS_TO_HRESULT(SourceImage.Save( pszOutputFilename, &clsidEncoder, NULL ));
                            }
                        }
                        else
                        {
                            WIA_ERROR((TEXT("Invalid rotation specified (%d)"), nRotationAngle));
                            hr = E_FAIL;
                        }
                    } // End else if non JPEG
                }
                else
                {
                    WIA_PRINTHRESULT((hr,TEXT("GetClsidOfEncoder failed")));
                }
            }
        }
        else
        {
            WIA_PRINTHRESULT((hr,TEXT("SourceImage.GetLastStatus()")));
        }
    }
    else
    {
        WIA_ERROR((TEXT("IsValid() returned false")));
        hr = E_FAIL;
    }
    
    WIA_PRINTHRESULT((hr,TEXT("Returning")));
    return hr;
}



HRESULT CGdiPlusHelper::Rotate( HBITMAP hSourceBitmap, HBITMAP &hTargetBitmap, int nRotationAngle ) const
{
    //
    // Initialize the result to NULL
    //
    hTargetBitmap = NULL;

    //
    // Assume failure
    //
    HRESULT hr = E_FAIL;

    //
    // Make sure we are in a valid state
    //
    if (IsValid())
    {
        //
        // Make sure we have a valid source bitmap
        //
        if (hSourceBitmap)
        {
            //
            // If we are rotating by 0 degrees, just copy the image
            //
            if (!nRotationAngle)
            {
                hTargetBitmap = reinterpret_cast<HBITMAP>(CopyImage( hSourceBitmap, IMAGE_BITMAP, 0, 0, LR_CREATEDIBSECTION ));
                if (hTargetBitmap)
                {
                    hr = S_OK;
                }
                else
                {
                    hr = HRESULT_FROM_WIN32(GetLastError());
                    WIA_PRINTHRESULT((hr,TEXT("CopyImage failed")));
                }
            }
            else
            {
                //
                // Create the source bitmap.  No palette required, we assume it will always be a 24bit DIB.
                //
                Bitmap SourceBitmap( hSourceBitmap, NULL );
                hr = GDISTATUS_TO_HRESULT(SourceBitmap.GetLastStatus());
                if (SUCCEEDED(hr))
                {
                    //
                    // Get the image width and height
                    //
                    UINT nSourceWidth = SourceBitmap.GetWidth();
                    UINT nSourceHeight = SourceBitmap.GetHeight();

                    //
                    // Make sure the width and height are non-zero
                    //
                    if (nSourceWidth && nSourceHeight)
                    {
                        //
                        // Assume the target width and height are zero, so we can detect invalid rotation angles
                        //
                        UINT nTargetWidth = 0;
                        UINT nTargetHeight = 0;
                        RotateFlipType rotateFlipType = RotateNoneFlipNone;

                        //
                        // Find the transformation matrix for this rotation
                        //
                        switch (nRotationAngle % 360)
                        {
                        case -270:
                        case 90:
                            rotateFlipType = Rotate90FlipNone;
                            nTargetWidth = nSourceHeight;
                            nTargetHeight = nSourceWidth;
                            break;

                        case -180:
                        case 180:
                            rotateFlipType = Rotate180FlipNone;
                            nTargetWidth = nSourceWidth;
                            nTargetHeight = nSourceHeight;
                            break;

                        case -90:
                        case 270:
                            rotateFlipType = Rotate270FlipNone;
                            nTargetWidth = nSourceHeight;
                            nTargetHeight = nSourceWidth;
                            break;
                        }

                        //
                        // If either of these are zero, that means an invalid rotation was supplied
                        //
                        if (nTargetWidth && nTargetHeight)
                        {
                            //
                            // Rotate the image
                            //
                            hr = GDISTATUS_TO_HRESULT(SourceBitmap.RotateFlip(rotateFlipType));
                            if (SUCCEEDED(hr))
                            {
                                //
                                // Create the target bitmap and make sure it succeeded
                                //
                                Bitmap TargetBitmap( nTargetWidth, nTargetHeight );
                                hr = GDISTATUS_TO_HRESULT(TargetBitmap.GetLastStatus());
                                if (SUCCEEDED(hr))
                                {
                                    //
                                    // Get a graphics to render to
                                    //
                                    Graphics *pGraphics = Graphics::FromImage(&TargetBitmap);
                                    if (pGraphics)
                                    {
                                        //
                                        // Make sure it is valid
                                        //
                                        hr = GDISTATUS_TO_HRESULT(pGraphics->GetLastStatus());
                                        if (SUCCEEDED(hr))
                                        {
                                            //
                                            // Draw image rotated to the graphics
                                            //
                                            hr = GDISTATUS_TO_HRESULT(pGraphics->DrawImage(&SourceBitmap,0,0));
                                            if (SUCCEEDED(hr))
                                            {
                                                //
                                                // Get the HBITMAP
                                                //
                                                hr = GDISTATUS_TO_HRESULT(TargetBitmap.GetHBITMAP( Color::Black, &hTargetBitmap ));
                                                if (SUCCEEDED(hr))
                                                {
                                                    if (!hTargetBitmap)
                                                    {
                                                        WIA_ERROR((TEXT("hTargetBitmap was NULL")));
                                                        hr = E_FAIL;
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        // Clean up our dynamically allocated graphics
                                        //
                                        delete pGraphics;
                                    }
                                    else
                                    {
                                        WIA_ERROR((TEXT("pGraphics was NULL")));
                                        hr = E_FAIL;
                                    }
                                }
                                else
                                {
                                    WIA_PRINTHRESULT((hr,TEXT("TargetBitmap.GetLastStatus() failed")));
                                }
                            }
                            else
                            {
                                WIA_PRINTHRESULT((hr,TEXT("SourceBitmap.RotateFlip() failed")));
                            }
                        }
                        else
                        {
                            WIA_ERROR((TEXT("Invalid Target Bitmap Dimensions")));
                            hr = E_FAIL;
                        }
                    }
                    else
                    {
                        WIA_ERROR((TEXT("Invalid Source Bitmap Dimensions")));
                        hr = E_FAIL;
                    }
                }
                else
                {
                    WIA_PRINTHRESULT((hr,TEXT("SourceBitmap.GetLastStatus() failed")));
                }
            } // end else if nRotationAngle != 0
        }
        else
        {
            WIA_ERROR((TEXT("hSourceBitmap was NULL")));
            hr = E_INVALIDARG;
        }
    }
    else
    {
        WIA_ERROR((TEXT("IsValid() failed")));
    }

    WIA_PRINTHRESULT((hr,TEXT("Returning")));
    return hr;
}


HRESULT CGdiPlusHelper::LoadAndScale( HBITMAP &hTargetBitmap, IStream *pStream, UINT nMaxWidth, UINT nMaxHeight, bool bStretchSmallImages )
{
    HRESULT hr = E_FAIL;

    hTargetBitmap = NULL;
    //
    // Make sure we have a valid filename
    //
    if (pStream)
    {
        Bitmap SourceBitmap( pStream  );
        hr = GDISTATUS_TO_HRESULT(SourceBitmap.GetLastStatus());
        if (SUCCEEDED(hr))
        {
            //
            // Get the image width and height
            //
            UINT nSourceWidth = SourceBitmap.GetWidth();
            UINT nSourceHeight = SourceBitmap.GetHeight();

            //
            // Make sure the width and height are non-zero
            //
            if (nSourceWidth && nSourceHeight)
            {
                //
                //
                // Assume the source dimensions are fine
                //
                UINT nTargetWidth = nSourceWidth;
                UINT nTargetHeight = nSourceHeight;

                //
                // If the height or the width exceed the allowed maximum, scale it down, or if we are allowing stretching
                //
                if (nMaxWidth > 0 && nMaxHeight > 0)
                {
                    if ((nTargetWidth > nMaxWidth) || (nTargetHeight > nMaxHeight) || bStretchSmallImages)
                    {
                        SIZE sizeDesiredImageSize = PrintScanUtil::ScalePreserveAspectRatio( nMaxWidth, nMaxHeight, nTargetWidth, nTargetHeight );
                        nTargetWidth = sizeDesiredImageSize.cx;
                        nTargetHeight = sizeDesiredImageSize.cy;
                    }
                }

                //
                // Make sure we have valid sizes
                //
                if (nTargetWidth && nTargetHeight)
                {
                    //
                    // Create the target bitmap and make sure it succeeded
                    //
                    Bitmap TargetBitmap( nTargetWidth, nTargetHeight );
                    hr = GDISTATUS_TO_HRESULT(TargetBitmap.GetLastStatus());
                    if (SUCCEEDED(hr))
                    {
                        //
                        // Get a graphics to render to
                        //
                        Graphics *pGraphics = Graphics::FromImage(&TargetBitmap);
                        if (pGraphics)
                        {
                            //
                            // Make sure it is valid
                            //
                            hr = GDISTATUS_TO_HRESULT(pGraphics->GetLastStatus());
                            if (SUCCEEDED(hr))
                            {
                                //
                                // Draw scaled image
                                //
                                hr = GDISTATUS_TO_HRESULT(pGraphics->DrawImage(&SourceBitmap, 0, 0, nTargetWidth, nTargetHeight));
                                if (SUCCEEDED(hr))
                                {
                                    //
                                    // Get an HBITMAP for this image
                                    //
                                    hr = GDISTATUS_TO_HRESULT(TargetBitmap.GetHBITMAP( Color::Black, &hTargetBitmap ));
                                    if (!hTargetBitmap)
                                    {
                                        WIA_ERROR((TEXT("hTargetBitmap was NULL")));
                                        hr = E_FAIL;
                                    }
                                }
                                else
                                {
                                    WIA_PRINTHRESULT((hr,TEXT("pGraphics->DrawImage failed")));
                                }
                            }
                            else
                            {
                                WIA_PRINTHRESULT((hr,TEXT("pGraphics->GetLastStatus() failed")));
                            }
                            //
                            // Clean up our dynamically allocated graphics
                            //
                            delete pGraphics;
                        }
                        else
                        {
                            hr = E_FAIL;
                            WIA_ERROR((TEXT("pGraphics was NULL")));
                        }
                    }
                    else
                    {
                        WIA_PRINTHRESULT((hr,TEXT("TargetBitmap.GetLastStatus() is not OK")));
                    }
                }
                else
                {
                    WIA_ERROR((TEXT("Invalid Target Bitmap Dimensions (%d,%d)"), nTargetWidth, nTargetHeight));
                    hr = E_FAIL;
                }
            }
            else
            {
                WIA_ERROR((TEXT("Invalid Source Bitmap Dimensions")));
                hr = E_FAIL;
            }
        }
        else
        {
            WIA_PRINTHRESULT((hr,TEXT("SourceBitmap.GetLastStatus() failed")));
        }
    }
    else
    {
        WIA_ERROR((TEXT("pStream was NULL")));
        hr = E_INVALIDARG;
    }

    return hr;
}


HRESULT CGdiPlusHelper::LoadAndScale( HBITMAP &hTargetBitmap, LPCTSTR pszFilename, UINT nMaxWidth, UINT nMaxHeight, bool bStretchSmallImages )
{
    hTargetBitmap = NULL;

    HRESULT hr = E_FAIL;
    //
    // Make sure we have a valid filename
    //
    if (pszFilename && lstrlen(pszFilename))
    {
        Bitmap SourceBitmap( CSimpleStringConvert::WideString(CSimpleString(pszFilename) ) );
        hr = GDISTATUS_TO_HRESULT(SourceBitmap.GetLastStatus());
        if (SUCCEEDED(hr))
        {
            //
            // Get the image width and height
            //
            UINT nSourceWidth = SourceBitmap.GetWidth();
            UINT nSourceHeight = SourceBitmap.GetHeight();

            //
            // Make sure the width and height are non-zero
            //
            if (nSourceWidth && nSourceHeight)
            {
                //
                //
                // Assume the source dimensions are fine
                //
                UINT nTargetWidth = nSourceWidth;
                UINT nTargetHeight = nSourceHeight;

                //
                // If the height or the width exceed the allowed maximum, scale it down, or if we are allowing stretching
                //
                if (nMaxWidth > 0 && nMaxHeight > 0)
                {
                    if ((nTargetWidth > nMaxWidth) || (nTargetHeight > nMaxHeight) || bStretchSmallImages)
                    {
                        SIZE sizeDesiredImageSize = PrintScanUtil::ScalePreserveAspectRatio( nMaxWidth, nMaxHeight, nTargetWidth, nTargetHeight );
                        nTargetWidth = sizeDesiredImageSize.cx;
                        nTargetHeight = sizeDesiredImageSize.cy;
                    }
                }

                //
                // Make sure we have valid sizes
                //
                if (nTargetWidth && nTargetHeight)
                {
                    //
                    // Create the target bitmap and make sure it succeeded
                    //
                    Bitmap TargetBitmap( nTargetWidth, nTargetHeight );
                    hr = GDISTATUS_TO_HRESULT(TargetBitmap.GetLastStatus());
                    if (SUCCEEDED(hr))
                    {
                        //
                        // Get a graphics to render to
                        //
                        Graphics *pGraphics = Graphics::FromImage(&TargetBitmap);
                        if (pGraphics)
                        {
                            //
                            // Make sure it is valid
                            //
                            hr = GDISTATUS_TO_HRESULT(pGraphics->GetLastStatus());
                            if (SUCCEEDED(hr))
                            {
                                //
                                // Draw scaled image
                                //
                                hr = GDISTATUS_TO_HRESULT(pGraphics->DrawImage(&SourceBitmap, 0, 0, nTargetWidth, nTargetHeight));
                                if (SUCCEEDED(hr))
                                {
                                    //
                                    // Get an HBITMAP for this image
                                    //
                                    hr = GDISTATUS_TO_HRESULT(TargetBitmap.GetHBITMAP( Color::Black, &hTargetBitmap ));
                                    if (SUCCEEDED(hr))
                                    {
                                        if (!hTargetBitmap)
                                        {
                                            hr = E_FAIL;
                                        }
                                    }
                                    else
                                    {
                                        WIA_ERROR((TEXT("TargetBitmap.GetHBITMAP failed")));
                                    }
                                }
                                else
                                {
                                    WIA_ERROR((TEXT("pGraphics->DrawImage failed")));
                                }
                            }
                            else
                            {
                                WIA_ERROR((TEXT("pGraphics->GetLastStatus() failed")));
                            }
                            //
                            // Clean up our dynamically allocated graphics
                            //
                            delete pGraphics;
                        }
                        else
                        {
                            WIA_ERROR((TEXT("pGraphics was NULL")));
                            hr = E_FAIL;
                        }
                    }
                    else
                    {
                        WIA_PRINTHRESULT((hr,TEXT("TargetBitmap.GetLastStatus() is not OK")));
                    }
                }
                else
                {
                    WIA_ERROR((TEXT("Invalid Target Bitmap Dimensions (%d,%d)"), nTargetWidth, nTargetHeight));
                    hr = E_FAIL;
                }
            }
            else
            {
                WIA_ERROR((TEXT("Invalid Source Bitmap Dimensions")));
                hr = E_FAIL;
            }
        }
        else
        {
            WIA_PRINTHRESULT((hr,TEXT("SourceBitmap.GetLastStatus() failed")));
        }
    }
    else
    {
        WIA_ERROR((TEXT("hSourceBitmap was NULL")));
    }

    return hr;
}


//
// Construct a string like this: JPG;BMP;PNG with all supported extensions
//
HRESULT CGdiPlusHelper::ConstructCodecExtensionSearchStrings( CSimpleString &strExtensions, Gdiplus::ImageCodecInfo *pImageCodecInfo, UINT nImageCodecCount )
{
    for (UINT i=0;i<nImageCodecCount;i++)
    {
        if (strExtensions.Length())
        {
            strExtensions += TEXT(";");
        }
        strExtensions += CSimpleStringConvert::NaturalString(CSimpleStringWide(pImageCodecInfo[i].FilenameExtension));
    }
    return (strExtensions.Length() ? S_OK : E_FAIL);
}

HRESULT CGdiPlusHelper::ConstructDecoderExtensionSearchStrings( CSimpleString &strExtensions )
{
    return CGdiPlusHelper::ConstructCodecExtensionSearchStrings( strExtensions, m_pImageDecoderInfo, m_nImageDecoderCount );
}


HRESULT CGdiPlusHelper::ConstructEncoderExtensionSearchStrings( CSimpleString &strExtensions )
{
    return CGdiPlusHelper::ConstructCodecExtensionSearchStrings( strExtensions, m_pImageEncoderInfo, m_nImageEncoderCount );
}


EncoderParameters *CGdiPlusHelper::AppendEncoderParameter( EncoderParameters *pEncoderParameters, const GUID &guidProp, ULONG nType, PVOID pVoid )
{
    if (pEncoderParameters)
    {
        pEncoderParameters->Parameter[pEncoderParameters->Count].Guid = guidProp;
        pEncoderParameters->Parameter[pEncoderParameters->Count].Type = nType;
        pEncoderParameters->Parameter[pEncoderParameters->Count].NumberOfValues = 1;
        pEncoderParameters->Parameter[pEncoderParameters->Count].Value = pVoid;
        pEncoderParameters->Count++;
    }
    return pEncoderParameters;
}

HRESULT CGdiPlusHelper::SaveMultipleImagesAsMultiPage( const CSimpleDynamicArray<CSimpleStringWide> &Filenames, const CSimpleStringWide &strFilename, const GUID &guidOutputFormat )
{
    //
    // Assume failure
    //
    HRESULT hr = E_FAIL;

    //
    // Parameters used in the encoder
    //
    ULONG nEncoderValueMultiFrame = EncoderValueMultiFrame;
    ULONG nEncoderValueFrameDimensionPage = EncoderValueFrameDimensionPage;
    ULONG nEncoderValueLastFrame = EncoderValueLastFrame;

    //
    // Make sure we have some files
    //
    if (Filenames.Size())
    {
        //
        // Get the encoder
        //
        CLSID clsidEncoder = IID_NULL;
        hr = GetClsidOfEncoder( guidOutputFormat, clsidEncoder );
        if (SUCCEEDED(hr))
        {
            //
            // Open the first image
            //
            Image SourceImage( Filenames[0] );
            hr = GDISTATUS_TO_HRESULT(SourceImage.GetLastStatus());
            if (SUCCEEDED(hr))
            {

                EncoderParameters encoderParameters = {0};
                if (Filenames.Size() > 1)
                {
                    AppendEncoderParameter( &encoderParameters, EncoderSaveFlag, EncoderParameterValueTypeLong, &nEncoderValueMultiFrame );
                }

                //
                // Save the first page
                //
                hr = GDISTATUS_TO_HRESULT(SourceImage.Save( strFilename, &clsidEncoder, &encoderParameters ));
                if (SUCCEEDED(hr))
                {
                    //
                    // Save each additional page
                    //
                    for (int i=1;i<Filenames.Size() && SUCCEEDED(hr);i++)
                    {
                        //
                        // Create the additional page
                        //
                        Image AdditionalPage(Filenames[i]);

                        //
                        // Make sure it succeeded
                        //
                        hr = GDISTATUS_TO_HRESULT(AdditionalPage.GetLastStatus());
                        if (SUCCEEDED(hr))
                        {
                            //
                            // Prepare the encoder parameters
                            //
                            EncoderParameters encoderParameters[2] = {0};
                            AppendEncoderParameter( encoderParameters, EncoderSaveFlag, EncoderParameterValueTypeLong, &nEncoderValueFrameDimensionPage );

                            //
                            // If this is the last page, append the "last frame" parameter
                            //
                            if (i == Filenames.Size()-1)
                            {
                                AppendEncoderParameter( encoderParameters, EncoderSaveFlag, EncoderParameterValueTypeLong, &nEncoderValueLastFrame );
                            }

                            //
                            // Try to add a page
                            //
                            hr = GDISTATUS_TO_HRESULT(SourceImage.SaveAdd( &AdditionalPage, encoderParameters ));
                            if (FAILED(hr))
                            {
                                WIA_PRINTHRESULT((hr,TEXT("SourceImage.SaveAdd failed!")));
                            }
                        }
                        else
                        {
                            WIA_PRINTHRESULT((hr,TEXT("AdditionalPage.GetLastStatus failed!")));
                        }
                    }
                }
                else
                {
                    WIA_PRINTHRESULT((hr,TEXT("SourceImage.Save failed!")));
                }
            }
            else
            {
                WIA_PRINTHRESULT((hr,TEXT("SourceImage.GetLastStatus failed!")));
            }
        }
        else
        {
            WIA_PRINTHRESULT((hr,TEXT("GetClsidOfEncoder failed!")));
        }
    }
    else
    {
        WIA_ERROR((TEXT("Filenames.Size was 0!")));
        hr = E_INVALIDARG;
    }
    return hr;
}

static void CalculateBrightnessAndContrastParams( BYTE iBrightness, BYTE iContrast, float *scale, float *translate )
{
    //
    // force values to be at least 1, to avoid undesired effects
    //
    if (iBrightness < 1)
    {
        iBrightness = 1;
    }
    if (iContrast < 1)
    {
        iContrast = 1;
    }

    //
    // get current brightness as a percentage of full scale
    //
    float fBrightness = (float)( 100 - iBrightness ) / 100.0f;
    if (fBrightness > 0.95f)
    {
        fBrightness = 0.95f; /* clamp */
    }

    //
    // get current contrast as a percentage of full scale
    //
    float fContrast = (float) iContrast / 100.0f;
    if (fContrast > 1.0f)
    {
        fContrast = 1.0;    /* limit to 1.0    */
    }

    //
    // convert contrast to a scale value
    //
    if (fContrast <= 0.5f)
    {
        *scale = fContrast / 0.5f;    /* 0 -> 0, .5 -> 1.0 */
    }
    else
    {
        if (fContrast == 1.0f)
        {
                fContrast = 0.9999f;
        }
        *scale = 0.5f / (1.0f - fContrast); /* .5 -> 1.0, 1.0 -> inf */
    }

    *translate = 0.5f - *scale * fBrightness;
}


HRESULT CGdiPlusHelper::SetBrightnessAndContrast( HBITMAP hSourceBitmap, HBITMAP &hTargetBitmap, BYTE nBrightness, BYTE nContrast )
{
    WIA_TRACE((TEXT("nBrightness: %d, nContrast: %d"), nBrightness, nContrast ));
    //
    // Initialize the result to NULL
    //
    hTargetBitmap = NULL;

    //
    // Assume failure
    //
    HRESULT hr = E_FAIL;

    //
    // Make sure we are in a valid state
    //
    if (IsValid())
    {
        //
        // Make sure we have a valid source bitmap
        //
        if (hSourceBitmap)
        {
            //
            // Create the source bitmap.  No palette required, we assume it will always be a 24bit DIB.
            //
            Bitmap SourceBitmap( hSourceBitmap, NULL );
            
            hr = GDISTATUS_TO_HRESULT(SourceBitmap.GetLastStatus());
            if (SUCCEEDED(hr))
            {
                //
                // Create the target bitmap and make sure it succeeded
                //
                Bitmap TargetBitmap( SourceBitmap.GetWidth(), SourceBitmap.GetHeight() );
                hr = GDISTATUS_TO_HRESULT(TargetBitmap.GetLastStatus());
                if (SUCCEEDED(hr))
                {
                    //
                    // Get a graphics to render to
                    //
                    Graphics *pGraphics = Graphics::FromImage(&TargetBitmap);
                    if (pGraphics)
                    {
                        //
                        // Make sure it is valid
                        //
                        hr = GDISTATUS_TO_HRESULT(pGraphics->GetLastStatus());
                        if (SUCCEEDED(hr))
                        {
                            ImageAttributes imageAttributes;

                            //
                            // Calculate the values needed for the matrix
                            //
                            REAL scale = 0.0;
                            REAL trans = 0.0;
                            CalculateBrightnessAndContrastParams( nBrightness, nContrast, &scale, &trans );

                            //
                            // Prepare the matrix for brightness and contrast transforms
                            //
                            ColorMatrix brightnessAndContrast = {scale, 0,     0,     0,     0,
                                                                 0,     scale, 0,     0,     0,
                                                                 0,     0,     scale, 0,     0,
                                                                 0,     0,     0,     1,     0,
                                                                 trans, trans, trans, 0,     1};

                            imageAttributes.SetColorMatrix(&brightnessAndContrast);

                            Rect rect( 0, 0, SourceBitmap.GetWidth(), SourceBitmap.GetHeight() );


                            //
                            // Draw the transformed image on the graphics
                            //
                            hr = GDISTATUS_TO_HRESULT(pGraphics->DrawImage(&SourceBitmap,rect,0,0,SourceBitmap.GetWidth(), SourceBitmap.GetHeight(),UnitPixel,&imageAttributes));
                            if (SUCCEEDED(hr))
                            {
                                //
                                // Get the HBITMAP
                                //
                                hr = GDISTATUS_TO_HRESULT(TargetBitmap.GetHBITMAP( Color::Black, &hTargetBitmap ));
                                if (SUCCEEDED(hr))
                                {
                                    if (!hTargetBitmap)
                                    {
                                        WIA_ERROR((TEXT("hTargetBitmap was NULL")));
                                        hr = E_FAIL;
                                    }
                                }
                                else
                                {
                                    WIA_PRINTHRESULT((hr,TEXT("Bitmap::GetHBITMAP failed")));
                                }
                            }
                            else
                            {
                                WIA_PRINTHRESULT((hr,TEXT("pGraphics->DrawImage failed")));
                            }
                        }
                        else
                        {
                            WIA_PRINTHRESULT((hr,TEXT("pGraphics->GetLastStatus() failed")));
                        }
                        //
                        // Clean up our dynamically allocated graphics
                        //
                        delete pGraphics;
                    }
                    else
                    {
                        WIA_ERROR((TEXT("pGraphics was NULL")));
                        hr = E_FAIL;
                    }
                }
                else
                {
                    WIA_PRINTHRESULT((hr,TEXT("TargetBitmap.GetLastStatus() failed")));
                }
            }
            else
            {
                WIA_PRINTHRESULT((hr,TEXT("SourceBitmap.GetLastStatus() failed")));
            }
        }
        else
        {
            WIA_ERROR((TEXT("hSourceBitmap was NULL")));
            hr = E_FAIL;
        }
    }
    else
    {
        WIA_ERROR((TEXT("IsValid() returned false")));
        hr = E_FAIL;
    }

    WIA_PRINTHRESULT((hr,TEXT("Returning")));
    return hr;
}



HRESULT CGdiPlusHelper::SetThreshold( HBITMAP hSourceBitmap, HBITMAP &hTargetBitmap, BYTE nThreshold )
{
    //
    // Initialize the result to NULL
    //
    hTargetBitmap = NULL;

    //
    // Assume failure
    //
    HRESULT hr = E_FAIL;

    //
    // Make sure we are in a valid state
    //
    if (IsValid())
    {
        //
        // Make sure we have a valid source bitmap
        //
        if (hSourceBitmap)
        {
            //
            // Create the source bitmap.  No palette required, we assume it will always be a 24bit DIB.
            //
            Bitmap SourceBitmap( hSourceBitmap, NULL );
            hr = GDISTATUS_TO_HRESULT(SourceBitmap.GetLastStatus());
            if (SUCCEEDED(hr))
            {
                //
                // Create the target bitmap and make sure it succeeded
                //
                Bitmap TargetBitmap( SourceBitmap.GetWidth(), SourceBitmap.GetHeight() );
                hr = GDISTATUS_TO_HRESULT(TargetBitmap.GetLastStatus());
                if (SUCCEEDED(hr))
                {
                    //
                    // Get a graphics to render to
                    //
                    Graphics *pGraphics = Graphics::FromImage(&TargetBitmap);
                    if (pGraphics)
                    {
                        //
                        // Make sure it is valid
                        //
                        hr = GDISTATUS_TO_HRESULT(pGraphics->GetLastStatus());
                        if (SUCCEEDED(hr))
                        {
                            ImageAttributes imageAttributes;
                            imageAttributes.SetThreshold(static_cast<double>(100-nThreshold)/100);

                            Rect rect( 0, 0, SourceBitmap.GetWidth(), SourceBitmap.GetHeight() );


                            //
                            // Draw image rotated to the graphics
                            //
                            hr = GDISTATUS_TO_HRESULT(pGraphics->DrawImage(&SourceBitmap,rect,0,0,SourceBitmap.GetWidth(), SourceBitmap.GetHeight(),UnitPixel,&imageAttributes));
                            if (SUCCEEDED(hr))
                            {
                                //
                                // Get the HBITMAP
                                //
                                hr = GDISTATUS_TO_HRESULT(TargetBitmap.GetHBITMAP( Color::Black, &hTargetBitmap ));
                                if (SUCCEEDED(hr))
                                {
                                    if (!hTargetBitmap)
                                    {
                                        WIA_ERROR((TEXT("hTargetBitmap was NULL")));
                                        hr = E_FAIL;
                                    }
                                }
                                else
                                {
                                    WIA_PRINTHRESULT((hr,TEXT("Bitmap::GetHBITMAP failed")));
                                }
                            }
                            else
                            {
                                WIA_PRINTHRESULT((hr,TEXT("pGraphics->DrawImage failed")));
                            }
                        }
                        else
                        {
                            WIA_PRINTHRESULT((hr,TEXT("pGraphics->GetLastStatus() failed")));
                        }
                        //
                        // Clean up our dynamically allocated graphics
                        //
                        delete pGraphics;
                    }
                    else
                    {
                        WIA_ERROR((TEXT("pGraphics was NULL")));
                        hr = E_FAIL;
                    }
                }
            }
            else
            {
                WIA_PRINTHRESULT((hr,TEXT("SourceBitmap.GetLastStatus() failed")));
            }
        }
        else
        {
            WIA_ERROR((TEXT("hSourceBitmap was NULL")));
            hr = E_FAIL;
        }
    }
    WIA_PRINTHRESULT((hr,TEXT("Returning")));
    return hr;
}


CImageFileFormatVerifier::CImageFileFormatVerifierItem::CImageFileFormatVerifierItem(void)
  : m_pSignature(NULL),
    m_pMask(NULL),
    m_nLength(0),
    m_guidFormat(IID_NULL),
    m_clsidDecoder(IID_NULL)
{
}

CImageFileFormatVerifier::CImageFileFormatVerifierItem::CImageFileFormatVerifierItem( const PBYTE pSignature, const PBYTE pMask, int nLength, const GUID &guidFormat, const CLSID &guidDecoder )
  : m_pSignature(NULL),
    m_pMask(NULL),
    m_nLength(0),
    m_guidFormat(IID_NULL),
    m_clsidDecoder(IID_NULL)
{
    Assign( pSignature, pMask, nLength, guidFormat, guidDecoder );
}


CImageFileFormatVerifier::CImageFileFormatVerifierItem::CImageFileFormatVerifierItem( const CImageFileFormatVerifierItem &other )
  : m_pSignature(NULL),
    m_pMask(NULL),
    m_nLength(0),
    m_guidFormat(IID_NULL),
    m_clsidDecoder(IID_NULL)
{
    Assign( other.Signature(), other.Mask(), other.Length(), other.Format(), other.Decoder() );
}


CImageFileFormatVerifier::CImageFileFormatVerifierItem &CImageFileFormatVerifier::CImageFileFormatVerifierItem::operator=( const CImageFileFormatVerifierItem &other )
{
    if (this != &other)
    {
        return Assign( other.Signature(), other.Mask(), other.Length(), other.Format(), other.Decoder() );
    }
    else return *this;
}


CImageFileFormatVerifier::CImageFileFormatVerifierItem &CImageFileFormatVerifier::CImageFileFormatVerifierItem::Assign( const PBYTE pSignature, const PBYTE pMask, int nLength, const GUID &guidFormat, const CLSID &clsidDecoder )
{
    Destroy();
    bool bOK = false;
    m_nLength = nLength;
    m_guidFormat = guidFormat;
    m_clsidDecoder = clsidDecoder;
    if (nLength && pSignature && pMask)
    {
        m_pSignature = new BYTE[nLength];
        m_pMask = new BYTE[nLength];
        if (m_pSignature && m_pMask)
        {
            CopyMemory( m_pSignature, pSignature, nLength );
            CopyMemory( m_pMask, pMask, nLength );
            bOK = true;
        }
    }
    if (!bOK)
        Destroy();
    return *this;
}


void CImageFileFormatVerifier::CImageFileFormatVerifierItem::Destroy(void)
{
    if (m_pSignature)
        delete[] m_pSignature;
    m_pSignature = NULL;
    if (m_pMask)
        delete[] m_pMask;
    m_pMask = NULL;
    m_nLength = 0;
    m_guidFormat = IID_NULL;
    m_clsidDecoder = IID_NULL;
}


CImageFileFormatVerifier::CImageFileFormatVerifierItem::~CImageFileFormatVerifierItem(void)
{
    Destroy();
}


PBYTE CImageFileFormatVerifier::CImageFileFormatVerifierItem::Signature(void) const
{
    return m_pSignature;
}


PBYTE CImageFileFormatVerifier::CImageFileFormatVerifierItem::Mask(void) const
{
    return m_pMask;
}


int CImageFileFormatVerifier::CImageFileFormatVerifierItem::Length(void) const
{
    return m_nLength;
}


GUID CImageFileFormatVerifier::CImageFileFormatVerifierItem::Format(void) const
{
    return m_guidFormat;
}


CLSID CImageFileFormatVerifier::CImageFileFormatVerifierItem::Decoder(void) const
{
    return m_clsidDecoder;
}


bool CImageFileFormatVerifier::CImageFileFormatVerifierItem::Match( PBYTE pBytes, int nLen ) const
{
    WIA_PUSH_FUNCTION((TEXT("CImageFileFormatVerifierItem::Match")));
    WIA_PRINTGUID((m_clsidDecoder,TEXT("Decoder")));
    if (nLen < Length())
    {
        return false;
    }
    for (int i=0;i<Length();i++)
    {
        if (false == ((pBytes[i] & m_pMask[i]) == m_pSignature[i]))
        {
            return false;
        }
    }
    return true;
}



CImageFileFormatVerifier::CImageFileFormatVerifier(void)
  : m_nMaxSignatureLength(0),
    m_pSignatureBuffer(NULL)
{
    //
    // Get the decoder count and size of the decoder info array
    //
    UINT nImageDecoderCount = 0, cbCodecs = 0;
    if (Gdiplus::Ok == Gdiplus::GetImageDecodersSize( &nImageDecoderCount, &cbCodecs ))
    {
        //
        // Make sure we got good sizes back
        //
        if (cbCodecs && nImageDecoderCount)
        {
            //
            // Allocate the array
            //
            Gdiplus::ImageCodecInfo *pImageDecoderInfo = static_cast<Gdiplus::ImageCodecInfo*>(LocalAlloc(LPTR,cbCodecs));
            if (pImageDecoderInfo)
            {
                //
                // Get the actual decoder info
                //
                if (Gdiplus::Ok == Gdiplus::GetImageDecoders( nImageDecoderCount, cbCodecs, pImageDecoderInfo ))
                {
                    //
                    // Add each decoder to the format list
                    //
                    for (UINT i=0;i<nImageDecoderCount;i++)
                    {
                        //
                        // Add each signature to the format list
                        //
                        for (UINT j=0;j<pImageDecoderInfo[i].SigCount;j++)
                        {
#if defined(DBG)
                            CSimpleString strPattern;
                            CSimpleString strMask;
                            for (ULONG x=0;x<pImageDecoderInfo[i].SigSize;x++)
                            {
                                strPattern += CSimpleString().Format( TEXT("%02X"), ((const PBYTE)(pImageDecoderInfo[i].SigPattern+(j*pImageDecoderInfo[i].SigSize)))[x] );
                                strMask += CSimpleString().Format( TEXT("%02X"), ((const PBYTE)(pImageDecoderInfo[i].SigMask+(j*pImageDecoderInfo[i].SigSize)))[x] );
                            }
                            WIA_PRINTGUID((pImageDecoderInfo[i].FormatID,TEXT("FormatID")));
                            WIA_PRINTGUID((pImageDecoderInfo[i].Clsid,TEXT("  Clsid")));
                            WIA_TRACE((TEXT("  strPattern: %s, strMask: %s, SigSize: %d"), strPattern.String(), strMask.String(), pImageDecoderInfo[i].SigSize ));
#endif
                            m_FileFormatVerifierList.Append( CImageFileFormatVerifier::CImageFileFormatVerifierItem( (const PBYTE)(pImageDecoderInfo[i].SigPattern+(j*pImageDecoderInfo[i].SigSize)), (const PBYTE)(pImageDecoderInfo[i].SigMask+(j*pImageDecoderInfo[i].SigSize)), pImageDecoderInfo[i].SigSize, pImageDecoderInfo[i].FormatID, pImageDecoderInfo[i].Clsid ) );
                        }
                    }
                }
                //
                // Free the array
                //
                LocalFree(pImageDecoderInfo);
            }
        }
    }

    //
    // Assume the max length is Zero
    //
    m_nMaxSignatureLength = 0;


    //
    // For each signature, check if it is greater in length than the maximum.
    //
    for (int i=0;i<m_FileFormatVerifierList.Size();i++)
    {
        //
        // If it is the longest, save the length
        //
        if (m_FileFormatVerifierList[i].Length() > m_nMaxSignatureLength)
        {
            m_nMaxSignatureLength = m_FileFormatVerifierList[i].Length();
        }
    }

    //
    // If we have a valid max length, allocate a buffer to hold the file's data
    //
    if (m_nMaxSignatureLength)
    {
        m_pSignatureBuffer = new BYTE[m_nMaxSignatureLength];
    }

    //
    // If anything failed, free everything
    //
    if (!IsValid())
    {
        Destroy();
    }
}


void CImageFileFormatVerifier::Destroy(void)
{
    //
    // Free the file signature buffer
    //
    if (m_pSignatureBuffer)
    {
        delete[] m_pSignatureBuffer;
        m_pSignatureBuffer = NULL;
    }
    m_nMaxSignatureLength = 0;
    m_FileFormatVerifierList.Destroy();
}


bool CImageFileFormatVerifier::IsValid(void) const
{
    return (m_pSignatureBuffer && m_nMaxSignatureLength && m_FileFormatVerifierList.Size());
}

CImageFileFormatVerifier::~CImageFileFormatVerifier(void)
{
    Destroy();
}


GUID CImageFileFormatVerifier::GetImageType( IStream * pStream )
{
    WIA_PUSH_FUNCTION((TEXT("CImageFileFormatVerifier::GetImageType( via IStream )")));
    //
    // Assume we will not find a match
    //
    GUID guidResult = IID_NULL;

    //
    // Make sure we have a valid IStream object...
    //
    if (pStream)
    {
        //
        // Read the maximum signature length number of bytes
        //
        ULONG uBytesRead = 0;
        HRESULT hr = pStream->Read( m_pSignatureBuffer, m_nMaxSignatureLength, &uBytesRead );

        //
        // Make sure we got some bytes
        //
        if (SUCCEEDED(hr) && uBytesRead)
        {
            //
            // Go though the list and try to find a match
            //
            for (int i=0;i<m_FileFormatVerifierList.Size();i++)
            {
                //
                // If we found a match, we are done
                //
                if (m_FileFormatVerifierList[i].Match(m_pSignatureBuffer,uBytesRead))
                {
                    guidResult = m_FileFormatVerifierList[i].Format();
                    break;
                }
            }
        }
        else
        {
            WIA_ERROR((TEXT("pStream->Read() failed w/hr = 0x%x"),hr));
        }
    }
    else
    {
        WIA_ERROR((TEXT("pStream was NULL")));
    }

    //
    // This will contain IID_NULL if no matching image type was found
    //
    return guidResult;

}

bool CImageFileFormatVerifier::IsImageFile( LPCTSTR pszFilename )
{
    WIA_PUSH_FUNCTION((TEXT("CImageFileFormatVerifier::IsImageFile(%s)"),pszFilename));

    GUID guidImageType = IID_NULL;

    //
    // Get a stream object over the file...
    //

    IStream * pStream = NULL;
    HRESULT hr = SHCreateStreamOnFile(pszFilename, STGM_READ | STGM_SHARE_DENY_WRITE, &pStream );

    if (SUCCEEDED(hr) && pStream)
    {
        guidImageType = GetImageType(pStream);
    }

    if (pStream)
    {
        pStream->Release();
    }

    WIA_PRINTGUID((guidImageType,TEXT("guidImageType")));

    //
    // If the image type is IID_NULL, it isn't an image
    //
    return ((IID_NULL != guidImageType) != FALSE);
}


bool CImageFileFormatVerifier::IsSupportedImageFromStream( IStream * pStream, GUID * pGuidOfFormat )
{
    WIA_PUSH_FUNCTION((TEXT("CImageFileFormatVerifier::IsSupportedImageFromStream()")));

    GUID guidImageType = IID_NULL;

    //
    // Get an IStream pointer for this file...
    //

    if (pStream)
    {
        guidImageType = GetImageType(pStream);
    }

    WIA_PRINTGUID((guidImageType,TEXT("guidImageType")));

    if (pGuidOfFormat)
    {
        *pGuidOfFormat = guidImageType;
    }

    //
    // If the image type is IID_NULL, it isn't an image
    //
    return ((IID_NULL != guidImageType) != FALSE);
}

CGdiPlusInit::CGdiPlusInit()
    : m_pGdiplusToken(NULL)
{
    //
    // Make sure GDI+ is initialized
    //
    GdiplusStartupInput StartupInput;
    GdiplusStartup(&m_pGdiplusToken,&StartupInput,NULL);
}

CGdiPlusInit::~CGdiPlusInit()
{
    GdiplusShutdown(m_pGdiplusToken);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\lib\psutil\precomp.h ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 1999
 *
 *  TITLE:       precomp.h
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      RickTu
 *
 *  DATE:        5/12/99
 *
 *  DESCRIPTION: Precompiled header file for common UI library
 *
 *****************************************************************************/

#ifndef __PRECOMP_H_INCLUDED
#define __PRECOMP_H_INCLUDED

#include <windows.h>
#include <commctrl.h>
#include <atlbase.h>
#include <propidl.h>

// some common headers
#include <shlobj.h>         // shell OM interfaces
#include <shlwapi.h>        // shell common API
#include <winspool.h>       // spooler
#include <assert.h>         // assert
#include <commctrl.h>       // common controls
#include <lm.h>             // Lan manager (netapi32.dll)
#include <wininet.h>        // inet core - necessary for INTERNET_MAX_HOST_NAME_LENGTH

// some private shell headers
#include <shlwapip.h>       // private shell common API
#include <shpriv.h>         // private shell interfaces
#include <iepriv.h>         // private ie interfaces
#include <comctrlp.h>       // private common controls

// GDI+
#include <gdiplus.h>        // GDI+ headers
#include <gdiplusinit.h>    // GDI+ init headers

// STL
#include <algorithm>        // STL algorithms

// Safe string functions
#define STRSAFE_NO_DEPRECATE
#include <strsafe.h>

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\printscan\lib\psutil\tmplutil.cpp ===
/*****************************************************************************
 *
 *  (C) COPYRIGHT MICROSOFT CORPORATION, 2000
 *
 *  TITLE:       tmplutil.cpp
 *
 *  VERSION:     1.0
 *
 *  AUTHOR:      LazarI
 *
 *  DATE:        10-Mar-2000
 *
 *  DESCRIPTION: Smart pointers, utility templates, etc...
 *
 *****************************************************************************/

#include "precomp.h"
#pragma hdrstop

/*****************************************************************************

    IMPORTANT!
    all those headers should be included in the pch file before including tmplutil.h
    (in the same order!) in order to be able to compile this file.

// some common headers
#include <shlobj.h>         // shell OM interfaces
#include <shlwapi.h>        // shell common API
#include <winspool.h>       // spooler
#include <assert.h>         // assert
#include <commctrl.h>       // common controls
#include <lm.h>             // Lan manager (netapi32.dll)
#include <wininet.h>        // inet core - necessary for INTERNET_MAX_HOST_NAME_LENGTH

// some private shell headers
#include <shlwapip.h>       // private shell common API
#include <shpriv.h>         // private shell interfaces
#include <comctrlp.h>       // private common controls

 *****************************************************************************/

#include "tmplutil.h"

#define gszBackwardSlash        TEXT('\\')
#define gszLeadingSlashes       TEXT("\\\\")

/*****************************************************************************

    COMObjects_GetCount

 *****************************************************************************/

static LONG g_lCOMObjectsCount = 0;

LONG COMObjects_GetCount()
{
    return g_lCOMObjectsCount;
}

HRESULT PinCurrentDLL()
{
    HRESULT hr = S_OK;
    HINSTANCE hModuleSelf = NULL;

    // Let's get the handle of the current module - 
    // the one this function belongs to.
    MEMORY_BASIC_INFORMATION mbi;
    if (VirtualQuery(reinterpret_cast<LPCVOID>(PinCurrentDLL), &mbi, sizeof(mbi)))
    {
        hModuleSelf = reinterpret_cast<HINSTANCE>(mbi.AllocationBase);
    }
    else
    {
        // VirtualQuery failed.
        hr = CreateHRFromWin32();
    }

    if (SUCCEEDED(hr))
    {
        // Get the module name and call LoadLibrary on it.
        TCHAR szModuleName[MAX_PATH];
        hr = SafeGetModuleFileName(hModuleSelf, szModuleName, ARRAYSIZE(szModuleName));
        if (SUCCEEDED(hr))
        {
            if (NULL == LoadLibrary(szModuleName))
            {
                // LoadLibrary failed.
                hr = CreateHRFromWin32();
            }
        }
    }
    
    return hr;
}

/*****************************************************************************

    PrinterSplitFullName

Routine Description:

    splits a fully qualified printer connection name into server and printer name parts.

Arguments:
    pszFullName - full qualifier printer name ('printer' or '\\server\printer')
    pszBuffer   - scratch buffer used to store output strings.
    nMaxLength  - the size of the scratch buffer in characters
    ppszServer  - receives pointer to the server string.  If it is a
                  local printer, empty string is returned.
    ppszPrinter - receives a pointer to the printer string.  OPTIONAL

Return Value:

    returns S_OK on sucess or COM error otherwise

 *****************************************************************************/

HRESULT PrinterSplitFullName(LPCTSTR pszFullName, TCHAR szBuffer[], int nMaxLength, LPCTSTR *ppszServer,LPCTSTR *ppszPrinter)
{
    HRESULT hr = S_OK;
    lstrcpyn(szBuffer, pszFullName, nMaxLength);

    LPTSTR pszPrinter = szBuffer;
    if (pszFullName[0] != TEXT('\\') || pszFullName[1] != TEXT('\\'))
    {
        pszPrinter = szBuffer;
        *ppszServer = TEXT("");
    }
    else
    {
        *ppszServer = szBuffer;
        pszPrinter = _tcschr(*ppszServer + 2, TEXT('\\'));

        if (NULL == pszPrinter)
        {
            //
            // We've encountered a printer called "\\server"
            // (only two backslashes in the string).  We'll treat
            // it as a local printer.  We should never hit this,
            // but the spooler doesn't enforce this.  We won't
            // format the string.  Server is local, so set to szNULL.
            //
            pszPrinter = szBuffer;
            *ppszServer = TEXT("");
        }
        else
        {
            //
            // We found the third backslash; null terminate our
            // copy and set bRemote TRUE to format the string.
            //
            *pszPrinter++ = 0;
        }
    }

    if (ppszPrinter)
    {
        *ppszPrinter = pszPrinter;
    }

    return hr;
}

////////////////////////////////////////////////
//
// class COleComInitializer
//
// smart OLE2, COM initializer - just declare
// an instance wherever need to use COM, OLE2
//
COleComInitializer::COleComInitializer(BOOL bOleInit)
    : m_hr(E_FAIL),
      m_bOleInit(bOleInit)
{
    if( m_bOleInit )
    {
        m_hr = OleInitialize(NULL);
    }
    else
    {
        m_hr = CoInitialize(NULL);
    }
}

COleComInitializer::~COleComInitializer()
{
    if( SUCCEEDED(m_hr) )
    {
        if( m_bOleInit )
        {
            OleUninitialize();
        }
        else
        {
            CoUninitialize();
        }
    }
}

COleComInitializer::operator BOOL () const
{
    if( FAILED(m_hr) )
    {
        return (RPC_E_CHANGED_MODE == m_hr);
    }
    else
    {
        return TRUE;
    }
}

////////////////////////////////////////////////
//
// class CDllLoader
//
// smart DLL loader - calls LoadLibrary
// FreeLibrary for you.
//
CDllLoader::CDllLoader(LPCTSTR pszDllName)
    : m_hLib(NULL)
{
    m_hLib = LoadLibrary(pszDllName);
}

CDllLoader::~CDllLoader()
{
    if( m_hLib )
    {
        FreeLibrary( m_hLib );
        m_hLib = NULL;
    }
}

CDllLoader::operator BOOL () const
{
    return (NULL != m_hLib);
}

FARPROC CDllLoader::GetProcAddress( LPCSTR lpProcName )
{
    if( m_hLib )
    {
        return ::GetProcAddress( m_hLib, lpProcName );
    }
    return NULL;
}

FARPROC CDllLoader::GetProcAddress( WORD wProcOrd )
{
    if( m_hLib )
    {
        return ::GetProcAddress( m_hLib, (LPCSTR)MAKEINTRESOURCE(wProcOrd) );
    }
    return NULL;
}

////////////////////////////////////////////////
// class CCookiesHolder
//
// this a utility class which allows us to pass more
// than one pointer through a single cookie.
//
CCookiesHolder::CCookiesHolder()
    : m_pCookies(NULL),
      m_uCount(0)
{
}

CCookiesHolder::CCookiesHolder(UINT uCount)
    : m_pCookies(NULL),
      m_uCount(0)
{
    SetCount(uCount);
}

CCookiesHolder::~CCookiesHolder()
{
    SetCount(0);
}

BOOL CCookiesHolder::SetCount(UINT uCount)
{
    BOOL bReturn = FALSE;

    if( uCount )
    {
        // reset first
        SetCount(0);

        // attempt to allocate memory for the cookies
        LPVOID *pCookies = new LPVOID[uCount];
        if( pCookies )
        {
            m_uCount = uCount;
            m_pCookies = pCookies;

            bReturn = TRUE;
        }
    }
    else
    {
        // zero means - reset
        if( m_pCookies )
        {
            delete[] m_pCookies;
            m_pCookies = NULL;
            m_uCount = 0;
        }

        bReturn = TRUE;
    }

    return bReturn;
}

////////////////////////////////////////////////
// class CPrintersAutoCompleteSource
//
// printer's autocomplete source impl.
//

QITABLE_DECLARE(CPrintersAutoCompleteSource)
class CPrintersAutoCompleteSource: public CUnknownMT<QITABLE_GET(CPrintersAutoCompleteSource)>, // MT impl. of IUnknown
                                   public IEnumString, // string enumerator
                                   public IACList // autocomplete list generator
{
public:
    CPrintersAutoCompleteSource();
    ~CPrintersAutoCompleteSource();

    //////////////////
    // IUnknown
    //
    IMPLEMENT_IUNKNOWN()

    //////////////////
    // IEnumString
    //
    STDMETHODIMP Next(ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);
    STDMETHODIMP Skip(ULONG celt);
    STDMETHODIMP Reset(void);
    STDMETHODIMP Clone(IEnumString **ppenum)    { return E_NOTIMPL; }

    //////////////////
    // IACList
    //
    STDMETHODIMP Expand(LPCOLESTR pszExpand);

private:
    CAutoPtrArray<BYTE> m_spBufferPrinters;
    CAutoPtrArray<BYTE> m_spBufferShares;
    PRINTER_INFO_5 *m_pPI5;
    SHARE_INFO_1 *m_pSI1;
    ULONG m_ulCount;
    ULONG m_ulPos;
    TCHAR m_szServer[PRINTER_MAX_PATH];
    CRefPtrCOM<IEnumString> m_spCustomMRUEnum;

    BOOL _IsServerName(LPCTSTR psz, BOOL *pbPartial);
    static BOOL _IsMasqPrinter(const PRINTER_INFO_5 &pi5);
    static HRESULT _CreateCustomMRU(REFIID riid, void **ppv);
    static HRESULT _AddCustomMRU(LPCTSTR psz);
};

// QueryInterface table
QITABLE_BEGIN(CPrintersAutoCompleteSource)
     QITABENT(CPrintersAutoCompleteSource, IEnumString),        // IID_IEnumString
     QITABENT(CPrintersAutoCompleteSource, IACList),            // IID_IACList
QITABLE_END()

#define SZ_REGKEY_PRNCONNECTMRU         L"Printers\\Settings\\Wizard\\ConnectMRU"

// comctrlp.h defines this as AddMRUStringW preventing us from using the IACLCustomMRU interface
#undef  AddMRUString

HRESULT CPrintersACS_CreateInstance(IUnknown **ppUnk)
{
    HRESULT hr = E_INVALIDARG;

    if( ppUnk )
    {
        hr = PinCurrentDLL();

        if( SUCCEEDED(hr) )
        {
            CPrintersAutoCompleteSource *pObj = new CPrintersAutoCompleteSource();
            hr = pObj ? S_OK : E_OUTOFMEMORY;

            if( SUCCEEDED(hr) )
            {
                hr = pObj->QueryInterface(IID_IUnknown, (void**)ppUnk);
                pObj->Release();
            }
        }
    }

    return hr;
}

CPrintersAutoCompleteSource::CPrintersAutoCompleteSource():
    m_pPI5(NULL),
    m_ulCount(0),
    m_ulPos(0)
{
    InterlockedIncrement(&g_lCOMObjectsCount);
}

CPrintersAutoCompleteSource::~CPrintersAutoCompleteSource()
{
    InterlockedDecrement(&g_lCOMObjectsCount);
}

//////////////////
// IUnknown
//
STDMETHODIMP CPrintersAutoCompleteSource::Next(ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
{
    HRESULT hr = S_FALSE;
    if( pceltFetched )
    {
        *pceltFetched = 0;
    }

    if( m_ulCount && (m_pPI5 || m_pSI1) )
    {
        ULONG cFetched = 0;

        if( m_pPI5 )
        {
            // printers enumerated
            for( ; m_ulPos <  m_ulCount && cFetched < celt; m_ulPos++ )
            {
                // if this is a valid (non-masq) printer just return it
                if( m_pPI5[m_ulPos].pPrinterName[0]  && SUCCEEDED(SHStrDup(m_pPI5[m_ulPos].pPrinterName, &rgelt[cFetched])) )
                {
                    cFetched++;
                }
            }
        }
        else
        {
            // shares enumerated
            TCHAR szBuffer[PRINTER_MAX_PATH];
            for( ; m_ulPos <  m_ulCount && cFetched < celt; m_ulPos++ )
            {
                // if this is a valid printer share name, just return it
                if( m_pSI1[m_ulPos].shi1_netname[0] &&
                    -1 != wnsprintf(szBuffer, ARRAYSIZE(szBuffer), TEXT("%s\\%s"),
                    m_szServer, m_pSI1[m_ulPos].shi1_netname) &&
                    SUCCEEDED(SHStrDup(szBuffer, &rgelt[cFetched])) )
                {
                    cFetched++;
                }
            }
        }

        if( pceltFetched )
        {
            *pceltFetched = cFetched;
        }

        hr = cFetched == celt ? S_OK : S_FALSE;
    }
    else
    {
        // use our custom MRU if any...
        if( m_spCustomMRUEnum )
        {
            hr = m_spCustomMRUEnum->Next(celt, rgelt, pceltFetched);
        }
    }

    return hr;
}

STDMETHODIMP CPrintersAutoCompleteSource::Skip(ULONG celt)
{
    HRESULT hr = S_FALSE;
    if( m_ulCount && (m_pPI5 || m_pSI1) )
    {
        hr = ((m_ulPos + celt) <= m_ulCount) ? S_OK : S_FALSE;
        m_ulPos = min(m_ulPos + celt, m_ulCount);
    }
    else
    {
        // use our custom MRU if any...
        if( m_spCustomMRUEnum )
        {
            hr = m_spCustomMRUEnum->Skip(celt);
        }
    }
    return hr;
}

STDMETHODIMP CPrintersAutoCompleteSource::Reset(void)
{
    HRESULT hr = S_OK;
    if( m_ulCount && (m_pPI5 || m_pSI1) )
    {
        m_ulPos = 0;
    }
    else
    {
        // use our custom MRU if any...
        if( m_spCustomMRUEnum )
        {
            hr = m_spCustomMRUEnum->Reset();
        }
    }
    return hr;
}

typedef bool PI5_less_type(const PRINTER_INFO_5 &i1, const PRINTER_INFO_5 &i2);
static  bool PI5_less(const PRINTER_INFO_5 &i1, const PRINTER_INFO_5 &i2)
{
    return (lstrcmp(i1.pPrinterName, i2.pPrinterName) < 0);
}

typedef bool SI1_less_type(const SHARE_INFO_1 &i1, const SHARE_INFO_1 &i2);
static  bool SI1_less(const SHARE_INFO_1 &i1, const SHARE_INFO_1 &i2)
{
    return (lstrcmp(i1.shi1_netname, i2.shi1_netname) < 0);
}

//////////////////
// IACList
//
STDMETHODIMP CPrintersAutoCompleteSource::Expand(LPCOLESTR pszExpand)
{
    HRESULT hr = E_FAIL;
    DWORD cReturned = 0;
    BOOL bPartial = FALSE;

    // assume this is not a server name, so reset the list first
    m_pPI5 = NULL;
    m_pSI1 = NULL;
    m_spBufferPrinters = NULL;
    m_spBufferShares = NULL;
    m_ulCount = m_ulPos = 0;
    m_szServer[0] = 0;
    m_spCustomMRUEnum = NULL;

    if( _IsServerName(pszExpand, &bPartial) )
    {
        // make a copy of the print buffer & cut off the last slash
        TCHAR szBuffer[PRINTER_MAX_PATH];
        lstrcpyn(szBuffer, pszExpand, ARRAYSIZE(szBuffer));
        szBuffer[lstrlen(szBuffer)-1] = 0;

        // enum the printers on that server
        if( SUCCEEDED(hr = ShellServices::EnumPrintersWrap(PRINTER_ENUM_NAME, 5, szBuffer, &m_spBufferPrinters, &cReturned)) && cReturned )
        {
            m_ulPos = 0;
            m_ulCount = cReturned;
            m_pPI5 = m_spBufferPrinters.GetPtrAs<PRINTER_INFO_5*>();
            lstrcpyn(m_szServer, szBuffer, ARRAYSIZE(m_szServer));

            // successful expand - remember the MRU string
            _AddCustomMRU(szBuffer);

            // traverse to check for masq printers
            for( ULONG ulPos = 0; ulPos < m_ulCount; ulPos++ )
            {
                if( _IsMasqPrinter(m_pPI5[ulPos]) )
                {
                    // we don't really care for masq printer's since they are
                    // an obsolete concept and can't be truly shared/connected to
                    m_pPI5[ulPos].pPrinterName = TEXT("");
                }
            }

            // invoke STL to sort
            std::sort<PRINTER_INFO_5*, PI5_less_type*>(m_pPI5, m_pPI5 + m_ulCount, PI5_less);
        }
        else
        {
            // enumeration of the printers failed, this could be because the remote spooler is down
            // or it is a downlevel print provider (win9x, novell, linux, sun...) in this case we
            // would like to try enumerating the shares as possible connection points.
            if( SUCCEEDED(hr = ShellServices::NetAPI_EnumShares(szBuffer, 1, &m_spBufferShares, &cReturned)) && cReturned )
            {
                m_ulPos = 0;
                m_ulCount = cReturned;
                m_pSI1 = m_spBufferShares.GetPtrAs<SHARE_INFO_1*>();
                lstrcpyn(m_szServer, szBuffer, ARRAYSIZE(m_szServer));

                // successful expand - remember the MRU string
                _AddCustomMRU(szBuffer);

                // traverse to remove the non-printer shares
                for( ULONG ulPos = 0; ulPos < m_ulCount; ulPos++ )
                {
                    if( STYPE_PRINTQ != m_pSI1[ulPos].shi1_type )
                    {
                        // this is a non-printer share, remove
                        m_pSI1[ulPos].shi1_netname[0] = 0;
                    }
                }

                // invoke STL to sort
                std::sort<SHARE_INFO_1*, SI1_less_type*>(m_pSI1, m_pSI1 + m_ulCount, SI1_less);

            }
       }
    }
    else
    {
        if( bPartial )
        {
            // use our custom MRU for autocomplete
            hr = _CreateCustomMRU(IID_IEnumString, m_spCustomMRUEnum.GetPPV());
        }
    }

    return hr;
}

BOOL CPrintersAutoCompleteSource::_IsServerName(LPCTSTR psz, BOOL *pbPartial)
{
    ASSERT(pbPartial);
    BOOL bRet = FALSE;
    int i, iSepCount = 0, iLen = lstrlen(psz);

    for( i=0; i<iLen; i++ )
    {
        if( psz[i] == gszBackwardSlash )
        {
            iSepCount++;
        }
    }

    if( (1 == iSepCount && psz[0] == gszBackwardSlash) ||
        (2 == iSepCount && psz[0] == gszBackwardSlash && psz[1] == gszBackwardSlash) )
    {
        *pbPartial = TRUE;
    }


    if( 3 < iLen &&
        3 == iSepCount &&
        psz[0] == gszBackwardSlash &&
        psz[1] == gszBackwardSlash &&
        psz[iLen-1] == gszBackwardSlash )
    {
        bRet = TRUE;
    }

    return bRet;
}

BOOL CPrintersAutoCompleteSource::_IsMasqPrinter(const PRINTER_INFO_5 &pi5)
{
    // this is a little bit hacky, but there is no other way to tell the masq printer
    // in the remote case. the spooler APIs suffer from some severe design flaws and
    // we have to put up with that.
    LPCTSTR pszServer;
    LPCTSTR pszPrinter;
    TCHAR szScratch[PRINTER_MAX_PATH];

    // split the full printer name into its components.
    if( SUCCEEDED(PrinterSplitFullName(pi5.pPrinterName,
        szScratch, ARRAYSIZE(szScratch), &pszServer, &pszPrinter)) )
    {
        return (0 == _tcsnicmp(pszPrinter, gszLeadingSlashes, _tcslen(gszLeadingSlashes)));
    }
    else
    {
        return FALSE;
    }
}

HRESULT CPrintersAutoCompleteSource::_CreateCustomMRU(REFIID riid, void **ppv)
{
    HRESULT hr = E_INVALIDARG;
    CRefPtrCOM<IACLCustomMRU> spCustomMRU;
    if( ppv &&
        SUCCEEDED(hr = CoCreateInstance(CLSID_ACLCustomMRU, NULL,
        CLSCTX_INPROC_SERVER, IID_IACLCustomMRU, spCustomMRU.GetPPV())) &&
        SUCCEEDED(hr = spCustomMRU->Initialize(SZ_REGKEY_PRNCONNECTMRU, 26)) )

    {
        // query the specified interface
        hr = spCustomMRU->QueryInterface(riid, ppv);
    }
    return hr;
}

HRESULT CPrintersAutoCompleteSource::_AddCustomMRU(LPCTSTR psz)
{
    HRESULT hr = E_INVALIDARG;
    CRefPtrCOM<IACLCustomMRU> spCustomMRU;
    if( psz &&
        SUCCEEDED(hr = _CreateCustomMRU(IID_IACLCustomMRU, spCustomMRU.GetPPV())) )
    {
        // just remember the MRU string
        hr = spCustomMRU->AddMRUString(psz);
    }
    return hr;
}

////////////////////////////////////////////////
// shell related services
namespace ShellServices
{

// creates a PIDL to a printer in the local printers folder by using ParseDisplayName
// see the description of CreatePrinterPIDL below.
HRESULT CreatePrinterPIDL_Parse(HWND hwnd, LPCTSTR pszPrinterName, IShellFolder **ppLocalPrnFolder, LPITEMIDLIST *ppidlPrinter)
{
    HRESULT                   hr = E_UNEXPECTED;
    CRefPtrCOM<IShellFolder>  spDesktopFolder;
    CRefPtrCOM<IShellFolder>  spPrnFolder;
    CAutoPtrPIDL              pidlPrinters;
    CAutoPtrPIDL              pidlPrinter;

    // attempt to get the fully qualified name (for parsing) of the printers folder
    if( SUCCEEDED(hr = SHGetDesktopFolder(&spDesktopFolder)) &&
        SUCCEEDED(hr = SHGetSpecialFolderLocation(NULL, CSIDL_PRINTERS, &pidlPrinters)) &&
        SUCCEEDED(hr = spDesktopFolder->BindToObject(pidlPrinters, 0, IID_IShellFolder, spPrnFolder.GetPPV())) )
    {
        ULONG uEaten = 0;
        ULONG uAttributes = SFGAO_DROPTARGET;

        // attempt parse the printer name into PIDL
        hr = spPrnFolder->ParseDisplayName(hwnd, 0, (LPOLESTR )pszPrinterName,
            &uEaten, &pidlPrinter, &uAttributes);

        if( SUCCEEDED(hr) )
        {
            if( ppLocalPrnFolder )
            {
                // return the local printers folder
                *ppLocalPrnFolder = spPrnFolder.Detach();
            }

            if( ppidlPrinter )
            {
                // return the printer PIDL
                *ppidlPrinter = pidlPrinter.Detach();
            }
        }
    }

    return hr;
}

// creates a PIDL to a printer in the local printers folder by enumerating the printers
// see the description of CreatePrinterPIDL below.
HRESULT CreatePrinterPIDL_Enum(HWND hwnd, LPCTSTR pszPrinterName, IShellFolder **ppLocalPrnFolder, LPITEMIDLIST *ppidlPrinter)
{
    HRESULT                      hr = E_UNEXPECTED;
    CRefPtrCOM<IShellFolder>     spDesktopFolder;
    CRefPtrCOM<IShellFolder>     spPrnFolder;
    CRefPtrCOM<IEnumIDList>      spPrnEnum;
    CAutoPtrPIDL                 pidlPrinters;
    STRRET                       str = {0};

    // attempt to get the fully qualified name (for parsing) of the printers folder
    if( SUCCEEDED(hr = SHGetDesktopFolder(&spDesktopFolder)) &&
        SUCCEEDED(hr = SHGetSpecialFolderLocation(NULL, CSIDL_PRINTERS, &pidlPrinters)) &&
        SUCCEEDED(hr = spDesktopFolder->BindToObject(pidlPrinters, 0, IID_IShellFolder, spPrnFolder.GetPPV())) &&
        SUCCEEDED(hr = spPrnFolder->EnumObjects(hwnd, SHCONTF_NONFOLDERS, &spPrnEnum)) )
    {
        TCHAR szBuffer[PRINTER_MAX_PATH];
        CAutoPtrPIDL pidlPrinter;
        ULONG uFetched = 0;

        for( ;; )
        {
            // get next printer
            hr = spPrnEnum->Next(1, &pidlPrinter, &uFetched);

            if( S_OK != hr )
            {
                // no more printers, or error
                break;
            }

            if( SUCCEEDED(hr = spPrnFolder->GetDisplayNameOf(pidlPrinter, SHGDN_FORPARSING, &str)) &&
                SUCCEEDED(hr = StrRetToBuf(&str, pidlPrinter, szBuffer, COUNTOF(szBuffer))) &&
                !lstrcmp(szBuffer, pszPrinterName) )
            {
                // found!
                if( ppLocalPrnFolder )
                {
                    // return the local printers folder
                    *ppLocalPrnFolder = spPrnFolder.Detach();
                }
                if( ppidlPrinter )
                {
                    // return the printer PIDL
                    *ppidlPrinter = pidlPrinter.Detach();
                }
                break;
            }

            // release the PIDL
            pidlPrinter = NULL;
        }

        if( hr == S_FALSE )
        {
            // printer name not found. setup the correct HRESULT.
            hr = HRESULT_FROM_WIN32(ERROR_INVALID_PRINTER_NAME);
        }
    }

    return hr;
}

// creates a PIDL to a printer in the local printers folder.
// args:
//  [in]    hwnd - window handle (in case we need to show UI - message box)
//  [in]    pszPrinterName - full printer name.
//  [out]   ppLocalPrnFolder - the printers folder (optional - may be NULL)
//  [out]   ppidlPrinter - the PIDL of the printer pointed by pszPrinterName (optional - may be NULL)
//
// remarks:
//  pszPrinterName should be fully qualified printer name, i.e. if printer connection it should be
//  like "\\server\printer", if local printer just the printer name.
//
// returns:
//  S_OK on success, or OLE2 error otherwise

HRESULT CreatePrinterPIDL(HWND hwnd, LPCTSTR pszPrinterName, IShellFolder **ppLocalPrnFolder, LPITEMIDLIST *ppidlPrinter)
{
    // attempt to obtain the printer PIDL by parsing first - it's much quicker.
    HRESULT hr = CreatePrinterPIDL_Parse(hwnd, pszPrinterName, ppLocalPrnFolder, ppidlPrinter);

    if( E_NOTIMPL == hr )
    {
        // if parsing is not implemented then go ahead and enum the printers - slower.
        hr = CreatePrinterPIDL_Enum(hwnd, pszPrinterName, ppLocalPrnFolder, ppidlPrinter);
    }

    return hr;
}

// loads a popup menu
HMENU LoadPopupMenu(HINSTANCE hInstance, UINT id, UINT uSubOffset)
{
    HMENU hMenuPopup = NULL;
    CAutoHandleMenu shMenuParent = LoadMenu(hInstance, MAKEINTRESOURCE(id));
    if( shMenuParent && (hMenuPopup = GetSubMenu(shMenuParent, uSubOffset)) )
    {
        // tear off our submenu before destroying the parent
        RemoveMenu(shMenuParent, uSubOffset, MF_BYPOSITION);
    }
    return hMenuPopup;
}

// initializes enum printer's autocomplete
HRESULT InitPrintersAutoComplete(HWND hwndEdit)
{
    HRESULT hr = E_INVALIDARG;

    if( hwndEdit )
    {
        // create an autocomplete object
        CRefPtrCOM<IAutoComplete>   spAC;   // auto complete interface
       